// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: order/v1/orderresponse.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-gs1/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponseD *OrderResponseD `protobuf:"bytes,1,opt,name=order_response_d,json=orderResponseD,proto3" json:"order_response_d,omitempty"`
	CrUpdUser      *v1.CrUpdUser   `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime      *v1.CrUpdTime   `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *OrderResponse) Reset() {
	*x = OrderResponse{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponse) ProtoMessage() {}

func (x *OrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponse.ProtoReflect.Descriptor instead.
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{0}
}

func (x *OrderResponse) GetOrderResponseD() *OrderResponseD {
	if x != nil {
		return x.OrderResponseD
	}
	return nil
}

func (x *OrderResponse) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *OrderResponse) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type OrderResponseD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                             []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                               string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	OrderResponseReasonCode           string  `protobuf:"bytes,4,opt,name=order_response_reason_code,json=orderResponseReasonCode,proto3" json:"order_response_reason_code,omitempty"`
	ResponseStatusCode                string  `protobuf:"bytes,5,opt,name=response_status_code,json=responseStatusCode,proto3" json:"response_status_code,omitempty"`
	TotalMonetaryAmountExcludingTaxes float64 `protobuf:"fixed64,6,opt,name=total_monetary_amount_excluding_taxes,json=totalMonetaryAmountExcludingTaxes,proto3" json:"total_monetary_amount_excluding_taxes,omitempty"`
	TmaetCodeListVersion              string  `protobuf:"bytes,7,opt,name=tmaet_code_list_version,json=tmaetCodeListVersion,proto3" json:"tmaet_code_list_version,omitempty"`
	TmaetCurrencyCode                 string  `protobuf:"bytes,8,opt,name=tmaet_currency_code,json=tmaetCurrencyCode,proto3" json:"tmaet_currency_code,omitempty"`
	TotalMonetaryAmountIncludingTaxes float64 `protobuf:"fixed64,9,opt,name=total_monetary_amount_including_taxes,json=totalMonetaryAmountIncludingTaxes,proto3" json:"total_monetary_amount_including_taxes,omitempty"`
	TmaitCodeListVersion              string  `protobuf:"bytes,10,opt,name=tmait_code_list_version,json=tmaitCodeListVersion,proto3" json:"tmait_code_list_version,omitempty"`
	TmaitCurrencyCode                 string  `protobuf:"bytes,11,opt,name=tmait_currency_code,json=tmaitCurrencyCode,proto3" json:"tmait_currency_code,omitempty"`
	TotalTaxAmount                    float64 `protobuf:"fixed64,12,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	TtaCodeListVersion                string  `protobuf:"bytes,13,opt,name=tta_code_list_version,json=ttaCodeListVersion,proto3" json:"tta_code_list_version,omitempty"`
	TtaCurrencyCode                   string  `protobuf:"bytes,14,opt,name=tta_currency_code,json=ttaCurrencyCode,proto3" json:"tta_currency_code,omitempty"`
	AmendedDateTimeValue              uint32  `protobuf:"varint,15,opt,name=amended_date_time_value,json=amendedDateTimeValue,proto3" json:"amended_date_time_value,omitempty"`
	BillTo                            uint32  `protobuf:"varint,16,opt,name=bill_to,json=billTo,proto3" json:"bill_to,omitempty"`
	Buyer                             uint32  `protobuf:"varint,17,opt,name=buyer,proto3" json:"buyer,omitempty"`
	OrderResponseIdentification       uint32  `protobuf:"varint,18,opt,name=order_response_identification,json=orderResponseIdentification,proto3" json:"order_response_identification,omitempty"`
	OriginalOrder                     uint32  `protobuf:"varint,19,opt,name=original_order,json=originalOrder,proto3" json:"original_order,omitempty"`
	SalesOrder                        uint32  `protobuf:"varint,20,opt,name=sales_order,json=salesOrder,proto3" json:"sales_order,omitempty"`
	Seller                            uint32  `protobuf:"varint,21,opt,name=seller,proto3" json:"seller,omitempty"`
	ShipTo                            uint32  `protobuf:"varint,22,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
}

func (x *OrderResponseD) Reset() {
	*x = OrderResponseD{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderResponseD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponseD) ProtoMessage() {}

func (x *OrderResponseD) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponseD.ProtoReflect.Descriptor instead.
func (*OrderResponseD) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{1}
}

func (x *OrderResponseD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderResponseD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *OrderResponseD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *OrderResponseD) GetOrderResponseReasonCode() string {
	if x != nil {
		return x.OrderResponseReasonCode
	}
	return ""
}

func (x *OrderResponseD) GetResponseStatusCode() string {
	if x != nil {
		return x.ResponseStatusCode
	}
	return ""
}

func (x *OrderResponseD) GetTotalMonetaryAmountExcludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountExcludingTaxes
	}
	return 0
}

func (x *OrderResponseD) GetTmaetCodeListVersion() string {
	if x != nil {
		return x.TmaetCodeListVersion
	}
	return ""
}

func (x *OrderResponseD) GetTmaetCurrencyCode() string {
	if x != nil {
		return x.TmaetCurrencyCode
	}
	return ""
}

func (x *OrderResponseD) GetTotalMonetaryAmountIncludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountIncludingTaxes
	}
	return 0
}

func (x *OrderResponseD) GetTmaitCodeListVersion() string {
	if x != nil {
		return x.TmaitCodeListVersion
	}
	return ""
}

func (x *OrderResponseD) GetTmaitCurrencyCode() string {
	if x != nil {
		return x.TmaitCurrencyCode
	}
	return ""
}

func (x *OrderResponseD) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *OrderResponseD) GetTtaCodeListVersion() string {
	if x != nil {
		return x.TtaCodeListVersion
	}
	return ""
}

func (x *OrderResponseD) GetTtaCurrencyCode() string {
	if x != nil {
		return x.TtaCurrencyCode
	}
	return ""
}

func (x *OrderResponseD) GetAmendedDateTimeValue() uint32 {
	if x != nil {
		return x.AmendedDateTimeValue
	}
	return 0
}

func (x *OrderResponseD) GetBillTo() uint32 {
	if x != nil {
		return x.BillTo
	}
	return 0
}

func (x *OrderResponseD) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *OrderResponseD) GetOrderResponseIdentification() uint32 {
	if x != nil {
		return x.OrderResponseIdentification
	}
	return 0
}

func (x *OrderResponseD) GetOriginalOrder() uint32 {
	if x != nil {
		return x.OriginalOrder
	}
	return 0
}

func (x *OrderResponseD) GetSalesOrder() uint32 {
	if x != nil {
		return x.SalesOrder
	}
	return 0
}

func (x *OrderResponseD) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *OrderResponseD) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

type CreateOrderResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponseReasonCode           string  `protobuf:"bytes,1,opt,name=order_response_reason_code,json=orderResponseReasonCode,proto3" json:"order_response_reason_code,omitempty"`
	ResponseStatusCode                string  `protobuf:"bytes,2,opt,name=response_status_code,json=responseStatusCode,proto3" json:"response_status_code,omitempty"`
	TotalMonetaryAmountExcludingTaxes float64 `protobuf:"fixed64,3,opt,name=total_monetary_amount_excluding_taxes,json=totalMonetaryAmountExcludingTaxes,proto3" json:"total_monetary_amount_excluding_taxes,omitempty"`
	TmaetCodeListVersion              string  `protobuf:"bytes,4,opt,name=tmaet_code_list_version,json=tmaetCodeListVersion,proto3" json:"tmaet_code_list_version,omitempty"`
	TmaetCurrencyCode                 string  `protobuf:"bytes,5,opt,name=tmaet_currency_code,json=tmaetCurrencyCode,proto3" json:"tmaet_currency_code,omitempty"`
	TotalMonetaryAmountIncludingTaxes float64 `protobuf:"fixed64,6,opt,name=total_monetary_amount_including_taxes,json=totalMonetaryAmountIncludingTaxes,proto3" json:"total_monetary_amount_including_taxes,omitempty"`
	TmaitCodeListVersion              string  `protobuf:"bytes,7,opt,name=tmait_code_list_version,json=tmaitCodeListVersion,proto3" json:"tmait_code_list_version,omitempty"`
	TmaitCurrencyCode                 string  `protobuf:"bytes,8,opt,name=tmait_currency_code,json=tmaitCurrencyCode,proto3" json:"tmait_currency_code,omitempty"`
	TotalTaxAmount                    float64 `protobuf:"fixed64,9,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	TtaCodeListVersion                string  `protobuf:"bytes,10,opt,name=tta_code_list_version,json=ttaCodeListVersion,proto3" json:"tta_code_list_version,omitempty"`
	TtaCurrencyCode                   string  `protobuf:"bytes,11,opt,name=tta_currency_code,json=ttaCurrencyCode,proto3" json:"tta_currency_code,omitempty"`
	AmendedDateTimeValue              uint32  `protobuf:"varint,12,opt,name=amended_date_time_value,json=amendedDateTimeValue,proto3" json:"amended_date_time_value,omitempty"`
	BillTo                            uint32  `protobuf:"varint,13,opt,name=bill_to,json=billTo,proto3" json:"bill_to,omitempty"`
	Buyer                             uint32  `protobuf:"varint,14,opt,name=buyer,proto3" json:"buyer,omitempty"`
	OrderResponseIdentification       uint32  `protobuf:"varint,15,opt,name=order_response_identification,json=orderResponseIdentification,proto3" json:"order_response_identification,omitempty"`
	OriginalOrder                     uint32  `protobuf:"varint,16,opt,name=original_order,json=originalOrder,proto3" json:"original_order,omitempty"`
	SalesOrder                        uint32  `protobuf:"varint,17,opt,name=sales_order,json=salesOrder,proto3" json:"sales_order,omitempty"`
	Seller                            uint32  `protobuf:"varint,18,opt,name=seller,proto3" json:"seller,omitempty"`
	ShipTo                            uint32  `protobuf:"varint,19,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	UserId                            string  `protobuf:"bytes,20,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                         string  `protobuf:"bytes,21,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                         string  `protobuf:"bytes,22,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateOrderResponseRequest) Reset() {
	*x = CreateOrderResponseRequest{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponseRequest) ProtoMessage() {}

func (x *CreateOrderResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponseRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderResponseRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{2}
}

func (x *CreateOrderResponseRequest) GetOrderResponseReasonCode() string {
	if x != nil {
		return x.OrderResponseReasonCode
	}
	return ""
}

func (x *CreateOrderResponseRequest) GetResponseStatusCode() string {
	if x != nil {
		return x.ResponseStatusCode
	}
	return ""
}

func (x *CreateOrderResponseRequest) GetTotalMonetaryAmountExcludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountExcludingTaxes
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetTmaetCodeListVersion() string {
	if x != nil {
		return x.TmaetCodeListVersion
	}
	return ""
}

func (x *CreateOrderResponseRequest) GetTmaetCurrencyCode() string {
	if x != nil {
		return x.TmaetCurrencyCode
	}
	return ""
}

func (x *CreateOrderResponseRequest) GetTotalMonetaryAmountIncludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountIncludingTaxes
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetTmaitCodeListVersion() string {
	if x != nil {
		return x.TmaitCodeListVersion
	}
	return ""
}

func (x *CreateOrderResponseRequest) GetTmaitCurrencyCode() string {
	if x != nil {
		return x.TmaitCurrencyCode
	}
	return ""
}

func (x *CreateOrderResponseRequest) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetTtaCodeListVersion() string {
	if x != nil {
		return x.TtaCodeListVersion
	}
	return ""
}

func (x *CreateOrderResponseRequest) GetTtaCurrencyCode() string {
	if x != nil {
		return x.TtaCurrencyCode
	}
	return ""
}

func (x *CreateOrderResponseRequest) GetAmendedDateTimeValue() uint32 {
	if x != nil {
		return x.AmendedDateTimeValue
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetBillTo() uint32 {
	if x != nil {
		return x.BillTo
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetOrderResponseIdentification() uint32 {
	if x != nil {
		return x.OrderResponseIdentification
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetOriginalOrder() uint32 {
	if x != nil {
		return x.OriginalOrder
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetSalesOrder() uint32 {
	if x != nil {
		return x.SalesOrder
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *CreateOrderResponseRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOrderResponseRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOrderResponseRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateOrderResponseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponse *OrderResponse `protobuf:"bytes,1,opt,name=order_response,json=orderResponse,proto3" json:"order_response,omitempty"`
}

func (x *CreateOrderResponseResponse) Reset() {
	*x = CreateOrderResponseResponse{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderResponseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponseResponse) ProtoMessage() {}

func (x *CreateOrderResponseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponseResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderResponseResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOrderResponseResponse) GetOrderResponse() *OrderResponse {
	if x != nil {
		return x.OrderResponse
	}
	return nil
}

type GetOrderResponsesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponses []*OrderResponse `protobuf:"bytes,1,rep,name=order_responses,json=orderResponses,proto3" json:"order_responses,omitempty"`
	NextCursor     string           `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetOrderResponsesResponse) Reset() {
	*x = GetOrderResponsesResponse{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderResponsesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponsesResponse) ProtoMessage() {}

func (x *GetOrderResponsesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponsesResponse.ProtoReflect.Descriptor instead.
func (*GetOrderResponsesResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{4}
}

func (x *GetOrderResponsesResponse) GetOrderResponses() []*OrderResponse {
	if x != nil {
		return x.OrderResponses
	}
	return nil
}

func (x *GetOrderResponsesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetOrderResponsesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetOrderResponsesRequest) Reset() {
	*x = GetOrderResponsesRequest{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderResponsesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponsesRequest) ProtoMessage() {}

func (x *GetOrderResponsesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponsesRequest.ProtoReflect.Descriptor instead.
func (*GetOrderResponsesRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{5}
}

func (x *GetOrderResponsesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetOrderResponsesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetOrderResponsesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetOrderResponsesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetOrderResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetOrderResponseRequest) Reset() {
	*x = GetOrderResponseRequest{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponseRequest) ProtoMessage() {}

func (x *GetOrderResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponseRequest.ProtoReflect.Descriptor instead.
func (*GetOrderResponseRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{6}
}

func (x *GetOrderResponseRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetOrderResponseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponse *OrderResponse `protobuf:"bytes,1,opt,name=order_response,json=orderResponse,proto3" json:"order_response,omitempty"`
}

func (x *GetOrderResponseResponse) Reset() {
	*x = GetOrderResponseResponse{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderResponseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponseResponse) ProtoMessage() {}

func (x *GetOrderResponseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponseResponse.ProtoReflect.Descriptor instead.
func (*GetOrderResponseResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{7}
}

func (x *GetOrderResponseResponse) GetOrderResponse() *OrderResponse {
	if x != nil {
		return x.OrderResponse
	}
	return nil
}

type GetOrderResponseByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetOrderResponseByPkRequest) Reset() {
	*x = GetOrderResponseByPkRequest{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderResponseByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponseByPkRequest) ProtoMessage() {}

func (x *GetOrderResponseByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponseByPkRequest.ProtoReflect.Descriptor instead.
func (*GetOrderResponseByPkRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{8}
}

func (x *GetOrderResponseByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetOrderResponseByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponse *OrderResponse `protobuf:"bytes,1,opt,name=order_response,json=orderResponse,proto3" json:"order_response,omitempty"`
}

func (x *GetOrderResponseByPkResponse) Reset() {
	*x = GetOrderResponseByPkResponse{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderResponseByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponseByPkResponse) ProtoMessage() {}

func (x *GetOrderResponseByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponseByPkResponse.ProtoReflect.Descriptor instead.
func (*GetOrderResponseByPkResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{9}
}

func (x *GetOrderResponseByPkResponse) GetOrderResponse() *OrderResponse {
	if x != nil {
		return x.OrderResponse
	}
	return nil
}

type UpdateOrderResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponseReasonCode           string  `protobuf:"bytes,1,opt,name=order_response_reason_code,json=orderResponseReasonCode,proto3" json:"order_response_reason_code,omitempty"`
	ResponseStatusCode                string  `protobuf:"bytes,2,opt,name=response_status_code,json=responseStatusCode,proto3" json:"response_status_code,omitempty"`
	TotalMonetaryAmountExcludingTaxes float64 `protobuf:"fixed64,3,opt,name=total_monetary_amount_excluding_taxes,json=totalMonetaryAmountExcludingTaxes,proto3" json:"total_monetary_amount_excluding_taxes,omitempty"`
	TmaetCodeListVersion              string  `protobuf:"bytes,4,opt,name=tmaet_code_list_version,json=tmaetCodeListVersion,proto3" json:"tmaet_code_list_version,omitempty"`
	TmaetCurrencyCode                 string  `protobuf:"bytes,5,opt,name=tmaet_currency_code,json=tmaetCurrencyCode,proto3" json:"tmaet_currency_code,omitempty"`
	TotalMonetaryAmountIncludingTaxes float64 `protobuf:"fixed64,6,opt,name=total_monetary_amount_including_taxes,json=totalMonetaryAmountIncludingTaxes,proto3" json:"total_monetary_amount_including_taxes,omitempty"`
	TmaitCodeListVersion              string  `protobuf:"bytes,7,opt,name=tmait_code_list_version,json=tmaitCodeListVersion,proto3" json:"tmait_code_list_version,omitempty"`
	TmaitCurrencyCode                 string  `protobuf:"bytes,8,opt,name=tmait_currency_code,json=tmaitCurrencyCode,proto3" json:"tmait_currency_code,omitempty"`
	TotalTaxAmount                    float64 `protobuf:"fixed64,9,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	TtaCodeListVersion                string  `protobuf:"bytes,10,opt,name=tta_code_list_version,json=ttaCodeListVersion,proto3" json:"tta_code_list_version,omitempty"`
	TtaCurrencyCode                   string  `protobuf:"bytes,11,opt,name=tta_currency_code,json=ttaCurrencyCode,proto3" json:"tta_currency_code,omitempty"`
	Id                                string  `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`
	UserId                            string  `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                         string  `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                         string  `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateOrderResponseRequest) Reset() {
	*x = UpdateOrderResponseRequest{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrderResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderResponseRequest) ProtoMessage() {}

func (x *UpdateOrderResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderResponseRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderResponseRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateOrderResponseRequest) GetOrderResponseReasonCode() string {
	if x != nil {
		return x.OrderResponseReasonCode
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetResponseStatusCode() string {
	if x != nil {
		return x.ResponseStatusCode
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetTotalMonetaryAmountExcludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountExcludingTaxes
	}
	return 0
}

func (x *UpdateOrderResponseRequest) GetTmaetCodeListVersion() string {
	if x != nil {
		return x.TmaetCodeListVersion
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetTmaetCurrencyCode() string {
	if x != nil {
		return x.TmaetCurrencyCode
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetTotalMonetaryAmountIncludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountIncludingTaxes
	}
	return 0
}

func (x *UpdateOrderResponseRequest) GetTmaitCodeListVersion() string {
	if x != nil {
		return x.TmaitCodeListVersion
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetTmaitCurrencyCode() string {
	if x != nil {
		return x.TmaitCurrencyCode
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *UpdateOrderResponseRequest) GetTtaCodeListVersion() string {
	if x != nil {
		return x.TtaCodeListVersion
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetTtaCurrencyCode() string {
	if x != nil {
		return x.TtaCurrencyCode
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateOrderResponseRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateOrderResponseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrderResponseResponse) Reset() {
	*x = UpdateOrderResponseResponse{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrderResponseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderResponseResponse) ProtoMessage() {}

func (x *UpdateOrderResponseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderResponseResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderResponseResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{11}
}

type OrderResponseLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponseLineItemD *OrderResponseLineItemD `protobuf:"bytes,1,opt,name=order_response_line_item_d,json=orderResponseLineItemD,proto3" json:"order_response_line_item_d,omitempty"`
	OrderResponseLineItemT *OrderResponseLineItemT `protobuf:"bytes,2,opt,name=order_response_line_item_t,json=orderResponseLineItemT,proto3" json:"order_response_line_item_t,omitempty"`
	CrUpdUser              *v1.CrUpdUser           `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime              *v1.CrUpdTime           `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *OrderResponseLineItem) Reset() {
	*x = OrderResponseLineItem{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderResponseLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponseLineItem) ProtoMessage() {}

func (x *OrderResponseLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponseLineItem.ProtoReflect.Descriptor instead.
func (*OrderResponseLineItem) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{12}
}

func (x *OrderResponseLineItem) GetOrderResponseLineItemD() *OrderResponseLineItemD {
	if x != nil {
		return x.OrderResponseLineItemD
	}
	return nil
}

func (x *OrderResponseLineItem) GetOrderResponseLineItemT() *OrderResponseLineItemT {
	if x != nil {
		return x.OrderResponseLineItemT
	}
	return nil
}

func (x *OrderResponseLineItem) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *OrderResponseLineItem) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type OrderResponseLineItemD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                        []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                          string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ConfirmedQuantity            float64 `protobuf:"fixed64,4,opt,name=confirmed_quantity,json=confirmedQuantity,proto3" json:"confirmed_quantity,omitempty"`
	CqMeasurementUnitCode        string  `protobuf:"bytes,5,opt,name=cq_measurement_unit_code,json=cqMeasurementUnitCode,proto3" json:"cq_measurement_unit_code,omitempty"`
	CqCodeListVersion            string  `protobuf:"bytes,6,opt,name=cq_code_list_version,json=cqCodeListVersion,proto3" json:"cq_code_list_version,omitempty"`
	LineItemActionCode           string  `protobuf:"bytes,7,opt,name=line_item_action_code,json=lineItemActionCode,proto3" json:"line_item_action_code,omitempty"`
	LineItemChangeIndicator      string  `protobuf:"bytes,8,opt,name=line_item_change_indicator,json=lineItemChangeIndicator,proto3" json:"line_item_change_indicator,omitempty"`
	LineItemNumber               uint32  `protobuf:"varint,9,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	MonetaryAmountExcludingTaxes float64 `protobuf:"fixed64,10,opt,name=monetary_amount_excluding_taxes,json=monetaryAmountExcludingTaxes,proto3" json:"monetary_amount_excluding_taxes,omitempty"`
	MaetCodeListVersion          string  `protobuf:"bytes,11,opt,name=maet_code_list_version,json=maetCodeListVersion,proto3" json:"maet_code_list_version,omitempty"`
	MaetCurrencyCode             string  `protobuf:"bytes,12,opt,name=maet_currency_code,json=maetCurrencyCode,proto3" json:"maet_currency_code,omitempty"`
	MonetaryAmountIncludingTaxes float64 `protobuf:"fixed64,13,opt,name=monetary_amount_including_taxes,json=monetaryAmountIncludingTaxes,proto3" json:"monetary_amount_including_taxes,omitempty"`
	MaitCodeListVersion          string  `protobuf:"bytes,14,opt,name=mait_code_list_version,json=maitCodeListVersion,proto3" json:"mait_code_list_version,omitempty"`
	MaitCurrencyCode             string  `protobuf:"bytes,15,opt,name=mait_currency_code,json=maitCurrencyCode,proto3" json:"mait_currency_code,omitempty"`
	NetAmount                    float64 `protobuf:"fixed64,16,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	NaCodeListVersion            string  `protobuf:"bytes,17,opt,name=na_code_list_version,json=naCodeListVersion,proto3" json:"na_code_list_version,omitempty"`
	NaCurrencyCode               string  `protobuf:"bytes,18,opt,name=na_currency_code,json=naCurrencyCode,proto3" json:"na_currency_code,omitempty"`
	NetPrice                     float64 `protobuf:"fixed64,19,opt,name=net_price,json=netPrice,proto3" json:"net_price,omitempty"`
	NpCodeListVersion            string  `protobuf:"bytes,20,opt,name=np_code_list_version,json=npCodeListVersion,proto3" json:"np_code_list_version,omitempty"`
	NpCurrencyCode               string  `protobuf:"bytes,21,opt,name=np_currency_code,json=npCurrencyCode,proto3" json:"np_currency_code,omitempty"`
	OrderResponseReasonCode      string  `protobuf:"bytes,22,opt,name=order_response_reason_code,json=orderResponseReasonCode,proto3" json:"order_response_reason_code,omitempty"`
	OriginalOrderLineItemNumber  uint32  `protobuf:"varint,23,opt,name=original_order_line_item_number,json=originalOrderLineItemNumber,proto3" json:"original_order_line_item_number,omitempty"`
	ParentLineItemNumber         uint32  `protobuf:"varint,24,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	OrderResponseId              uint32  `protobuf:"varint,25,opt,name=order_response_id,json=orderResponseId,proto3" json:"order_response_id,omitempty"`
}

func (x *OrderResponseLineItemD) Reset() {
	*x = OrderResponseLineItemD{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderResponseLineItemD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponseLineItemD) ProtoMessage() {}

func (x *OrderResponseLineItemD) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponseLineItemD.ProtoReflect.Descriptor instead.
func (*OrderResponseLineItemD) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{13}
}

func (x *OrderResponseLineItemD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderResponseLineItemD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *OrderResponseLineItemD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *OrderResponseLineItemD) GetConfirmedQuantity() float64 {
	if x != nil {
		return x.ConfirmedQuantity
	}
	return 0
}

func (x *OrderResponseLineItemD) GetCqMeasurementUnitCode() string {
	if x != nil {
		return x.CqMeasurementUnitCode
	}
	return ""
}

func (x *OrderResponseLineItemD) GetCqCodeListVersion() string {
	if x != nil {
		return x.CqCodeListVersion
	}
	return ""
}

func (x *OrderResponseLineItemD) GetLineItemActionCode() string {
	if x != nil {
		return x.LineItemActionCode
	}
	return ""
}

func (x *OrderResponseLineItemD) GetLineItemChangeIndicator() string {
	if x != nil {
		return x.LineItemChangeIndicator
	}
	return ""
}

func (x *OrderResponseLineItemD) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *OrderResponseLineItemD) GetMonetaryAmountExcludingTaxes() float64 {
	if x != nil {
		return x.MonetaryAmountExcludingTaxes
	}
	return 0
}

func (x *OrderResponseLineItemD) GetMaetCodeListVersion() string {
	if x != nil {
		return x.MaetCodeListVersion
	}
	return ""
}

func (x *OrderResponseLineItemD) GetMaetCurrencyCode() string {
	if x != nil {
		return x.MaetCurrencyCode
	}
	return ""
}

func (x *OrderResponseLineItemD) GetMonetaryAmountIncludingTaxes() float64 {
	if x != nil {
		return x.MonetaryAmountIncludingTaxes
	}
	return 0
}

func (x *OrderResponseLineItemD) GetMaitCodeListVersion() string {
	if x != nil {
		return x.MaitCodeListVersion
	}
	return ""
}

func (x *OrderResponseLineItemD) GetMaitCurrencyCode() string {
	if x != nil {
		return x.MaitCurrencyCode
	}
	return ""
}

func (x *OrderResponseLineItemD) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *OrderResponseLineItemD) GetNaCodeListVersion() string {
	if x != nil {
		return x.NaCodeListVersion
	}
	return ""
}

func (x *OrderResponseLineItemD) GetNaCurrencyCode() string {
	if x != nil {
		return x.NaCurrencyCode
	}
	return ""
}

func (x *OrderResponseLineItemD) GetNetPrice() float64 {
	if x != nil {
		return x.NetPrice
	}
	return 0
}

func (x *OrderResponseLineItemD) GetNpCodeListVersion() string {
	if x != nil {
		return x.NpCodeListVersion
	}
	return ""
}

func (x *OrderResponseLineItemD) GetNpCurrencyCode() string {
	if x != nil {
		return x.NpCurrencyCode
	}
	return ""
}

func (x *OrderResponseLineItemD) GetOrderResponseReasonCode() string {
	if x != nil {
		return x.OrderResponseReasonCode
	}
	return ""
}

func (x *OrderResponseLineItemD) GetOriginalOrderLineItemNumber() uint32 {
	if x != nil {
		return x.OriginalOrderLineItemNumber
	}
	return 0
}

func (x *OrderResponseLineItemD) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *OrderResponseLineItemD) GetOrderResponseId() uint32 {
	if x != nil {
		return x.OrderResponseId
	}
	return 0
}

type OrderResponseLineItemT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=delivery_date_time,json=deliveryDateTime,proto3" json:"delivery_date_time,omitempty"`
}

func (x *OrderResponseLineItemT) Reset() {
	*x = OrderResponseLineItemT{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderResponseLineItemT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponseLineItemT) ProtoMessage() {}

func (x *OrderResponseLineItemT) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponseLineItemT.ProtoReflect.Descriptor instead.
func (*OrderResponseLineItemT) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{14}
}

func (x *OrderResponseLineItemT) GetDeliveryDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveryDateTime
	}
	return nil
}

type CreateOrderResponseLineItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmedQuantity            float64 `protobuf:"fixed64,1,opt,name=confirmed_quantity,json=confirmedQuantity,proto3" json:"confirmed_quantity,omitempty"`
	CqMeasurementUnitCode        string  `protobuf:"bytes,2,opt,name=cq_measurement_unit_code,json=cqMeasurementUnitCode,proto3" json:"cq_measurement_unit_code,omitempty"`
	CqCodeListVersion            string  `protobuf:"bytes,3,opt,name=cq_code_list_version,json=cqCodeListVersion,proto3" json:"cq_code_list_version,omitempty"`
	DeliveryDateTime             string  `protobuf:"bytes,4,opt,name=delivery_date_time,json=deliveryDateTime,proto3" json:"delivery_date_time,omitempty"`
	LineItemActionCode           string  `protobuf:"bytes,5,opt,name=line_item_action_code,json=lineItemActionCode,proto3" json:"line_item_action_code,omitempty"`
	LineItemChangeIndicator      string  `protobuf:"bytes,6,opt,name=line_item_change_indicator,json=lineItemChangeIndicator,proto3" json:"line_item_change_indicator,omitempty"`
	LineItemNumber               uint32  `protobuf:"varint,7,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	MonetaryAmountExcludingTaxes float64 `protobuf:"fixed64,8,opt,name=monetary_amount_excluding_taxes,json=monetaryAmountExcludingTaxes,proto3" json:"monetary_amount_excluding_taxes,omitempty"`
	MaetCodeListVersion          string  `protobuf:"bytes,9,opt,name=maet_code_list_version,json=maetCodeListVersion,proto3" json:"maet_code_list_version,omitempty"`
	MaetCurrencyCode             string  `protobuf:"bytes,10,opt,name=maet_currency_code,json=maetCurrencyCode,proto3" json:"maet_currency_code,omitempty"`
	MonetaryAmountIncludingTaxes float64 `protobuf:"fixed64,11,opt,name=monetary_amount_including_taxes,json=monetaryAmountIncludingTaxes,proto3" json:"monetary_amount_including_taxes,omitempty"`
	MaitCodeListVersion          string  `protobuf:"bytes,12,opt,name=mait_code_list_version,json=maitCodeListVersion,proto3" json:"mait_code_list_version,omitempty"`
	MaitCurrencyCode             string  `protobuf:"bytes,13,opt,name=mait_currency_code,json=maitCurrencyCode,proto3" json:"mait_currency_code,omitempty"`
	NetAmount                    float64 `protobuf:"fixed64,14,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	NaCodeListVersion            string  `protobuf:"bytes,15,opt,name=na_code_list_version,json=naCodeListVersion,proto3" json:"na_code_list_version,omitempty"`
	NaCurrencyCode               string  `protobuf:"bytes,16,opt,name=na_currency_code,json=naCurrencyCode,proto3" json:"na_currency_code,omitempty"`
	NetPrice                     float64 `protobuf:"fixed64,17,opt,name=net_price,json=netPrice,proto3" json:"net_price,omitempty"`
	NpCodeListVersion            string  `protobuf:"bytes,18,opt,name=np_code_list_version,json=npCodeListVersion,proto3" json:"np_code_list_version,omitempty"`
	NpCurrencyCode               string  `protobuf:"bytes,19,opt,name=np_currency_code,json=npCurrencyCode,proto3" json:"np_currency_code,omitempty"`
	OrderResponseReasonCode      string  `protobuf:"bytes,20,opt,name=order_response_reason_code,json=orderResponseReasonCode,proto3" json:"order_response_reason_code,omitempty"`
	OriginalOrderLineItemNumber  uint32  `protobuf:"varint,21,opt,name=original_order_line_item_number,json=originalOrderLineItemNumber,proto3" json:"original_order_line_item_number,omitempty"`
	ParentLineItemNumber         uint32  `protobuf:"varint,22,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	OrderResponseId              uint32  `protobuf:"varint,23,opt,name=order_response_id,json=orderResponseId,proto3" json:"order_response_id,omitempty"`
	UserId                       string  `protobuf:"bytes,24,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string  `protobuf:"bytes,25,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string  `protobuf:"bytes,26,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateOrderResponseLineItemRequest) Reset() {
	*x = CreateOrderResponseLineItemRequest{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderResponseLineItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponseLineItemRequest) ProtoMessage() {}

func (x *CreateOrderResponseLineItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponseLineItemRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderResponseLineItemRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{15}
}

func (x *CreateOrderResponseLineItemRequest) GetConfirmedQuantity() float64 {
	if x != nil {
		return x.ConfirmedQuantity
	}
	return 0
}

func (x *CreateOrderResponseLineItemRequest) GetCqMeasurementUnitCode() string {
	if x != nil {
		return x.CqMeasurementUnitCode
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetCqCodeListVersion() string {
	if x != nil {
		return x.CqCodeListVersion
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetDeliveryDateTime() string {
	if x != nil {
		return x.DeliveryDateTime
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetLineItemActionCode() string {
	if x != nil {
		return x.LineItemActionCode
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetLineItemChangeIndicator() string {
	if x != nil {
		return x.LineItemChangeIndicator
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *CreateOrderResponseLineItemRequest) GetMonetaryAmountExcludingTaxes() float64 {
	if x != nil {
		return x.MonetaryAmountExcludingTaxes
	}
	return 0
}

func (x *CreateOrderResponseLineItemRequest) GetMaetCodeListVersion() string {
	if x != nil {
		return x.MaetCodeListVersion
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetMaetCurrencyCode() string {
	if x != nil {
		return x.MaetCurrencyCode
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetMonetaryAmountIncludingTaxes() float64 {
	if x != nil {
		return x.MonetaryAmountIncludingTaxes
	}
	return 0
}

func (x *CreateOrderResponseLineItemRequest) GetMaitCodeListVersion() string {
	if x != nil {
		return x.MaitCodeListVersion
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetMaitCurrencyCode() string {
	if x != nil {
		return x.MaitCurrencyCode
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *CreateOrderResponseLineItemRequest) GetNaCodeListVersion() string {
	if x != nil {
		return x.NaCodeListVersion
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetNaCurrencyCode() string {
	if x != nil {
		return x.NaCurrencyCode
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetNetPrice() float64 {
	if x != nil {
		return x.NetPrice
	}
	return 0
}

func (x *CreateOrderResponseLineItemRequest) GetNpCodeListVersion() string {
	if x != nil {
		return x.NpCodeListVersion
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetNpCurrencyCode() string {
	if x != nil {
		return x.NpCurrencyCode
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetOrderResponseReasonCode() string {
	if x != nil {
		return x.OrderResponseReasonCode
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetOriginalOrderLineItemNumber() uint32 {
	if x != nil {
		return x.OriginalOrderLineItemNumber
	}
	return 0
}

func (x *CreateOrderResponseLineItemRequest) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *CreateOrderResponseLineItemRequest) GetOrderResponseId() uint32 {
	if x != nil {
		return x.OrderResponseId
	}
	return 0
}

func (x *CreateOrderResponseLineItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOrderResponseLineItemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetOrderResponseLineItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetOrderResponseLineItemsRequest) Reset() {
	*x = GetOrderResponseLineItemsRequest{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderResponseLineItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponseLineItemsRequest) ProtoMessage() {}

func (x *GetOrderResponseLineItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponseLineItemsRequest.ProtoReflect.Descriptor instead.
func (*GetOrderResponseLineItemsRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{16}
}

func (x *GetOrderResponseLineItemsRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type CreateOrderResponseLineItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponseLineItem *OrderResponseLineItem `protobuf:"bytes,1,opt,name=order_response_line_item,json=orderResponseLineItem,proto3" json:"order_response_line_item,omitempty"`
}

func (x *CreateOrderResponseLineItemResponse) Reset() {
	*x = CreateOrderResponseLineItemResponse{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderResponseLineItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponseLineItemResponse) ProtoMessage() {}

func (x *CreateOrderResponseLineItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponseLineItemResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderResponseLineItemResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{17}
}

func (x *CreateOrderResponseLineItemResponse) GetOrderResponseLineItem() *OrderResponseLineItem {
	if x != nil {
		return x.OrderResponseLineItem
	}
	return nil
}

type GetOrderResponseLineItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponseLineItems []*OrderResponseLineItem `protobuf:"bytes,1,rep,name=order_response_line_items,json=orderResponseLineItems,proto3" json:"order_response_line_items,omitempty"`
}

func (x *GetOrderResponseLineItemsResponse) Reset() {
	*x = GetOrderResponseLineItemsResponse{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderResponseLineItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponseLineItemsResponse) ProtoMessage() {}

func (x *GetOrderResponseLineItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponseLineItemsResponse.ProtoReflect.Descriptor instead.
func (*GetOrderResponseLineItemsResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{18}
}

func (x *GetOrderResponseLineItemsResponse) GetOrderResponseLineItems() []*OrderResponseLineItem {
	if x != nil {
		return x.OrderResponseLineItems
	}
	return nil
}

type OrderResponseLineItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponseLineItems []*OrderResponseLineItem `protobuf:"bytes,1,rep,name=order_response_line_items,json=orderResponseLineItems,proto3" json:"order_response_line_items,omitempty"`
}

func (x *OrderResponseLineItems) Reset() {
	*x = OrderResponseLineItems{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderResponseLineItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponseLineItems) ProtoMessage() {}

func (x *OrderResponseLineItems) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponseLineItems.ProtoReflect.Descriptor instead.
func (*OrderResponseLineItems) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{19}
}

func (x *OrderResponseLineItems) GetOrderResponseLineItems() []*OrderResponseLineItem {
	if x != nil {
		return x.OrderResponseLineItems
	}
	return nil
}

type OrderResponseLineItemDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmedQuantity       float64 `protobuf:"fixed64,1,opt,name=confirmed_quantity,json=confirmedQuantity,proto3" json:"confirmed_quantity,omitempty"`
	CqMeasurementUnitCode   string  `protobuf:"bytes,2,opt,name=cq_measurement_unit_code,json=cqMeasurementUnitCode,proto3" json:"cq_measurement_unit_code,omitempty"`
	CqCodeListVersion       string  `protobuf:"bytes,3,opt,name=cq_code_list_version,json=cqCodeListVersion,proto3" json:"cq_code_list_version,omitempty"`
	ReturnReasonCode        string  `protobuf:"bytes,4,opt,name=return_reason_code,json=returnReasonCode,proto3" json:"return_reason_code,omitempty"`
	OrderResponseLineItemId uint32  `protobuf:"varint,5,opt,name=order_response_line_item_id,json=orderResponseLineItemId,proto3" json:"order_response_line_item_id,omitempty"`
}

func (x *OrderResponseLineItemDetail) Reset() {
	*x = OrderResponseLineItemDetail{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderResponseLineItemDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponseLineItemDetail) ProtoMessage() {}

func (x *OrderResponseLineItemDetail) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponseLineItemDetail.ProtoReflect.Descriptor instead.
func (*OrderResponseLineItemDetail) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{20}
}

func (x *OrderResponseLineItemDetail) GetConfirmedQuantity() float64 {
	if x != nil {
		return x.ConfirmedQuantity
	}
	return 0
}

func (x *OrderResponseLineItemDetail) GetCqMeasurementUnitCode() string {
	if x != nil {
		return x.CqMeasurementUnitCode
	}
	return ""
}

func (x *OrderResponseLineItemDetail) GetCqCodeListVersion() string {
	if x != nil {
		return x.CqCodeListVersion
	}
	return ""
}

func (x *OrderResponseLineItemDetail) GetReturnReasonCode() string {
	if x != nil {
		return x.ReturnReasonCode
	}
	return ""
}

func (x *OrderResponseLineItemDetail) GetOrderResponseLineItemId() uint32 {
	if x != nil {
		return x.OrderResponseLineItemId
	}
	return 0
}

type CreateOrderResponseLineItemDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmedQuantity       float64 `protobuf:"fixed64,1,opt,name=confirmed_quantity,json=confirmedQuantity,proto3" json:"confirmed_quantity,omitempty"`
	CqMeasurementUnitCode   string  `protobuf:"bytes,2,opt,name=cq_measurement_unit_code,json=cqMeasurementUnitCode,proto3" json:"cq_measurement_unit_code,omitempty"`
	CqCodeListVersion       string  `protobuf:"bytes,3,opt,name=cq_code_list_version,json=cqCodeListVersion,proto3" json:"cq_code_list_version,omitempty"`
	ReturnReasonCode        string  `protobuf:"bytes,4,opt,name=return_reason_code,json=returnReasonCode,proto3" json:"return_reason_code,omitempty"`
	OrderResponseLineItemId uint32  `protobuf:"varint,5,opt,name=order_response_line_item_id,json=orderResponseLineItemId,proto3" json:"order_response_line_item_id,omitempty"`
	UserId                  string  `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail               string  `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId               string  `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateOrderResponseLineItemDetailRequest) Reset() {
	*x = CreateOrderResponseLineItemDetailRequest{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderResponseLineItemDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponseLineItemDetailRequest) ProtoMessage() {}

func (x *CreateOrderResponseLineItemDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponseLineItemDetailRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderResponseLineItemDetailRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{21}
}

func (x *CreateOrderResponseLineItemDetailRequest) GetConfirmedQuantity() float64 {
	if x != nil {
		return x.ConfirmedQuantity
	}
	return 0
}

func (x *CreateOrderResponseLineItemDetailRequest) GetCqMeasurementUnitCode() string {
	if x != nil {
		return x.CqMeasurementUnitCode
	}
	return ""
}

func (x *CreateOrderResponseLineItemDetailRequest) GetCqCodeListVersion() string {
	if x != nil {
		return x.CqCodeListVersion
	}
	return ""
}

func (x *CreateOrderResponseLineItemDetailRequest) GetReturnReasonCode() string {
	if x != nil {
		return x.ReturnReasonCode
	}
	return ""
}

func (x *CreateOrderResponseLineItemDetailRequest) GetOrderResponseLineItemId() uint32 {
	if x != nil {
		return x.OrderResponseLineItemId
	}
	return 0
}

func (x *CreateOrderResponseLineItemDetailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOrderResponseLineItemDetailRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOrderResponseLineItemDetailRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateOrderResponseLineItemDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponseLineItemDetail *OrderResponseLineItemDetail `protobuf:"bytes,1,opt,name=order_response_line_item_detail,json=orderResponseLineItemDetail,proto3" json:"order_response_line_item_detail,omitempty"`
}

func (x *CreateOrderResponseLineItemDetailResponse) Reset() {
	*x = CreateOrderResponseLineItemDetailResponse{}
	mi := &file_order_v1_orderresponse_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderResponseLineItemDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponseLineItemDetailResponse) ProtoMessage() {}

func (x *CreateOrderResponseLineItemDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_orderresponse_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponseLineItemDetailResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderResponseLineItemDetailResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_orderresponse_proto_rawDescGZIP(), []int{22}
}

func (x *CreateOrderResponseLineItemDetailResponse) GetOrderResponseLineItemDetail() *OrderResponseLineItemDetail {
	if x != nil {
		return x.OrderResponseLineItemDetail
	}
	return nil
}

var File_order_v1_orderresponse_proto protoreflect.FileDescriptor

var file_order_v1_orderresponse_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xd6, 0x07, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04,
	0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12,
	0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50,
	0x0a, 0x25, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x17, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6d, 0x61, 0x65, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6d, 0x61,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6d, 0x61, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x6d, 0x61, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x74, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x74, 0x61, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12,
	0x42, 0x0a, 0x1d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x22, 0x80, 0x08, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61,
	0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74,
	0x6d, 0x61, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6d, 0x61, 0x69, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x74, 0x61, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x74, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x74, 0x61,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x74, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62,
	0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x5d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x8f,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x51, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x63, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xed, 0x05, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65,
	0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x17, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x74, 0x6d, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x74, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x74, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x74,
	0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x5c, 0x0a,
	0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x52, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x5c, 0x0a, 0x1a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x52, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb0, 0x09, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x71, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x71, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x1f,
	0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x78, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x65, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61,
	0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1c, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d,
	0x61, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6d, 0x61, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x6e, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x70, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6e, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x44, 0x0a, 0x1f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x12, 0x48, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x0a, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63,
	0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x71, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x6d,
	0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d,
	0x61, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45,
	0x0a, 0x1f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61,
	0x69, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x61, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x61, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x6e, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x70, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x18, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x15, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x22, 0x7f, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x16, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x74, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x5a, 0x0a, 0x19, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x1b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x71,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x71,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0x86, 0x03, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18,
	0x63, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x63, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x29, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x32, 0xff, 0x06, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79,
	0x50, 0x6b, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79,
	0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x74, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2a,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x2f, 0x73, 0x63, 0x2d, 0x67, 0x73, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_v1_orderresponse_proto_rawDescOnce sync.Once
	file_order_v1_orderresponse_proto_rawDescData = file_order_v1_orderresponse_proto_rawDesc
)

func file_order_v1_orderresponse_proto_rawDescGZIP() []byte {
	file_order_v1_orderresponse_proto_rawDescOnce.Do(func() {
		file_order_v1_orderresponse_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_v1_orderresponse_proto_rawDescData)
	})
	return file_order_v1_orderresponse_proto_rawDescData
}

var file_order_v1_orderresponse_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_order_v1_orderresponse_proto_goTypes = []any{
	(*OrderResponse)(nil),                             // 0: order.v1.OrderResponse
	(*OrderResponseD)(nil),                            // 1: order.v1.OrderResponseD
	(*CreateOrderResponseRequest)(nil),                // 2: order.v1.CreateOrderResponseRequest
	(*CreateOrderResponseResponse)(nil),               // 3: order.v1.CreateOrderResponseResponse
	(*GetOrderResponsesResponse)(nil),                 // 4: order.v1.GetOrderResponsesResponse
	(*GetOrderResponsesRequest)(nil),                  // 5: order.v1.GetOrderResponsesRequest
	(*GetOrderResponseRequest)(nil),                   // 6: order.v1.GetOrderResponseRequest
	(*GetOrderResponseResponse)(nil),                  // 7: order.v1.GetOrderResponseResponse
	(*GetOrderResponseByPkRequest)(nil),               // 8: order.v1.GetOrderResponseByPkRequest
	(*GetOrderResponseByPkResponse)(nil),              // 9: order.v1.GetOrderResponseByPkResponse
	(*UpdateOrderResponseRequest)(nil),                // 10: order.v1.UpdateOrderResponseRequest
	(*UpdateOrderResponseResponse)(nil),               // 11: order.v1.UpdateOrderResponseResponse
	(*OrderResponseLineItem)(nil),                     // 12: order.v1.OrderResponseLineItem
	(*OrderResponseLineItemD)(nil),                    // 13: order.v1.OrderResponseLineItemD
	(*OrderResponseLineItemT)(nil),                    // 14: order.v1.OrderResponseLineItemT
	(*CreateOrderResponseLineItemRequest)(nil),        // 15: order.v1.CreateOrderResponseLineItemRequest
	(*GetOrderResponseLineItemsRequest)(nil),          // 16: order.v1.GetOrderResponseLineItemsRequest
	(*CreateOrderResponseLineItemResponse)(nil),       // 17: order.v1.CreateOrderResponseLineItemResponse
	(*GetOrderResponseLineItemsResponse)(nil),         // 18: order.v1.GetOrderResponseLineItemsResponse
	(*OrderResponseLineItems)(nil),                    // 19: order.v1.OrderResponseLineItems
	(*OrderResponseLineItemDetail)(nil),               // 20: order.v1.OrderResponseLineItemDetail
	(*CreateOrderResponseLineItemDetailRequest)(nil),  // 21: order.v1.CreateOrderResponseLineItemDetailRequest
	(*CreateOrderResponseLineItemDetailResponse)(nil), // 22: order.v1.CreateOrderResponseLineItemDetailResponse
	(*v1.CrUpdUser)(nil),                              // 23: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                              // 24: common.v1.CrUpdTime
	(*v1.GetRequest)(nil),                             // 25: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                         // 26: common.v1.GetByIdRequest
	(*timestamppb.Timestamp)(nil),                     // 27: google.protobuf.Timestamp
}
var file_order_v1_orderresponse_proto_depIdxs = []int32{
	1,  // 0: order.v1.OrderResponse.order_response_d:type_name -> order.v1.OrderResponseD
	23, // 1: order.v1.OrderResponse.cr_upd_user:type_name -> common.v1.CrUpdUser
	24, // 2: order.v1.OrderResponse.cr_upd_time:type_name -> common.v1.CrUpdTime
	0,  // 3: order.v1.CreateOrderResponseResponse.order_response:type_name -> order.v1.OrderResponse
	0,  // 4: order.v1.GetOrderResponsesResponse.order_responses:type_name -> order.v1.OrderResponse
	25, // 5: order.v1.GetOrderResponseRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 6: order.v1.GetOrderResponseResponse.order_response:type_name -> order.v1.OrderResponse
	26, // 7: order.v1.GetOrderResponseByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 8: order.v1.GetOrderResponseByPkResponse.order_response:type_name -> order.v1.OrderResponse
	13, // 9: order.v1.OrderResponseLineItem.order_response_line_item_d:type_name -> order.v1.OrderResponseLineItemD
	14, // 10: order.v1.OrderResponseLineItem.order_response_line_item_t:type_name -> order.v1.OrderResponseLineItemT
	23, // 11: order.v1.OrderResponseLineItem.cr_upd_user:type_name -> common.v1.CrUpdUser
	24, // 12: order.v1.OrderResponseLineItem.cr_upd_time:type_name -> common.v1.CrUpdTime
	27, // 13: order.v1.OrderResponseLineItemT.delivery_date_time:type_name -> google.protobuf.Timestamp
	25, // 14: order.v1.GetOrderResponseLineItemsRequest.get_request:type_name -> common.v1.GetRequest
	12, // 15: order.v1.CreateOrderResponseLineItemResponse.order_response_line_item:type_name -> order.v1.OrderResponseLineItem
	12, // 16: order.v1.GetOrderResponseLineItemsResponse.order_response_line_items:type_name -> order.v1.OrderResponseLineItem
	12, // 17: order.v1.OrderResponseLineItems.order_response_line_items:type_name -> order.v1.OrderResponseLineItem
	20, // 18: order.v1.CreateOrderResponseLineItemDetailResponse.order_response_line_item_detail:type_name -> order.v1.OrderResponseLineItemDetail
	2,  // 19: order.v1.OrderResponseService.CreateOrderResponse:input_type -> order.v1.CreateOrderResponseRequest
	5,  // 20: order.v1.OrderResponseService.GetOrderResponses:input_type -> order.v1.GetOrderResponsesRequest
	6,  // 21: order.v1.OrderResponseService.GetOrderResponse:input_type -> order.v1.GetOrderResponseRequest
	8,  // 22: order.v1.OrderResponseService.GetOrderResponseByPk:input_type -> order.v1.GetOrderResponseByPkRequest
	10, // 23: order.v1.OrderResponseService.UpdateOrderResponse:input_type -> order.v1.UpdateOrderResponseRequest
	15, // 24: order.v1.OrderResponseService.CreateOrderResponseLineItem:input_type -> order.v1.CreateOrderResponseLineItemRequest
	16, // 25: order.v1.OrderResponseService.GetOrderResponseLineItems:input_type -> order.v1.GetOrderResponseLineItemsRequest
	21, // 26: order.v1.OrderResponseService.CreateOrderResponseLineItemDetail:input_type -> order.v1.CreateOrderResponseLineItemDetailRequest
	3,  // 27: order.v1.OrderResponseService.CreateOrderResponse:output_type -> order.v1.CreateOrderResponseResponse
	4,  // 28: order.v1.OrderResponseService.GetOrderResponses:output_type -> order.v1.GetOrderResponsesResponse
	7,  // 29: order.v1.OrderResponseService.GetOrderResponse:output_type -> order.v1.GetOrderResponseResponse
	9,  // 30: order.v1.OrderResponseService.GetOrderResponseByPk:output_type -> order.v1.GetOrderResponseByPkResponse
	11, // 31: order.v1.OrderResponseService.UpdateOrderResponse:output_type -> order.v1.UpdateOrderResponseResponse
	17, // 32: order.v1.OrderResponseService.CreateOrderResponseLineItem:output_type -> order.v1.CreateOrderResponseLineItemResponse
	18, // 33: order.v1.OrderResponseService.GetOrderResponseLineItems:output_type -> order.v1.GetOrderResponseLineItemsResponse
	22, // 34: order.v1.OrderResponseService.CreateOrderResponseLineItemDetail:output_type -> order.v1.CreateOrderResponseLineItemDetailResponse
	27, // [27:35] is the sub-list for method output_type
	19, // [19:27] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_order_v1_orderresponse_proto_init() }
func file_order_v1_orderresponse_proto_init() {
	if File_order_v1_orderresponse_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_v1_orderresponse_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_order_v1_orderresponse_proto_goTypes,
		DependencyIndexes: file_order_v1_orderresponse_proto_depIdxs,
		MessageInfos:      file_order_v1_orderresponse_proto_msgTypes,
	}.Build()
	File_order_v1_orderresponse_proto = out.File
	file_order_v1_orderresponse_proto_rawDesc = nil
	file_order_v1_orderresponse_proto_goTypes = nil
	file_order_v1_orderresponse_proto_depIdxs = nil
}
