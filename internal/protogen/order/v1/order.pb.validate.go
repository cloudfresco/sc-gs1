// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/order.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "OrderD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "OrderD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "OrderD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrderT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "OrderT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "OrderT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "OrderT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on OrderD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderD with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderDMultiError, or nil if none found.
func (m *OrderD) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for IsApplicationReceiptAcknowledgementRequired

	// no validation rules for IsOrderFreeOfExciseTaxDuty

	// no validation rules for OrderChangeReasonCode

	// no validation rules for OrderEntryType

	// no validation rules for OrderInstructionCode

	// no validation rules for OrderPriority

	// no validation rules for OrderTypeCode

	// no validation rules for TotalMonetaryAmountExcludingTaxes

	// no validation rules for TmaetCodeListVersion

	// no validation rules for TmaetCurrencyCode

	// no validation rules for TotalMonetaryAmountIncludingTaxes

	// no validation rules for TmaitCodeListVersion

	// no validation rules for TmaitCurrencyCode

	// no validation rules for TotalTaxAmount

	// no validation rules for TtaCodeListVersion

	// no validation rules for TtaCurrencyCode

	// no validation rules for BillTo

	// no validation rules for Buyer

	// no validation rules for Contract

	// no validation rules for CustomerDocumentReference

	// no validation rules for CustomsBroker

	// no validation rules for OrderIdentification

	// no validation rules for PickupFrom

	// no validation rules for PromotionalDeal

	// no validation rules for QuoteNumber

	// no validation rules for Seller

	// no validation rules for TradeAgreement

	if len(errors) > 0 {
		return OrderDMultiError(errors)
	}

	return nil
}

// OrderDMultiError is an error wrapping multiple validation errors returned by
// OrderD.ValidateAll() if the designated constraints aren't met.
type OrderDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderDMultiError) AllErrors() []error { return m }

// OrderDValidationError is the validation error returned by OrderD.Validate if
// the designated constraints aren't met.
type OrderDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderDValidationError) ErrorName() string { return "OrderDValidationError" }

// Error satisfies the builtin error interface
func (e OrderDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderDValidationError{}

// Validate checks the field values on OrderT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderT with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderTMultiError, or nil if none found.
func (m *OrderT) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeliveryDateAccordingToSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderTValidationError{
					field:  "DeliveryDateAccordingToSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderTValidationError{
					field:  "DeliveryDateAccordingToSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryDateAccordingToSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderTValidationError{
				field:  "DeliveryDateAccordingToSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLatestDeliveryDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderTValidationError{
					field:  "LatestDeliveryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderTValidationError{
					field:  "LatestDeliveryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestDeliveryDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderTValidationError{
				field:  "LatestDeliveryDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderTMultiError(errors)
	}

	return nil
}

// OrderTMultiError is an error wrapping multiple validation errors returned by
// OrderT.ValidateAll() if the designated constraints aren't met.
type OrderTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderTMultiError) AllErrors() []error { return m }

// OrderTValidationError is the validation error returned by OrderT.Validate if
// the designated constraints aren't met.
type OrderTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderTValidationError) ErrorName() string { return "OrderTValidationError" }

// Error satisfies the builtin error interface
func (e OrderTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderTValidationError{}

// Validate checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRequestMultiError, or nil if none found.
func (m *CreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsApplicationReceiptAcknowledgementRequired

	// no validation rules for IsOrderFreeOfExciseTaxDuty

	// no validation rules for OrderChangeReasonCode

	// no validation rules for OrderEntryType

	// no validation rules for OrderInstructionCode

	// no validation rules for OrderPriority

	// no validation rules for OrderTypeCode

	// no validation rules for TotalMonetaryAmountExcludingTaxes

	// no validation rules for TmaetCodeListVersion

	// no validation rules for TmaetCurrencyCode

	// no validation rules for TotalMonetaryAmountIncludingTaxes

	// no validation rules for TmaitCodeListVersion

	// no validation rules for TmaitCurrencyCode

	// no validation rules for TotalTaxAmount

	// no validation rules for TtaCodeListVersion

	// no validation rules for TtaCurrencyCode

	// no validation rules for BillTo

	// no validation rules for Buyer

	// no validation rules for Contract

	// no validation rules for CustomerDocumentReference

	// no validation rules for CustomsBroker

	// no validation rules for DeliveryDateAccordingToSchedule

	// no validation rules for LatestDeliveryDate

	// no validation rules for OrderIdentification

	// no validation rules for PickupFrom

	// no validation rules for PromotionalDeal

	// no validation rules for QuoteNumber

	// no validation rules for Seller

	// no validation rules for TradeAgreement

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	for idx, item := range m.GetOrderLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrderRequestValidationError{
						field:  fmt.Sprintf("OrderLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrderRequestValidationError{
						field:  fmt.Sprintf("OrderLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrderRequestValidationError{
					field:  fmt.Sprintf("OrderLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrderRequestMultiError(errors)
	}

	return nil
}

// CreateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRequestMultiError) AllErrors() []error { return m }

// CreateOrderRequestValidationError is the validation error returned by
// CreateOrderRequest.Validate if the designated constraints aren't met.
type CreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestValidationError) ErrorName() string {
	return "CreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestValidationError{}

// Validate checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderResponseMultiError, or nil if none found.
func (m *CreateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderResponseMultiError(errors)
	}

	return nil
}

// CreateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseMultiError) AllErrors() []error { return m }

// CreateOrderResponseValidationError is the validation error returned by
// CreateOrderResponse.Validate if the designated constraints aren't met.
type CreateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseValidationError) ErrorName() string {
	return "CreateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseValidationError{}

// Validate checks the field values on GetOrdersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrdersResponseMultiError, or nil if none found.
func (m *GetOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetOrdersResponseMultiError(errors)
	}

	return nil
}

// GetOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by GetOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersResponseMultiError) AllErrors() []error { return m }

// GetOrdersResponseValidationError is the validation error returned by
// GetOrdersResponse.Validate if the designated constraints aren't met.
type GetOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersResponseValidationError) ErrorName() string {
	return "GetOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersResponseValidationError{}

// Validate checks the field values on GetOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrdersRequestMultiError, or nil if none found.
func (m *GetOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetOrdersRequestMultiError(errors)
	}

	return nil
}

// GetOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersRequestMultiError) AllErrors() []error { return m }

// GetOrdersRequestValidationError is the validation error returned by
// GetOrdersRequest.Validate if the designated constraints aren't met.
type GetOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersRequestValidationError) ErrorName() string { return "GetOrdersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersRequestValidationError{}

// Validate checks the field values on GetOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderRequestMultiError, or nil if none found.
func (m *GetOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderRequestMultiError(errors)
	}

	return nil
}

// GetOrderRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderRequestMultiError) AllErrors() []error { return m }

// GetOrderRequestValidationError is the validation error returned by
// GetOrderRequest.Validate if the designated constraints aren't met.
type GetOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderRequestValidationError) ErrorName() string { return "GetOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderRequestValidationError{}

// Validate checks the field values on GetOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderResponseMultiError, or nil if none found.
func (m *GetOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderResponseMultiError(errors)
	}

	return nil
}

// GetOrderResponseMultiError is an error wrapping multiple validation errors
// returned by GetOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponseMultiError) AllErrors() []error { return m }

// GetOrderResponseValidationError is the validation error returned by
// GetOrderResponse.Validate if the designated constraints aren't met.
type GetOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponseValidationError) ErrorName() string { return "GetOrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponseValidationError{}

// Validate checks the field values on GetOrderByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderByPkRequestMultiError, or nil if none found.
func (m *GetOrderByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderByPkRequestMultiError(errors)
	}

	return nil
}

// GetOrderByPkRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderByPkRequestMultiError) AllErrors() []error { return m }

// GetOrderByPkRequestValidationError is the validation error returned by
// GetOrderByPkRequest.Validate if the designated constraints aren't met.
type GetOrderByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderByPkRequestValidationError) ErrorName() string {
	return "GetOrderByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderByPkRequestValidationError{}

// Validate checks the field values on GetOrderByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderByPkResponseMultiError, or nil if none found.
func (m *GetOrderByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderByPkResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderByPkResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderByPkResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderByPkResponseMultiError(errors)
	}

	return nil
}

// GetOrderByPkResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrderByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderByPkResponseMultiError) AllErrors() []error { return m }

// GetOrderByPkResponseValidationError is the validation error returned by
// GetOrderByPkResponse.Validate if the designated constraints aren't met.
type GetOrderByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderByPkResponseValidationError) ErrorName() string {
	return "GetOrderByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderByPkResponseValidationError{}

// Validate checks the field values on UpdateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderRequestMultiError, or nil if none found.
func (m *UpdateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderChangeReasonCode

	// no validation rules for OrderEntryType

	// no validation rules for OrderInstructionCode

	// no validation rules for OrderPriority

	// no validation rules for OrderTypeCode

	// no validation rules for TotalMonetaryAmountExcludingTaxes

	// no validation rules for TmaetCodeListVersion

	// no validation rules for TmaetCurrencyCode

	// no validation rules for TotalMonetaryAmountIncludingTaxes

	// no validation rules for TmaitCodeListVersion

	// no validation rules for TmaitCurrencyCode

	// no validation rules for TotalTaxAmount

	// no validation rules for TtaCodeListVersion

	// no validation rules for TtaCurrencyCode

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateOrderRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderRequestMultiError) AllErrors() []error { return m }

// UpdateOrderRequestValidationError is the validation error returned by
// UpdateOrderRequest.Validate if the designated constraints aren't met.
type UpdateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderRequestValidationError) ErrorName() string {
	return "UpdateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderRequestValidationError{}

// Validate checks the field values on UpdateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderResponseMultiError, or nil if none found.
func (m *UpdateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrderResponseMultiError(errors)
	}

	return nil
}

// UpdateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderResponseMultiError) AllErrors() []error { return m }

// UpdateOrderResponseValidationError is the validation error returned by
// UpdateOrderResponse.Validate if the designated constraints aren't met.
type UpdateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderResponseValidationError) ErrorName() string {
	return "UpdateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderResponseValidationError{}

// Validate checks the field values on CreateOrderLineItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderLineItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderLineItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderLineItemRequestMultiError, or nil if none found.
func (m *CreateOrderLineItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderLineItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Extension

	// no validation rules for FreeGoodsQuantity

	// no validation rules for FgqMeasurementUnitCode

	// no validation rules for FgqCodeListVersion

	// no validation rules for ItemPriceBaseQuantity

	// no validation rules for IpbqMeasurementUnitCode

	// no validation rules for IpbqCodeListVersion

	// no validation rules for ItemSourceCode

	// no validation rules for LineItemActionCode

	// no validation rules for LineItemNumber

	// no validation rules for ListPrice

	// no validation rules for LpCodeListVersion

	// no validation rules for LpCurrencyCode

	// no validation rules for MonetaryAmountExcludingTaxes

	// no validation rules for MaetCodeListVersion

	// no validation rules for MaetCurrencyCode

	// no validation rules for MonetaryAmountIncludingTaxes

	// no validation rules for MaitCodeListVersion

	// no validation rules for MaitCurrencyCode

	// no validation rules for NetAmount

	// no validation rules for NaCodeListVersion

	// no validation rules for NaCurrencyCode

	// no validation rules for NetPrice

	// no validation rules for NpCodeListVersion

	// no validation rules for NpCurrencyCode

	// no validation rules for OrderInstructionCode

	// no validation rules for OrderLineItemInstructionCode

	// no validation rules for OrderLineItemPriority

	// no validation rules for ParentLineItemNumber

	// no validation rules for RecommendedRetailPrice

	// no validation rules for RequestedQuantity

	// no validation rules for RqMeasurementUnitCode

	// no validation rules for RqCodeListVersion

	// no validation rules for ReturnReasonCode

	// no validation rules for Contract

	// no validation rules for CustomerDocumentReference

	// no validation rules for DeliveryDateAccordingToSchedule

	// no validation rules for DespatchAdvice

	// no validation rules for LatestDeliveryDate

	// no validation rules for MaterialSpecification

	// no validation rules for OrderLineItemContact

	// no validation rules for PreferredManufacturer

	// no validation rules for PromotionalDeal

	// no validation rules for PurchaseConditions

	// no validation rules for ReturnableAssetIdentification

	// no validation rules for OrderId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateOrderLineItemRequestMultiError(errors)
	}

	return nil
}

// CreateOrderLineItemRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrderLineItemRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrderLineItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderLineItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderLineItemRequestMultiError) AllErrors() []error { return m }

// CreateOrderLineItemRequestValidationError is the validation error returned
// by CreateOrderLineItemRequest.Validate if the designated constraints aren't met.
type CreateOrderLineItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderLineItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderLineItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderLineItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderLineItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderLineItemRequestValidationError) ErrorName() string {
	return "CreateOrderLineItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderLineItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderLineItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderLineItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderLineItemRequestValidationError{}

// Validate checks the field values on CreateOrderLineItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderLineItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderLineItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderLineItemResponseMultiError, or nil if none found.
func (m *CreateOrderLineItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderLineItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderLineItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderLineItemResponseValidationError{
					field:  "OrderLineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderLineItemResponseValidationError{
					field:  "OrderLineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderLineItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderLineItemResponseValidationError{
				field:  "OrderLineItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderLineItemResponseMultiError(errors)
	}

	return nil
}

// CreateOrderLineItemResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrderLineItemResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrderLineItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderLineItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderLineItemResponseMultiError) AllErrors() []error { return m }

// CreateOrderLineItemResponseValidationError is the validation error returned
// by CreateOrderLineItemResponse.Validate if the designated constraints
// aren't met.
type CreateOrderLineItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderLineItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderLineItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderLineItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderLineItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderLineItemResponseValidationError) ErrorName() string {
	return "CreateOrderLineItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderLineItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderLineItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderLineItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderLineItemResponseValidationError{}

// Validate checks the field values on OrderLineItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderLineItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderLineItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderLineItemMultiError, or
// nil if none found.
func (m *OrderLineItem) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderLineItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderLineItemD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLineItemValidationError{
					field:  "OrderLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLineItemValidationError{
					field:  "OrderLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderLineItemD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLineItemValidationError{
				field:  "OrderLineItemD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrderLineItemT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLineItemValidationError{
					field:  "OrderLineItemT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLineItemValidationError{
					field:  "OrderLineItemT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderLineItemT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLineItemValidationError{
				field:  "OrderLineItemT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLineItemValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLineItemValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderLineItemMultiError(errors)
	}

	return nil
}

// OrderLineItemMultiError is an error wrapping multiple validation errors
// returned by OrderLineItem.ValidateAll() if the designated constraints
// aren't met.
type OrderLineItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderLineItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderLineItemMultiError) AllErrors() []error { return m }

// OrderLineItemValidationError is the validation error returned by
// OrderLineItem.Validate if the designated constraints aren't met.
type OrderLineItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderLineItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderLineItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderLineItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderLineItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderLineItemValidationError) ErrorName() string { return "OrderLineItemValidationError" }

// Error satisfies the builtin error interface
func (e OrderLineItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderLineItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderLineItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderLineItemValidationError{}

// Validate checks the field values on OrderLineItemD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderLineItemD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderLineItemD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderLineItemDMultiError,
// or nil if none found.
func (m *OrderLineItemD) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderLineItemD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for Extension

	// no validation rules for FreeGoodsQuantity

	// no validation rules for FgqMeasurementUnitCode

	// no validation rules for FgqCodeListVersion

	// no validation rules for ItemPriceBaseQuantity

	// no validation rules for IpbqMeasurementUnitCode

	// no validation rules for IpbqCodeListVersion

	// no validation rules for ItemSourceCode

	// no validation rules for LineItemActionCode

	// no validation rules for LineItemNumber

	// no validation rules for ListPrice

	// no validation rules for LpCodeListVersion

	// no validation rules for LpCurrencyCode

	// no validation rules for MonetaryAmountExcludingTaxes

	// no validation rules for MaetCodeListVersion

	// no validation rules for MaetCurrencyCode

	// no validation rules for MonetaryAmountIncludingTaxes

	// no validation rules for MaitCodeListVersion

	// no validation rules for MaitCurrencyCode

	// no validation rules for NetAmount

	// no validation rules for NaCodeListVersion

	// no validation rules for NaCurrencyCode

	// no validation rules for NetPrice

	// no validation rules for NpCodeListVersion

	// no validation rules for NpCurrencyCode

	// no validation rules for OrderInstructionCode

	// no validation rules for OrderLineItemInstructionCode

	// no validation rules for OrderLineItemPriority

	// no validation rules for ParentLineItemNumber

	// no validation rules for RecommendedRetailPrice

	// no validation rules for RequestedQuantity

	// no validation rules for RqMeasurementUnitCode

	// no validation rules for RqCodeListVersion

	// no validation rules for ReturnReasonCode

	// no validation rules for Contract

	// no validation rules for CustomerDocumentReference

	// no validation rules for DeliveryDateAccordingToSchedule

	// no validation rules for DespatchAdvice

	// no validation rules for MaterialSpecification

	// no validation rules for OrderLineItemContact

	// no validation rules for PreferredManufacturer

	// no validation rules for PromotionalDeal

	// no validation rules for PurchaseConditions

	// no validation rules for ReturnableAssetIdentification

	// no validation rules for OrderId

	if len(errors) > 0 {
		return OrderLineItemDMultiError(errors)
	}

	return nil
}

// OrderLineItemDMultiError is an error wrapping multiple validation errors
// returned by OrderLineItemD.ValidateAll() if the designated constraints
// aren't met.
type OrderLineItemDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderLineItemDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderLineItemDMultiError) AllErrors() []error { return m }

// OrderLineItemDValidationError is the validation error returned by
// OrderLineItemD.Validate if the designated constraints aren't met.
type OrderLineItemDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderLineItemDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderLineItemDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderLineItemDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderLineItemDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderLineItemDValidationError) ErrorName() string { return "OrderLineItemDValidationError" }

// Error satisfies the builtin error interface
func (e OrderLineItemDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderLineItemD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderLineItemDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderLineItemDValidationError{}

// Validate checks the field values on OrderLineItemT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderLineItemT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderLineItemT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderLineItemTMultiError,
// or nil if none found.
func (m *OrderLineItemT) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderLineItemT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLatestDeliveryDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLineItemTValidationError{
					field:  "LatestDeliveryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLineItemTValidationError{
					field:  "LatestDeliveryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestDeliveryDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLineItemTValidationError{
				field:  "LatestDeliveryDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderLineItemTMultiError(errors)
	}

	return nil
}

// OrderLineItemTMultiError is an error wrapping multiple validation errors
// returned by OrderLineItemT.ValidateAll() if the designated constraints
// aren't met.
type OrderLineItemTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderLineItemTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderLineItemTMultiError) AllErrors() []error { return m }

// OrderLineItemTValidationError is the validation error returned by
// OrderLineItemT.Validate if the designated constraints aren't met.
type OrderLineItemTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderLineItemTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderLineItemTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderLineItemTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderLineItemTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderLineItemTValidationError) ErrorName() string { return "OrderLineItemTValidationError" }

// Error satisfies the builtin error interface
func (e OrderLineItemTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderLineItemT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderLineItemTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderLineItemTValidationError{}

// Validate checks the field values on GetOrderLineItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderLineItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderLineItemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderLineItemsRequestMultiError, or nil if none found.
func (m *GetOrderLineItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderLineItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderLineItemsRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderLineItemsRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderLineItemsRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderLineItemsRequestMultiError(errors)
	}

	return nil
}

// GetOrderLineItemsRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderLineItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderLineItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderLineItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderLineItemsRequestMultiError) AllErrors() []error { return m }

// GetOrderLineItemsRequestValidationError is the validation error returned by
// GetOrderLineItemsRequest.Validate if the designated constraints aren't met.
type GetOrderLineItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderLineItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderLineItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderLineItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderLineItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderLineItemsRequestValidationError) ErrorName() string {
	return "GetOrderLineItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderLineItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderLineItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderLineItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderLineItemsRequestValidationError{}

// Validate checks the field values on GetOrderLineItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderLineItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderLineItemsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderLineItemsResponseMultiError, or nil if none found.
func (m *GetOrderLineItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderLineItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrderLineItemsResponseValidationError{
						field:  fmt.Sprintf("OrderLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrderLineItemsResponseValidationError{
						field:  fmt.Sprintf("OrderLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrderLineItemsResponseValidationError{
					field:  fmt.Sprintf("OrderLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrderLineItemsResponseMultiError(errors)
	}

	return nil
}

// GetOrderLineItemsResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderLineItemsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetOrderLineItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderLineItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderLineItemsResponseMultiError) AllErrors() []error { return m }

// GetOrderLineItemsResponseValidationError is the validation error returned by
// GetOrderLineItemsResponse.Validate if the designated constraints aren't met.
type GetOrderLineItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderLineItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderLineItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderLineItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderLineItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderLineItemsResponseValidationError) ErrorName() string {
	return "GetOrderLineItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderLineItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderLineItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderLineItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderLineItemsResponseValidationError{}

// Validate checks the field values on OrderLineItems with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderLineItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderLineItems with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderLineItemsMultiError,
// or nil if none found.
func (m *OrderLineItems) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderLineItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderLineItemsValidationError{
						field:  fmt.Sprintf("OrderLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderLineItemsValidationError{
						field:  fmt.Sprintf("OrderLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderLineItemsValidationError{
					field:  fmt.Sprintf("OrderLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderLineItemsMultiError(errors)
	}

	return nil
}

// OrderLineItemsMultiError is an error wrapping multiple validation errors
// returned by OrderLineItems.ValidateAll() if the designated constraints
// aren't met.
type OrderLineItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderLineItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderLineItemsMultiError) AllErrors() []error { return m }

// OrderLineItemsValidationError is the validation error returned by
// OrderLineItems.Validate if the designated constraints aren't met.
type OrderLineItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderLineItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderLineItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderLineItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderLineItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderLineItemsValidationError) ErrorName() string { return "OrderLineItemsValidationError" }

// Error satisfies the builtin error interface
func (e OrderLineItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderLineItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderLineItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderLineItemsValidationError{}

// Validate checks the field values on CreateOrderLineItemDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrderLineItemDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderLineItemDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrderLineItemDetailRequestMultiError, or nil if none found.
func (m *CreateOrderLineItemDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderLineItemDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestedQuantity

	// no validation rules for RqMeasurementUnitCode

	// no validation rules for RqCodeListVersion

	// no validation rules for OrderLineItemId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateOrderLineItemDetailRequestMultiError(errors)
	}

	return nil
}

// CreateOrderLineItemDetailRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrderLineItemDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderLineItemDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderLineItemDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderLineItemDetailRequestMultiError) AllErrors() []error { return m }

// CreateOrderLineItemDetailRequestValidationError is the validation error
// returned by CreateOrderLineItemDetailRequest.Validate if the designated
// constraints aren't met.
type CreateOrderLineItemDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderLineItemDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderLineItemDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderLineItemDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderLineItemDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderLineItemDetailRequestValidationError) ErrorName() string {
	return "CreateOrderLineItemDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderLineItemDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderLineItemDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderLineItemDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderLineItemDetailRequestValidationError{}

// Validate checks the field values on CreateOrderLineItemDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrderLineItemDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderLineItemDetailResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrderLineItemDetailResponseMultiError, or nil if none found.
func (m *CreateOrderLineItemDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderLineItemDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderLineItemDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderLineItemDetailResponseValidationError{
					field:  "OrderLineItemDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderLineItemDetailResponseValidationError{
					field:  "OrderLineItemDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderLineItemDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderLineItemDetailResponseValidationError{
				field:  "OrderLineItemDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderLineItemDetailResponseMultiError(errors)
	}

	return nil
}

// CreateOrderLineItemDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrderLineItemDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderLineItemDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderLineItemDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderLineItemDetailResponseMultiError) AllErrors() []error { return m }

// CreateOrderLineItemDetailResponseValidationError is the validation error
// returned by CreateOrderLineItemDetailResponse.Validate if the designated
// constraints aren't met.
type CreateOrderLineItemDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderLineItemDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderLineItemDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderLineItemDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderLineItemDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderLineItemDetailResponseValidationError) ErrorName() string {
	return "CreateOrderLineItemDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderLineItemDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderLineItemDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderLineItemDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderLineItemDetailResponseValidationError{}

// Validate checks the field values on OrderLineItemDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderLineItemDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderLineItemDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderLineItemDetailMultiError, or nil if none found.
func (m *OrderLineItemDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderLineItemDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestedQuantity

	// no validation rules for RqMeasurementUnitCode

	// no validation rules for RqCodeListVersion

	// no validation rules for OrderLineItemId

	if len(errors) > 0 {
		return OrderLineItemDetailMultiError(errors)
	}

	return nil
}

// OrderLineItemDetailMultiError is an error wrapping multiple validation
// errors returned by OrderLineItemDetail.ValidateAll() if the designated
// constraints aren't met.
type OrderLineItemDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderLineItemDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderLineItemDetailMultiError) AllErrors() []error { return m }

// OrderLineItemDetailValidationError is the validation error returned by
// OrderLineItemDetail.Validate if the designated constraints aren't met.
type OrderLineItemDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderLineItemDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderLineItemDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderLineItemDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderLineItemDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderLineItemDetailValidationError) ErrorName() string {
	return "OrderLineItemDetailValidationError"
}

// Error satisfies the builtin error interface
func (e OrderLineItemDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderLineItemDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderLineItemDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderLineItemDetailValidationError{}

// Validate checks the field values on
// CreateOrderLogisticalDateInformationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOrderLogisticalDateInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrderLogisticalDateInformationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateOrderLogisticalDateInformationRequestMultiError, or nil if none found.
func (m *CreateOrderLogisticalDateInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderLogisticalDateInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestedDeliveryDateRangeBegin

	// no validation rules for RequestedDeliveryDateRangeEnd

	// no validation rules for RequestedDeliveryDateRangeAtUltimateConsigneeBegin

	// no validation rules for RequestedDeliveryDateRangeAtUltimateConsigneeEnd

	// no validation rules for RequestedDeliveryDateTime

	// no validation rules for RequestedDeliveryDateTimeAtUltimateConsignee

	// no validation rules for RequestedPickUpDateTime

	// no validation rules for RequestedShipDateRangeBegin

	// no validation rules for RequestedShipDateRangeEnd

	// no validation rules for RequestedShipDateTime

	// no validation rules for OrderResponseId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateOrderLogisticalDateInformationRequestMultiError(errors)
	}

	return nil
}

// CreateOrderLogisticalDateInformationRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrderLogisticalDateInformationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderLogisticalDateInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderLogisticalDateInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderLogisticalDateInformationRequestMultiError) AllErrors() []error { return m }

// CreateOrderLogisticalDateInformationRequestValidationError is the validation
// error returned by CreateOrderLogisticalDateInformationRequest.Validate if
// the designated constraints aren't met.
type CreateOrderLogisticalDateInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderLogisticalDateInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderLogisticalDateInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderLogisticalDateInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderLogisticalDateInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderLogisticalDateInformationRequestValidationError) ErrorName() string {
	return "CreateOrderLogisticalDateInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderLogisticalDateInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderLogisticalDateInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderLogisticalDateInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderLogisticalDateInformationRequestValidationError{}

// Validate checks the field values on
// CreateOrderLogisticalDateInformationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOrderLogisticalDateInformationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrderLogisticalDateInformationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateOrderLogisticalDateInformationResponseMultiError, or nil if none found.
func (m *CreateOrderLogisticalDateInformationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderLogisticalDateInformationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderLogisticalDateInformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderLogisticalDateInformationResponseValidationError{
					field:  "OrderLogisticalDateInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderLogisticalDateInformationResponseValidationError{
					field:  "OrderLogisticalDateInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderLogisticalDateInformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderLogisticalDateInformationResponseValidationError{
				field:  "OrderLogisticalDateInformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderLogisticalDateInformationResponseMultiError(errors)
	}

	return nil
}

// CreateOrderLogisticalDateInformationResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrderLogisticalDateInformationResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateOrderLogisticalDateInformationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderLogisticalDateInformationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderLogisticalDateInformationResponseMultiError) AllErrors() []error { return m }

// CreateOrderLogisticalDateInformationResponseValidationError is the
// validation error returned by
// CreateOrderLogisticalDateInformationResponse.Validate if the designated
// constraints aren't met.
type CreateOrderLogisticalDateInformationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderLogisticalDateInformationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderLogisticalDateInformationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderLogisticalDateInformationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderLogisticalDateInformationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderLogisticalDateInformationResponseValidationError) ErrorName() string {
	return "CreateOrderLogisticalDateInformationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderLogisticalDateInformationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderLogisticalDateInformationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderLogisticalDateInformationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderLogisticalDateInformationResponseValidationError{}

// Validate checks the field values on OrderLogisticalDateInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderLogisticalDateInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderLogisticalDateInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrderLogisticalDateInformationMultiError, or nil if none found.
func (m *OrderLogisticalDateInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderLogisticalDateInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderLogisticalDateInformationD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationValidationError{
					field:  "OrderLogisticalDateInformationD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationValidationError{
					field:  "OrderLogisticalDateInformationD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderLogisticalDateInformationD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationValidationError{
				field:  "OrderLogisticalDateInformationD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrderLogisticalDateInformationT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationValidationError{
					field:  "OrderLogisticalDateInformationT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationValidationError{
					field:  "OrderLogisticalDateInformationT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderLogisticalDateInformationT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationValidationError{
				field:  "OrderLogisticalDateInformationT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderLogisticalDateInformationMultiError(errors)
	}

	return nil
}

// OrderLogisticalDateInformationMultiError is an error wrapping multiple
// validation errors returned by OrderLogisticalDateInformation.ValidateAll()
// if the designated constraints aren't met.
type OrderLogisticalDateInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderLogisticalDateInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderLogisticalDateInformationMultiError) AllErrors() []error { return m }

// OrderLogisticalDateInformationValidationError is the validation error
// returned by OrderLogisticalDateInformation.Validate if the designated
// constraints aren't met.
type OrderLogisticalDateInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderLogisticalDateInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderLogisticalDateInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderLogisticalDateInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderLogisticalDateInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderLogisticalDateInformationValidationError) ErrorName() string {
	return "OrderLogisticalDateInformationValidationError"
}

// Error satisfies the builtin error interface
func (e OrderLogisticalDateInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderLogisticalDateInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderLogisticalDateInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderLogisticalDateInformationValidationError{}

// Validate checks the field values on OrderLogisticalDateInformationD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderLogisticalDateInformationD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderLogisticalDateInformationD with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrderLogisticalDateInformationDMultiError, or nil if none found.
func (m *OrderLogisticalDateInformationD) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderLogisticalDateInformationD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderResponseId

	if len(errors) > 0 {
		return OrderLogisticalDateInformationDMultiError(errors)
	}

	return nil
}

// OrderLogisticalDateInformationDMultiError is an error wrapping multiple
// validation errors returned by OrderLogisticalDateInformationD.ValidateAll()
// if the designated constraints aren't met.
type OrderLogisticalDateInformationDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderLogisticalDateInformationDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderLogisticalDateInformationDMultiError) AllErrors() []error { return m }

// OrderLogisticalDateInformationDValidationError is the validation error
// returned by OrderLogisticalDateInformationD.Validate if the designated
// constraints aren't met.
type OrderLogisticalDateInformationDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderLogisticalDateInformationDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderLogisticalDateInformationDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderLogisticalDateInformationDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderLogisticalDateInformationDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderLogisticalDateInformationDValidationError) ErrorName() string {
	return "OrderLogisticalDateInformationDValidationError"
}

// Error satisfies the builtin error interface
func (e OrderLogisticalDateInformationDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderLogisticalDateInformationD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderLogisticalDateInformationDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderLogisticalDateInformationDValidationError{}

// Validate checks the field values on OrderLogisticalDateInformationT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderLogisticalDateInformationT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderLogisticalDateInformationT with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrderLogisticalDateInformationTMultiError, or nil if none found.
func (m *OrderLogisticalDateInformationT) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderLogisticalDateInformationT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestedDeliveryDateRangeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateRangeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateRangeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedDeliveryDateRangeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationTValidationError{
				field:  "RequestedDeliveryDateRangeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedDeliveryDateRangeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateRangeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateRangeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedDeliveryDateRangeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationTValidationError{
				field:  "RequestedDeliveryDateRangeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedDeliveryDateRangeAtUltimateConsigneeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateRangeAtUltimateConsigneeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateRangeAtUltimateConsigneeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedDeliveryDateRangeAtUltimateConsigneeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationTValidationError{
				field:  "RequestedDeliveryDateRangeAtUltimateConsigneeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedDeliveryDateRangeAtUltimateConsigneeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateRangeAtUltimateConsigneeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateRangeAtUltimateConsigneeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedDeliveryDateRangeAtUltimateConsigneeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationTValidationError{
				field:  "RequestedDeliveryDateRangeAtUltimateConsigneeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedDeliveryDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedDeliveryDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationTValidationError{
				field:  "RequestedDeliveryDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedDeliveryDateTimeAtUltimateConsignee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateTimeAtUltimateConsignee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedDeliveryDateTimeAtUltimateConsignee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedDeliveryDateTimeAtUltimateConsignee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationTValidationError{
				field:  "RequestedDeliveryDateTimeAtUltimateConsignee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedPickUpDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedPickUpDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedPickUpDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedPickUpDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationTValidationError{
				field:  "RequestedPickUpDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedShipDateRangeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedShipDateRangeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedShipDateRangeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedShipDateRangeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationTValidationError{
				field:  "RequestedShipDateRangeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedShipDateRangeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedShipDateRangeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedShipDateRangeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedShipDateRangeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationTValidationError{
				field:  "RequestedShipDateRangeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedShipDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedShipDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderLogisticalDateInformationTValidationError{
					field:  "RequestedShipDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedShipDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderLogisticalDateInformationTValidationError{
				field:  "RequestedShipDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderLogisticalDateInformationTMultiError(errors)
	}

	return nil
}

// OrderLogisticalDateInformationTMultiError is an error wrapping multiple
// validation errors returned by OrderLogisticalDateInformationT.ValidateAll()
// if the designated constraints aren't met.
type OrderLogisticalDateInformationTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderLogisticalDateInformationTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderLogisticalDateInformationTMultiError) AllErrors() []error { return m }

// OrderLogisticalDateInformationTValidationError is the validation error
// returned by OrderLogisticalDateInformationT.Validate if the designated
// constraints aren't met.
type OrderLogisticalDateInformationTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderLogisticalDateInformationTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderLogisticalDateInformationTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderLogisticalDateInformationTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderLogisticalDateInformationTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderLogisticalDateInformationTValidationError) ErrorName() string {
	return "OrderLogisticalDateInformationTValidationError"
}

// Error satisfies the builtin error interface
func (e OrderLogisticalDateInformationTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderLogisticalDateInformationT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderLogisticalDateInformationTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderLogisticalDateInformationTValidationError{}

// Validate checks the field values on CreateOrderLogisticalInformationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrderLogisticalInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrderLogisticalInformationRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateOrderLogisticalInformationRequestMultiError, or nil if none found.
func (m *CreateOrderLogisticalInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderLogisticalInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommodityTypeCode

	// no validation rules for ShipmentSplitMethodCode

	// no validation rules for IntermediateDeliveryParty

	// no validation rules for InventoryLocation

	// no validation rules for ShipFrom

	// no validation rules for ShipTo

	// no validation rules for UltimateConsignee

	// no validation rules for OrderId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateOrderLogisticalInformationRequestMultiError(errors)
	}

	return nil
}

// CreateOrderLogisticalInformationRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrderLogisticalInformationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderLogisticalInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderLogisticalInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderLogisticalInformationRequestMultiError) AllErrors() []error { return m }

// CreateOrderLogisticalInformationRequestValidationError is the validation
// error returned by CreateOrderLogisticalInformationRequest.Validate if the
// designated constraints aren't met.
type CreateOrderLogisticalInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderLogisticalInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderLogisticalInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderLogisticalInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderLogisticalInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderLogisticalInformationRequestValidationError) ErrorName() string {
	return "CreateOrderLogisticalInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderLogisticalInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderLogisticalInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderLogisticalInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderLogisticalInformationRequestValidationError{}

// Validate checks the field values on CreateOrderLogisticalInformationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrderLogisticalInformationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrderLogisticalInformationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateOrderLogisticalInformationResponseMultiError, or nil if none found.
func (m *CreateOrderLogisticalInformationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderLogisticalInformationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderLogisticalInformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderLogisticalInformationResponseValidationError{
					field:  "OrderLogisticalInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderLogisticalInformationResponseValidationError{
					field:  "OrderLogisticalInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderLogisticalInformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderLogisticalInformationResponseValidationError{
				field:  "OrderLogisticalInformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderLogisticalInformationResponseMultiError(errors)
	}

	return nil
}

// CreateOrderLogisticalInformationResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrderLogisticalInformationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderLogisticalInformationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderLogisticalInformationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderLogisticalInformationResponseMultiError) AllErrors() []error { return m }

// CreateOrderLogisticalInformationResponseValidationError is the validation
// error returned by CreateOrderLogisticalInformationResponse.Validate if the
// designated constraints aren't met.
type CreateOrderLogisticalInformationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderLogisticalInformationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderLogisticalInformationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderLogisticalInformationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderLogisticalInformationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderLogisticalInformationResponseValidationError) ErrorName() string {
	return "CreateOrderLogisticalInformationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderLogisticalInformationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderLogisticalInformationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderLogisticalInformationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderLogisticalInformationResponseValidationError{}

// Validate checks the field values on OrderLogisticalInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderLogisticalInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderLogisticalInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderLogisticalInformationMultiError, or nil if none found.
func (m *OrderLogisticalInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderLogisticalInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommodityTypeCode

	// no validation rules for ShipmentSplitMethodCode

	// no validation rules for IntermediateDeliveryParty

	// no validation rules for InventoryLocation

	// no validation rules for ShipFrom

	// no validation rules for ShipTo

	// no validation rules for UltimateConsignee

	// no validation rules for OrderId

	if len(errors) > 0 {
		return OrderLogisticalInformationMultiError(errors)
	}

	return nil
}

// OrderLogisticalInformationMultiError is an error wrapping multiple
// validation errors returned by OrderLogisticalInformation.ValidateAll() if
// the designated constraints aren't met.
type OrderLogisticalInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderLogisticalInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderLogisticalInformationMultiError) AllErrors() []error { return m }

// OrderLogisticalInformationValidationError is the validation error returned
// by OrderLogisticalInformation.Validate if the designated constraints aren't met.
type OrderLogisticalInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderLogisticalInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderLogisticalInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderLogisticalInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderLogisticalInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderLogisticalInformationValidationError) ErrorName() string {
	return "OrderLogisticalInformationValidationError"
}

// Error satisfies the builtin error interface
func (e OrderLogisticalInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderLogisticalInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderLogisticalInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderLogisticalInformationValidationError{}
