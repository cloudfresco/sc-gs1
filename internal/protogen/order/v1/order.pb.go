// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: order/v1/order.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-gs1/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderD    *OrderD       `protobuf:"bytes,1,opt,name=order_d,json=orderD,proto3" json:"order_d,omitempty"`
	OrderT    *OrderT       `protobuf:"bytes,2,opt,name=order_t,json=orderT,proto3" json:"order_t,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_order_v1_order_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetOrderD() *OrderD {
	if x != nil {
		return x.OrderD
	}
	return nil
}

func (x *Order) GetOrderT() *OrderT {
	if x != nil {
		return x.OrderT
	}
	return nil
}

func (x *Order) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Order) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type OrderD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                          uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                                       []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                         string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	IsApplicationReceiptAcknowledgementRequired bool    `protobuf:"varint,4,opt,name=is_application_receipt_acknowledgement_required,json=isApplicationReceiptAcknowledgementRequired,proto3" json:"is_application_receipt_acknowledgement_required,omitempty"`
	IsOrderFreeOfExciseTaxDuty                  bool    `protobuf:"varint,5,opt,name=is_order_free_of_excise_tax_duty,json=isOrderFreeOfExciseTaxDuty,proto3" json:"is_order_free_of_excise_tax_duty,omitempty"`
	OrderChangeReasonCode                       string  `protobuf:"bytes,6,opt,name=order_change_reason_code,json=orderChangeReasonCode,proto3" json:"order_change_reason_code,omitempty"`
	OrderEntryType                              string  `protobuf:"bytes,7,opt,name=order_entry_type,json=orderEntryType,proto3" json:"order_entry_type,omitempty"`
	OrderInstructionCode                        string  `protobuf:"bytes,8,opt,name=order_instruction_code,json=orderInstructionCode,proto3" json:"order_instruction_code,omitempty"`
	OrderPriority                               string  `protobuf:"bytes,9,opt,name=order_priority,json=orderPriority,proto3" json:"order_priority,omitempty"`
	OrderTypeCode                               string  `protobuf:"bytes,10,opt,name=order_type_code,json=orderTypeCode,proto3" json:"order_type_code,omitempty"`
	TotalMonetaryAmountExcludingTaxes           float64 `protobuf:"fixed64,11,opt,name=total_monetary_amount_excluding_taxes,json=totalMonetaryAmountExcludingTaxes,proto3" json:"total_monetary_amount_excluding_taxes,omitempty"`
	TmaetCodeListVersion                        string  `protobuf:"bytes,12,opt,name=tmaet_code_list_version,json=tmaetCodeListVersion,proto3" json:"tmaet_code_list_version,omitempty"`
	TmaetCurrencyCode                           string  `protobuf:"bytes,13,opt,name=tmaet_currency_code,json=tmaetCurrencyCode,proto3" json:"tmaet_currency_code,omitempty"`
	TotalMonetaryAmountIncludingTaxes           float64 `protobuf:"fixed64,14,opt,name=total_monetary_amount_including_taxes,json=totalMonetaryAmountIncludingTaxes,proto3" json:"total_monetary_amount_including_taxes,omitempty"`
	TmaitCodeListVersion                        string  `protobuf:"bytes,15,opt,name=tmait_code_list_version,json=tmaitCodeListVersion,proto3" json:"tmait_code_list_version,omitempty"`
	TmaitCurrencyCode                           string  `protobuf:"bytes,16,opt,name=tmait_currency_code,json=tmaitCurrencyCode,proto3" json:"tmait_currency_code,omitempty"`
	TotalTaxAmount                              float64 `protobuf:"fixed64,17,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	TtaCodeListVersion                          string  `protobuf:"bytes,18,opt,name=tta_code_list_version,json=ttaCodeListVersion,proto3" json:"tta_code_list_version,omitempty"`
	TtaCurrencyCode                             string  `protobuf:"bytes,19,opt,name=tta_currency_code,json=ttaCurrencyCode,proto3" json:"tta_currency_code,omitempty"`
	BillTo                                      uint32  `protobuf:"varint,20,opt,name=bill_to,json=billTo,proto3" json:"bill_to,omitempty"`
	Buyer                                       uint32  `protobuf:"varint,21,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Contract                                    uint32  `protobuf:"varint,22,opt,name=contract,proto3" json:"contract,omitempty"`
	CustomerDocumentReference                   uint32  `protobuf:"varint,23,opt,name=customer_document_reference,json=customerDocumentReference,proto3" json:"customer_document_reference,omitempty"`
	CustomsBroker                               uint32  `protobuf:"varint,24,opt,name=customs_broker,json=customsBroker,proto3" json:"customs_broker,omitempty"`
	OrderIdentification                         uint32  `protobuf:"varint,25,opt,name=order_identification,json=orderIdentification,proto3" json:"order_identification,omitempty"`
	PickupFrom                                  uint32  `protobuf:"varint,26,opt,name=pickup_from,json=pickupFrom,proto3" json:"pickup_from,omitempty"`
	PromotionalDeal                             uint32  `protobuf:"varint,27,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	QuoteNumber                                 string  `protobuf:"bytes,28,opt,name=quote_number,json=quoteNumber,proto3" json:"quote_number,omitempty"`
	Seller                                      uint32  `protobuf:"varint,29,opt,name=seller,proto3" json:"seller,omitempty"`
	TradeAgreement                              string  `protobuf:"bytes,30,opt,name=trade_agreement,json=tradeAgreement,proto3" json:"trade_agreement,omitempty"`
}

func (x *OrderD) Reset() {
	*x = OrderD{}
	mi := &file_order_v1_order_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderD) ProtoMessage() {}

func (x *OrderD) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderD.ProtoReflect.Descriptor instead.
func (*OrderD) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{1}
}

func (x *OrderD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *OrderD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *OrderD) GetIsApplicationReceiptAcknowledgementRequired() bool {
	if x != nil {
		return x.IsApplicationReceiptAcknowledgementRequired
	}
	return false
}

func (x *OrderD) GetIsOrderFreeOfExciseTaxDuty() bool {
	if x != nil {
		return x.IsOrderFreeOfExciseTaxDuty
	}
	return false
}

func (x *OrderD) GetOrderChangeReasonCode() string {
	if x != nil {
		return x.OrderChangeReasonCode
	}
	return ""
}

func (x *OrderD) GetOrderEntryType() string {
	if x != nil {
		return x.OrderEntryType
	}
	return ""
}

func (x *OrderD) GetOrderInstructionCode() string {
	if x != nil {
		return x.OrderInstructionCode
	}
	return ""
}

func (x *OrderD) GetOrderPriority() string {
	if x != nil {
		return x.OrderPriority
	}
	return ""
}

func (x *OrderD) GetOrderTypeCode() string {
	if x != nil {
		return x.OrderTypeCode
	}
	return ""
}

func (x *OrderD) GetTotalMonetaryAmountExcludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountExcludingTaxes
	}
	return 0
}

func (x *OrderD) GetTmaetCodeListVersion() string {
	if x != nil {
		return x.TmaetCodeListVersion
	}
	return ""
}

func (x *OrderD) GetTmaetCurrencyCode() string {
	if x != nil {
		return x.TmaetCurrencyCode
	}
	return ""
}

func (x *OrderD) GetTotalMonetaryAmountIncludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountIncludingTaxes
	}
	return 0
}

func (x *OrderD) GetTmaitCodeListVersion() string {
	if x != nil {
		return x.TmaitCodeListVersion
	}
	return ""
}

func (x *OrderD) GetTmaitCurrencyCode() string {
	if x != nil {
		return x.TmaitCurrencyCode
	}
	return ""
}

func (x *OrderD) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *OrderD) GetTtaCodeListVersion() string {
	if x != nil {
		return x.TtaCodeListVersion
	}
	return ""
}

func (x *OrderD) GetTtaCurrencyCode() string {
	if x != nil {
		return x.TtaCurrencyCode
	}
	return ""
}

func (x *OrderD) GetBillTo() uint32 {
	if x != nil {
		return x.BillTo
	}
	return 0
}

func (x *OrderD) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *OrderD) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *OrderD) GetCustomerDocumentReference() uint32 {
	if x != nil {
		return x.CustomerDocumentReference
	}
	return 0
}

func (x *OrderD) GetCustomsBroker() uint32 {
	if x != nil {
		return x.CustomsBroker
	}
	return 0
}

func (x *OrderD) GetOrderIdentification() uint32 {
	if x != nil {
		return x.OrderIdentification
	}
	return 0
}

func (x *OrderD) GetPickupFrom() uint32 {
	if x != nil {
		return x.PickupFrom
	}
	return 0
}

func (x *OrderD) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *OrderD) GetQuoteNumber() string {
	if x != nil {
		return x.QuoteNumber
	}
	return ""
}

func (x *OrderD) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *OrderD) GetTradeAgreement() string {
	if x != nil {
		return x.TradeAgreement
	}
	return ""
}

type OrderT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryDateAccordingToSchedule *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=delivery_date_according_to_schedule,json=deliveryDateAccordingToSchedule,proto3" json:"delivery_date_according_to_schedule,omitempty"`
	LatestDeliveryDate              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=latest_delivery_date,json=latestDeliveryDate,proto3" json:"latest_delivery_date,omitempty"`
}

func (x *OrderT) Reset() {
	*x = OrderT{}
	mi := &file_order_v1_order_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderT) ProtoMessage() {}

func (x *OrderT) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderT.ProtoReflect.Descriptor instead.
func (*OrderT) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{2}
}

func (x *OrderT) GetDeliveryDateAccordingToSchedule() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveryDateAccordingToSchedule
	}
	return nil
}

func (x *OrderT) GetLatestDeliveryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestDeliveryDate
	}
	return nil
}

type CreateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsApplicationReceiptAcknowledgementRequired bool                          `protobuf:"varint,1,opt,name=is_application_receipt_acknowledgement_required,json=isApplicationReceiptAcknowledgementRequired,proto3" json:"is_application_receipt_acknowledgement_required,omitempty"`
	IsOrderFreeOfExciseTaxDuty                  bool                          `protobuf:"varint,2,opt,name=is_order_free_of_excise_tax_duty,json=isOrderFreeOfExciseTaxDuty,proto3" json:"is_order_free_of_excise_tax_duty,omitempty"`
	OrderChangeReasonCode                       string                        `protobuf:"bytes,3,opt,name=order_change_reason_code,json=orderChangeReasonCode,proto3" json:"order_change_reason_code,omitempty"`
	OrderEntryType                              string                        `protobuf:"bytes,4,opt,name=order_entry_type,json=orderEntryType,proto3" json:"order_entry_type,omitempty"`
	OrderInstructionCode                        string                        `protobuf:"bytes,5,opt,name=order_instruction_code,json=orderInstructionCode,proto3" json:"order_instruction_code,omitempty"`
	OrderPriority                               string                        `protobuf:"bytes,6,opt,name=order_priority,json=orderPriority,proto3" json:"order_priority,omitempty"`
	OrderTypeCode                               string                        `protobuf:"bytes,7,opt,name=order_type_code,json=orderTypeCode,proto3" json:"order_type_code,omitempty"`
	TotalMonetaryAmountExcludingTaxes           float64                       `protobuf:"fixed64,8,opt,name=total_monetary_amount_excluding_taxes,json=totalMonetaryAmountExcludingTaxes,proto3" json:"total_monetary_amount_excluding_taxes,omitempty"`
	TmaetCodeListVersion                        string                        `protobuf:"bytes,9,opt,name=tmaet_code_list_version,json=tmaetCodeListVersion,proto3" json:"tmaet_code_list_version,omitempty"`
	TmaetCurrencyCode                           string                        `protobuf:"bytes,10,opt,name=tmaet_currency_code,json=tmaetCurrencyCode,proto3" json:"tmaet_currency_code,omitempty"`
	TotalMonetaryAmountIncludingTaxes           float64                       `protobuf:"fixed64,11,opt,name=total_monetary_amount_including_taxes,json=totalMonetaryAmountIncludingTaxes,proto3" json:"total_monetary_amount_including_taxes,omitempty"`
	TmaitCodeListVersion                        string                        `protobuf:"bytes,12,opt,name=tmait_code_list_version,json=tmaitCodeListVersion,proto3" json:"tmait_code_list_version,omitempty"`
	TmaitCurrencyCode                           string                        `protobuf:"bytes,13,opt,name=tmait_currency_code,json=tmaitCurrencyCode,proto3" json:"tmait_currency_code,omitempty"`
	TotalTaxAmount                              float64                       `protobuf:"fixed64,14,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	TtaCodeListVersion                          string                        `protobuf:"bytes,15,opt,name=tta_code_list_version,json=ttaCodeListVersion,proto3" json:"tta_code_list_version,omitempty"`
	TtaCurrencyCode                             string                        `protobuf:"bytes,16,opt,name=tta_currency_code,json=ttaCurrencyCode,proto3" json:"tta_currency_code,omitempty"`
	BillTo                                      uint32                        `protobuf:"varint,17,opt,name=bill_to,json=billTo,proto3" json:"bill_to,omitempty"`
	Buyer                                       uint32                        `protobuf:"varint,18,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Contract                                    uint32                        `protobuf:"varint,19,opt,name=contract,proto3" json:"contract,omitempty"`
	CustomerDocumentReference                   uint32                        `protobuf:"varint,20,opt,name=customer_document_reference,json=customerDocumentReference,proto3" json:"customer_document_reference,omitempty"`
	CustomsBroker                               uint32                        `protobuf:"varint,21,opt,name=customs_broker,json=customsBroker,proto3" json:"customs_broker,omitempty"`
	DeliveryDateAccordingToSchedule             string                        `protobuf:"bytes,22,opt,name=delivery_date_according_to_schedule,json=deliveryDateAccordingToSchedule,proto3" json:"delivery_date_according_to_schedule,omitempty"`
	LatestDeliveryDate                          string                        `protobuf:"bytes,23,opt,name=latest_delivery_date,json=latestDeliveryDate,proto3" json:"latest_delivery_date,omitempty"`
	OrderIdentification                         uint32                        `protobuf:"varint,24,opt,name=order_identification,json=orderIdentification,proto3" json:"order_identification,omitempty"`
	PickupFrom                                  uint32                        `protobuf:"varint,25,opt,name=pickup_from,json=pickupFrom,proto3" json:"pickup_from,omitempty"`
	PromotionalDeal                             uint32                        `protobuf:"varint,26,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	QuoteNumber                                 string                        `protobuf:"bytes,27,opt,name=quote_number,json=quoteNumber,proto3" json:"quote_number,omitempty"`
	Seller                                      uint32                        `protobuf:"varint,28,opt,name=seller,proto3" json:"seller,omitempty"`
	TradeAgreement                              string                        `protobuf:"bytes,29,opt,name=trade_agreement,json=tradeAgreement,proto3" json:"trade_agreement,omitempty"`
	UserId                                      string                        `protobuf:"bytes,30,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                   string                        `protobuf:"bytes,31,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                   string                        `protobuf:"bytes,32,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	OrderLineItems                              []*CreateOrderLineItemRequest `protobuf:"bytes,33,rep,name=order_line_items,json=orderLineItems,proto3" json:"order_line_items,omitempty"`
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	mi := &file_order_v1_order_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOrderRequest) GetIsApplicationReceiptAcknowledgementRequired() bool {
	if x != nil {
		return x.IsApplicationReceiptAcknowledgementRequired
	}
	return false
}

func (x *CreateOrderRequest) GetIsOrderFreeOfExciseTaxDuty() bool {
	if x != nil {
		return x.IsOrderFreeOfExciseTaxDuty
	}
	return false
}

func (x *CreateOrderRequest) GetOrderChangeReasonCode() string {
	if x != nil {
		return x.OrderChangeReasonCode
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderEntryType() string {
	if x != nil {
		return x.OrderEntryType
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderInstructionCode() string {
	if x != nil {
		return x.OrderInstructionCode
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderPriority() string {
	if x != nil {
		return x.OrderPriority
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderTypeCode() string {
	if x != nil {
		return x.OrderTypeCode
	}
	return ""
}

func (x *CreateOrderRequest) GetTotalMonetaryAmountExcludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountExcludingTaxes
	}
	return 0
}

func (x *CreateOrderRequest) GetTmaetCodeListVersion() string {
	if x != nil {
		return x.TmaetCodeListVersion
	}
	return ""
}

func (x *CreateOrderRequest) GetTmaetCurrencyCode() string {
	if x != nil {
		return x.TmaetCurrencyCode
	}
	return ""
}

func (x *CreateOrderRequest) GetTotalMonetaryAmountIncludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountIncludingTaxes
	}
	return 0
}

func (x *CreateOrderRequest) GetTmaitCodeListVersion() string {
	if x != nil {
		return x.TmaitCodeListVersion
	}
	return ""
}

func (x *CreateOrderRequest) GetTmaitCurrencyCode() string {
	if x != nil {
		return x.TmaitCurrencyCode
	}
	return ""
}

func (x *CreateOrderRequest) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *CreateOrderRequest) GetTtaCodeListVersion() string {
	if x != nil {
		return x.TtaCodeListVersion
	}
	return ""
}

func (x *CreateOrderRequest) GetTtaCurrencyCode() string {
	if x != nil {
		return x.TtaCurrencyCode
	}
	return ""
}

func (x *CreateOrderRequest) GetBillTo() uint32 {
	if x != nil {
		return x.BillTo
	}
	return 0
}

func (x *CreateOrderRequest) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *CreateOrderRequest) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *CreateOrderRequest) GetCustomerDocumentReference() uint32 {
	if x != nil {
		return x.CustomerDocumentReference
	}
	return 0
}

func (x *CreateOrderRequest) GetCustomsBroker() uint32 {
	if x != nil {
		return x.CustomsBroker
	}
	return 0
}

func (x *CreateOrderRequest) GetDeliveryDateAccordingToSchedule() string {
	if x != nil {
		return x.DeliveryDateAccordingToSchedule
	}
	return ""
}

func (x *CreateOrderRequest) GetLatestDeliveryDate() string {
	if x != nil {
		return x.LatestDeliveryDate
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderIdentification() uint32 {
	if x != nil {
		return x.OrderIdentification
	}
	return 0
}

func (x *CreateOrderRequest) GetPickupFrom() uint32 {
	if x != nil {
		return x.PickupFrom
	}
	return 0
}

func (x *CreateOrderRequest) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *CreateOrderRequest) GetQuoteNumber() string {
	if x != nil {
		return x.QuoteNumber
	}
	return ""
}

func (x *CreateOrderRequest) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *CreateOrderRequest) GetTradeAgreement() string {
	if x != nil {
		return x.TradeAgreement
	}
	return ""
}

func (x *CreateOrderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOrderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOrderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderLineItems() []*CreateOrderLineItemRequest {
	if x != nil {
		return x.OrderLineItems
	}
	return nil
}

type CreateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *CreateOrderResponse) Reset() {
	*x = CreateOrderResponse{}
	mi := &file_order_v1_order_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponse) ProtoMessage() {}

func (x *CreateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOrderResponse) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

type GetOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders     []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	NextCursor string   `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetOrdersResponse) Reset() {
	*x = GetOrdersResponse{}
	mi := &file_order_v1_order_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersResponse) ProtoMessage() {}

func (x *GetOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetOrdersResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{5}
}

func (x *GetOrdersResponse) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *GetOrdersResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetOrdersRequest) Reset() {
	*x = GetOrdersRequest{}
	mi := &file_order_v1_order_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersRequest) ProtoMessage() {}

func (x *GetOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetOrdersRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{6}
}

func (x *GetOrdersRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetOrdersRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetOrdersRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetOrdersRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetOrderRequest) Reset() {
	*x = GetOrderRequest{}
	mi := &file_order_v1_order_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderRequest) ProtoMessage() {}

func (x *GetOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderRequest.ProtoReflect.Descriptor instead.
func (*GetOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{7}
}

func (x *GetOrderRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *GetOrderResponse) Reset() {
	*x = GetOrderResponse{}
	mi := &file_order_v1_order_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponse) ProtoMessage() {}

func (x *GetOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponse.ProtoReflect.Descriptor instead.
func (*GetOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{8}
}

func (x *GetOrderResponse) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

type GetOrderByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetOrderByPkRequest) Reset() {
	*x = GetOrderByPkRequest{}
	mi := &file_order_v1_order_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderByPkRequest) ProtoMessage() {}

func (x *GetOrderByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderByPkRequest.ProtoReflect.Descriptor instead.
func (*GetOrderByPkRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{9}
}

func (x *GetOrderByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetOrderByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *GetOrderByPkResponse) Reset() {
	*x = GetOrderByPkResponse{}
	mi := &file_order_v1_order_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderByPkResponse) ProtoMessage() {}

func (x *GetOrderByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderByPkResponse.ProtoReflect.Descriptor instead.
func (*GetOrderByPkResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{10}
}

func (x *GetOrderByPkResponse) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

type UpdateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderChangeReasonCode             string  `protobuf:"bytes,1,opt,name=order_change_reason_code,json=orderChangeReasonCode,proto3" json:"order_change_reason_code,omitempty"`
	OrderEntryType                    string  `protobuf:"bytes,2,opt,name=order_entry_type,json=orderEntryType,proto3" json:"order_entry_type,omitempty"`
	OrderInstructionCode              string  `protobuf:"bytes,3,opt,name=order_instruction_code,json=orderInstructionCode,proto3" json:"order_instruction_code,omitempty"`
	OrderPriority                     string  `protobuf:"bytes,4,opt,name=order_priority,json=orderPriority,proto3" json:"order_priority,omitempty"`
	OrderTypeCode                     string  `protobuf:"bytes,5,opt,name=order_type_code,json=orderTypeCode,proto3" json:"order_type_code,omitempty"`
	TotalMonetaryAmountExcludingTaxes float64 `protobuf:"fixed64,6,opt,name=total_monetary_amount_excluding_taxes,json=totalMonetaryAmountExcludingTaxes,proto3" json:"total_monetary_amount_excluding_taxes,omitempty"`
	TmaetCodeListVersion              string  `protobuf:"bytes,7,opt,name=tmaet_code_list_version,json=tmaetCodeListVersion,proto3" json:"tmaet_code_list_version,omitempty"`
	TmaetCurrencyCode                 string  `protobuf:"bytes,8,opt,name=tmaet_currency_code,json=tmaetCurrencyCode,proto3" json:"tmaet_currency_code,omitempty"`
	TotalMonetaryAmountIncludingTaxes float64 `protobuf:"fixed64,9,opt,name=total_monetary_amount_including_taxes,json=totalMonetaryAmountIncludingTaxes,proto3" json:"total_monetary_amount_including_taxes,omitempty"`
	TmaitCodeListVersion              string  `protobuf:"bytes,10,opt,name=tmait_code_list_version,json=tmaitCodeListVersion,proto3" json:"tmait_code_list_version,omitempty"`
	TmaitCurrencyCode                 string  `protobuf:"bytes,11,opt,name=tmait_currency_code,json=tmaitCurrencyCode,proto3" json:"tmait_currency_code,omitempty"`
	TotalTaxAmount                    float64 `protobuf:"fixed64,12,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	TtaCodeListVersion                string  `protobuf:"bytes,13,opt,name=tta_code_list_version,json=ttaCodeListVersion,proto3" json:"tta_code_list_version,omitempty"`
	TtaCurrencyCode                   string  `protobuf:"bytes,14,opt,name=tta_currency_code,json=ttaCurrencyCode,proto3" json:"tta_currency_code,omitempty"`
	Id                                string  `protobuf:"bytes,15,opt,name=id,proto3" json:"id,omitempty"`
	UserId                            string  `protobuf:"bytes,16,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                         string  `protobuf:"bytes,17,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                         string  `protobuf:"bytes,18,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateOrderRequest) Reset() {
	*x = UpdateOrderRequest{}
	mi := &file_order_v1_order_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderRequest) ProtoMessage() {}

func (x *UpdateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateOrderRequest) GetOrderChangeReasonCode() string {
	if x != nil {
		return x.OrderChangeReasonCode
	}
	return ""
}

func (x *UpdateOrderRequest) GetOrderEntryType() string {
	if x != nil {
		return x.OrderEntryType
	}
	return ""
}

func (x *UpdateOrderRequest) GetOrderInstructionCode() string {
	if x != nil {
		return x.OrderInstructionCode
	}
	return ""
}

func (x *UpdateOrderRequest) GetOrderPriority() string {
	if x != nil {
		return x.OrderPriority
	}
	return ""
}

func (x *UpdateOrderRequest) GetOrderTypeCode() string {
	if x != nil {
		return x.OrderTypeCode
	}
	return ""
}

func (x *UpdateOrderRequest) GetTotalMonetaryAmountExcludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountExcludingTaxes
	}
	return 0
}

func (x *UpdateOrderRequest) GetTmaetCodeListVersion() string {
	if x != nil {
		return x.TmaetCodeListVersion
	}
	return ""
}

func (x *UpdateOrderRequest) GetTmaetCurrencyCode() string {
	if x != nil {
		return x.TmaetCurrencyCode
	}
	return ""
}

func (x *UpdateOrderRequest) GetTotalMonetaryAmountIncludingTaxes() float64 {
	if x != nil {
		return x.TotalMonetaryAmountIncludingTaxes
	}
	return 0
}

func (x *UpdateOrderRequest) GetTmaitCodeListVersion() string {
	if x != nil {
		return x.TmaitCodeListVersion
	}
	return ""
}

func (x *UpdateOrderRequest) GetTmaitCurrencyCode() string {
	if x != nil {
		return x.TmaitCurrencyCode
	}
	return ""
}

func (x *UpdateOrderRequest) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *UpdateOrderRequest) GetTtaCodeListVersion() string {
	if x != nil {
		return x.TtaCodeListVersion
	}
	return ""
}

func (x *UpdateOrderRequest) GetTtaCurrencyCode() string {
	if x != nil {
		return x.TtaCurrencyCode
	}
	return ""
}

func (x *UpdateOrderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOrderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateOrderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateOrderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrderResponse) Reset() {
	*x = UpdateOrderResponse{}
	mi := &file_order_v1_order_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderResponse) ProtoMessage() {}

func (x *UpdateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{12}
}

type CreateOrderLineItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extension                       string  `protobuf:"bytes,1,opt,name=extension,proto3" json:"extension,omitempty"`
	FreeGoodsQuantity               float64 `protobuf:"fixed64,2,opt,name=free_goods_quantity,json=freeGoodsQuantity,proto3" json:"free_goods_quantity,omitempty"`
	FgqMeasurementUnitCode          string  `protobuf:"bytes,3,opt,name=fgq_measurement_unit_code,json=fgqMeasurementUnitCode,proto3" json:"fgq_measurement_unit_code,omitempty"`
	FgqCodeListVersion              string  `protobuf:"bytes,4,opt,name=fgq_code_list_version,json=fgqCodeListVersion,proto3" json:"fgq_code_list_version,omitempty"`
	ItemPriceBaseQuantity           float64 `protobuf:"fixed64,5,opt,name=item_price_base_quantity,json=itemPriceBaseQuantity,proto3" json:"item_price_base_quantity,omitempty"`
	IpbqMeasurementUnitCode         string  `protobuf:"bytes,6,opt,name=ipbq_measurement_unit_code,json=ipbqMeasurementUnitCode,proto3" json:"ipbq_measurement_unit_code,omitempty"`
	IpbqCodeListVersion             string  `protobuf:"bytes,7,opt,name=ipbq_code_list_version,json=ipbqCodeListVersion,proto3" json:"ipbq_code_list_version,omitempty"`
	ItemSourceCode                  string  `protobuf:"bytes,8,opt,name=item_source_code,json=itemSourceCode,proto3" json:"item_source_code,omitempty"`
	LineItemActionCode              string  `protobuf:"bytes,9,opt,name=line_item_action_code,json=lineItemActionCode,proto3" json:"line_item_action_code,omitempty"`
	LineItemNumber                  uint32  `protobuf:"varint,10,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ListPrice                       float64 `protobuf:"fixed64,11,opt,name=list_price,json=listPrice,proto3" json:"list_price,omitempty"`
	LpCodeListVersion               string  `protobuf:"bytes,12,opt,name=lp_code_list_version,json=lpCodeListVersion,proto3" json:"lp_code_list_version,omitempty"`
	LpCurrencyCode                  string  `protobuf:"bytes,13,opt,name=lp_currency_code,json=lpCurrencyCode,proto3" json:"lp_currency_code,omitempty"`
	MonetaryAmountExcludingTaxes    float64 `protobuf:"fixed64,14,opt,name=monetary_amount_excluding_taxes,json=monetaryAmountExcludingTaxes,proto3" json:"monetary_amount_excluding_taxes,omitempty"`
	MaetCodeListVersion             string  `protobuf:"bytes,15,opt,name=maet_code_list_version,json=maetCodeListVersion,proto3" json:"maet_code_list_version,omitempty"`
	MaetCurrencyCode                string  `protobuf:"bytes,16,opt,name=maet_currency_code,json=maetCurrencyCode,proto3" json:"maet_currency_code,omitempty"`
	MonetaryAmountIncludingTaxes    float64 `protobuf:"fixed64,17,opt,name=monetary_amount_including_taxes,json=monetaryAmountIncludingTaxes,proto3" json:"monetary_amount_including_taxes,omitempty"`
	MaitCodeListVersion             string  `protobuf:"bytes,18,opt,name=mait_code_list_version,json=maitCodeListVersion,proto3" json:"mait_code_list_version,omitempty"`
	MaitCurrencyCode                string  `protobuf:"bytes,19,opt,name=mait_currency_code,json=maitCurrencyCode,proto3" json:"mait_currency_code,omitempty"`
	NetAmount                       float64 `protobuf:"fixed64,20,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	NaCodeListVersion               string  `protobuf:"bytes,21,opt,name=na_code_list_version,json=naCodeListVersion,proto3" json:"na_code_list_version,omitempty"`
	NaCurrencyCode                  string  `protobuf:"bytes,22,opt,name=na_currency_code,json=naCurrencyCode,proto3" json:"na_currency_code,omitempty"`
	NetPrice                        float64 `protobuf:"fixed64,23,opt,name=net_price,json=netPrice,proto3" json:"net_price,omitempty"`
	NpCodeListVersion               string  `protobuf:"bytes,24,opt,name=np_code_list_version,json=npCodeListVersion,proto3" json:"np_code_list_version,omitempty"`
	NpCurrencyCode                  string  `protobuf:"bytes,25,opt,name=np_currency_code,json=npCurrencyCode,proto3" json:"np_currency_code,omitempty"`
	OrderInstructionCode            string  `protobuf:"bytes,26,opt,name=order_instruction_code,json=orderInstructionCode,proto3" json:"order_instruction_code,omitempty"`
	OrderLineItemInstructionCode    string  `protobuf:"bytes,27,opt,name=order_line_item_instruction_code,json=orderLineItemInstructionCode,proto3" json:"order_line_item_instruction_code,omitempty"`
	OrderLineItemPriority           string  `protobuf:"bytes,28,opt,name=order_line_item_priority,json=orderLineItemPriority,proto3" json:"order_line_item_priority,omitempty"`
	ParentLineItemNumber            uint32  `protobuf:"varint,29,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	RecommendedRetailPrice          float64 `protobuf:"fixed64,30,opt,name=recommended_retail_price,json=recommendedRetailPrice,proto3" json:"recommended_retail_price,omitempty"`
	RequestedQuantity               float64 `protobuf:"fixed64,31,opt,name=requested_quantity,json=requestedQuantity,proto3" json:"requested_quantity,omitempty"`
	RqMeasurementUnitCode           string  `protobuf:"bytes,32,opt,name=rq_measurement_unit_code,json=rqMeasurementUnitCode,proto3" json:"rq_measurement_unit_code,omitempty"`
	RqCodeListVersion               string  `protobuf:"bytes,33,opt,name=rq_code_list_version,json=rqCodeListVersion,proto3" json:"rq_code_list_version,omitempty"`
	ReturnReasonCode                string  `protobuf:"bytes,34,opt,name=return_reason_code,json=returnReasonCode,proto3" json:"return_reason_code,omitempty"`
	Contract                        uint32  `protobuf:"varint,35,opt,name=contract,proto3" json:"contract,omitempty"`
	CustomerDocumentReference       uint32  `protobuf:"varint,36,opt,name=customer_document_reference,json=customerDocumentReference,proto3" json:"customer_document_reference,omitempty"`
	DeliveryDateAccordingToSchedule uint32  `protobuf:"varint,37,opt,name=delivery_date_according_to_schedule,json=deliveryDateAccordingToSchedule,proto3" json:"delivery_date_according_to_schedule,omitempty"`
	DespatchAdvice                  uint32  `protobuf:"varint,38,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
	LatestDeliveryDate              string  `protobuf:"bytes,39,opt,name=latest_delivery_date,json=latestDeliveryDate,proto3" json:"latest_delivery_date,omitempty"`
	MaterialSpecification           uint32  `protobuf:"varint,40,opt,name=material_specification,json=materialSpecification,proto3" json:"material_specification,omitempty"`
	OrderLineItemContact            uint32  `protobuf:"varint,41,opt,name=order_line_item_contact,json=orderLineItemContact,proto3" json:"order_line_item_contact,omitempty"`
	PreferredManufacturer           uint32  `protobuf:"varint,42,opt,name=preferred_manufacturer,json=preferredManufacturer,proto3" json:"preferred_manufacturer,omitempty"`
	PromotionalDeal                 uint32  `protobuf:"varint,43,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseConditions              uint32  `protobuf:"varint,44,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	ReturnableAssetIdentification   uint32  `protobuf:"varint,45,opt,name=returnable_asset_identification,json=returnableAssetIdentification,proto3" json:"returnable_asset_identification,omitempty"`
	OrderId                         uint32  `protobuf:"varint,46,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	UserId                          string  `protobuf:"bytes,47,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                       string  `protobuf:"bytes,48,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                       string  `protobuf:"bytes,49,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateOrderLineItemRequest) Reset() {
	*x = CreateOrderLineItemRequest{}
	mi := &file_order_v1_order_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderLineItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderLineItemRequest) ProtoMessage() {}

func (x *CreateOrderLineItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderLineItemRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderLineItemRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{13}
}

func (x *CreateOrderLineItemRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetFreeGoodsQuantity() float64 {
	if x != nil {
		return x.FreeGoodsQuantity
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetFgqMeasurementUnitCode() string {
	if x != nil {
		return x.FgqMeasurementUnitCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetFgqCodeListVersion() string {
	if x != nil {
		return x.FgqCodeListVersion
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetItemPriceBaseQuantity() float64 {
	if x != nil {
		return x.ItemPriceBaseQuantity
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetIpbqMeasurementUnitCode() string {
	if x != nil {
		return x.IpbqMeasurementUnitCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetIpbqCodeListVersion() string {
	if x != nil {
		return x.IpbqCodeListVersion
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetItemSourceCode() string {
	if x != nil {
		return x.ItemSourceCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetLineItemActionCode() string {
	if x != nil {
		return x.LineItemActionCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetListPrice() float64 {
	if x != nil {
		return x.ListPrice
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetLpCodeListVersion() string {
	if x != nil {
		return x.LpCodeListVersion
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetLpCurrencyCode() string {
	if x != nil {
		return x.LpCurrencyCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetMonetaryAmountExcludingTaxes() float64 {
	if x != nil {
		return x.MonetaryAmountExcludingTaxes
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetMaetCodeListVersion() string {
	if x != nil {
		return x.MaetCodeListVersion
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetMaetCurrencyCode() string {
	if x != nil {
		return x.MaetCurrencyCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetMonetaryAmountIncludingTaxes() float64 {
	if x != nil {
		return x.MonetaryAmountIncludingTaxes
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetMaitCodeListVersion() string {
	if x != nil {
		return x.MaitCodeListVersion
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetMaitCurrencyCode() string {
	if x != nil {
		return x.MaitCurrencyCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetNaCodeListVersion() string {
	if x != nil {
		return x.NaCodeListVersion
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetNaCurrencyCode() string {
	if x != nil {
		return x.NaCurrencyCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetNetPrice() float64 {
	if x != nil {
		return x.NetPrice
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetNpCodeListVersion() string {
	if x != nil {
		return x.NpCodeListVersion
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetNpCurrencyCode() string {
	if x != nil {
		return x.NpCurrencyCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetOrderInstructionCode() string {
	if x != nil {
		return x.OrderInstructionCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetOrderLineItemInstructionCode() string {
	if x != nil {
		return x.OrderLineItemInstructionCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetOrderLineItemPriority() string {
	if x != nil {
		return x.OrderLineItemPriority
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetRecommendedRetailPrice() float64 {
	if x != nil {
		return x.RecommendedRetailPrice
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetRequestedQuantity() float64 {
	if x != nil {
		return x.RequestedQuantity
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetRqMeasurementUnitCode() string {
	if x != nil {
		return x.RqMeasurementUnitCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetRqCodeListVersion() string {
	if x != nil {
		return x.RqCodeListVersion
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetReturnReasonCode() string {
	if x != nil {
		return x.ReturnReasonCode
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetCustomerDocumentReference() uint32 {
	if x != nil {
		return x.CustomerDocumentReference
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetDeliveryDateAccordingToSchedule() uint32 {
	if x != nil {
		return x.DeliveryDateAccordingToSchedule
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetDespatchAdvice() uint32 {
	if x != nil {
		return x.DespatchAdvice
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetLatestDeliveryDate() string {
	if x != nil {
		return x.LatestDeliveryDate
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetMaterialSpecification() uint32 {
	if x != nil {
		return x.MaterialSpecification
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetOrderLineItemContact() uint32 {
	if x != nil {
		return x.OrderLineItemContact
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetPreferredManufacturer() uint32 {
	if x != nil {
		return x.PreferredManufacturer
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetReturnableAssetIdentification() uint32 {
	if x != nil {
		return x.ReturnableAssetIdentification
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CreateOrderLineItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOrderLineItemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateOrderLineItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderLineItem *OrderLineItem `protobuf:"bytes,1,opt,name=order_line_item,json=orderLineItem,proto3" json:"order_line_item,omitempty"`
}

func (x *CreateOrderLineItemResponse) Reset() {
	*x = CreateOrderLineItemResponse{}
	mi := &file_order_v1_order_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderLineItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderLineItemResponse) ProtoMessage() {}

func (x *CreateOrderLineItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderLineItemResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderLineItemResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{14}
}

func (x *CreateOrderLineItemResponse) GetOrderLineItem() *OrderLineItem {
	if x != nil {
		return x.OrderLineItem
	}
	return nil
}

type OrderLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderLineItemD *OrderLineItemD `protobuf:"bytes,1,opt,name=order_line_item_d,json=orderLineItemD,proto3" json:"order_line_item_d,omitempty"`
	OrderLineItemT *OrderLineItemT `protobuf:"bytes,2,opt,name=order_line_item_t,json=orderLineItemT,proto3" json:"order_line_item_t,omitempty"`
	CrUpdUser      *v1.CrUpdUser   `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime      *v1.CrUpdTime   `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *OrderLineItem) Reset() {
	*x = OrderLineItem{}
	mi := &file_order_v1_order_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLineItem) ProtoMessage() {}

func (x *OrderLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLineItem.ProtoReflect.Descriptor instead.
func (*OrderLineItem) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{15}
}

func (x *OrderLineItem) GetOrderLineItemD() *OrderLineItemD {
	if x != nil {
		return x.OrderLineItemD
	}
	return nil
}

func (x *OrderLineItem) GetOrderLineItemT() *OrderLineItemT {
	if x != nil {
		return x.OrderLineItemT
	}
	return nil
}

func (x *OrderLineItem) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *OrderLineItem) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type OrderLineItemD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                           []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                             string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	Extension                       string  `protobuf:"bytes,4,opt,name=extension,proto3" json:"extension,omitempty"`
	FreeGoodsQuantity               float64 `protobuf:"fixed64,5,opt,name=free_goods_quantity,json=freeGoodsQuantity,proto3" json:"free_goods_quantity,omitempty"`
	FgqMeasurementUnitCode          string  `protobuf:"bytes,6,opt,name=fgq_measurement_unit_code,json=fgqMeasurementUnitCode,proto3" json:"fgq_measurement_unit_code,omitempty"`
	FgqCodeListVersion              string  `protobuf:"bytes,7,opt,name=fgq_code_list_version,json=fgqCodeListVersion,proto3" json:"fgq_code_list_version,omitempty"`
	ItemPriceBaseQuantity           float64 `protobuf:"fixed64,8,opt,name=item_price_base_quantity,json=itemPriceBaseQuantity,proto3" json:"item_price_base_quantity,omitempty"`
	IpbqMeasurementUnitCode         string  `protobuf:"bytes,9,opt,name=ipbq_measurement_unit_code,json=ipbqMeasurementUnitCode,proto3" json:"ipbq_measurement_unit_code,omitempty"`
	IpbqCodeListVersion             string  `protobuf:"bytes,10,opt,name=ipbq_code_list_version,json=ipbqCodeListVersion,proto3" json:"ipbq_code_list_version,omitempty"`
	ItemSourceCode                  string  `protobuf:"bytes,11,opt,name=item_source_code,json=itemSourceCode,proto3" json:"item_source_code,omitempty"`
	LineItemActionCode              string  `protobuf:"bytes,12,opt,name=line_item_action_code,json=lineItemActionCode,proto3" json:"line_item_action_code,omitempty"`
	LineItemNumber                  uint32  `protobuf:"varint,13,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ListPrice                       float64 `protobuf:"fixed64,14,opt,name=list_price,json=listPrice,proto3" json:"list_price,omitempty"`
	LpCodeListVersion               string  `protobuf:"bytes,15,opt,name=lp_code_list_version,json=lpCodeListVersion,proto3" json:"lp_code_list_version,omitempty"`
	LpCurrencyCode                  string  `protobuf:"bytes,16,opt,name=lp_currency_code,json=lpCurrencyCode,proto3" json:"lp_currency_code,omitempty"`
	MonetaryAmountExcludingTaxes    float64 `protobuf:"fixed64,17,opt,name=monetary_amount_excluding_taxes,json=monetaryAmountExcludingTaxes,proto3" json:"monetary_amount_excluding_taxes,omitempty"`
	MaetCodeListVersion             string  `protobuf:"bytes,18,opt,name=maet_code_list_version,json=maetCodeListVersion,proto3" json:"maet_code_list_version,omitempty"`
	MaetCurrencyCode                string  `protobuf:"bytes,19,opt,name=maet_currency_code,json=maetCurrencyCode,proto3" json:"maet_currency_code,omitempty"`
	MonetaryAmountIncludingTaxes    float64 `protobuf:"fixed64,20,opt,name=monetary_amount_including_taxes,json=monetaryAmountIncludingTaxes,proto3" json:"monetary_amount_including_taxes,omitempty"`
	MaitCodeListVersion             string  `protobuf:"bytes,21,opt,name=mait_code_list_version,json=maitCodeListVersion,proto3" json:"mait_code_list_version,omitempty"`
	MaitCurrencyCode                string  `protobuf:"bytes,22,opt,name=mait_currency_code,json=maitCurrencyCode,proto3" json:"mait_currency_code,omitempty"`
	NetAmount                       float64 `protobuf:"fixed64,23,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	NaCodeListVersion               string  `protobuf:"bytes,24,opt,name=na_code_list_version,json=naCodeListVersion,proto3" json:"na_code_list_version,omitempty"`
	NaCurrencyCode                  string  `protobuf:"bytes,25,opt,name=na_currency_code,json=naCurrencyCode,proto3" json:"na_currency_code,omitempty"`
	NetPrice                        float64 `protobuf:"fixed64,26,opt,name=net_price,json=netPrice,proto3" json:"net_price,omitempty"`
	NpCodeListVersion               string  `protobuf:"bytes,27,opt,name=np_code_list_version,json=npCodeListVersion,proto3" json:"np_code_list_version,omitempty"`
	NpCurrencyCode                  string  `protobuf:"bytes,28,opt,name=np_currency_code,json=npCurrencyCode,proto3" json:"np_currency_code,omitempty"`
	OrderInstructionCode            string  `protobuf:"bytes,29,opt,name=order_instruction_code,json=orderInstructionCode,proto3" json:"order_instruction_code,omitempty"`
	OrderLineItemInstructionCode    string  `protobuf:"bytes,30,opt,name=order_line_item_instruction_code,json=orderLineItemInstructionCode,proto3" json:"order_line_item_instruction_code,omitempty"`
	OrderLineItemPriority           string  `protobuf:"bytes,31,opt,name=order_line_item_priority,json=orderLineItemPriority,proto3" json:"order_line_item_priority,omitempty"`
	ParentLineItemNumber            uint32  `protobuf:"varint,32,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	RecommendedRetailPrice          float64 `protobuf:"fixed64,33,opt,name=recommended_retail_price,json=recommendedRetailPrice,proto3" json:"recommended_retail_price,omitempty"`
	RequestedQuantity               float64 `protobuf:"fixed64,34,opt,name=requested_quantity,json=requestedQuantity,proto3" json:"requested_quantity,omitempty"`
	RqMeasurementUnitCode           string  `protobuf:"bytes,35,opt,name=rq_measurement_unit_code,json=rqMeasurementUnitCode,proto3" json:"rq_measurement_unit_code,omitempty"`
	RqCodeListVersion               string  `protobuf:"bytes,36,opt,name=rq_code_list_version,json=rqCodeListVersion,proto3" json:"rq_code_list_version,omitempty"`
	ReturnReasonCode                string  `protobuf:"bytes,37,opt,name=return_reason_code,json=returnReasonCode,proto3" json:"return_reason_code,omitempty"`
	Contract                        uint32  `protobuf:"varint,38,opt,name=contract,proto3" json:"contract,omitempty"`
	CustomerDocumentReference       uint32  `protobuf:"varint,39,opt,name=customer_document_reference,json=customerDocumentReference,proto3" json:"customer_document_reference,omitempty"`
	DeliveryDateAccordingToSchedule uint32  `protobuf:"varint,40,opt,name=delivery_date_according_to_schedule,json=deliveryDateAccordingToSchedule,proto3" json:"delivery_date_according_to_schedule,omitempty"`
	DespatchAdvice                  uint32  `protobuf:"varint,41,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
	MaterialSpecification           uint32  `protobuf:"varint,42,opt,name=material_specification,json=materialSpecification,proto3" json:"material_specification,omitempty"`
	OrderLineItemContact            uint32  `protobuf:"varint,43,opt,name=order_line_item_contact,json=orderLineItemContact,proto3" json:"order_line_item_contact,omitempty"`
	PreferredManufacturer           uint32  `protobuf:"varint,44,opt,name=preferred_manufacturer,json=preferredManufacturer,proto3" json:"preferred_manufacturer,omitempty"`
	PromotionalDeal                 uint32  `protobuf:"varint,45,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseConditions              uint32  `protobuf:"varint,46,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	ReturnableAssetIdentification   uint32  `protobuf:"varint,47,opt,name=returnable_asset_identification,json=returnableAssetIdentification,proto3" json:"returnable_asset_identification,omitempty"`
	OrderId                         uint32  `protobuf:"varint,48,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *OrderLineItemD) Reset() {
	*x = OrderLineItemD{}
	mi := &file_order_v1_order_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderLineItemD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLineItemD) ProtoMessage() {}

func (x *OrderLineItemD) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLineItemD.ProtoReflect.Descriptor instead.
func (*OrderLineItemD) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{16}
}

func (x *OrderLineItemD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderLineItemD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *OrderLineItemD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *OrderLineItemD) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *OrderLineItemD) GetFreeGoodsQuantity() float64 {
	if x != nil {
		return x.FreeGoodsQuantity
	}
	return 0
}

func (x *OrderLineItemD) GetFgqMeasurementUnitCode() string {
	if x != nil {
		return x.FgqMeasurementUnitCode
	}
	return ""
}

func (x *OrderLineItemD) GetFgqCodeListVersion() string {
	if x != nil {
		return x.FgqCodeListVersion
	}
	return ""
}

func (x *OrderLineItemD) GetItemPriceBaseQuantity() float64 {
	if x != nil {
		return x.ItemPriceBaseQuantity
	}
	return 0
}

func (x *OrderLineItemD) GetIpbqMeasurementUnitCode() string {
	if x != nil {
		return x.IpbqMeasurementUnitCode
	}
	return ""
}

func (x *OrderLineItemD) GetIpbqCodeListVersion() string {
	if x != nil {
		return x.IpbqCodeListVersion
	}
	return ""
}

func (x *OrderLineItemD) GetItemSourceCode() string {
	if x != nil {
		return x.ItemSourceCode
	}
	return ""
}

func (x *OrderLineItemD) GetLineItemActionCode() string {
	if x != nil {
		return x.LineItemActionCode
	}
	return ""
}

func (x *OrderLineItemD) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *OrderLineItemD) GetListPrice() float64 {
	if x != nil {
		return x.ListPrice
	}
	return 0
}

func (x *OrderLineItemD) GetLpCodeListVersion() string {
	if x != nil {
		return x.LpCodeListVersion
	}
	return ""
}

func (x *OrderLineItemD) GetLpCurrencyCode() string {
	if x != nil {
		return x.LpCurrencyCode
	}
	return ""
}

func (x *OrderLineItemD) GetMonetaryAmountExcludingTaxes() float64 {
	if x != nil {
		return x.MonetaryAmountExcludingTaxes
	}
	return 0
}

func (x *OrderLineItemD) GetMaetCodeListVersion() string {
	if x != nil {
		return x.MaetCodeListVersion
	}
	return ""
}

func (x *OrderLineItemD) GetMaetCurrencyCode() string {
	if x != nil {
		return x.MaetCurrencyCode
	}
	return ""
}

func (x *OrderLineItemD) GetMonetaryAmountIncludingTaxes() float64 {
	if x != nil {
		return x.MonetaryAmountIncludingTaxes
	}
	return 0
}

func (x *OrderLineItemD) GetMaitCodeListVersion() string {
	if x != nil {
		return x.MaitCodeListVersion
	}
	return ""
}

func (x *OrderLineItemD) GetMaitCurrencyCode() string {
	if x != nil {
		return x.MaitCurrencyCode
	}
	return ""
}

func (x *OrderLineItemD) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *OrderLineItemD) GetNaCodeListVersion() string {
	if x != nil {
		return x.NaCodeListVersion
	}
	return ""
}

func (x *OrderLineItemD) GetNaCurrencyCode() string {
	if x != nil {
		return x.NaCurrencyCode
	}
	return ""
}

func (x *OrderLineItemD) GetNetPrice() float64 {
	if x != nil {
		return x.NetPrice
	}
	return 0
}

func (x *OrderLineItemD) GetNpCodeListVersion() string {
	if x != nil {
		return x.NpCodeListVersion
	}
	return ""
}

func (x *OrderLineItemD) GetNpCurrencyCode() string {
	if x != nil {
		return x.NpCurrencyCode
	}
	return ""
}

func (x *OrderLineItemD) GetOrderInstructionCode() string {
	if x != nil {
		return x.OrderInstructionCode
	}
	return ""
}

func (x *OrderLineItemD) GetOrderLineItemInstructionCode() string {
	if x != nil {
		return x.OrderLineItemInstructionCode
	}
	return ""
}

func (x *OrderLineItemD) GetOrderLineItemPriority() string {
	if x != nil {
		return x.OrderLineItemPriority
	}
	return ""
}

func (x *OrderLineItemD) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *OrderLineItemD) GetRecommendedRetailPrice() float64 {
	if x != nil {
		return x.RecommendedRetailPrice
	}
	return 0
}

func (x *OrderLineItemD) GetRequestedQuantity() float64 {
	if x != nil {
		return x.RequestedQuantity
	}
	return 0
}

func (x *OrderLineItemD) GetRqMeasurementUnitCode() string {
	if x != nil {
		return x.RqMeasurementUnitCode
	}
	return ""
}

func (x *OrderLineItemD) GetRqCodeListVersion() string {
	if x != nil {
		return x.RqCodeListVersion
	}
	return ""
}

func (x *OrderLineItemD) GetReturnReasonCode() string {
	if x != nil {
		return x.ReturnReasonCode
	}
	return ""
}

func (x *OrderLineItemD) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *OrderLineItemD) GetCustomerDocumentReference() uint32 {
	if x != nil {
		return x.CustomerDocumentReference
	}
	return 0
}

func (x *OrderLineItemD) GetDeliveryDateAccordingToSchedule() uint32 {
	if x != nil {
		return x.DeliveryDateAccordingToSchedule
	}
	return 0
}

func (x *OrderLineItemD) GetDespatchAdvice() uint32 {
	if x != nil {
		return x.DespatchAdvice
	}
	return 0
}

func (x *OrderLineItemD) GetMaterialSpecification() uint32 {
	if x != nil {
		return x.MaterialSpecification
	}
	return 0
}

func (x *OrderLineItemD) GetOrderLineItemContact() uint32 {
	if x != nil {
		return x.OrderLineItemContact
	}
	return 0
}

func (x *OrderLineItemD) GetPreferredManufacturer() uint32 {
	if x != nil {
		return x.PreferredManufacturer
	}
	return 0
}

func (x *OrderLineItemD) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *OrderLineItemD) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *OrderLineItemD) GetReturnableAssetIdentification() uint32 {
	if x != nil {
		return x.ReturnableAssetIdentification
	}
	return 0
}

func (x *OrderLineItemD) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type OrderLineItemT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestDeliveryDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=latest_delivery_date,json=latestDeliveryDate,proto3" json:"latest_delivery_date,omitempty"`
}

func (x *OrderLineItemT) Reset() {
	*x = OrderLineItemT{}
	mi := &file_order_v1_order_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderLineItemT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLineItemT) ProtoMessage() {}

func (x *OrderLineItemT) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLineItemT.ProtoReflect.Descriptor instead.
func (*OrderLineItemT) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{17}
}

func (x *OrderLineItemT) GetLatestDeliveryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestDeliveryDate
	}
	return nil
}

type GetOrderLineItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetOrderLineItemsRequest) Reset() {
	*x = GetOrderLineItemsRequest{}
	mi := &file_order_v1_order_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderLineItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderLineItemsRequest) ProtoMessage() {}

func (x *GetOrderLineItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderLineItemsRequest.ProtoReflect.Descriptor instead.
func (*GetOrderLineItemsRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{18}
}

func (x *GetOrderLineItemsRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetOrderLineItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderLineItems []*OrderLineItem `protobuf:"bytes,1,rep,name=order_line_items,json=orderLineItems,proto3" json:"order_line_items,omitempty"`
}

func (x *GetOrderLineItemsResponse) Reset() {
	*x = GetOrderLineItemsResponse{}
	mi := &file_order_v1_order_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderLineItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderLineItemsResponse) ProtoMessage() {}

func (x *GetOrderLineItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderLineItemsResponse.ProtoReflect.Descriptor instead.
func (*GetOrderLineItemsResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{19}
}

func (x *GetOrderLineItemsResponse) GetOrderLineItems() []*OrderLineItem {
	if x != nil {
		return x.OrderLineItems
	}
	return nil
}

type OrderLineItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderLineItems []*OrderLineItem `protobuf:"bytes,1,rep,name=order_line_items,json=orderLineItems,proto3" json:"order_line_items,omitempty"`
}

func (x *OrderLineItems) Reset() {
	*x = OrderLineItems{}
	mi := &file_order_v1_order_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderLineItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLineItems) ProtoMessage() {}

func (x *OrderLineItems) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLineItems.ProtoReflect.Descriptor instead.
func (*OrderLineItems) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{20}
}

func (x *OrderLineItems) GetOrderLineItems() []*OrderLineItem {
	if x != nil {
		return x.OrderLineItems
	}
	return nil
}

type CreateOrderLineItemDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedQuantity     float64 `protobuf:"fixed64,1,opt,name=requested_quantity,json=requestedQuantity,proto3" json:"requested_quantity,omitempty"`
	RqMeasurementUnitCode string  `protobuf:"bytes,2,opt,name=rq_measurement_unit_code,json=rqMeasurementUnitCode,proto3" json:"rq_measurement_unit_code,omitempty"`
	RqCodeListVersion     string  `protobuf:"bytes,3,opt,name=rq_code_list_version,json=rqCodeListVersion,proto3" json:"rq_code_list_version,omitempty"`
	OrderLineItemId       uint32  `protobuf:"varint,4,opt,name=order_line_item_id,json=orderLineItemId,proto3" json:"order_line_item_id,omitempty"`
	UserId                string  `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string  `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string  `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateOrderLineItemDetailRequest) Reset() {
	*x = CreateOrderLineItemDetailRequest{}
	mi := &file_order_v1_order_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderLineItemDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderLineItemDetailRequest) ProtoMessage() {}

func (x *CreateOrderLineItemDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderLineItemDetailRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderLineItemDetailRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{21}
}

func (x *CreateOrderLineItemDetailRequest) GetRequestedQuantity() float64 {
	if x != nil {
		return x.RequestedQuantity
	}
	return 0
}

func (x *CreateOrderLineItemDetailRequest) GetRqMeasurementUnitCode() string {
	if x != nil {
		return x.RqMeasurementUnitCode
	}
	return ""
}

func (x *CreateOrderLineItemDetailRequest) GetRqCodeListVersion() string {
	if x != nil {
		return x.RqCodeListVersion
	}
	return ""
}

func (x *CreateOrderLineItemDetailRequest) GetOrderLineItemId() uint32 {
	if x != nil {
		return x.OrderLineItemId
	}
	return 0
}

func (x *CreateOrderLineItemDetailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOrderLineItemDetailRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOrderLineItemDetailRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateOrderLineItemDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderLineItemDetail *OrderLineItemDetail `protobuf:"bytes,1,opt,name=order_line_item_detail,json=orderLineItemDetail,proto3" json:"order_line_item_detail,omitempty"`
}

func (x *CreateOrderLineItemDetailResponse) Reset() {
	*x = CreateOrderLineItemDetailResponse{}
	mi := &file_order_v1_order_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderLineItemDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderLineItemDetailResponse) ProtoMessage() {}

func (x *CreateOrderLineItemDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderLineItemDetailResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderLineItemDetailResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{22}
}

func (x *CreateOrderLineItemDetailResponse) GetOrderLineItemDetail() *OrderLineItemDetail {
	if x != nil {
		return x.OrderLineItemDetail
	}
	return nil
}

type OrderLineItemDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedQuantity     float64 `protobuf:"fixed64,1,opt,name=requested_quantity,json=requestedQuantity,proto3" json:"requested_quantity,omitempty"`
	RqMeasurementUnitCode string  `protobuf:"bytes,2,opt,name=rq_measurement_unit_code,json=rqMeasurementUnitCode,proto3" json:"rq_measurement_unit_code,omitempty"`
	RqCodeListVersion     string  `protobuf:"bytes,3,opt,name=rq_code_list_version,json=rqCodeListVersion,proto3" json:"rq_code_list_version,omitempty"`
	OrderLineItemId       uint32  `protobuf:"varint,4,opt,name=order_line_item_id,json=orderLineItemId,proto3" json:"order_line_item_id,omitempty"`
}

func (x *OrderLineItemDetail) Reset() {
	*x = OrderLineItemDetail{}
	mi := &file_order_v1_order_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderLineItemDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLineItemDetail) ProtoMessage() {}

func (x *OrderLineItemDetail) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLineItemDetail.ProtoReflect.Descriptor instead.
func (*OrderLineItemDetail) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{23}
}

func (x *OrderLineItemDetail) GetRequestedQuantity() float64 {
	if x != nil {
		return x.RequestedQuantity
	}
	return 0
}

func (x *OrderLineItemDetail) GetRqMeasurementUnitCode() string {
	if x != nil {
		return x.RqMeasurementUnitCode
	}
	return ""
}

func (x *OrderLineItemDetail) GetRqCodeListVersion() string {
	if x != nil {
		return x.RqCodeListVersion
	}
	return ""
}

func (x *OrderLineItemDetail) GetOrderLineItemId() uint32 {
	if x != nil {
		return x.OrderLineItemId
	}
	return 0
}

type CreateOrderLogisticalDateInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedDeliveryDateRangeBegin                    string `protobuf:"bytes,1,opt,name=requested_delivery_date_range_begin,json=requestedDeliveryDateRangeBegin,proto3" json:"requested_delivery_date_range_begin,omitempty"`
	RequestedDeliveryDateRangeEnd                      string `protobuf:"bytes,2,opt,name=requested_delivery_date_range_end,json=requestedDeliveryDateRangeEnd,proto3" json:"requested_delivery_date_range_end,omitempty"`
	RequestedDeliveryDateRangeAtUltimateConsigneeBegin string `protobuf:"bytes,3,opt,name=requested_delivery_date_range_at_ultimate_consignee_begin,json=requestedDeliveryDateRangeAtUltimateConsigneeBegin,proto3" json:"requested_delivery_date_range_at_ultimate_consignee_begin,omitempty"`
	RequestedDeliveryDateRangeAtUltimateConsigneeEnd   string `protobuf:"bytes,4,opt,name=requested_delivery_date_range_at_ultimate_consignee_end,json=requestedDeliveryDateRangeAtUltimateConsigneeEnd,proto3" json:"requested_delivery_date_range_at_ultimate_consignee_end,omitempty"`
	RequestedDeliveryDateTime                          string `protobuf:"bytes,5,opt,name=requested_delivery_date_time,json=requestedDeliveryDateTime,proto3" json:"requested_delivery_date_time,omitempty"`
	RequestedDeliveryDateTimeAtUltimateConsignee       string `protobuf:"bytes,6,opt,name=requested_delivery_date_time_at_ultimate_consignee,json=requestedDeliveryDateTimeAtUltimateConsignee,proto3" json:"requested_delivery_date_time_at_ultimate_consignee,omitempty"`
	RequestedPickUpDateTime                            string `protobuf:"bytes,7,opt,name=requested_pick_up_date_time,json=requestedPickUpDateTime,proto3" json:"requested_pick_up_date_time,omitempty"`
	RequestedShipDateRangeBegin                        string `protobuf:"bytes,8,opt,name=requested_ship_date_range_begin,json=requestedShipDateRangeBegin,proto3" json:"requested_ship_date_range_begin,omitempty"`
	RequestedShipDateRangeEnd                          string `protobuf:"bytes,9,opt,name=requested_ship_date_range_end,json=requestedShipDateRangeEnd,proto3" json:"requested_ship_date_range_end,omitempty"`
	RequestedShipDateTime                              string `protobuf:"bytes,10,opt,name=requested_ship_date_time,json=requestedShipDateTime,proto3" json:"requested_ship_date_time,omitempty"`
	OrderResponseId                                    uint32 `protobuf:"varint,11,opt,name=order_response_id,json=orderResponseId,proto3" json:"order_response_id,omitempty"`
	UserId                                             string `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                          string `protobuf:"bytes,13,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                          string `protobuf:"bytes,14,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateOrderLogisticalDateInformationRequest) Reset() {
	*x = CreateOrderLogisticalDateInformationRequest{}
	mi := &file_order_v1_order_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderLogisticalDateInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderLogisticalDateInformationRequest) ProtoMessage() {}

func (x *CreateOrderLogisticalDateInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderLogisticalDateInformationRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderLogisticalDateInformationRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{24}
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestedDeliveryDateRangeBegin() string {
	if x != nil {
		return x.RequestedDeliveryDateRangeBegin
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestedDeliveryDateRangeEnd() string {
	if x != nil {
		return x.RequestedDeliveryDateRangeEnd
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestedDeliveryDateRangeAtUltimateConsigneeBegin() string {
	if x != nil {
		return x.RequestedDeliveryDateRangeAtUltimateConsigneeBegin
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestedDeliveryDateRangeAtUltimateConsigneeEnd() string {
	if x != nil {
		return x.RequestedDeliveryDateRangeAtUltimateConsigneeEnd
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestedDeliveryDateTime() string {
	if x != nil {
		return x.RequestedDeliveryDateTime
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestedDeliveryDateTimeAtUltimateConsignee() string {
	if x != nil {
		return x.RequestedDeliveryDateTimeAtUltimateConsignee
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestedPickUpDateTime() string {
	if x != nil {
		return x.RequestedPickUpDateTime
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestedShipDateRangeBegin() string {
	if x != nil {
		return x.RequestedShipDateRangeBegin
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestedShipDateRangeEnd() string {
	if x != nil {
		return x.RequestedShipDateRangeEnd
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestedShipDateTime() string {
	if x != nil {
		return x.RequestedShipDateTime
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetOrderResponseId() uint32 {
	if x != nil {
		return x.OrderResponseId
	}
	return 0
}

func (x *CreateOrderLogisticalDateInformationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOrderLogisticalDateInformationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateOrderLogisticalDateInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderLogisticalDateInformation *OrderLogisticalDateInformation `protobuf:"bytes,1,opt,name=order_logistical_date_information,json=orderLogisticalDateInformation,proto3" json:"order_logistical_date_information,omitempty"`
}

func (x *CreateOrderLogisticalDateInformationResponse) Reset() {
	*x = CreateOrderLogisticalDateInformationResponse{}
	mi := &file_order_v1_order_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderLogisticalDateInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderLogisticalDateInformationResponse) ProtoMessage() {}

func (x *CreateOrderLogisticalDateInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderLogisticalDateInformationResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderLogisticalDateInformationResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{25}
}

func (x *CreateOrderLogisticalDateInformationResponse) GetOrderLogisticalDateInformation() *OrderLogisticalDateInformation {
	if x != nil {
		return x.OrderLogisticalDateInformation
	}
	return nil
}

type OrderLogisticalDateInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderLogisticalDateInformationD *OrderLogisticalDateInformationD `protobuf:"bytes,1,opt,name=order_logistical_date_information_d,json=orderLogisticalDateInformationD,proto3" json:"order_logistical_date_information_d,omitempty"`
	OrderLogisticalDateInformationT *OrderLogisticalDateInformationT `protobuf:"bytes,2,opt,name=order_logistical_date_information_t,json=orderLogisticalDateInformationT,proto3" json:"order_logistical_date_information_t,omitempty"`
}

func (x *OrderLogisticalDateInformation) Reset() {
	*x = OrderLogisticalDateInformation{}
	mi := &file_order_v1_order_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderLogisticalDateInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLogisticalDateInformation) ProtoMessage() {}

func (x *OrderLogisticalDateInformation) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLogisticalDateInformation.ProtoReflect.Descriptor instead.
func (*OrderLogisticalDateInformation) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{26}
}

func (x *OrderLogisticalDateInformation) GetOrderLogisticalDateInformationD() *OrderLogisticalDateInformationD {
	if x != nil {
		return x.OrderLogisticalDateInformationD
	}
	return nil
}

func (x *OrderLogisticalDateInformation) GetOrderLogisticalDateInformationT() *OrderLogisticalDateInformationT {
	if x != nil {
		return x.OrderLogisticalDateInformationT
	}
	return nil
}

type OrderLogisticalDateInformationD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderResponseId uint32 `protobuf:"varint,1,opt,name=order_response_id,json=orderResponseId,proto3" json:"order_response_id,omitempty"`
}

func (x *OrderLogisticalDateInformationD) Reset() {
	*x = OrderLogisticalDateInformationD{}
	mi := &file_order_v1_order_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderLogisticalDateInformationD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLogisticalDateInformationD) ProtoMessage() {}

func (x *OrderLogisticalDateInformationD) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLogisticalDateInformationD.ProtoReflect.Descriptor instead.
func (*OrderLogisticalDateInformationD) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{27}
}

func (x *OrderLogisticalDateInformationD) GetOrderResponseId() uint32 {
	if x != nil {
		return x.OrderResponseId
	}
	return 0
}

type OrderLogisticalDateInformationT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedDeliveryDateRangeBegin                    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=requested_delivery_date_range_begin,json=requestedDeliveryDateRangeBegin,proto3" json:"requested_delivery_date_range_begin,omitempty"`
	RequestedDeliveryDateRangeEnd                      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=requested_delivery_date_range_end,json=requestedDeliveryDateRangeEnd,proto3" json:"requested_delivery_date_range_end,omitempty"`
	RequestedDeliveryDateRangeAtUltimateConsigneeBegin *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=requested_delivery_date_range_at_ultimate_consignee_begin,json=requestedDeliveryDateRangeAtUltimateConsigneeBegin,proto3" json:"requested_delivery_date_range_at_ultimate_consignee_begin,omitempty"`
	RequestedDeliveryDateRangeAtUltimateConsigneeEnd   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=requested_delivery_date_range_at_ultimate_consignee_end,json=requestedDeliveryDateRangeAtUltimateConsigneeEnd,proto3" json:"requested_delivery_date_range_at_ultimate_consignee_end,omitempty"`
	RequestedDeliveryDateTime                          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=requested_delivery_date_time,json=requestedDeliveryDateTime,proto3" json:"requested_delivery_date_time,omitempty"`
	RequestedDeliveryDateTimeAtUltimateConsignee       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=requested_delivery_date_time_at_ultimate_consignee,json=requestedDeliveryDateTimeAtUltimateConsignee,proto3" json:"requested_delivery_date_time_at_ultimate_consignee,omitempty"`
	RequestedPickUpDateTime                            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=requested_pick_up_date_time,json=requestedPickUpDateTime,proto3" json:"requested_pick_up_date_time,omitempty"`
	RequestedShipDateRangeBegin                        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=requested_ship_date_range_begin,json=requestedShipDateRangeBegin,proto3" json:"requested_ship_date_range_begin,omitempty"`
	RequestedShipDateRangeEnd                          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=requested_ship_date_range_end,json=requestedShipDateRangeEnd,proto3" json:"requested_ship_date_range_end,omitempty"`
	RequestedShipDateTime                              *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=requested_ship_date_time,json=requestedShipDateTime,proto3" json:"requested_ship_date_time,omitempty"`
}

func (x *OrderLogisticalDateInformationT) Reset() {
	*x = OrderLogisticalDateInformationT{}
	mi := &file_order_v1_order_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderLogisticalDateInformationT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLogisticalDateInformationT) ProtoMessage() {}

func (x *OrderLogisticalDateInformationT) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLogisticalDateInformationT.ProtoReflect.Descriptor instead.
func (*OrderLogisticalDateInformationT) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{28}
}

func (x *OrderLogisticalDateInformationT) GetRequestedDeliveryDateRangeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDeliveryDateRangeBegin
	}
	return nil
}

func (x *OrderLogisticalDateInformationT) GetRequestedDeliveryDateRangeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDeliveryDateRangeEnd
	}
	return nil
}

func (x *OrderLogisticalDateInformationT) GetRequestedDeliveryDateRangeAtUltimateConsigneeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDeliveryDateRangeAtUltimateConsigneeBegin
	}
	return nil
}

func (x *OrderLogisticalDateInformationT) GetRequestedDeliveryDateRangeAtUltimateConsigneeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDeliveryDateRangeAtUltimateConsigneeEnd
	}
	return nil
}

func (x *OrderLogisticalDateInformationT) GetRequestedDeliveryDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDeliveryDateTime
	}
	return nil
}

func (x *OrderLogisticalDateInformationT) GetRequestedDeliveryDateTimeAtUltimateConsignee() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDeliveryDateTimeAtUltimateConsignee
	}
	return nil
}

func (x *OrderLogisticalDateInformationT) GetRequestedPickUpDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedPickUpDateTime
	}
	return nil
}

func (x *OrderLogisticalDateInformationT) GetRequestedShipDateRangeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedShipDateRangeBegin
	}
	return nil
}

func (x *OrderLogisticalDateInformationT) GetRequestedShipDateRangeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedShipDateRangeEnd
	}
	return nil
}

func (x *OrderLogisticalDateInformationT) GetRequestedShipDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedShipDateTime
	}
	return nil
}

type CreateOrderLogisticalInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommodityTypeCode         string `protobuf:"bytes,1,opt,name=commodity_type_code,json=commodityTypeCode,proto3" json:"commodity_type_code,omitempty"`
	ShipmentSplitMethodCode   string `protobuf:"bytes,2,opt,name=shipment_split_method_code,json=shipmentSplitMethodCode,proto3" json:"shipment_split_method_code,omitempty"`
	IntermediateDeliveryParty uint32 `protobuf:"varint,3,opt,name=intermediate_delivery_party,json=intermediateDeliveryParty,proto3" json:"intermediate_delivery_party,omitempty"`
	InventoryLocation         uint32 `protobuf:"varint,4,opt,name=inventory_location,json=inventoryLocation,proto3" json:"inventory_location,omitempty"`
	ShipFrom                  uint32 `protobuf:"varint,5,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	ShipTo                    uint32 `protobuf:"varint,6,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	UltimateConsignee         uint32 `protobuf:"varint,7,opt,name=ultimate_consignee,json=ultimateConsignee,proto3" json:"ultimate_consignee,omitempty"`
	OrderId                   uint32 `protobuf:"varint,8,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	UserId                    string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateOrderLogisticalInformationRequest) Reset() {
	*x = CreateOrderLogisticalInformationRequest{}
	mi := &file_order_v1_order_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderLogisticalInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderLogisticalInformationRequest) ProtoMessage() {}

func (x *CreateOrderLogisticalInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderLogisticalInformationRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderLogisticalInformationRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{29}
}

func (x *CreateOrderLogisticalInformationRequest) GetCommodityTypeCode() string {
	if x != nil {
		return x.CommodityTypeCode
	}
	return ""
}

func (x *CreateOrderLogisticalInformationRequest) GetShipmentSplitMethodCode() string {
	if x != nil {
		return x.ShipmentSplitMethodCode
	}
	return ""
}

func (x *CreateOrderLogisticalInformationRequest) GetIntermediateDeliveryParty() uint32 {
	if x != nil {
		return x.IntermediateDeliveryParty
	}
	return 0
}

func (x *CreateOrderLogisticalInformationRequest) GetInventoryLocation() uint32 {
	if x != nil {
		return x.InventoryLocation
	}
	return 0
}

func (x *CreateOrderLogisticalInformationRequest) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *CreateOrderLogisticalInformationRequest) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *CreateOrderLogisticalInformationRequest) GetUltimateConsignee() uint32 {
	if x != nil {
		return x.UltimateConsignee
	}
	return 0
}

func (x *CreateOrderLogisticalInformationRequest) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CreateOrderLogisticalInformationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOrderLogisticalInformationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOrderLogisticalInformationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateOrderLogisticalInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderLogisticalInformation *OrderLogisticalInformation `protobuf:"bytes,1,opt,name=order_logistical_information,json=orderLogisticalInformation,proto3" json:"order_logistical_information,omitempty"`
}

func (x *CreateOrderLogisticalInformationResponse) Reset() {
	*x = CreateOrderLogisticalInformationResponse{}
	mi := &file_order_v1_order_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderLogisticalInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderLogisticalInformationResponse) ProtoMessage() {}

func (x *CreateOrderLogisticalInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderLogisticalInformationResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderLogisticalInformationResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{30}
}

func (x *CreateOrderLogisticalInformationResponse) GetOrderLogisticalInformation() *OrderLogisticalInformation {
	if x != nil {
		return x.OrderLogisticalInformation
	}
	return nil
}

type OrderLogisticalInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommodityTypeCode         string `protobuf:"bytes,1,opt,name=commodity_type_code,json=commodityTypeCode,proto3" json:"commodity_type_code,omitempty"`
	ShipmentSplitMethodCode   string `protobuf:"bytes,2,opt,name=shipment_split_method_code,json=shipmentSplitMethodCode,proto3" json:"shipment_split_method_code,omitempty"`
	IntermediateDeliveryParty uint32 `protobuf:"varint,3,opt,name=intermediate_delivery_party,json=intermediateDeliveryParty,proto3" json:"intermediate_delivery_party,omitempty"`
	InventoryLocation         uint32 `protobuf:"varint,4,opt,name=inventory_location,json=inventoryLocation,proto3" json:"inventory_location,omitempty"`
	ShipFrom                  uint32 `protobuf:"varint,5,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	ShipTo                    uint32 `protobuf:"varint,6,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	UltimateConsignee         uint32 `protobuf:"varint,7,opt,name=ultimate_consignee,json=ultimateConsignee,proto3" json:"ultimate_consignee,omitempty"`
	OrderId                   uint32 `protobuf:"varint,8,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *OrderLogisticalInformation) Reset() {
	*x = OrderLogisticalInformation{}
	mi := &file_order_v1_order_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderLogisticalInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLogisticalInformation) ProtoMessage() {}

func (x *OrderLogisticalInformation) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_order_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLogisticalInformation.ProtoReflect.Descriptor instead.
func (*OrderLogisticalInformation) Descriptor() ([]byte, []int) {
	return file_order_v1_order_proto_rawDescGZIP(), []int{31}
}

func (x *OrderLogisticalInformation) GetCommodityTypeCode() string {
	if x != nil {
		return x.CommodityTypeCode
	}
	return ""
}

func (x *OrderLogisticalInformation) GetShipmentSplitMethodCode() string {
	if x != nil {
		return x.ShipmentSplitMethodCode
	}
	return ""
}

func (x *OrderLogisticalInformation) GetIntermediateDeliveryParty() uint32 {
	if x != nil {
		return x.IntermediateDeliveryParty
	}
	return 0
}

func (x *OrderLogisticalInformation) GetInventoryLocation() uint32 {
	if x != nil {
		return x.InventoryLocation
	}
	return 0
}

func (x *OrderLogisticalInformation) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *OrderLogisticalInformation) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *OrderLogisticalInformation) GetUltimateConsignee() uint32 {
	if x != nil {
		return x.UltimateConsignee
	}
	return 0
}

func (x *OrderLogisticalInformation) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

var File_order_v1_order_proto protoreflect.FileDescriptor

var file_order_v1_order_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x12, 0x29,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe5, 0x0a, 0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x64, 0x0a, 0x2f, 0x69, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x2b, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x44, 0x0a, 0x20, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x78, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x64,
	0x75, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x72, 0x65, 0x65, 0x4f, 0x66, 0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x54, 0x61,
	0x78, 0x44, 0x75, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a,
	0x25, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65,
	0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6d, 0x61, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6d, 0x61, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6d,
	0x61, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x74, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x74, 0x61, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x74, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x54,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x5f, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x61, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc0, 0x01,
	0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x12, 0x68, 0x0a, 0x23, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x1f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xdf, 0x0c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x2f, 0x69, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x2b, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x20, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x65, 0x78, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x72, 0x65, 0x65, 0x4f, 0x66, 0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x54, 0x61, 0x78, 0x44,
	0x75, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x78, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x17, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x74, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f,
	0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61,
	0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6d, 0x61, 0x69,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x74, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x74, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x74,
	0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x74, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x74,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x5f, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x23, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x6c,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x3c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x5d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22,
	0x87, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xde, 0x06, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61,
	0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74,
	0x6d, 0x61, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6d, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6d, 0x61, 0x69, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x74, 0x61, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x74, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x74, 0x61,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x74, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xf9, 0x12, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66,
	0x72, 0x65, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x19, 0x66, 0x67, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x67, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x66,
	0x67, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x67, 0x71, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x15, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x70, 0x62, 0x71, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x70, 0x62,
	0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x70, 0x62, 0x71, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x62, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x6c, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x70, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x6f,
	0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1c, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x6d,
	0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d,
	0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61,
	0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x6e, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x6e, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x70, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6e, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37,
	0x0a, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x71, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x71, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x72, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x1f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x5e, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22,
	0x85, 0x02, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x43, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x43, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x52, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x12, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x66, 0x72, 0x65, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x67, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x67, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x66, 0x67, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x67, 0x71,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x70, 0x62, 0x71,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x70,
	0x62, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x70, 0x62, 0x71, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x62, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6c, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x70, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6d,
	0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x65, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c,
	0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x61, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x6e, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x6e, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x70, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x70, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6e, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x37, 0x0a, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x71, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x71, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x1b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x23,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x35, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x65, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x1f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x53, 0x0a, 0x0e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x41, 0x0a,
	0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xbf, 0x02, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x72, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x71, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x77, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xdb, 0x01, 0x0a, 0x13,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x72,
	0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x71, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xdc, 0x07, 0x0a, 0x2b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x23, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x75, 0x0a, 0x39, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x32, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x74, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x71, 0x0a, 0x37, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x30, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x74, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x32,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x5f,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x41, 0x74, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x2c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x21, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92,
	0x02, 0x0a, 0x1e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x77, 0x0a, 0x23, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x52, 0x1f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x77, 0x0a, 0x23, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x52, 0x1f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x22, 0x4d, 0x0a, 0x1f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x64, 0x22, 0xe8, 0x08, 0x0a, 0x1f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x12, 0x68, 0x0a, 0x23, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x64, 0x0a, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x39, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x32, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x74, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x37, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x30, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x74, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x5b, 0x0a, 0x1c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x32, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x55, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x58,
	0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x1f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x5c, 0x0a, 0x1d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x53, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdc, 0x03,
	0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a,
	0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x1c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xf8, 0x02, 0x0a, 0x1a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a,
	0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x2d, 0x0a,
	0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70,
	0x54, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x32, 0xda, 0x07, 0x0a,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x50, 0x6b, 0x12, 0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x74, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x95, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x67, 0x73, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_v1_order_proto_rawDescOnce sync.Once
	file_order_v1_order_proto_rawDescData = file_order_v1_order_proto_rawDesc
)

func file_order_v1_order_proto_rawDescGZIP() []byte {
	file_order_v1_order_proto_rawDescOnce.Do(func() {
		file_order_v1_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_v1_order_proto_rawDescData)
	})
	return file_order_v1_order_proto_rawDescData
}

var file_order_v1_order_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_order_v1_order_proto_goTypes = []any{
	(*Order)(nil),                                        // 0: order.v1.Order
	(*OrderD)(nil),                                       // 1: order.v1.OrderD
	(*OrderT)(nil),                                       // 2: order.v1.OrderT
	(*CreateOrderRequest)(nil),                           // 3: order.v1.CreateOrderRequest
	(*CreateOrderResponse)(nil),                          // 4: order.v1.CreateOrderResponse
	(*GetOrdersResponse)(nil),                            // 5: order.v1.GetOrdersResponse
	(*GetOrdersRequest)(nil),                             // 6: order.v1.GetOrdersRequest
	(*GetOrderRequest)(nil),                              // 7: order.v1.GetOrderRequest
	(*GetOrderResponse)(nil),                             // 8: order.v1.GetOrderResponse
	(*GetOrderByPkRequest)(nil),                          // 9: order.v1.GetOrderByPkRequest
	(*GetOrderByPkResponse)(nil),                         // 10: order.v1.GetOrderByPkResponse
	(*UpdateOrderRequest)(nil),                           // 11: order.v1.UpdateOrderRequest
	(*UpdateOrderResponse)(nil),                          // 12: order.v1.UpdateOrderResponse
	(*CreateOrderLineItemRequest)(nil),                   // 13: order.v1.CreateOrderLineItemRequest
	(*CreateOrderLineItemResponse)(nil),                  // 14: order.v1.CreateOrderLineItemResponse
	(*OrderLineItem)(nil),                                // 15: order.v1.OrderLineItem
	(*OrderLineItemD)(nil),                               // 16: order.v1.OrderLineItemD
	(*OrderLineItemT)(nil),                               // 17: order.v1.OrderLineItemT
	(*GetOrderLineItemsRequest)(nil),                     // 18: order.v1.GetOrderLineItemsRequest
	(*GetOrderLineItemsResponse)(nil),                    // 19: order.v1.GetOrderLineItemsResponse
	(*OrderLineItems)(nil),                               // 20: order.v1.OrderLineItems
	(*CreateOrderLineItemDetailRequest)(nil),             // 21: order.v1.CreateOrderLineItemDetailRequest
	(*CreateOrderLineItemDetailResponse)(nil),            // 22: order.v1.CreateOrderLineItemDetailResponse
	(*OrderLineItemDetail)(nil),                          // 23: order.v1.OrderLineItemDetail
	(*CreateOrderLogisticalDateInformationRequest)(nil),  // 24: order.v1.CreateOrderLogisticalDateInformationRequest
	(*CreateOrderLogisticalDateInformationResponse)(nil), // 25: order.v1.CreateOrderLogisticalDateInformationResponse
	(*OrderLogisticalDateInformation)(nil),               // 26: order.v1.OrderLogisticalDateInformation
	(*OrderLogisticalDateInformationD)(nil),              // 27: order.v1.OrderLogisticalDateInformationD
	(*OrderLogisticalDateInformationT)(nil),              // 28: order.v1.OrderLogisticalDateInformationT
	(*CreateOrderLogisticalInformationRequest)(nil),      // 29: order.v1.CreateOrderLogisticalInformationRequest
	(*CreateOrderLogisticalInformationResponse)(nil),     // 30: order.v1.CreateOrderLogisticalInformationResponse
	(*OrderLogisticalInformation)(nil),                   // 31: order.v1.OrderLogisticalInformation
	(*v1.CrUpdUser)(nil),                                 // 32: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                 // 33: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),                        // 34: google.protobuf.Timestamp
	(*v1.GetRequest)(nil),                                // 35: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                            // 36: common.v1.GetByIdRequest
}
var file_order_v1_order_proto_depIdxs = []int32{
	1,  // 0: order.v1.Order.order_d:type_name -> order.v1.OrderD
	2,  // 1: order.v1.Order.order_t:type_name -> order.v1.OrderT
	32, // 2: order.v1.Order.cr_upd_user:type_name -> common.v1.CrUpdUser
	33, // 3: order.v1.Order.cr_upd_time:type_name -> common.v1.CrUpdTime
	34, // 4: order.v1.OrderT.delivery_date_according_to_schedule:type_name -> google.protobuf.Timestamp
	34, // 5: order.v1.OrderT.latest_delivery_date:type_name -> google.protobuf.Timestamp
	13, // 6: order.v1.CreateOrderRequest.order_line_items:type_name -> order.v1.CreateOrderLineItemRequest
	0,  // 7: order.v1.CreateOrderResponse.order:type_name -> order.v1.Order
	0,  // 8: order.v1.GetOrdersResponse.orders:type_name -> order.v1.Order
	35, // 9: order.v1.GetOrderRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 10: order.v1.GetOrderResponse.order:type_name -> order.v1.Order
	36, // 11: order.v1.GetOrderByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 12: order.v1.GetOrderByPkResponse.order:type_name -> order.v1.Order
	15, // 13: order.v1.CreateOrderLineItemResponse.order_line_item:type_name -> order.v1.OrderLineItem
	16, // 14: order.v1.OrderLineItem.order_line_item_d:type_name -> order.v1.OrderLineItemD
	17, // 15: order.v1.OrderLineItem.order_line_item_t:type_name -> order.v1.OrderLineItemT
	32, // 16: order.v1.OrderLineItem.cr_upd_user:type_name -> common.v1.CrUpdUser
	33, // 17: order.v1.OrderLineItem.cr_upd_time:type_name -> common.v1.CrUpdTime
	34, // 18: order.v1.OrderLineItemT.latest_delivery_date:type_name -> google.protobuf.Timestamp
	35, // 19: order.v1.GetOrderLineItemsRequest.get_request:type_name -> common.v1.GetRequest
	15, // 20: order.v1.GetOrderLineItemsResponse.order_line_items:type_name -> order.v1.OrderLineItem
	15, // 21: order.v1.OrderLineItems.order_line_items:type_name -> order.v1.OrderLineItem
	23, // 22: order.v1.CreateOrderLineItemDetailResponse.order_line_item_detail:type_name -> order.v1.OrderLineItemDetail
	26, // 23: order.v1.CreateOrderLogisticalDateInformationResponse.order_logistical_date_information:type_name -> order.v1.OrderLogisticalDateInformation
	27, // 24: order.v1.OrderLogisticalDateInformation.order_logistical_date_information_d:type_name -> order.v1.OrderLogisticalDateInformationD
	28, // 25: order.v1.OrderLogisticalDateInformation.order_logistical_date_information_t:type_name -> order.v1.OrderLogisticalDateInformationT
	34, // 26: order.v1.OrderLogisticalDateInformationT.requested_delivery_date_range_begin:type_name -> google.protobuf.Timestamp
	34, // 27: order.v1.OrderLogisticalDateInformationT.requested_delivery_date_range_end:type_name -> google.protobuf.Timestamp
	34, // 28: order.v1.OrderLogisticalDateInformationT.requested_delivery_date_range_at_ultimate_consignee_begin:type_name -> google.protobuf.Timestamp
	34, // 29: order.v1.OrderLogisticalDateInformationT.requested_delivery_date_range_at_ultimate_consignee_end:type_name -> google.protobuf.Timestamp
	34, // 30: order.v1.OrderLogisticalDateInformationT.requested_delivery_date_time:type_name -> google.protobuf.Timestamp
	34, // 31: order.v1.OrderLogisticalDateInformationT.requested_delivery_date_time_at_ultimate_consignee:type_name -> google.protobuf.Timestamp
	34, // 32: order.v1.OrderLogisticalDateInformationT.requested_pick_up_date_time:type_name -> google.protobuf.Timestamp
	34, // 33: order.v1.OrderLogisticalDateInformationT.requested_ship_date_range_begin:type_name -> google.protobuf.Timestamp
	34, // 34: order.v1.OrderLogisticalDateInformationT.requested_ship_date_range_end:type_name -> google.protobuf.Timestamp
	34, // 35: order.v1.OrderLogisticalDateInformationT.requested_ship_date_time:type_name -> google.protobuf.Timestamp
	31, // 36: order.v1.CreateOrderLogisticalInformationResponse.order_logistical_information:type_name -> order.v1.OrderLogisticalInformation
	3,  // 37: order.v1.OrderService.CreateOrder:input_type -> order.v1.CreateOrderRequest
	6,  // 38: order.v1.OrderService.GetOrders:input_type -> order.v1.GetOrdersRequest
	7,  // 39: order.v1.OrderService.GetOrder:input_type -> order.v1.GetOrderRequest
	9,  // 40: order.v1.OrderService.GetOrderByPk:input_type -> order.v1.GetOrderByPkRequest
	11, // 41: order.v1.OrderService.UpdateOrder:input_type -> order.v1.UpdateOrderRequest
	13, // 42: order.v1.OrderService.CreateOrderLineItem:input_type -> order.v1.CreateOrderLineItemRequest
	18, // 43: order.v1.OrderService.GetOrderLineItems:input_type -> order.v1.GetOrderLineItemsRequest
	21, // 44: order.v1.OrderService.CreateOrderLineItemDetail:input_type -> order.v1.CreateOrderLineItemDetailRequest
	29, // 45: order.v1.OrderService.CreateOrderLogisticalInformation:input_type -> order.v1.CreateOrderLogisticalInformationRequest
	24, // 46: order.v1.OrderService.CreateOrderLogisticalDateInformation:input_type -> order.v1.CreateOrderLogisticalDateInformationRequest
	4,  // 47: order.v1.OrderService.CreateOrder:output_type -> order.v1.CreateOrderResponse
	5,  // 48: order.v1.OrderService.GetOrders:output_type -> order.v1.GetOrdersResponse
	8,  // 49: order.v1.OrderService.GetOrder:output_type -> order.v1.GetOrderResponse
	10, // 50: order.v1.OrderService.GetOrderByPk:output_type -> order.v1.GetOrderByPkResponse
	12, // 51: order.v1.OrderService.UpdateOrder:output_type -> order.v1.UpdateOrderResponse
	14, // 52: order.v1.OrderService.CreateOrderLineItem:output_type -> order.v1.CreateOrderLineItemResponse
	19, // 53: order.v1.OrderService.GetOrderLineItems:output_type -> order.v1.GetOrderLineItemsResponse
	22, // 54: order.v1.OrderService.CreateOrderLineItemDetail:output_type -> order.v1.CreateOrderLineItemDetailResponse
	30, // 55: order.v1.OrderService.CreateOrderLogisticalInformation:output_type -> order.v1.CreateOrderLogisticalInformationResponse
	25, // 56: order.v1.OrderService.CreateOrderLogisticalDateInformation:output_type -> order.v1.CreateOrderLogisticalDateInformationResponse
	47, // [47:57] is the sub-list for method output_type
	37, // [37:47] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_order_v1_order_proto_init() }
func file_order_v1_order_proto_init() {
	if File_order_v1_order_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_v1_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_order_v1_order_proto_goTypes,
		DependencyIndexes: file_order_v1_order_proto_depIdxs,
		MessageInfos:      file_order_v1_order_proto_msgTypes,
	}.Build()
	File_order_v1_order_proto = out.File
	file_order_v1_order_proto_rawDesc = nil
	file_order_v1_order_proto_goTypes = nil
	file_order_v1_order_proto_depIdxs = nil
}
