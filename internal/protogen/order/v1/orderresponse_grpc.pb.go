// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: order/v1/orderresponse.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderResponseService_CreateOrderResponse_FullMethodName               = "/order.v1.OrderResponseService/CreateOrderResponse"
	OrderResponseService_GetOrderResponses_FullMethodName                 = "/order.v1.OrderResponseService/GetOrderResponses"
	OrderResponseService_GetOrderResponse_FullMethodName                  = "/order.v1.OrderResponseService/GetOrderResponse"
	OrderResponseService_GetOrderResponseByPk_FullMethodName              = "/order.v1.OrderResponseService/GetOrderResponseByPk"
	OrderResponseService_UpdateOrderResponse_FullMethodName               = "/order.v1.OrderResponseService/UpdateOrderResponse"
	OrderResponseService_CreateOrderResponseLineItem_FullMethodName       = "/order.v1.OrderResponseService/CreateOrderResponseLineItem"
	OrderResponseService_GetOrderResponseLineItems_FullMethodName         = "/order.v1.OrderResponseService/GetOrderResponseLineItems"
	OrderResponseService_CreateOrderResponseLineItemDetail_FullMethodName = "/order.v1.OrderResponseService/CreateOrderResponseLineItemDetail"
)

// OrderResponseServiceClient is the client API for OrderResponseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The OrderResponseService service definition.
type OrderResponseServiceClient interface {
	CreateOrderResponse(ctx context.Context, in *CreateOrderResponseRequest, opts ...grpc.CallOption) (*CreateOrderResponseResponse, error)
	GetOrderResponses(ctx context.Context, in *GetOrderResponsesRequest, opts ...grpc.CallOption) (*GetOrderResponsesResponse, error)
	GetOrderResponse(ctx context.Context, in *GetOrderResponseRequest, opts ...grpc.CallOption) (*GetOrderResponseResponse, error)
	GetOrderResponseByPk(ctx context.Context, in *GetOrderResponseByPkRequest, opts ...grpc.CallOption) (*GetOrderResponseByPkResponse, error)
	UpdateOrderResponse(ctx context.Context, in *UpdateOrderResponseRequest, opts ...grpc.CallOption) (*UpdateOrderResponseResponse, error)
	CreateOrderResponseLineItem(ctx context.Context, in *CreateOrderResponseLineItemRequest, opts ...grpc.CallOption) (*CreateOrderResponseLineItemResponse, error)
	GetOrderResponseLineItems(ctx context.Context, in *GetOrderResponseLineItemsRequest, opts ...grpc.CallOption) (*GetOrderResponseLineItemsResponse, error)
	CreateOrderResponseLineItemDetail(ctx context.Context, in *CreateOrderResponseLineItemDetailRequest, opts ...grpc.CallOption) (*CreateOrderResponseLineItemDetailResponse, error)
}

type orderResponseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderResponseServiceClient(cc grpc.ClientConnInterface) OrderResponseServiceClient {
	return &orderResponseServiceClient{cc}
}

func (c *orderResponseServiceClient) CreateOrderResponse(ctx context.Context, in *CreateOrderResponseRequest, opts ...grpc.CallOption) (*CreateOrderResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponseResponse)
	err := c.cc.Invoke(ctx, OrderResponseService_CreateOrderResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderResponseServiceClient) GetOrderResponses(ctx context.Context, in *GetOrderResponsesRequest, opts ...grpc.CallOption) (*GetOrderResponsesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponsesResponse)
	err := c.cc.Invoke(ctx, OrderResponseService_GetOrderResponses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderResponseServiceClient) GetOrderResponse(ctx context.Context, in *GetOrderResponseRequest, opts ...grpc.CallOption) (*GetOrderResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponseResponse)
	err := c.cc.Invoke(ctx, OrderResponseService_GetOrderResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderResponseServiceClient) GetOrderResponseByPk(ctx context.Context, in *GetOrderResponseByPkRequest, opts ...grpc.CallOption) (*GetOrderResponseByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponseByPkResponse)
	err := c.cc.Invoke(ctx, OrderResponseService_GetOrderResponseByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderResponseServiceClient) UpdateOrderResponse(ctx context.Context, in *UpdateOrderResponseRequest, opts ...grpc.CallOption) (*UpdateOrderResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderResponseResponse)
	err := c.cc.Invoke(ctx, OrderResponseService_UpdateOrderResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderResponseServiceClient) CreateOrderResponseLineItem(ctx context.Context, in *CreateOrderResponseLineItemRequest, opts ...grpc.CallOption) (*CreateOrderResponseLineItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponseLineItemResponse)
	err := c.cc.Invoke(ctx, OrderResponseService_CreateOrderResponseLineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderResponseServiceClient) GetOrderResponseLineItems(ctx context.Context, in *GetOrderResponseLineItemsRequest, opts ...grpc.CallOption) (*GetOrderResponseLineItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponseLineItemsResponse)
	err := c.cc.Invoke(ctx, OrderResponseService_GetOrderResponseLineItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderResponseServiceClient) CreateOrderResponseLineItemDetail(ctx context.Context, in *CreateOrderResponseLineItemDetailRequest, opts ...grpc.CallOption) (*CreateOrderResponseLineItemDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponseLineItemDetailResponse)
	err := c.cc.Invoke(ctx, OrderResponseService_CreateOrderResponseLineItemDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderResponseServiceServer is the server API for OrderResponseService service.
// All implementations must embed UnimplementedOrderResponseServiceServer
// for forward compatibility.
//
// The OrderResponseService service definition.
type OrderResponseServiceServer interface {
	CreateOrderResponse(context.Context, *CreateOrderResponseRequest) (*CreateOrderResponseResponse, error)
	GetOrderResponses(context.Context, *GetOrderResponsesRequest) (*GetOrderResponsesResponse, error)
	GetOrderResponse(context.Context, *GetOrderResponseRequest) (*GetOrderResponseResponse, error)
	GetOrderResponseByPk(context.Context, *GetOrderResponseByPkRequest) (*GetOrderResponseByPkResponse, error)
	UpdateOrderResponse(context.Context, *UpdateOrderResponseRequest) (*UpdateOrderResponseResponse, error)
	CreateOrderResponseLineItem(context.Context, *CreateOrderResponseLineItemRequest) (*CreateOrderResponseLineItemResponse, error)
	GetOrderResponseLineItems(context.Context, *GetOrderResponseLineItemsRequest) (*GetOrderResponseLineItemsResponse, error)
	CreateOrderResponseLineItemDetail(context.Context, *CreateOrderResponseLineItemDetailRequest) (*CreateOrderResponseLineItemDetailResponse, error)
	mustEmbedUnimplementedOrderResponseServiceServer()
}

// UnimplementedOrderResponseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderResponseServiceServer struct{}

func (UnimplementedOrderResponseServiceServer) CreateOrderResponse(context.Context, *CreateOrderResponseRequest) (*CreateOrderResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderResponse not implemented")
}
func (UnimplementedOrderResponseServiceServer) GetOrderResponses(context.Context, *GetOrderResponsesRequest) (*GetOrderResponsesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderResponses not implemented")
}
func (UnimplementedOrderResponseServiceServer) GetOrderResponse(context.Context, *GetOrderResponseRequest) (*GetOrderResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderResponse not implemented")
}
func (UnimplementedOrderResponseServiceServer) GetOrderResponseByPk(context.Context, *GetOrderResponseByPkRequest) (*GetOrderResponseByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderResponseByPk not implemented")
}
func (UnimplementedOrderResponseServiceServer) UpdateOrderResponse(context.Context, *UpdateOrderResponseRequest) (*UpdateOrderResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderResponse not implemented")
}
func (UnimplementedOrderResponseServiceServer) CreateOrderResponseLineItem(context.Context, *CreateOrderResponseLineItemRequest) (*CreateOrderResponseLineItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderResponseLineItem not implemented")
}
func (UnimplementedOrderResponseServiceServer) GetOrderResponseLineItems(context.Context, *GetOrderResponseLineItemsRequest) (*GetOrderResponseLineItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderResponseLineItems not implemented")
}
func (UnimplementedOrderResponseServiceServer) CreateOrderResponseLineItemDetail(context.Context, *CreateOrderResponseLineItemDetailRequest) (*CreateOrderResponseLineItemDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderResponseLineItemDetail not implemented")
}
func (UnimplementedOrderResponseServiceServer) mustEmbedUnimplementedOrderResponseServiceServer() {}
func (UnimplementedOrderResponseServiceServer) testEmbeddedByValue()                              {}

// UnsafeOrderResponseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderResponseServiceServer will
// result in compilation errors.
type UnsafeOrderResponseServiceServer interface {
	mustEmbedUnimplementedOrderResponseServiceServer()
}

func RegisterOrderResponseServiceServer(s grpc.ServiceRegistrar, srv OrderResponseServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderResponseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderResponseService_ServiceDesc, srv)
}

func _OrderResponseService_CreateOrderResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderResponseServiceServer).CreateOrderResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderResponseService_CreateOrderResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderResponseServiceServer).CreateOrderResponse(ctx, req.(*CreateOrderResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderResponseService_GetOrderResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderResponsesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderResponseServiceServer).GetOrderResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderResponseService_GetOrderResponses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderResponseServiceServer).GetOrderResponses(ctx, req.(*GetOrderResponsesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderResponseService_GetOrderResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderResponseServiceServer).GetOrderResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderResponseService_GetOrderResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderResponseServiceServer).GetOrderResponse(ctx, req.(*GetOrderResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderResponseService_GetOrderResponseByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderResponseByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderResponseServiceServer).GetOrderResponseByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderResponseService_GetOrderResponseByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderResponseServiceServer).GetOrderResponseByPk(ctx, req.(*GetOrderResponseByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderResponseService_UpdateOrderResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderResponseServiceServer).UpdateOrderResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderResponseService_UpdateOrderResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderResponseServiceServer).UpdateOrderResponse(ctx, req.(*UpdateOrderResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderResponseService_CreateOrderResponseLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderResponseLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderResponseServiceServer).CreateOrderResponseLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderResponseService_CreateOrderResponseLineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderResponseServiceServer).CreateOrderResponseLineItem(ctx, req.(*CreateOrderResponseLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderResponseService_GetOrderResponseLineItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderResponseLineItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderResponseServiceServer).GetOrderResponseLineItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderResponseService_GetOrderResponseLineItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderResponseServiceServer).GetOrderResponseLineItems(ctx, req.(*GetOrderResponseLineItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderResponseService_CreateOrderResponseLineItemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderResponseLineItemDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderResponseServiceServer).CreateOrderResponseLineItemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderResponseService_CreateOrderResponseLineItemDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderResponseServiceServer).CreateOrderResponseLineItemDetail(ctx, req.(*CreateOrderResponseLineItemDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderResponseService_ServiceDesc is the grpc.ServiceDesc for OrderResponseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderResponseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.v1.OrderResponseService",
	HandlerType: (*OrderResponseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderResponse",
			Handler:    _OrderResponseService_CreateOrderResponse_Handler,
		},
		{
			MethodName: "GetOrderResponses",
			Handler:    _OrderResponseService_GetOrderResponses_Handler,
		},
		{
			MethodName: "GetOrderResponse",
			Handler:    _OrderResponseService_GetOrderResponse_Handler,
		},
		{
			MethodName: "GetOrderResponseByPk",
			Handler:    _OrderResponseService_GetOrderResponseByPk_Handler,
		},
		{
			MethodName: "UpdateOrderResponse",
			Handler:    _OrderResponseService_UpdateOrderResponse_Handler,
		},
		{
			MethodName: "CreateOrderResponseLineItem",
			Handler:    _OrderResponseService_CreateOrderResponseLineItem_Handler,
		},
		{
			MethodName: "GetOrderResponseLineItems",
			Handler:    _OrderResponseService_GetOrderResponseLineItems_Handler,
		},
		{
			MethodName: "CreateOrderResponseLineItemDetail",
			Handler:    _OrderResponseService_CreateOrderResponseLineItemDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/v1/orderresponse.proto",
}
