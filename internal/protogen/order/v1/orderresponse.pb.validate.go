// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/orderresponse.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderResponseMultiError, or
// nil if none found.
func (m *OrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderResponseD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderResponseValidationError{
					field:  "OrderResponseD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderResponseValidationError{
					field:  "OrderResponseD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderResponseD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderResponseValidationError{
				field:  "OrderResponseD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderResponseValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderResponseValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderResponseValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderResponseValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderResponseValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderResponseValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderResponseMultiError(errors)
	}

	return nil
}

// OrderResponseMultiError is an error wrapping multiple validation errors
// returned by OrderResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResponseMultiError) AllErrors() []error { return m }

// OrderResponseValidationError is the validation error returned by
// OrderResponse.Validate if the designated constraints aren't met.
type OrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResponseValidationError) ErrorName() string { return "OrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e OrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResponseValidationError{}

// Validate checks the field values on OrderResponseD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderResponseD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResponseD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderResponseDMultiError,
// or nil if none found.
func (m *OrderResponseD) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResponseD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for OrderResponseReasonCode

	// no validation rules for ResponseStatusCode

	// no validation rules for TotalMonetaryAmountExcludingTaxes

	// no validation rules for TmaetCodeListVersion

	// no validation rules for TmaetCurrencyCode

	// no validation rules for TotalMonetaryAmountIncludingTaxes

	// no validation rules for TmaitCodeListVersion

	// no validation rules for TmaitCurrencyCode

	// no validation rules for TotalTaxAmount

	// no validation rules for TtaCodeListVersion

	// no validation rules for TtaCurrencyCode

	// no validation rules for AmendedDateTimeValue

	// no validation rules for BillTo

	// no validation rules for Buyer

	// no validation rules for OrderResponseIdentification

	// no validation rules for OriginalOrder

	// no validation rules for SalesOrder

	// no validation rules for Seller

	// no validation rules for ShipTo

	if len(errors) > 0 {
		return OrderResponseDMultiError(errors)
	}

	return nil
}

// OrderResponseDMultiError is an error wrapping multiple validation errors
// returned by OrderResponseD.ValidateAll() if the designated constraints
// aren't met.
type OrderResponseDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResponseDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResponseDMultiError) AllErrors() []error { return m }

// OrderResponseDValidationError is the validation error returned by
// OrderResponseD.Validate if the designated constraints aren't met.
type OrderResponseDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResponseDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResponseDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResponseDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResponseDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResponseDValidationError) ErrorName() string { return "OrderResponseDValidationError" }

// Error satisfies the builtin error interface
func (e OrderResponseDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResponseD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResponseDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResponseDValidationError{}

// Validate checks the field values on CreateOrderResponseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResponseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderResponseRequestMultiError, or nil if none found.
func (m *CreateOrderResponseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderResponseReasonCode

	// no validation rules for ResponseStatusCode

	// no validation rules for TotalMonetaryAmountExcludingTaxes

	// no validation rules for TmaetCodeListVersion

	// no validation rules for TmaetCurrencyCode

	// no validation rules for TotalMonetaryAmountIncludingTaxes

	// no validation rules for TmaitCodeListVersion

	// no validation rules for TmaitCurrencyCode

	// no validation rules for TotalTaxAmount

	// no validation rules for TtaCodeListVersion

	// no validation rules for TtaCurrencyCode

	// no validation rules for AmendedDateTimeValue

	// no validation rules for BillTo

	// no validation rules for Buyer

	// no validation rules for OrderResponseIdentification

	// no validation rules for OriginalOrder

	// no validation rules for SalesOrder

	// no validation rules for Seller

	// no validation rules for ShipTo

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateOrderResponseRequestMultiError(errors)
	}

	return nil
}

// CreateOrderResponseRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrderResponseRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrderResponseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseRequestMultiError) AllErrors() []error { return m }

// CreateOrderResponseRequestValidationError is the validation error returned
// by CreateOrderResponseRequest.Validate if the designated constraints aren't met.
type CreateOrderResponseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseRequestValidationError) ErrorName() string {
	return "CreateOrderResponseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseRequestValidationError{}

// Validate checks the field values on CreateOrderResponseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResponseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderResponseResponseMultiError, or nil if none found.
func (m *CreateOrderResponseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderResponseResponseValidationError{
					field:  "OrderResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderResponseResponseValidationError{
					field:  "OrderResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderResponseResponseValidationError{
				field:  "OrderResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderResponseResponseMultiError(errors)
	}

	return nil
}

// CreateOrderResponseResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrderResponseResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrderResponseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseResponseMultiError) AllErrors() []error { return m }

// CreateOrderResponseResponseValidationError is the validation error returned
// by CreateOrderResponseResponse.Validate if the designated constraints
// aren't met.
type CreateOrderResponseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseResponseValidationError) ErrorName() string {
	return "CreateOrderResponseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseResponseValidationError{}

// Validate checks the field values on GetOrderResponsesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderResponsesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponsesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderResponsesResponseMultiError, or nil if none found.
func (m *GetOrderResponsesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponsesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrderResponsesResponseValidationError{
						field:  fmt.Sprintf("OrderResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrderResponsesResponseValidationError{
						field:  fmt.Sprintf("OrderResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrderResponsesResponseValidationError{
					field:  fmt.Sprintf("OrderResponses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetOrderResponsesResponseMultiError(errors)
	}

	return nil
}

// GetOrderResponsesResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderResponsesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetOrderResponsesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponsesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponsesResponseMultiError) AllErrors() []error { return m }

// GetOrderResponsesResponseValidationError is the validation error returned by
// GetOrderResponsesResponse.Validate if the designated constraints aren't met.
type GetOrderResponsesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponsesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponsesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponsesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponsesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponsesResponseValidationError) ErrorName() string {
	return "GetOrderResponsesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderResponsesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponsesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponsesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponsesResponseValidationError{}

// Validate checks the field values on GetOrderResponsesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderResponsesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponsesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderResponsesRequestMultiError, or nil if none found.
func (m *GetOrderResponsesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponsesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetOrderResponsesRequestMultiError(errors)
	}

	return nil
}

// GetOrderResponsesRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderResponsesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderResponsesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponsesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponsesRequestMultiError) AllErrors() []error { return m }

// GetOrderResponsesRequestValidationError is the validation error returned by
// GetOrderResponsesRequest.Validate if the designated constraints aren't met.
type GetOrderResponsesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponsesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponsesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponsesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponsesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponsesRequestValidationError) ErrorName() string {
	return "GetOrderResponsesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderResponsesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponsesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponsesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponsesRequestValidationError{}

// Validate checks the field values on GetOrderResponseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderResponseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderResponseRequestMultiError, or nil if none found.
func (m *GetOrderResponseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderResponseRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderResponseRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderResponseRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderResponseRequestMultiError(errors)
	}

	return nil
}

// GetOrderResponseRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderResponseRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderResponseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponseRequestMultiError) AllErrors() []error { return m }

// GetOrderResponseRequestValidationError is the validation error returned by
// GetOrderResponseRequest.Validate if the designated constraints aren't met.
type GetOrderResponseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponseRequestValidationError) ErrorName() string {
	return "GetOrderResponseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderResponseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponseRequestValidationError{}

// Validate checks the field values on GetOrderResponseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderResponseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderResponseResponseMultiError, or nil if none found.
func (m *GetOrderResponseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderResponseResponseValidationError{
					field:  "OrderResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderResponseResponseValidationError{
					field:  "OrderResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderResponseResponseValidationError{
				field:  "OrderResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderResponseResponseMultiError(errors)
	}

	return nil
}

// GetOrderResponseResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderResponseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrderResponseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponseResponseMultiError) AllErrors() []error { return m }

// GetOrderResponseResponseValidationError is the validation error returned by
// GetOrderResponseResponse.Validate if the designated constraints aren't met.
type GetOrderResponseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponseResponseValidationError) ErrorName() string {
	return "GetOrderResponseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderResponseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponseResponseValidationError{}

// Validate checks the field values on GetOrderResponseByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderResponseByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponseByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderResponseByPkRequestMultiError, or nil if none found.
func (m *GetOrderResponseByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponseByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderResponseByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderResponseByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderResponseByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderResponseByPkRequestMultiError(errors)
	}

	return nil
}

// GetOrderResponseByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrderResponseByPkRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrderResponseByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponseByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponseByPkRequestMultiError) AllErrors() []error { return m }

// GetOrderResponseByPkRequestValidationError is the validation error returned
// by GetOrderResponseByPkRequest.Validate if the designated constraints
// aren't met.
type GetOrderResponseByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponseByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponseByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponseByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponseByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponseByPkRequestValidationError) ErrorName() string {
	return "GetOrderResponseByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderResponseByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponseByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponseByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponseByPkRequestValidationError{}

// Validate checks the field values on GetOrderResponseByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderResponseByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponseByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderResponseByPkResponseMultiError, or nil if none found.
func (m *GetOrderResponseByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponseByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderResponseByPkResponseValidationError{
					field:  "OrderResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderResponseByPkResponseValidationError{
					field:  "OrderResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderResponseByPkResponseValidationError{
				field:  "OrderResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderResponseByPkResponseMultiError(errors)
	}

	return nil
}

// GetOrderResponseByPkResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrderResponseByPkResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOrderResponseByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponseByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponseByPkResponseMultiError) AllErrors() []error { return m }

// GetOrderResponseByPkResponseValidationError is the validation error returned
// by GetOrderResponseByPkResponse.Validate if the designated constraints
// aren't met.
type GetOrderResponseByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponseByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponseByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponseByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponseByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponseByPkResponseValidationError) ErrorName() string {
	return "GetOrderResponseByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderResponseByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponseByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponseByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponseByPkResponseValidationError{}

// Validate checks the field values on UpdateOrderResponseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderResponseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderResponseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderResponseRequestMultiError, or nil if none found.
func (m *UpdateOrderResponseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderResponseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderResponseReasonCode

	// no validation rules for ResponseStatusCode

	// no validation rules for TotalMonetaryAmountExcludingTaxes

	// no validation rules for TmaetCodeListVersion

	// no validation rules for TmaetCurrencyCode

	// no validation rules for TotalMonetaryAmountIncludingTaxes

	// no validation rules for TmaitCodeListVersion

	// no validation rules for TmaitCurrencyCode

	// no validation rules for TotalTaxAmount

	// no validation rules for TtaCodeListVersion

	// no validation rules for TtaCurrencyCode

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateOrderResponseRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderResponseRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrderResponseRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrderResponseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderResponseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderResponseRequestMultiError) AllErrors() []error { return m }

// UpdateOrderResponseRequestValidationError is the validation error returned
// by UpdateOrderResponseRequest.Validate if the designated constraints aren't met.
type UpdateOrderResponseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderResponseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderResponseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderResponseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderResponseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderResponseRequestValidationError) ErrorName() string {
	return "UpdateOrderResponseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderResponseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderResponseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderResponseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderResponseRequestValidationError{}

// Validate checks the field values on UpdateOrderResponseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderResponseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderResponseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderResponseResponseMultiError, or nil if none found.
func (m *UpdateOrderResponseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderResponseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrderResponseResponseMultiError(errors)
	}

	return nil
}

// UpdateOrderResponseResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrderResponseResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrderResponseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderResponseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderResponseResponseMultiError) AllErrors() []error { return m }

// UpdateOrderResponseResponseValidationError is the validation error returned
// by UpdateOrderResponseResponse.Validate if the designated constraints
// aren't met.
type UpdateOrderResponseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderResponseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderResponseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderResponseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderResponseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderResponseResponseValidationError) ErrorName() string {
	return "UpdateOrderResponseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderResponseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderResponseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderResponseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderResponseResponseValidationError{}

// Validate checks the field values on OrderResponseLineItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderResponseLineItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResponseLineItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderResponseLineItemMultiError, or nil if none found.
func (m *OrderResponseLineItem) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResponseLineItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderResponseLineItemD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderResponseLineItemValidationError{
					field:  "OrderResponseLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderResponseLineItemValidationError{
					field:  "OrderResponseLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderResponseLineItemD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderResponseLineItemValidationError{
				field:  "OrderResponseLineItemD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrderResponseLineItemT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderResponseLineItemValidationError{
					field:  "OrderResponseLineItemT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderResponseLineItemValidationError{
					field:  "OrderResponseLineItemT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderResponseLineItemT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderResponseLineItemValidationError{
				field:  "OrderResponseLineItemT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderResponseLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderResponseLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderResponseLineItemValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderResponseLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderResponseLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderResponseLineItemValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderResponseLineItemMultiError(errors)
	}

	return nil
}

// OrderResponseLineItemMultiError is an error wrapping multiple validation
// errors returned by OrderResponseLineItem.ValidateAll() if the designated
// constraints aren't met.
type OrderResponseLineItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResponseLineItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResponseLineItemMultiError) AllErrors() []error { return m }

// OrderResponseLineItemValidationError is the validation error returned by
// OrderResponseLineItem.Validate if the designated constraints aren't met.
type OrderResponseLineItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResponseLineItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResponseLineItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResponseLineItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResponseLineItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResponseLineItemValidationError) ErrorName() string {
	return "OrderResponseLineItemValidationError"
}

// Error satisfies the builtin error interface
func (e OrderResponseLineItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResponseLineItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResponseLineItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResponseLineItemValidationError{}

// Validate checks the field values on OrderResponseLineItemD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderResponseLineItemD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResponseLineItemD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderResponseLineItemDMultiError, or nil if none found.
func (m *OrderResponseLineItemD) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResponseLineItemD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ConfirmedQuantity

	// no validation rules for CqMeasurementUnitCode

	// no validation rules for CqCodeListVersion

	// no validation rules for LineItemActionCode

	// no validation rules for LineItemChangeIndicator

	// no validation rules for LineItemNumber

	// no validation rules for MonetaryAmountExcludingTaxes

	// no validation rules for MaetCodeListVersion

	// no validation rules for MaetCurrencyCode

	// no validation rules for MonetaryAmountIncludingTaxes

	// no validation rules for MaitCodeListVersion

	// no validation rules for MaitCurrencyCode

	// no validation rules for NetAmount

	// no validation rules for NaCodeListVersion

	// no validation rules for NaCurrencyCode

	// no validation rules for NetPrice

	// no validation rules for NpCodeListVersion

	// no validation rules for NpCurrencyCode

	// no validation rules for OrderResponseReasonCode

	// no validation rules for OriginalOrderLineItemNumber

	// no validation rules for ParentLineItemNumber

	// no validation rules for OrderResponseId

	if len(errors) > 0 {
		return OrderResponseLineItemDMultiError(errors)
	}

	return nil
}

// OrderResponseLineItemDMultiError is an error wrapping multiple validation
// errors returned by OrderResponseLineItemD.ValidateAll() if the designated
// constraints aren't met.
type OrderResponseLineItemDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResponseLineItemDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResponseLineItemDMultiError) AllErrors() []error { return m }

// OrderResponseLineItemDValidationError is the validation error returned by
// OrderResponseLineItemD.Validate if the designated constraints aren't met.
type OrderResponseLineItemDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResponseLineItemDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResponseLineItemDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResponseLineItemDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResponseLineItemDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResponseLineItemDValidationError) ErrorName() string {
	return "OrderResponseLineItemDValidationError"
}

// Error satisfies the builtin error interface
func (e OrderResponseLineItemDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResponseLineItemD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResponseLineItemDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResponseLineItemDValidationError{}

// Validate checks the field values on OrderResponseLineItemT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderResponseLineItemT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResponseLineItemT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderResponseLineItemTMultiError, or nil if none found.
func (m *OrderResponseLineItemT) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResponseLineItemT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeliveryDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderResponseLineItemTValidationError{
					field:  "DeliveryDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderResponseLineItemTValidationError{
					field:  "DeliveryDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderResponseLineItemTValidationError{
				field:  "DeliveryDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderResponseLineItemTMultiError(errors)
	}

	return nil
}

// OrderResponseLineItemTMultiError is an error wrapping multiple validation
// errors returned by OrderResponseLineItemT.ValidateAll() if the designated
// constraints aren't met.
type OrderResponseLineItemTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResponseLineItemTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResponseLineItemTMultiError) AllErrors() []error { return m }

// OrderResponseLineItemTValidationError is the validation error returned by
// OrderResponseLineItemT.Validate if the designated constraints aren't met.
type OrderResponseLineItemTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResponseLineItemTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResponseLineItemTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResponseLineItemTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResponseLineItemTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResponseLineItemTValidationError) ErrorName() string {
	return "OrderResponseLineItemTValidationError"
}

// Error satisfies the builtin error interface
func (e OrderResponseLineItemTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResponseLineItemT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResponseLineItemTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResponseLineItemTValidationError{}

// Validate checks the field values on CreateOrderResponseLineItemRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrderResponseLineItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponseLineItemRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrderResponseLineItemRequestMultiError, or nil if none found.
func (m *CreateOrderResponseLineItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponseLineItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfirmedQuantity

	// no validation rules for CqMeasurementUnitCode

	// no validation rules for CqCodeListVersion

	// no validation rules for DeliveryDateTime

	// no validation rules for LineItemActionCode

	// no validation rules for LineItemChangeIndicator

	// no validation rules for LineItemNumber

	// no validation rules for MonetaryAmountExcludingTaxes

	// no validation rules for MaetCodeListVersion

	// no validation rules for MaetCurrencyCode

	// no validation rules for MonetaryAmountIncludingTaxes

	// no validation rules for MaitCodeListVersion

	// no validation rules for MaitCurrencyCode

	// no validation rules for NetAmount

	// no validation rules for NaCodeListVersion

	// no validation rules for NaCurrencyCode

	// no validation rules for NetPrice

	// no validation rules for NpCodeListVersion

	// no validation rules for NpCurrencyCode

	// no validation rules for OrderResponseReasonCode

	// no validation rules for OriginalOrderLineItemNumber

	// no validation rules for ParentLineItemNumber

	// no validation rules for OrderResponseId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateOrderResponseLineItemRequestMultiError(errors)
	}

	return nil
}

// CreateOrderResponseLineItemRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrderResponseLineItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseLineItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseLineItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseLineItemRequestMultiError) AllErrors() []error { return m }

// CreateOrderResponseLineItemRequestValidationError is the validation error
// returned by CreateOrderResponseLineItemRequest.Validate if the designated
// constraints aren't met.
type CreateOrderResponseLineItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseLineItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseLineItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseLineItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseLineItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseLineItemRequestValidationError) ErrorName() string {
	return "CreateOrderResponseLineItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseLineItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponseLineItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseLineItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseLineItemRequestValidationError{}

// Validate checks the field values on GetOrderResponseLineItemsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrderResponseLineItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponseLineItemsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrderResponseLineItemsRequestMultiError, or nil if none found.
func (m *GetOrderResponseLineItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponseLineItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderResponseLineItemsRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderResponseLineItemsRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderResponseLineItemsRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderResponseLineItemsRequestMultiError(errors)
	}

	return nil
}

// GetOrderResponseLineItemsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOrderResponseLineItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderResponseLineItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponseLineItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponseLineItemsRequestMultiError) AllErrors() []error { return m }

// GetOrderResponseLineItemsRequestValidationError is the validation error
// returned by GetOrderResponseLineItemsRequest.Validate if the designated
// constraints aren't met.
type GetOrderResponseLineItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponseLineItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponseLineItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponseLineItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponseLineItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponseLineItemsRequestValidationError) ErrorName() string {
	return "GetOrderResponseLineItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderResponseLineItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponseLineItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponseLineItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponseLineItemsRequestValidationError{}

// Validate checks the field values on CreateOrderResponseLineItemResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrderResponseLineItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponseLineItemResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrderResponseLineItemResponseMultiError, or nil if none found.
func (m *CreateOrderResponseLineItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponseLineItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderResponseLineItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderResponseLineItemResponseValidationError{
					field:  "OrderResponseLineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderResponseLineItemResponseValidationError{
					field:  "OrderResponseLineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderResponseLineItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderResponseLineItemResponseValidationError{
				field:  "OrderResponseLineItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderResponseLineItemResponseMultiError(errors)
	}

	return nil
}

// CreateOrderResponseLineItemResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrderResponseLineItemResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseLineItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseLineItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseLineItemResponseMultiError) AllErrors() []error { return m }

// CreateOrderResponseLineItemResponseValidationError is the validation error
// returned by CreateOrderResponseLineItemResponse.Validate if the designated
// constraints aren't met.
type CreateOrderResponseLineItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseLineItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseLineItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseLineItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseLineItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseLineItemResponseValidationError) ErrorName() string {
	return "CreateOrderResponseLineItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseLineItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponseLineItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseLineItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseLineItemResponseValidationError{}

// Validate checks the field values on GetOrderResponseLineItemsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrderResponseLineItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponseLineItemsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrderResponseLineItemsResponseMultiError, or nil if none found.
func (m *GetOrderResponseLineItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponseLineItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderResponseLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrderResponseLineItemsResponseValidationError{
						field:  fmt.Sprintf("OrderResponseLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrderResponseLineItemsResponseValidationError{
						field:  fmt.Sprintf("OrderResponseLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrderResponseLineItemsResponseValidationError{
					field:  fmt.Sprintf("OrderResponseLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrderResponseLineItemsResponseMultiError(errors)
	}

	return nil
}

// GetOrderResponseLineItemsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetOrderResponseLineItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrderResponseLineItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponseLineItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponseLineItemsResponseMultiError) AllErrors() []error { return m }

// GetOrderResponseLineItemsResponseValidationError is the validation error
// returned by GetOrderResponseLineItemsResponse.Validate if the designated
// constraints aren't met.
type GetOrderResponseLineItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponseLineItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponseLineItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponseLineItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponseLineItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponseLineItemsResponseValidationError) ErrorName() string {
	return "GetOrderResponseLineItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderResponseLineItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponseLineItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponseLineItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponseLineItemsResponseValidationError{}

// Validate checks the field values on OrderResponseLineItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderResponseLineItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResponseLineItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderResponseLineItemsMultiError, or nil if none found.
func (m *OrderResponseLineItems) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResponseLineItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderResponseLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderResponseLineItemsValidationError{
						field:  fmt.Sprintf("OrderResponseLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderResponseLineItemsValidationError{
						field:  fmt.Sprintf("OrderResponseLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderResponseLineItemsValidationError{
					field:  fmt.Sprintf("OrderResponseLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderResponseLineItemsMultiError(errors)
	}

	return nil
}

// OrderResponseLineItemsMultiError is an error wrapping multiple validation
// errors returned by OrderResponseLineItems.ValidateAll() if the designated
// constraints aren't met.
type OrderResponseLineItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResponseLineItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResponseLineItemsMultiError) AllErrors() []error { return m }

// OrderResponseLineItemsValidationError is the validation error returned by
// OrderResponseLineItems.Validate if the designated constraints aren't met.
type OrderResponseLineItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResponseLineItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResponseLineItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResponseLineItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResponseLineItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResponseLineItemsValidationError) ErrorName() string {
	return "OrderResponseLineItemsValidationError"
}

// Error satisfies the builtin error interface
func (e OrderResponseLineItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResponseLineItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResponseLineItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResponseLineItemsValidationError{}

// Validate checks the field values on OrderResponseLineItemDetail with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderResponseLineItemDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResponseLineItemDetail with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderResponseLineItemDetailMultiError, or nil if none found.
func (m *OrderResponseLineItemDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResponseLineItemDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfirmedQuantity

	// no validation rules for CqMeasurementUnitCode

	// no validation rules for CqCodeListVersion

	// no validation rules for ReturnReasonCode

	// no validation rules for OrderResponseLineItemId

	if len(errors) > 0 {
		return OrderResponseLineItemDetailMultiError(errors)
	}

	return nil
}

// OrderResponseLineItemDetailMultiError is an error wrapping multiple
// validation errors returned by OrderResponseLineItemDetail.ValidateAll() if
// the designated constraints aren't met.
type OrderResponseLineItemDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResponseLineItemDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResponseLineItemDetailMultiError) AllErrors() []error { return m }

// OrderResponseLineItemDetailValidationError is the validation error returned
// by OrderResponseLineItemDetail.Validate if the designated constraints
// aren't met.
type OrderResponseLineItemDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResponseLineItemDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResponseLineItemDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResponseLineItemDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResponseLineItemDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResponseLineItemDetailValidationError) ErrorName() string {
	return "OrderResponseLineItemDetailValidationError"
}

// Error satisfies the builtin error interface
func (e OrderResponseLineItemDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResponseLineItemDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResponseLineItemDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResponseLineItemDetailValidationError{}

// Validate checks the field values on CreateOrderResponseLineItemDetailRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrderResponseLineItemDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrderResponseLineItemDetailRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateOrderResponseLineItemDetailRequestMultiError, or nil if none found.
func (m *CreateOrderResponseLineItemDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponseLineItemDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfirmedQuantity

	// no validation rules for CqMeasurementUnitCode

	// no validation rules for CqCodeListVersion

	// no validation rules for ReturnReasonCode

	// no validation rules for OrderResponseLineItemId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateOrderResponseLineItemDetailRequestMultiError(errors)
	}

	return nil
}

// CreateOrderResponseLineItemDetailRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrderResponseLineItemDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseLineItemDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseLineItemDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseLineItemDetailRequestMultiError) AllErrors() []error { return m }

// CreateOrderResponseLineItemDetailRequestValidationError is the validation
// error returned by CreateOrderResponseLineItemDetailRequest.Validate if the
// designated constraints aren't met.
type CreateOrderResponseLineItemDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseLineItemDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseLineItemDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseLineItemDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseLineItemDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseLineItemDetailRequestValidationError) ErrorName() string {
	return "CreateOrderResponseLineItemDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseLineItemDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponseLineItemDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseLineItemDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseLineItemDetailRequestValidationError{}

// Validate checks the field values on
// CreateOrderResponseLineItemDetailResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResponseLineItemDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrderResponseLineItemDetailResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateOrderResponseLineItemDetailResponseMultiError, or nil if none found.
func (m *CreateOrderResponseLineItemDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponseLineItemDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderResponseLineItemDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderResponseLineItemDetailResponseValidationError{
					field:  "OrderResponseLineItemDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderResponseLineItemDetailResponseValidationError{
					field:  "OrderResponseLineItemDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderResponseLineItemDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderResponseLineItemDetailResponseValidationError{
				field:  "OrderResponseLineItemDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderResponseLineItemDetailResponseMultiError(errors)
	}

	return nil
}

// CreateOrderResponseLineItemDetailResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrderResponseLineItemDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseLineItemDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseLineItemDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseLineItemDetailResponseMultiError) AllErrors() []error { return m }

// CreateOrderResponseLineItemDetailResponseValidationError is the validation
// error returned by CreateOrderResponseLineItemDetailResponse.Validate if the
// designated constraints aren't met.
type CreateOrderResponseLineItemDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseLineItemDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseLineItemDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseLineItemDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseLineItemDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseLineItemDetailResponseValidationError) ErrorName() string {
	return "CreateOrderResponseLineItemDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseLineItemDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponseLineItemDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseLineItemDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseLineItemDetailResponseValidationError{}
