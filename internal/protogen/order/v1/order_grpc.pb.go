// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: order/v1/order.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_CreateOrder_FullMethodName                          = "/order.v1.OrderService/CreateOrder"
	OrderService_GetOrders_FullMethodName                            = "/order.v1.OrderService/GetOrders"
	OrderService_GetOrder_FullMethodName                             = "/order.v1.OrderService/GetOrder"
	OrderService_GetOrderByPk_FullMethodName                         = "/order.v1.OrderService/GetOrderByPk"
	OrderService_UpdateOrder_FullMethodName                          = "/order.v1.OrderService/UpdateOrder"
	OrderService_CreateOrderLineItem_FullMethodName                  = "/order.v1.OrderService/CreateOrderLineItem"
	OrderService_GetOrderLineItems_FullMethodName                    = "/order.v1.OrderService/GetOrderLineItems"
	OrderService_CreateOrderLineItemDetail_FullMethodName            = "/order.v1.OrderService/CreateOrderLineItemDetail"
	OrderService_CreateOrderLogisticalInformation_FullMethodName     = "/order.v1.OrderService/CreateOrderLogisticalInformation"
	OrderService_CreateOrderLogisticalDateInformation_FullMethodName = "/order.v1.OrderService/CreateOrderLogisticalDateInformation"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The OrderService service definition.
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	GetOrderByPk(ctx context.Context, in *GetOrderByPkRequest, opts ...grpc.CallOption) (*GetOrderByPkResponse, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error)
	CreateOrderLineItem(ctx context.Context, in *CreateOrderLineItemRequest, opts ...grpc.CallOption) (*CreateOrderLineItemResponse, error)
	GetOrderLineItems(ctx context.Context, in *GetOrderLineItemsRequest, opts ...grpc.CallOption) (*GetOrderLineItemsResponse, error)
	CreateOrderLineItemDetail(ctx context.Context, in *CreateOrderLineItemDetailRequest, opts ...grpc.CallOption) (*CreateOrderLineItemDetailResponse, error)
	CreateOrderLogisticalInformation(ctx context.Context, in *CreateOrderLogisticalInformationRequest, opts ...grpc.CallOption) (*CreateOrderLogisticalInformationResponse, error)
	CreateOrderLogisticalDateInformation(ctx context.Context, in *CreateOrderLogisticalDateInformationRequest, opts ...grpc.CallOption) (*CreateOrderLogisticalDateInformationResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderByPk(ctx context.Context, in *GetOrderByPkRequest, opts ...grpc.CallOption) (*GetOrderByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderByPkResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_UpdateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateOrderLineItem(ctx context.Context, in *CreateOrderLineItemRequest, opts ...grpc.CallOption) (*CreateOrderLineItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderLineItemResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateOrderLineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderLineItems(ctx context.Context, in *GetOrderLineItemsRequest, opts ...grpc.CallOption) (*GetOrderLineItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderLineItemsResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderLineItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateOrderLineItemDetail(ctx context.Context, in *CreateOrderLineItemDetailRequest, opts ...grpc.CallOption) (*CreateOrderLineItemDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderLineItemDetailResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateOrderLineItemDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateOrderLogisticalInformation(ctx context.Context, in *CreateOrderLogisticalInformationRequest, opts ...grpc.CallOption) (*CreateOrderLogisticalInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderLogisticalInformationResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateOrderLogisticalInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateOrderLogisticalDateInformation(ctx context.Context, in *CreateOrderLogisticalDateInformationRequest, opts ...grpc.CallOption) (*CreateOrderLogisticalDateInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderLogisticalDateInformationResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateOrderLogisticalDateInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
//
// The OrderService service definition.
type OrderServiceServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	GetOrderByPk(context.Context, *GetOrderByPkRequest) (*GetOrderByPkResponse, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error)
	CreateOrderLineItem(context.Context, *CreateOrderLineItemRequest) (*CreateOrderLineItemResponse, error)
	GetOrderLineItems(context.Context, *GetOrderLineItemsRequest) (*GetOrderLineItemsResponse, error)
	CreateOrderLineItemDetail(context.Context, *CreateOrderLineItemDetailRequest) (*CreateOrderLineItemDetailResponse, error)
	CreateOrderLogisticalInformation(context.Context, *CreateOrderLogisticalInformationRequest) (*CreateOrderLogisticalInformationResponse, error)
	CreateOrderLogisticalDateInformation(context.Context, *CreateOrderLogisticalDateInformationRequest) (*CreateOrderLogisticalDateInformationResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderByPk(context.Context, *GetOrderByPkRequest) (*GetOrderByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByPk not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedOrderServiceServer) CreateOrderLineItem(context.Context, *CreateOrderLineItemRequest) (*CreateOrderLineItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderLineItem not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderLineItems(context.Context, *GetOrderLineItemsRequest) (*GetOrderLineItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderLineItems not implemented")
}
func (UnimplementedOrderServiceServer) CreateOrderLineItemDetail(context.Context, *CreateOrderLineItemDetailRequest) (*CreateOrderLineItemDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderLineItemDetail not implemented")
}
func (UnimplementedOrderServiceServer) CreateOrderLogisticalInformation(context.Context, *CreateOrderLogisticalInformationRequest) (*CreateOrderLogisticalInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderLogisticalInformation not implemented")
}
func (UnimplementedOrderServiceServer) CreateOrderLogisticalDateInformation(context.Context, *CreateOrderLogisticalDateInformationRequest) (*CreateOrderLogisticalDateInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderLogisticalDateInformation not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByPk(ctx, req.(*GetOrderByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateOrderLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrderLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrderLineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrderLineItem(ctx, req.(*CreateOrderLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderLineItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderLineItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderLineItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderLineItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderLineItems(ctx, req.(*GetOrderLineItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateOrderLineItemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderLineItemDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrderLineItemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrderLineItemDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrderLineItemDetail(ctx, req.(*CreateOrderLineItemDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateOrderLogisticalInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderLogisticalInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrderLogisticalInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrderLogisticalInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrderLogisticalInformation(ctx, req.(*CreateOrderLogisticalInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateOrderLogisticalDateInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderLogisticalDateInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrderLogisticalDateInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrderLogisticalDateInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrderLogisticalDateInformation(ctx, req.(*CreateOrderLogisticalDateInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.v1.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _OrderService_GetOrders_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrderService_GetOrder_Handler,
		},
		{
			MethodName: "GetOrderByPk",
			Handler:    _OrderService_GetOrderByPk_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _OrderService_UpdateOrder_Handler,
		},
		{
			MethodName: "CreateOrderLineItem",
			Handler:    _OrderService_CreateOrderLineItem_Handler,
		},
		{
			MethodName: "GetOrderLineItems",
			Handler:    _OrderService_GetOrderLineItems_Handler,
		},
		{
			MethodName: "CreateOrderLineItemDetail",
			Handler:    _OrderService_CreateOrderLineItemDetail_Handler,
		},
		{
			MethodName: "CreateOrderLogisticalInformation",
			Handler:    _OrderService_CreateOrderLogisticalInformation_Handler,
		},
		{
			MethodName: "CreateOrderLogisticalDateInformation",
			Handler:    _OrderService_CreateOrderLogisticalDateInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/v1/order.proto",
}
