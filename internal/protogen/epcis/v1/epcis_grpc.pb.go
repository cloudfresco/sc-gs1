// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: epcis/v1/epcis.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EpcisService_CreateObjectEvent_FullMethodName           = "/epcis.v1.EpcisService/CreateObjectEvent"
	EpcisService_GetObjectEvents_FullMethodName             = "/epcis.v1.EpcisService/GetObjectEvents"
	EpcisService_GetObjectEvent_FullMethodName              = "/epcis.v1.EpcisService/GetObjectEvent"
	EpcisService_CreateAggregationEvent_FullMethodName      = "/epcis.v1.EpcisService/CreateAggregationEvent"
	EpcisService_GetAggregationEvents_FullMethodName        = "/epcis.v1.EpcisService/GetAggregationEvents"
	EpcisService_GetAggregationEvent_FullMethodName         = "/epcis.v1.EpcisService/GetAggregationEvent"
	EpcisService_CreateAssociationEvent_FullMethodName      = "/epcis.v1.EpcisService/CreateAssociationEvent"
	EpcisService_GetAssociationEvents_FullMethodName        = "/epcis.v1.EpcisService/GetAssociationEvents"
	EpcisService_GetAssociationEvent_FullMethodName         = "/epcis.v1.EpcisService/GetAssociationEvent"
	EpcisService_CreateTransactionEvent_FullMethodName      = "/epcis.v1.EpcisService/CreateTransactionEvent"
	EpcisService_GetTransactionEvents_FullMethodName        = "/epcis.v1.EpcisService/GetTransactionEvents"
	EpcisService_GetTransactionEvent_FullMethodName         = "/epcis.v1.EpcisService/GetTransactionEvent"
	EpcisService_CreateTransformationEvent_FullMethodName   = "/epcis.v1.EpcisService/CreateTransformationEvent"
	EpcisService_GetTransformationEvents_FullMethodName     = "/epcis.v1.EpcisService/GetTransformationEvents"
	EpcisService_GetTransformationEvent_FullMethodName      = "/epcis.v1.EpcisService/GetTransformationEvent"
	EpcisService_CreatePersistentDisposition_FullMethodName = "/epcis.v1.EpcisService/CreatePersistentDisposition"
	EpcisService_GetPersistentDispositions_FullMethodName   = "/epcis.v1.EpcisService/GetPersistentDispositions"
	EpcisService_CreateEpc_FullMethodName                   = "/epcis.v1.EpcisService/CreateEpc"
	EpcisService_GetEpcs_FullMethodName                     = "/epcis.v1.EpcisService/GetEpcs"
	EpcisService_CreateBizTransaction_FullMethodName        = "/epcis.v1.EpcisService/CreateBizTransaction"
	EpcisService_GetBizTransactions_FullMethodName          = "/epcis.v1.EpcisService/GetBizTransactions"
	EpcisService_CreateQuantityElement_FullMethodName       = "/epcis.v1.EpcisService/CreateQuantityElement"
	EpcisService_GetQuantityElements_FullMethodName         = "/epcis.v1.EpcisService/GetQuantityElements"
	EpcisService_CreateSource_FullMethodName                = "/epcis.v1.EpcisService/CreateSource"
	EpcisService_GetSources_FullMethodName                  = "/epcis.v1.EpcisService/GetSources"
	EpcisService_CreateDestination_FullMethodName           = "/epcis.v1.EpcisService/CreateDestination"
	EpcisService_GetDestinations_FullMethodName             = "/epcis.v1.EpcisService/GetDestinations"
	EpcisService_CreateSensorElement_FullMethodName         = "/epcis.v1.EpcisService/CreateSensorElement"
	EpcisService_GetSensorElements_FullMethodName           = "/epcis.v1.EpcisService/GetSensorElements"
)

// EpcisServiceClient is the client API for EpcisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The EpcisService service definition.
type EpcisServiceClient interface {
	CreateObjectEvent(ctx context.Context, in *CreateObjectEventRequest, opts ...grpc.CallOption) (*CreateObjectEventResponse, error)
	GetObjectEvents(ctx context.Context, in *GetObjectEventsRequest, opts ...grpc.CallOption) (*GetObjectEventsResponse, error)
	GetObjectEvent(ctx context.Context, in *GetObjectEventRequest, opts ...grpc.CallOption) (*GetObjectEventResponse, error)
	CreateAggregationEvent(ctx context.Context, in *CreateAggregationEventRequest, opts ...grpc.CallOption) (*CreateAggregationEventResponse, error)
	GetAggregationEvents(ctx context.Context, in *GetAggregationEventsRequest, opts ...grpc.CallOption) (*GetAggregationEventsResponse, error)
	GetAggregationEvent(ctx context.Context, in *GetAggregationEventRequest, opts ...grpc.CallOption) (*GetAggregationEventResponse, error)
	CreateAssociationEvent(ctx context.Context, in *CreateAssociationEventRequest, opts ...grpc.CallOption) (*CreateAssociationEventResponse, error)
	GetAssociationEvents(ctx context.Context, in *GetAssociationEventsRequest, opts ...grpc.CallOption) (*GetAssociationEventsResponse, error)
	GetAssociationEvent(ctx context.Context, in *GetAssociationEventRequest, opts ...grpc.CallOption) (*GetAssociationEventResponse, error)
	CreateTransactionEvent(ctx context.Context, in *CreateTransactionEventRequest, opts ...grpc.CallOption) (*CreateTransactionEventResponse, error)
	GetTransactionEvents(ctx context.Context, in *GetTransactionEventsRequest, opts ...grpc.CallOption) (*GetTransactionEventsResponse, error)
	GetTransactionEvent(ctx context.Context, in *GetTransactionEventRequest, opts ...grpc.CallOption) (*GetTransactionEventResponse, error)
	CreateTransformationEvent(ctx context.Context, in *CreateTransformationEventRequest, opts ...grpc.CallOption) (*CreateTransformationEventResponse, error)
	GetTransformationEvents(ctx context.Context, in *GetTransformationEventsRequest, opts ...grpc.CallOption) (*GetTransformationEventsResponse, error)
	GetTransformationEvent(ctx context.Context, in *GetTransformationEventRequest, opts ...grpc.CallOption) (*GetTransformationEventResponse, error)
	CreatePersistentDisposition(ctx context.Context, in *CreatePersistentDispositionRequest, opts ...grpc.CallOption) (*CreatePersistentDispositionResponse, error)
	GetPersistentDispositions(ctx context.Context, in *GetPersistentDispositionsRequest, opts ...grpc.CallOption) (*GetPersistentDispositionsResponse, error)
	CreateEpc(ctx context.Context, in *CreateEpcRequest, opts ...grpc.CallOption) (*CreateEpcResponse, error)
	GetEpcs(ctx context.Context, in *GetEpcsRequest, opts ...grpc.CallOption) (*GetEpcsResponse, error)
	CreateBizTransaction(ctx context.Context, in *CreateBizTransactionRequest, opts ...grpc.CallOption) (*CreateBizTransactionResponse, error)
	GetBizTransactions(ctx context.Context, in *GetBizTransactionsRequest, opts ...grpc.CallOption) (*GetBizTransactionsResponse, error)
	CreateQuantityElement(ctx context.Context, in *CreateQuantityElementRequest, opts ...grpc.CallOption) (*CreateQuantityElementResponse, error)
	GetQuantityElements(ctx context.Context, in *GetQuantityElementsRequest, opts ...grpc.CallOption) (*GetQuantityElementsResponse, error)
	CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*CreateSourceResponse, error)
	GetSources(ctx context.Context, in *GetSourcesRequest, opts ...grpc.CallOption) (*GetSourcesResponse, error)
	CreateDestination(ctx context.Context, in *CreateDestinationRequest, opts ...grpc.CallOption) (*CreateDestinationResponse, error)
	GetDestinations(ctx context.Context, in *GetDestinationsRequest, opts ...grpc.CallOption) (*GetDestinationsResponse, error)
	CreateSensorElement(ctx context.Context, in *CreateSensorElementRequest, opts ...grpc.CallOption) (*CreateSensorElementResponse, error)
	GetSensorElements(ctx context.Context, in *GetSensorElementsRequest, opts ...grpc.CallOption) (*GetSensorElementsResponse, error)
}

type epcisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEpcisServiceClient(cc grpc.ClientConnInterface) EpcisServiceClient {
	return &epcisServiceClient{cc}
}

func (c *epcisServiceClient) CreateObjectEvent(ctx context.Context, in *CreateObjectEventRequest, opts ...grpc.CallOption) (*CreateObjectEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateObjectEventResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateObjectEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetObjectEvents(ctx context.Context, in *GetObjectEventsRequest, opts ...grpc.CallOption) (*GetObjectEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectEventsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetObjectEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetObjectEvent(ctx context.Context, in *GetObjectEventRequest, opts ...grpc.CallOption) (*GetObjectEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectEventResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetObjectEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreateAggregationEvent(ctx context.Context, in *CreateAggregationEventRequest, opts ...grpc.CallOption) (*CreateAggregationEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAggregationEventResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateAggregationEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetAggregationEvents(ctx context.Context, in *GetAggregationEventsRequest, opts ...grpc.CallOption) (*GetAggregationEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAggregationEventsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetAggregationEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetAggregationEvent(ctx context.Context, in *GetAggregationEventRequest, opts ...grpc.CallOption) (*GetAggregationEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAggregationEventResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetAggregationEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreateAssociationEvent(ctx context.Context, in *CreateAssociationEventRequest, opts ...grpc.CallOption) (*CreateAssociationEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAssociationEventResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateAssociationEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetAssociationEvents(ctx context.Context, in *GetAssociationEventsRequest, opts ...grpc.CallOption) (*GetAssociationEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssociationEventsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetAssociationEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetAssociationEvent(ctx context.Context, in *GetAssociationEventRequest, opts ...grpc.CallOption) (*GetAssociationEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssociationEventResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetAssociationEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreateTransactionEvent(ctx context.Context, in *CreateTransactionEventRequest, opts ...grpc.CallOption) (*CreateTransactionEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionEventResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateTransactionEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetTransactionEvents(ctx context.Context, in *GetTransactionEventsRequest, opts ...grpc.CallOption) (*GetTransactionEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionEventsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetTransactionEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetTransactionEvent(ctx context.Context, in *GetTransactionEventRequest, opts ...grpc.CallOption) (*GetTransactionEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionEventResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetTransactionEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreateTransformationEvent(ctx context.Context, in *CreateTransformationEventRequest, opts ...grpc.CallOption) (*CreateTransformationEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransformationEventResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateTransformationEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetTransformationEvents(ctx context.Context, in *GetTransformationEventsRequest, opts ...grpc.CallOption) (*GetTransformationEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransformationEventsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetTransformationEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetTransformationEvent(ctx context.Context, in *GetTransformationEventRequest, opts ...grpc.CallOption) (*GetTransformationEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransformationEventResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetTransformationEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreatePersistentDisposition(ctx context.Context, in *CreatePersistentDispositionRequest, opts ...grpc.CallOption) (*CreatePersistentDispositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePersistentDispositionResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreatePersistentDisposition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetPersistentDispositions(ctx context.Context, in *GetPersistentDispositionsRequest, opts ...grpc.CallOption) (*GetPersistentDispositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersistentDispositionsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetPersistentDispositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreateEpc(ctx context.Context, in *CreateEpcRequest, opts ...grpc.CallOption) (*CreateEpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEpcResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateEpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetEpcs(ctx context.Context, in *GetEpcsRequest, opts ...grpc.CallOption) (*GetEpcsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEpcsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetEpcs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreateBizTransaction(ctx context.Context, in *CreateBizTransactionRequest, opts ...grpc.CallOption) (*CreateBizTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBizTransactionResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateBizTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetBizTransactions(ctx context.Context, in *GetBizTransactionsRequest, opts ...grpc.CallOption) (*GetBizTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBizTransactionsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetBizTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreateQuantityElement(ctx context.Context, in *CreateQuantityElementRequest, opts ...grpc.CallOption) (*CreateQuantityElementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuantityElementResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateQuantityElement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetQuantityElements(ctx context.Context, in *GetQuantityElementsRequest, opts ...grpc.CallOption) (*GetQuantityElementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuantityElementsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetQuantityElements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*CreateSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSourceResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetSources(ctx context.Context, in *GetSourcesRequest, opts ...grpc.CallOption) (*GetSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSourcesResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreateDestination(ctx context.Context, in *CreateDestinationRequest, opts ...grpc.CallOption) (*CreateDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDestinationResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetDestinations(ctx context.Context, in *GetDestinationsRequest, opts ...grpc.CallOption) (*GetDestinationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDestinationsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetDestinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) CreateSensorElement(ctx context.Context, in *CreateSensorElementRequest, opts ...grpc.CallOption) (*CreateSensorElementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSensorElementResponse)
	err := c.cc.Invoke(ctx, EpcisService_CreateSensorElement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epcisServiceClient) GetSensorElements(ctx context.Context, in *GetSensorElementsRequest, opts ...grpc.CallOption) (*GetSensorElementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSensorElementsResponse)
	err := c.cc.Invoke(ctx, EpcisService_GetSensorElements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EpcisServiceServer is the server API for EpcisService service.
// All implementations must embed UnimplementedEpcisServiceServer
// for forward compatibility.
//
// The EpcisService service definition.
type EpcisServiceServer interface {
	CreateObjectEvent(context.Context, *CreateObjectEventRequest) (*CreateObjectEventResponse, error)
	GetObjectEvents(context.Context, *GetObjectEventsRequest) (*GetObjectEventsResponse, error)
	GetObjectEvent(context.Context, *GetObjectEventRequest) (*GetObjectEventResponse, error)
	CreateAggregationEvent(context.Context, *CreateAggregationEventRequest) (*CreateAggregationEventResponse, error)
	GetAggregationEvents(context.Context, *GetAggregationEventsRequest) (*GetAggregationEventsResponse, error)
	GetAggregationEvent(context.Context, *GetAggregationEventRequest) (*GetAggregationEventResponse, error)
	CreateAssociationEvent(context.Context, *CreateAssociationEventRequest) (*CreateAssociationEventResponse, error)
	GetAssociationEvents(context.Context, *GetAssociationEventsRequest) (*GetAssociationEventsResponse, error)
	GetAssociationEvent(context.Context, *GetAssociationEventRequest) (*GetAssociationEventResponse, error)
	CreateTransactionEvent(context.Context, *CreateTransactionEventRequest) (*CreateTransactionEventResponse, error)
	GetTransactionEvents(context.Context, *GetTransactionEventsRequest) (*GetTransactionEventsResponse, error)
	GetTransactionEvent(context.Context, *GetTransactionEventRequest) (*GetTransactionEventResponse, error)
	CreateTransformationEvent(context.Context, *CreateTransformationEventRequest) (*CreateTransformationEventResponse, error)
	GetTransformationEvents(context.Context, *GetTransformationEventsRequest) (*GetTransformationEventsResponse, error)
	GetTransformationEvent(context.Context, *GetTransformationEventRequest) (*GetTransformationEventResponse, error)
	CreatePersistentDisposition(context.Context, *CreatePersistentDispositionRequest) (*CreatePersistentDispositionResponse, error)
	GetPersistentDispositions(context.Context, *GetPersistentDispositionsRequest) (*GetPersistentDispositionsResponse, error)
	CreateEpc(context.Context, *CreateEpcRequest) (*CreateEpcResponse, error)
	GetEpcs(context.Context, *GetEpcsRequest) (*GetEpcsResponse, error)
	CreateBizTransaction(context.Context, *CreateBizTransactionRequest) (*CreateBizTransactionResponse, error)
	GetBizTransactions(context.Context, *GetBizTransactionsRequest) (*GetBizTransactionsResponse, error)
	CreateQuantityElement(context.Context, *CreateQuantityElementRequest) (*CreateQuantityElementResponse, error)
	GetQuantityElements(context.Context, *GetQuantityElementsRequest) (*GetQuantityElementsResponse, error)
	CreateSource(context.Context, *CreateSourceRequest) (*CreateSourceResponse, error)
	GetSources(context.Context, *GetSourcesRequest) (*GetSourcesResponse, error)
	CreateDestination(context.Context, *CreateDestinationRequest) (*CreateDestinationResponse, error)
	GetDestinations(context.Context, *GetDestinationsRequest) (*GetDestinationsResponse, error)
	CreateSensorElement(context.Context, *CreateSensorElementRequest) (*CreateSensorElementResponse, error)
	GetSensorElements(context.Context, *GetSensorElementsRequest) (*GetSensorElementsResponse, error)
	mustEmbedUnimplementedEpcisServiceServer()
}

// UnimplementedEpcisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEpcisServiceServer struct{}

func (UnimplementedEpcisServiceServer) CreateObjectEvent(context.Context, *CreateObjectEventRequest) (*CreateObjectEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectEvent not implemented")
}
func (UnimplementedEpcisServiceServer) GetObjectEvents(context.Context, *GetObjectEventsRequest) (*GetObjectEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectEvents not implemented")
}
func (UnimplementedEpcisServiceServer) GetObjectEvent(context.Context, *GetObjectEventRequest) (*GetObjectEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectEvent not implemented")
}
func (UnimplementedEpcisServiceServer) CreateAggregationEvent(context.Context, *CreateAggregationEventRequest) (*CreateAggregationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAggregationEvent not implemented")
}
func (UnimplementedEpcisServiceServer) GetAggregationEvents(context.Context, *GetAggregationEventsRequest) (*GetAggregationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregationEvents not implemented")
}
func (UnimplementedEpcisServiceServer) GetAggregationEvent(context.Context, *GetAggregationEventRequest) (*GetAggregationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregationEvent not implemented")
}
func (UnimplementedEpcisServiceServer) CreateAssociationEvent(context.Context, *CreateAssociationEventRequest) (*CreateAssociationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssociationEvent not implemented")
}
func (UnimplementedEpcisServiceServer) GetAssociationEvents(context.Context, *GetAssociationEventsRequest) (*GetAssociationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssociationEvents not implemented")
}
func (UnimplementedEpcisServiceServer) GetAssociationEvent(context.Context, *GetAssociationEventRequest) (*GetAssociationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssociationEvent not implemented")
}
func (UnimplementedEpcisServiceServer) CreateTransactionEvent(context.Context, *CreateTransactionEventRequest) (*CreateTransactionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionEvent not implemented")
}
func (UnimplementedEpcisServiceServer) GetTransactionEvents(context.Context, *GetTransactionEventsRequest) (*GetTransactionEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionEvents not implemented")
}
func (UnimplementedEpcisServiceServer) GetTransactionEvent(context.Context, *GetTransactionEventRequest) (*GetTransactionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionEvent not implemented")
}
func (UnimplementedEpcisServiceServer) CreateTransformationEvent(context.Context, *CreateTransformationEventRequest) (*CreateTransformationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransformationEvent not implemented")
}
func (UnimplementedEpcisServiceServer) GetTransformationEvents(context.Context, *GetTransformationEventsRequest) (*GetTransformationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransformationEvents not implemented")
}
func (UnimplementedEpcisServiceServer) GetTransformationEvent(context.Context, *GetTransformationEventRequest) (*GetTransformationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransformationEvent not implemented")
}
func (UnimplementedEpcisServiceServer) CreatePersistentDisposition(context.Context, *CreatePersistentDispositionRequest) (*CreatePersistentDispositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersistentDisposition not implemented")
}
func (UnimplementedEpcisServiceServer) GetPersistentDispositions(context.Context, *GetPersistentDispositionsRequest) (*GetPersistentDispositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersistentDispositions not implemented")
}
func (UnimplementedEpcisServiceServer) CreateEpc(context.Context, *CreateEpcRequest) (*CreateEpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEpc not implemented")
}
func (UnimplementedEpcisServiceServer) GetEpcs(context.Context, *GetEpcsRequest) (*GetEpcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpcs not implemented")
}
func (UnimplementedEpcisServiceServer) CreateBizTransaction(context.Context, *CreateBizTransactionRequest) (*CreateBizTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBizTransaction not implemented")
}
func (UnimplementedEpcisServiceServer) GetBizTransactions(context.Context, *GetBizTransactionsRequest) (*GetBizTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBizTransactions not implemented")
}
func (UnimplementedEpcisServiceServer) CreateQuantityElement(context.Context, *CreateQuantityElementRequest) (*CreateQuantityElementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuantityElement not implemented")
}
func (UnimplementedEpcisServiceServer) GetQuantityElements(context.Context, *GetQuantityElementsRequest) (*GetQuantityElementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuantityElements not implemented")
}
func (UnimplementedEpcisServiceServer) CreateSource(context.Context, *CreateSourceRequest) (*CreateSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSource not implemented")
}
func (UnimplementedEpcisServiceServer) GetSources(context.Context, *GetSourcesRequest) (*GetSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSources not implemented")
}
func (UnimplementedEpcisServiceServer) CreateDestination(context.Context, *CreateDestinationRequest) (*CreateDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDestination not implemented")
}
func (UnimplementedEpcisServiceServer) GetDestinations(context.Context, *GetDestinationsRequest) (*GetDestinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinations not implemented")
}
func (UnimplementedEpcisServiceServer) CreateSensorElement(context.Context, *CreateSensorElementRequest) (*CreateSensorElementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSensorElement not implemented")
}
func (UnimplementedEpcisServiceServer) GetSensorElements(context.Context, *GetSensorElementsRequest) (*GetSensorElementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorElements not implemented")
}
func (UnimplementedEpcisServiceServer) mustEmbedUnimplementedEpcisServiceServer() {}
func (UnimplementedEpcisServiceServer) testEmbeddedByValue()                      {}

// UnsafeEpcisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EpcisServiceServer will
// result in compilation errors.
type UnsafeEpcisServiceServer interface {
	mustEmbedUnimplementedEpcisServiceServer()
}

func RegisterEpcisServiceServer(s grpc.ServiceRegistrar, srv EpcisServiceServer) {
	// If the following call pancis, it indicates UnimplementedEpcisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EpcisService_ServiceDesc, srv)
}

func _EpcisService_CreateObjectEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateObjectEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateObjectEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateObjectEvent(ctx, req.(*CreateObjectEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetObjectEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetObjectEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetObjectEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetObjectEvents(ctx, req.(*GetObjectEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetObjectEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetObjectEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetObjectEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetObjectEvent(ctx, req.(*GetObjectEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreateAggregationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAggregationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateAggregationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateAggregationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateAggregationEvent(ctx, req.(*CreateAggregationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetAggregationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetAggregationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetAggregationEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetAggregationEvents(ctx, req.(*GetAggregationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetAggregationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetAggregationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetAggregationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetAggregationEvent(ctx, req.(*GetAggregationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreateAssociationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssociationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateAssociationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateAssociationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateAssociationEvent(ctx, req.(*CreateAssociationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetAssociationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssociationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetAssociationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetAssociationEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetAssociationEvents(ctx, req.(*GetAssociationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetAssociationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssociationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetAssociationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetAssociationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetAssociationEvent(ctx, req.(*GetAssociationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreateTransactionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateTransactionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateTransactionEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateTransactionEvent(ctx, req.(*CreateTransactionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetTransactionEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetTransactionEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetTransactionEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetTransactionEvents(ctx, req.(*GetTransactionEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetTransactionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetTransactionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetTransactionEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetTransactionEvent(ctx, req.(*GetTransactionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreateTransformationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransformationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateTransformationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateTransformationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateTransformationEvent(ctx, req.(*CreateTransformationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetTransformationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransformationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetTransformationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetTransformationEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetTransformationEvents(ctx, req.(*GetTransformationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetTransformationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransformationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetTransformationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetTransformationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetTransformationEvent(ctx, req.(*GetTransformationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreatePersistentDisposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersistentDispositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreatePersistentDisposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreatePersistentDisposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreatePersistentDisposition(ctx, req.(*CreatePersistentDispositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetPersistentDispositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersistentDispositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetPersistentDispositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetPersistentDispositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetPersistentDispositions(ctx, req.(*GetPersistentDispositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreateEpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateEpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateEpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateEpc(ctx, req.(*CreateEpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetEpcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetEpcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetEpcs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetEpcs(ctx, req.(*GetEpcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreateBizTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBizTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateBizTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateBizTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateBizTransaction(ctx, req.(*CreateBizTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetBizTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBizTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetBizTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetBizTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetBizTransactions(ctx, req.(*GetBizTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreateQuantityElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuantityElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateQuantityElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateQuantityElement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateQuantityElement(ctx, req.(*CreateQuantityElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetQuantityElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuantityElementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetQuantityElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetQuantityElements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetQuantityElements(ctx, req.(*GetQuantityElementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateSource(ctx, req.(*CreateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetSources(ctx, req.(*GetSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreateDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateDestination(ctx, req.(*CreateDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetDestinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetDestinations(ctx, req.(*GetDestinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_CreateSensorElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSensorElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).CreateSensorElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_CreateSensorElement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).CreateSensorElement(ctx, req.(*CreateSensorElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpcisService_GetSensorElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensorElementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpcisServiceServer).GetSensorElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpcisService_GetSensorElements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpcisServiceServer).GetSensorElements(ctx, req.(*GetSensorElementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EpcisService_ServiceDesc is the grpc.ServiceDesc for EpcisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EpcisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "epcis.v1.EpcisService",
	HandlerType: (*EpcisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObjectEvent",
			Handler:    _EpcisService_CreateObjectEvent_Handler,
		},
		{
			MethodName: "GetObjectEvents",
			Handler:    _EpcisService_GetObjectEvents_Handler,
		},
		{
			MethodName: "GetObjectEvent",
			Handler:    _EpcisService_GetObjectEvent_Handler,
		},
		{
			MethodName: "CreateAggregationEvent",
			Handler:    _EpcisService_CreateAggregationEvent_Handler,
		},
		{
			MethodName: "GetAggregationEvents",
			Handler:    _EpcisService_GetAggregationEvents_Handler,
		},
		{
			MethodName: "GetAggregationEvent",
			Handler:    _EpcisService_GetAggregationEvent_Handler,
		},
		{
			MethodName: "CreateAssociationEvent",
			Handler:    _EpcisService_CreateAssociationEvent_Handler,
		},
		{
			MethodName: "GetAssociationEvents",
			Handler:    _EpcisService_GetAssociationEvents_Handler,
		},
		{
			MethodName: "GetAssociationEvent",
			Handler:    _EpcisService_GetAssociationEvent_Handler,
		},
		{
			MethodName: "CreateTransactionEvent",
			Handler:    _EpcisService_CreateTransactionEvent_Handler,
		},
		{
			MethodName: "GetTransactionEvents",
			Handler:    _EpcisService_GetTransactionEvents_Handler,
		},
		{
			MethodName: "GetTransactionEvent",
			Handler:    _EpcisService_GetTransactionEvent_Handler,
		},
		{
			MethodName: "CreateTransformationEvent",
			Handler:    _EpcisService_CreateTransformationEvent_Handler,
		},
		{
			MethodName: "GetTransformationEvents",
			Handler:    _EpcisService_GetTransformationEvents_Handler,
		},
		{
			MethodName: "GetTransformationEvent",
			Handler:    _EpcisService_GetTransformationEvent_Handler,
		},
		{
			MethodName: "CreatePersistentDisposition",
			Handler:    _EpcisService_CreatePersistentDisposition_Handler,
		},
		{
			MethodName: "GetPersistentDispositions",
			Handler:    _EpcisService_GetPersistentDispositions_Handler,
		},
		{
			MethodName: "CreateEpc",
			Handler:    _EpcisService_CreateEpc_Handler,
		},
		{
			MethodName: "GetEpcs",
			Handler:    _EpcisService_GetEpcs_Handler,
		},
		{
			MethodName: "CreateBizTransaction",
			Handler:    _EpcisService_CreateBizTransaction_Handler,
		},
		{
			MethodName: "GetBizTransactions",
			Handler:    _EpcisService_GetBizTransactions_Handler,
		},
		{
			MethodName: "CreateQuantityElement",
			Handler:    _EpcisService_CreateQuantityElement_Handler,
		},
		{
			MethodName: "GetQuantityElements",
			Handler:    _EpcisService_GetQuantityElements_Handler,
		},
		{
			MethodName: "CreateSource",
			Handler:    _EpcisService_CreateSource_Handler,
		},
		{
			MethodName: "GetSources",
			Handler:    _EpcisService_GetSources_Handler,
		},
		{
			MethodName: "CreateDestination",
			Handler:    _EpcisService_CreateDestination_Handler,
		},
		{
			MethodName: "GetDestinations",
			Handler:    _EpcisService_GetDestinations_Handler,
		},
		{
			MethodName: "CreateSensorElement",
			Handler:    _EpcisService_CreateSensorElement_Handler,
		},
		{
			MethodName: "GetSensorElements",
			Handler:    _EpcisService_GetSensorElements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "epcis/v1/epcis.proto",
}
