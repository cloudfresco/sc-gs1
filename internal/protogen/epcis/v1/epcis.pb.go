// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: epcis/v1/epcis.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-gs1/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ObjectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcisEventD            *v1.EpcisEventD          `protobuf:"bytes,1,opt,name=epcis_event_d,json=epcisEventD,proto3" json:"epcis_event_d,omitempty"`
	EpcisEventT            *v1.EpcisEventT          `protobuf:"bytes,2,opt,name=epcis_event_t,json=epcisEventT,proto3" json:"epcis_event_t,omitempty"`
	ErrorDeclarationD      *v1.ErrorDeclarationD    `protobuf:"bytes,3,opt,name=error_declaration_d,json=errorDeclarationD,proto3" json:"error_declaration_d,omitempty"`
	ErrorDeclarationT      *v1.ErrorDeclarationT    `protobuf:"bytes,4,opt,name=error_declaration_t,json=errorDeclarationT,proto3" json:"error_declaration_t,omitempty"`
	ObjectEventD           *ObjectEventD            `protobuf:"bytes,5,opt,name=object_event_d,json=objectEventD,proto3" json:"object_event_d,omitempty"`
	CrUpdUser              *v1.CrUpdUser            `protobuf:"bytes,6,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	PersistentDispositions []*PersistentDisposition `protobuf:"bytes,7,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
	EpcList                []*Epc                   `protobuf:"bytes,8,rep,name=epc_list,json=epcList,proto3" json:"epc_list,omitempty"`
	BizTransactionList     []*BizTransaction        `protobuf:"bytes,9,rep,name=biz_transaction_list,json=bizTransactionList,proto3" json:"biz_transaction_list,omitempty"`
	QuantityList           []*QuantityElement       `protobuf:"bytes,10,rep,name=quantity_list,json=quantityList,proto3" json:"quantity_list,omitempty"`
	SourceList             []*Source                `protobuf:"bytes,11,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	DestinationList        []*Destination           `protobuf:"bytes,12,rep,name=destination_list,json=destinationList,proto3" json:"destination_list,omitempty"`
	SensorElementList      []*SensorElement         `protobuf:"bytes,13,rep,name=sensor_element_list,json=sensorElementList,proto3" json:"sensor_element_list,omitempty"`
}

func (x *ObjectEvent) Reset() {
	*x = ObjectEvent{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEvent) ProtoMessage() {}

func (x *ObjectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEvent.ProtoReflect.Descriptor instead.
func (*ObjectEvent) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{0}
}

func (x *ObjectEvent) GetEpcisEventD() *v1.EpcisEventD {
	if x != nil {
		return x.EpcisEventD
	}
	return nil
}

func (x *ObjectEvent) GetEpcisEventT() *v1.EpcisEventT {
	if x != nil {
		return x.EpcisEventT
	}
	return nil
}

func (x *ObjectEvent) GetErrorDeclarationD() *v1.ErrorDeclarationD {
	if x != nil {
		return x.ErrorDeclarationD
	}
	return nil
}

func (x *ObjectEvent) GetErrorDeclarationT() *v1.ErrorDeclarationT {
	if x != nil {
		return x.ErrorDeclarationT
	}
	return nil
}

func (x *ObjectEvent) GetObjectEventD() *ObjectEventD {
	if x != nil {
		return x.ObjectEventD
	}
	return nil
}

func (x *ObjectEvent) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ObjectEvent) GetPersistentDispositions() []*PersistentDisposition {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

func (x *ObjectEvent) GetEpcList() []*Epc {
	if x != nil {
		return x.EpcList
	}
	return nil
}

func (x *ObjectEvent) GetBizTransactionList() []*BizTransaction {
	if x != nil {
		return x.BizTransactionList
	}
	return nil
}

func (x *ObjectEvent) GetQuantityList() []*QuantityElement {
	if x != nil {
		return x.QuantityList
	}
	return nil
}

func (x *ObjectEvent) GetSourceList() []*Source {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *ObjectEvent) GetDestinationList() []*Destination {
	if x != nil {
		return x.DestinationList
	}
	return nil
}

func (x *ObjectEvent) GetSensorElementList() []*SensorElement {
	if x != nil {
		return x.SensorElementList
	}
	return nil
}

type ObjectEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4       []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS         string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	Action      string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	BizStep     string `protobuf:"bytes,5,opt,name=biz_step,json=bizStep,proto3" json:"biz_step,omitempty"`
	Disposition string `protobuf:"bytes,6,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ReadPoint   string `protobuf:"bytes,7,opt,name=read_point,json=readPoint,proto3" json:"read_point,omitempty"`
	BizLocation string `protobuf:"bytes,8,opt,name=biz_location,json=bizLocation,proto3" json:"biz_location,omitempty"`
	Ilmd        string `protobuf:"bytes,9,opt,name=ilmd,proto3" json:"ilmd,omitempty"`
}

func (x *ObjectEventD) Reset() {
	*x = ObjectEventD{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEventD) ProtoMessage() {}

func (x *ObjectEventD) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEventD.ProtoReflect.Descriptor instead.
func (*ObjectEventD) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ObjectEventD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ObjectEventD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ObjectEventD) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ObjectEventD) GetBizStep() string {
	if x != nil {
		return x.BizStep
	}
	return ""
}

func (x *ObjectEventD) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *ObjectEventD) GetReadPoint() string {
	if x != nil {
		return x.ReadPoint
	}
	return ""
}

func (x *ObjectEventD) GetBizLocation() string {
	if x != nil {
		return x.BizLocation
	}
	return ""
}

func (x *ObjectEventD) GetIlmd() string {
	if x != nil {
		return x.Ilmd
	}
	return ""
}

type CreateObjectEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId                string                                `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTimeZoneOffset    string                                `protobuf:"bytes,2,opt,name=event_time_zone_offset,json=eventTimeZoneOffset,proto3" json:"event_time_zone_offset,omitempty"`
	Certification          string                                `protobuf:"bytes,3,opt,name=certification,proto3" json:"certification,omitempty"`
	EventTime              string                                `protobuf:"bytes,4,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	Reason                 string                                `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	DeclarationTime        string                                `protobuf:"bytes,6,opt,name=declaration_time,json=declarationTime,proto3" json:"declaration_time,omitempty"`
	Action                 string                                `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
	BizStep                string                                `protobuf:"bytes,8,opt,name=biz_step,json=bizStep,proto3" json:"biz_step,omitempty"`
	Disposition            string                                `protobuf:"bytes,9,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ReadPoint              string                                `protobuf:"bytes,10,opt,name=read_point,json=readPoint,proto3" json:"read_point,omitempty"`
	BizLocation            string                                `protobuf:"bytes,11,opt,name=biz_location,json=bizLocation,proto3" json:"biz_location,omitempty"`
	Ilmd                   string                                `protobuf:"bytes,12,opt,name=ilmd,proto3" json:"ilmd,omitempty"`
	UserId                 string                                `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string                                `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string                                `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	PersistentDispositions []*CreatePersistentDispositionRequest `protobuf:"bytes,16,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
	EpcList                []*CreateEpcRequest                   `protobuf:"bytes,17,rep,name=epc_list,json=epcList,proto3" json:"epc_list,omitempty"`
	BizTransactionList     []*CreateBizTransactionRequest        `protobuf:"bytes,18,rep,name=biz_transaction_list,json=bizTransactionList,proto3" json:"biz_transaction_list,omitempty"`
	QuantityList           []*CreateQuantityElementRequest       `protobuf:"bytes,19,rep,name=quantity_list,json=quantityList,proto3" json:"quantity_list,omitempty"`
	SourceList             []*CreateSourceRequest                `protobuf:"bytes,20,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	DestinationList        []*CreateDestinationRequest           `protobuf:"bytes,21,rep,name=destination_list,json=destinationList,proto3" json:"destination_list,omitempty"`
	SensorElementList      []*CreateSensorElementRequest         `protobuf:"bytes,22,rep,name=sensor_element_list,json=sensorElementList,proto3" json:"sensor_element_list,omitempty"`
}

func (x *CreateObjectEventRequest) Reset() {
	*x = CreateObjectEventRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateObjectEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObjectEventRequest) ProtoMessage() {}

func (x *CreateObjectEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObjectEventRequest.ProtoReflect.Descriptor instead.
func (*CreateObjectEventRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{2}
}

func (x *CreateObjectEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateObjectEventRequest) GetEventTimeZoneOffset() string {
	if x != nil {
		return x.EventTimeZoneOffset
	}
	return ""
}

func (x *CreateObjectEventRequest) GetCertification() string {
	if x != nil {
		return x.Certification
	}
	return ""
}

func (x *CreateObjectEventRequest) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *CreateObjectEventRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateObjectEventRequest) GetDeclarationTime() string {
	if x != nil {
		return x.DeclarationTime
	}
	return ""
}

func (x *CreateObjectEventRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CreateObjectEventRequest) GetBizStep() string {
	if x != nil {
		return x.BizStep
	}
	return ""
}

func (x *CreateObjectEventRequest) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *CreateObjectEventRequest) GetReadPoint() string {
	if x != nil {
		return x.ReadPoint
	}
	return ""
}

func (x *CreateObjectEventRequest) GetBizLocation() string {
	if x != nil {
		return x.BizLocation
	}
	return ""
}

func (x *CreateObjectEventRequest) GetIlmd() string {
	if x != nil {
		return x.Ilmd
	}
	return ""
}

func (x *CreateObjectEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateObjectEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateObjectEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateObjectEventRequest) GetPersistentDispositions() []*CreatePersistentDispositionRequest {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

func (x *CreateObjectEventRequest) GetEpcList() []*CreateEpcRequest {
	if x != nil {
		return x.EpcList
	}
	return nil
}

func (x *CreateObjectEventRequest) GetBizTransactionList() []*CreateBizTransactionRequest {
	if x != nil {
		return x.BizTransactionList
	}
	return nil
}

func (x *CreateObjectEventRequest) GetQuantityList() []*CreateQuantityElementRequest {
	if x != nil {
		return x.QuantityList
	}
	return nil
}

func (x *CreateObjectEventRequest) GetSourceList() []*CreateSourceRequest {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *CreateObjectEventRequest) GetDestinationList() []*CreateDestinationRequest {
	if x != nil {
		return x.DestinationList
	}
	return nil
}

func (x *CreateObjectEventRequest) GetSensorElementList() []*CreateSensorElementRequest {
	if x != nil {
		return x.SensorElementList
	}
	return nil
}

type CreateObjectEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectEvent *ObjectEvent `protobuf:"bytes,1,opt,name=object_event,json=objectEvent,proto3" json:"object_event,omitempty"`
}

func (x *CreateObjectEventResponse) Reset() {
	*x = CreateObjectEventResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateObjectEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObjectEventResponse) ProtoMessage() {}

func (x *CreateObjectEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObjectEventResponse.ProtoReflect.Descriptor instead.
func (*CreateObjectEventResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{3}
}

func (x *CreateObjectEventResponse) GetObjectEvent() *ObjectEvent {
	if x != nil {
		return x.ObjectEvent
	}
	return nil
}

type GetObjectEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetObjectEventRequest) Reset() {
	*x = GetObjectEventRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetObjectEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectEventRequest) ProtoMessage() {}

func (x *GetObjectEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectEventRequest.ProtoReflect.Descriptor instead.
func (*GetObjectEventRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{4}
}

func (x *GetObjectEventRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetObjectEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectEvent *ObjectEvent `protobuf:"bytes,1,opt,name=object_event,json=objectEvent,proto3" json:"object_event,omitempty"`
}

func (x *GetObjectEventResponse) Reset() {
	*x = GetObjectEventResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetObjectEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectEventResponse) ProtoMessage() {}

func (x *GetObjectEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectEventResponse.ProtoReflect.Descriptor instead.
func (*GetObjectEventResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{5}
}

func (x *GetObjectEventResponse) GetObjectEvent() *ObjectEvent {
	if x != nil {
		return x.ObjectEvent
	}
	return nil
}

type GetObjectEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetObjectEventsRequest) Reset() {
	*x = GetObjectEventsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetObjectEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectEventsRequest) ProtoMessage() {}

func (x *GetObjectEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectEventsRequest.ProtoReflect.Descriptor instead.
func (*GetObjectEventsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{6}
}

func (x *GetObjectEventsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetObjectEventsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetObjectEventsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetObjectEventsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetObjectEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectEvents []*ObjectEvent `protobuf:"bytes,1,rep,name=object_events,json=objectEvents,proto3" json:"object_events,omitempty"`
	NextCursor   string         `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetObjectEventsResponse) Reset() {
	*x = GetObjectEventsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetObjectEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectEventsResponse) ProtoMessage() {}

func (x *GetObjectEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectEventsResponse.ProtoReflect.Descriptor instead.
func (*GetObjectEventsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{7}
}

func (x *GetObjectEventsResponse) GetObjectEvents() []*ObjectEvent {
	if x != nil {
		return x.ObjectEvents
	}
	return nil
}

func (x *GetObjectEventsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type AggregationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcisEventD            *v1.EpcisEventD          `protobuf:"bytes,1,opt,name=epcis_event_d,json=epcisEventD,proto3" json:"epcis_event_d,omitempty"`
	EpcisEventT            *v1.EpcisEventT          `protobuf:"bytes,2,opt,name=epcis_event_t,json=epcisEventT,proto3" json:"epcis_event_t,omitempty"`
	ErrorDeclarationD      *v1.ErrorDeclarationD    `protobuf:"bytes,3,opt,name=error_declaration_d,json=errorDeclarationD,proto3" json:"error_declaration_d,omitempty"`
	ErrorDeclarationT      *v1.ErrorDeclarationT    `protobuf:"bytes,4,opt,name=error_declaration_t,json=errorDeclarationT,proto3" json:"error_declaration_t,omitempty"`
	AggregationEventD      *AggregationEventD       `protobuf:"bytes,5,opt,name=aggregation_event_d,json=aggregationEventD,proto3" json:"aggregation_event_d,omitempty"`
	CrUpdUser              *v1.CrUpdUser            `protobuf:"bytes,6,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	PersistentDispositions []*PersistentDisposition `protobuf:"bytes,7,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
	ChildEpcs              []*Epc                   `protobuf:"bytes,8,rep,name=child_epcs,json=childEpcs,proto3" json:"child_epcs,omitempty"`
	BizTransactionList     []*BizTransaction        `protobuf:"bytes,9,rep,name=biz_transaction_list,json=bizTransactionList,proto3" json:"biz_transaction_list,omitempty"`
	ChildQuantityList      []*QuantityElement       `protobuf:"bytes,10,rep,name=child_quantity_list,json=childQuantityList,proto3" json:"child_quantity_list,omitempty"`
	SourceList             []*Source                `protobuf:"bytes,11,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	DestinationList        []*Destination           `protobuf:"bytes,12,rep,name=destination_list,json=destinationList,proto3" json:"destination_list,omitempty"`
	SensorElementList      []*SensorElement         `protobuf:"bytes,13,rep,name=sensor_element_list,json=sensorElementList,proto3" json:"sensor_element_list,omitempty"`
}

func (x *AggregationEvent) Reset() {
	*x = AggregationEvent{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationEvent) ProtoMessage() {}

func (x *AggregationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationEvent.ProtoReflect.Descriptor instead.
func (*AggregationEvent) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{8}
}

func (x *AggregationEvent) GetEpcisEventD() *v1.EpcisEventD {
	if x != nil {
		return x.EpcisEventD
	}
	return nil
}

func (x *AggregationEvent) GetEpcisEventT() *v1.EpcisEventT {
	if x != nil {
		return x.EpcisEventT
	}
	return nil
}

func (x *AggregationEvent) GetErrorDeclarationD() *v1.ErrorDeclarationD {
	if x != nil {
		return x.ErrorDeclarationD
	}
	return nil
}

func (x *AggregationEvent) GetErrorDeclarationT() *v1.ErrorDeclarationT {
	if x != nil {
		return x.ErrorDeclarationT
	}
	return nil
}

func (x *AggregationEvent) GetAggregationEventD() *AggregationEventD {
	if x != nil {
		return x.AggregationEventD
	}
	return nil
}

func (x *AggregationEvent) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *AggregationEvent) GetPersistentDispositions() []*PersistentDisposition {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

func (x *AggregationEvent) GetChildEpcs() []*Epc {
	if x != nil {
		return x.ChildEpcs
	}
	return nil
}

func (x *AggregationEvent) GetBizTransactionList() []*BizTransaction {
	if x != nil {
		return x.BizTransactionList
	}
	return nil
}

func (x *AggregationEvent) GetChildQuantityList() []*QuantityElement {
	if x != nil {
		return x.ChildQuantityList
	}
	return nil
}

func (x *AggregationEvent) GetSourceList() []*Source {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *AggregationEvent) GetDestinationList() []*Destination {
	if x != nil {
		return x.DestinationList
	}
	return nil
}

func (x *AggregationEvent) GetSensorElementList() []*SensorElement {
	if x != nil {
		return x.SensorElementList
	}
	return nil
}

type AggregationEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4       []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS         string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ParentId    string `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Action      string `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	BizStep     string `protobuf:"bytes,6,opt,name=biz_step,json=bizStep,proto3" json:"biz_step,omitempty"`
	Disposition string `protobuf:"bytes,7,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ReadPoint   string `protobuf:"bytes,8,opt,name=read_point,json=readPoint,proto3" json:"read_point,omitempty"`
	BizLocation string `protobuf:"bytes,9,opt,name=biz_location,json=bizLocation,proto3" json:"biz_location,omitempty"`
}

func (x *AggregationEventD) Reset() {
	*x = AggregationEventD{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregationEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationEventD) ProtoMessage() {}

func (x *AggregationEventD) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationEventD.ProtoReflect.Descriptor instead.
func (*AggregationEventD) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{9}
}

func (x *AggregationEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AggregationEventD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *AggregationEventD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *AggregationEventD) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *AggregationEventD) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AggregationEventD) GetBizStep() string {
	if x != nil {
		return x.BizStep
	}
	return ""
}

func (x *AggregationEventD) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *AggregationEventD) GetReadPoint() string {
	if x != nil {
		return x.ReadPoint
	}
	return ""
}

func (x *AggregationEventD) GetBizLocation() string {
	if x != nil {
		return x.BizLocation
	}
	return ""
}

type CreateAggregationEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId                string                                `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTimeZoneOffset    string                                `protobuf:"bytes,2,opt,name=event_time_zone_offset,json=eventTimeZoneOffset,proto3" json:"event_time_zone_offset,omitempty"`
	Certification          string                                `protobuf:"bytes,3,opt,name=certification,proto3" json:"certification,omitempty"`
	EventTime              string                                `protobuf:"bytes,4,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	Reason                 string                                `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	DeclarationTime        string                                `protobuf:"bytes,6,opt,name=declaration_time,json=declarationTime,proto3" json:"declaration_time,omitempty"`
	ParentId               string                                `protobuf:"bytes,7,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Action                 string                                `protobuf:"bytes,8,opt,name=action,proto3" json:"action,omitempty"`
	BizStep                string                                `protobuf:"bytes,9,opt,name=biz_step,json=bizStep,proto3" json:"biz_step,omitempty"`
	Disposition            string                                `protobuf:"bytes,10,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ReadPoint              string                                `protobuf:"bytes,11,opt,name=read_point,json=readPoint,proto3" json:"read_point,omitempty"`
	BizLocation            string                                `protobuf:"bytes,12,opt,name=biz_location,json=bizLocation,proto3" json:"biz_location,omitempty"`
	UserId                 string                                `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string                                `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string                                `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	PersistentDispositions []*CreatePersistentDispositionRequest `protobuf:"bytes,16,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
	ChildEpcs              []*CreateEpcRequest                   `protobuf:"bytes,17,rep,name=child_epcs,json=childEpcs,proto3" json:"child_epcs,omitempty"`
	BizTransactionList     []*CreateBizTransactionRequest        `protobuf:"bytes,18,rep,name=biz_transaction_list,json=bizTransactionList,proto3" json:"biz_transaction_list,omitempty"`
	ChildQuantityList      []*CreateQuantityElementRequest       `protobuf:"bytes,19,rep,name=child_quantity_list,json=childQuantityList,proto3" json:"child_quantity_list,omitempty"`
	SourceList             []*CreateSourceRequest                `protobuf:"bytes,20,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	DestinationList        []*CreateDestinationRequest           `protobuf:"bytes,21,rep,name=destination_list,json=destinationList,proto3" json:"destination_list,omitempty"`
	SensorElementList      []*CreateSensorElementRequest         `protobuf:"bytes,22,rep,name=sensor_element_list,json=sensorElementList,proto3" json:"sensor_element_list,omitempty"`
}

func (x *CreateAggregationEventRequest) Reset() {
	*x = CreateAggregationEventRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAggregationEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAggregationEventRequest) ProtoMessage() {}

func (x *CreateAggregationEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAggregationEventRequest.ProtoReflect.Descriptor instead.
func (*CreateAggregationEventRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{10}
}

func (x *CreateAggregationEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetEventTimeZoneOffset() string {
	if x != nil {
		return x.EventTimeZoneOffset
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetCertification() string {
	if x != nil {
		return x.Certification
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetDeclarationTime() string {
	if x != nil {
		return x.DeclarationTime
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetBizStep() string {
	if x != nil {
		return x.BizStep
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetReadPoint() string {
	if x != nil {
		return x.ReadPoint
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetBizLocation() string {
	if x != nil {
		return x.BizLocation
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateAggregationEventRequest) GetPersistentDispositions() []*CreatePersistentDispositionRequest {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

func (x *CreateAggregationEventRequest) GetChildEpcs() []*CreateEpcRequest {
	if x != nil {
		return x.ChildEpcs
	}
	return nil
}

func (x *CreateAggregationEventRequest) GetBizTransactionList() []*CreateBizTransactionRequest {
	if x != nil {
		return x.BizTransactionList
	}
	return nil
}

func (x *CreateAggregationEventRequest) GetChildQuantityList() []*CreateQuantityElementRequest {
	if x != nil {
		return x.ChildQuantityList
	}
	return nil
}

func (x *CreateAggregationEventRequest) GetSourceList() []*CreateSourceRequest {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *CreateAggregationEventRequest) GetDestinationList() []*CreateDestinationRequest {
	if x != nil {
		return x.DestinationList
	}
	return nil
}

func (x *CreateAggregationEventRequest) GetSensorElementList() []*CreateSensorElementRequest {
	if x != nil {
		return x.SensorElementList
	}
	return nil
}

type CreateAggregationEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationEvent *AggregationEvent `protobuf:"bytes,1,opt,name=aggregation_event,json=aggregationEvent,proto3" json:"aggregation_event,omitempty"`
}

func (x *CreateAggregationEventResponse) Reset() {
	*x = CreateAggregationEventResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAggregationEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAggregationEventResponse) ProtoMessage() {}

func (x *CreateAggregationEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAggregationEventResponse.ProtoReflect.Descriptor instead.
func (*CreateAggregationEventResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{11}
}

func (x *CreateAggregationEventResponse) GetAggregationEvent() *AggregationEvent {
	if x != nil {
		return x.AggregationEvent
	}
	return nil
}

type GetAggregationEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetAggregationEventRequest) Reset() {
	*x = GetAggregationEventRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAggregationEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationEventRequest) ProtoMessage() {}

func (x *GetAggregationEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationEventRequest.ProtoReflect.Descriptor instead.
func (*GetAggregationEventRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{12}
}

func (x *GetAggregationEventRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetAggregationEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationEvent *AggregationEvent `protobuf:"bytes,1,opt,name=aggregation_event,json=aggregationEvent,proto3" json:"aggregation_event,omitempty"`
}

func (x *GetAggregationEventResponse) Reset() {
	*x = GetAggregationEventResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAggregationEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationEventResponse) ProtoMessage() {}

func (x *GetAggregationEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationEventResponse.ProtoReflect.Descriptor instead.
func (*GetAggregationEventResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{13}
}

func (x *GetAggregationEventResponse) GetAggregationEvent() *AggregationEvent {
	if x != nil {
		return x.AggregationEvent
	}
	return nil
}

type GetAggregationEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetAggregationEventsRequest) Reset() {
	*x = GetAggregationEventsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAggregationEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationEventsRequest) ProtoMessage() {}

func (x *GetAggregationEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationEventsRequest.ProtoReflect.Descriptor instead.
func (*GetAggregationEventsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{14}
}

func (x *GetAggregationEventsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetAggregationEventsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetAggregationEventsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetAggregationEventsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetAggregationEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationEvents []*AggregationEvent `protobuf:"bytes,1,rep,name=aggregation_events,json=aggregationEvents,proto3" json:"aggregation_events,omitempty"`
	NextCursor        string              `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetAggregationEventsResponse) Reset() {
	*x = GetAggregationEventsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAggregationEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationEventsResponse) ProtoMessage() {}

func (x *GetAggregationEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationEventsResponse.ProtoReflect.Descriptor instead.
func (*GetAggregationEventsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{15}
}

func (x *GetAggregationEventsResponse) GetAggregationEvents() []*AggregationEvent {
	if x != nil {
		return x.AggregationEvents
	}
	return nil
}

func (x *GetAggregationEventsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type AssociationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcisEventD            *v1.EpcisEventD          `protobuf:"bytes,1,opt,name=epcis_event_d,json=epcisEventD,proto3" json:"epcis_event_d,omitempty"`
	EpcisEventT            *v1.EpcisEventT          `protobuf:"bytes,2,opt,name=epcis_event_t,json=epcisEventT,proto3" json:"epcis_event_t,omitempty"`
	ErrorDeclarationD      *v1.ErrorDeclarationD    `protobuf:"bytes,3,opt,name=error_declaration_d,json=errorDeclarationD,proto3" json:"error_declaration_d,omitempty"`
	ErrorDeclarationT      *v1.ErrorDeclarationT    `protobuf:"bytes,4,opt,name=error_declaration_t,json=errorDeclarationT,proto3" json:"error_declaration_t,omitempty"`
	AssociationEventD      *AssociationEventD       `protobuf:"bytes,5,opt,name=association_event_d,json=associationEventD,proto3" json:"association_event_d,omitempty"`
	CrUpdUser              *v1.CrUpdUser            `protobuf:"bytes,6,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	PersistentDispositions []*PersistentDisposition `protobuf:"bytes,7,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
	ChildEpcs              []*Epc                   `protobuf:"bytes,8,rep,name=child_epcs,json=childEpcs,proto3" json:"child_epcs,omitempty"`
	BizTransactionList     []*BizTransaction        `protobuf:"bytes,9,rep,name=biz_transaction_list,json=bizTransactionList,proto3" json:"biz_transaction_list,omitempty"`
	ChildQuantityList      []*QuantityElement       `protobuf:"bytes,10,rep,name=child_quantity_list,json=childQuantityList,proto3" json:"child_quantity_list,omitempty"`
	SourceList             []*Source                `protobuf:"bytes,11,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	DestinationList        []*Destination           `protobuf:"bytes,12,rep,name=destination_list,json=destinationList,proto3" json:"destination_list,omitempty"`
	SensorElementList      []*SensorElement         `protobuf:"bytes,13,rep,name=sensor_element_list,json=sensorElementList,proto3" json:"sensor_element_list,omitempty"`
}

func (x *AssociationEvent) Reset() {
	*x = AssociationEvent{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssociationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociationEvent) ProtoMessage() {}

func (x *AssociationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociationEvent.ProtoReflect.Descriptor instead.
func (*AssociationEvent) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{16}
}

func (x *AssociationEvent) GetEpcisEventD() *v1.EpcisEventD {
	if x != nil {
		return x.EpcisEventD
	}
	return nil
}

func (x *AssociationEvent) GetEpcisEventT() *v1.EpcisEventT {
	if x != nil {
		return x.EpcisEventT
	}
	return nil
}

func (x *AssociationEvent) GetErrorDeclarationD() *v1.ErrorDeclarationD {
	if x != nil {
		return x.ErrorDeclarationD
	}
	return nil
}

func (x *AssociationEvent) GetErrorDeclarationT() *v1.ErrorDeclarationT {
	if x != nil {
		return x.ErrorDeclarationT
	}
	return nil
}

func (x *AssociationEvent) GetAssociationEventD() *AssociationEventD {
	if x != nil {
		return x.AssociationEventD
	}
	return nil
}

func (x *AssociationEvent) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *AssociationEvent) GetPersistentDispositions() []*PersistentDisposition {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

func (x *AssociationEvent) GetChildEpcs() []*Epc {
	if x != nil {
		return x.ChildEpcs
	}
	return nil
}

func (x *AssociationEvent) GetBizTransactionList() []*BizTransaction {
	if x != nil {
		return x.BizTransactionList
	}
	return nil
}

func (x *AssociationEvent) GetChildQuantityList() []*QuantityElement {
	if x != nil {
		return x.ChildQuantityList
	}
	return nil
}

func (x *AssociationEvent) GetSourceList() []*Source {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *AssociationEvent) GetDestinationList() []*Destination {
	if x != nil {
		return x.DestinationList
	}
	return nil
}

func (x *AssociationEvent) GetSensorElementList() []*SensorElement {
	if x != nil {
		return x.SensorElementList
	}
	return nil
}

type AssociationEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4       []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS         string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ParentId    string `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Action      string `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	BizStep     string `protobuf:"bytes,6,opt,name=biz_step,json=bizStep,proto3" json:"biz_step,omitempty"`
	Disposition string `protobuf:"bytes,7,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ReadPoint   string `protobuf:"bytes,8,opt,name=read_point,json=readPoint,proto3" json:"read_point,omitempty"`
	BizLocation string `protobuf:"bytes,9,opt,name=biz_location,json=bizLocation,proto3" json:"biz_location,omitempty"`
}

func (x *AssociationEventD) Reset() {
	*x = AssociationEventD{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssociationEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociationEventD) ProtoMessage() {}

func (x *AssociationEventD) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociationEventD.ProtoReflect.Descriptor instead.
func (*AssociationEventD) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{17}
}

func (x *AssociationEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssociationEventD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *AssociationEventD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *AssociationEventD) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *AssociationEventD) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AssociationEventD) GetBizStep() string {
	if x != nil {
		return x.BizStep
	}
	return ""
}

func (x *AssociationEventD) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *AssociationEventD) GetReadPoint() string {
	if x != nil {
		return x.ReadPoint
	}
	return ""
}

func (x *AssociationEventD) GetBizLocation() string {
	if x != nil {
		return x.BizLocation
	}
	return ""
}

type CreateAssociationEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId                string                                `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTimeZoneOffset    string                                `protobuf:"bytes,2,opt,name=event_time_zone_offset,json=eventTimeZoneOffset,proto3" json:"event_time_zone_offset,omitempty"`
	Certification          string                                `protobuf:"bytes,3,opt,name=certification,proto3" json:"certification,omitempty"`
	EventTime              string                                `protobuf:"bytes,4,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	Reason                 string                                `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	DeclarationTime        string                                `protobuf:"bytes,6,opt,name=declaration_time,json=declarationTime,proto3" json:"declaration_time,omitempty"`
	ParentId               string                                `protobuf:"bytes,7,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Action                 string                                `protobuf:"bytes,8,opt,name=action,proto3" json:"action,omitempty"`
	BizStep                string                                `protobuf:"bytes,9,opt,name=biz_step,json=bizStep,proto3" json:"biz_step,omitempty"`
	Disposition            string                                `protobuf:"bytes,10,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ReadPoint              string                                `protobuf:"bytes,11,opt,name=read_point,json=readPoint,proto3" json:"read_point,omitempty"`
	BizLocation            string                                `protobuf:"bytes,12,opt,name=biz_location,json=bizLocation,proto3" json:"biz_location,omitempty"`
	UserId                 string                                `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string                                `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string                                `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	PersistentDispositions []*CreatePersistentDispositionRequest `protobuf:"bytes,16,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
	ChildEpcs              []*CreateEpcRequest                   `protobuf:"bytes,17,rep,name=child_epcs,json=childEpcs,proto3" json:"child_epcs,omitempty"`
	BizTransactionList     []*CreateBizTransactionRequest        `protobuf:"bytes,18,rep,name=biz_transaction_list,json=bizTransactionList,proto3" json:"biz_transaction_list,omitempty"`
	ChildQuantityList      []*CreateQuantityElementRequest       `protobuf:"bytes,19,rep,name=child_quantity_list,json=childQuantityList,proto3" json:"child_quantity_list,omitempty"`
	SourceList             []*CreateSourceRequest                `protobuf:"bytes,20,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	DestinationList        []*CreateDestinationRequest           `protobuf:"bytes,21,rep,name=destination_list,json=destinationList,proto3" json:"destination_list,omitempty"`
	SensorElementList      []*CreateSensorElementRequest         `protobuf:"bytes,22,rep,name=sensor_element_list,json=sensorElementList,proto3" json:"sensor_element_list,omitempty"`
}

func (x *CreateAssociationEventRequest) Reset() {
	*x = CreateAssociationEventRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAssociationEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssociationEventRequest) ProtoMessage() {}

func (x *CreateAssociationEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssociationEventRequest.ProtoReflect.Descriptor instead.
func (*CreateAssociationEventRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{18}
}

func (x *CreateAssociationEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetEventTimeZoneOffset() string {
	if x != nil {
		return x.EventTimeZoneOffset
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetCertification() string {
	if x != nil {
		return x.Certification
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetDeclarationTime() string {
	if x != nil {
		return x.DeclarationTime
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetBizStep() string {
	if x != nil {
		return x.BizStep
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetReadPoint() string {
	if x != nil {
		return x.ReadPoint
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetBizLocation() string {
	if x != nil {
		return x.BizLocation
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateAssociationEventRequest) GetPersistentDispositions() []*CreatePersistentDispositionRequest {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

func (x *CreateAssociationEventRequest) GetChildEpcs() []*CreateEpcRequest {
	if x != nil {
		return x.ChildEpcs
	}
	return nil
}

func (x *CreateAssociationEventRequest) GetBizTransactionList() []*CreateBizTransactionRequest {
	if x != nil {
		return x.BizTransactionList
	}
	return nil
}

func (x *CreateAssociationEventRequest) GetChildQuantityList() []*CreateQuantityElementRequest {
	if x != nil {
		return x.ChildQuantityList
	}
	return nil
}

func (x *CreateAssociationEventRequest) GetSourceList() []*CreateSourceRequest {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *CreateAssociationEventRequest) GetDestinationList() []*CreateDestinationRequest {
	if x != nil {
		return x.DestinationList
	}
	return nil
}

func (x *CreateAssociationEventRequest) GetSensorElementList() []*CreateSensorElementRequest {
	if x != nil {
		return x.SensorElementList
	}
	return nil
}

type CreateAssociationEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssociationEvent *AssociationEvent `protobuf:"bytes,1,opt,name=association_event,json=associationEvent,proto3" json:"association_event,omitempty"`
}

func (x *CreateAssociationEventResponse) Reset() {
	*x = CreateAssociationEventResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAssociationEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssociationEventResponse) ProtoMessage() {}

func (x *CreateAssociationEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssociationEventResponse.ProtoReflect.Descriptor instead.
func (*CreateAssociationEventResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{19}
}

func (x *CreateAssociationEventResponse) GetAssociationEvent() *AssociationEvent {
	if x != nil {
		return x.AssociationEvent
	}
	return nil
}

type GetAssociationEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetAssociationEventRequest) Reset() {
	*x = GetAssociationEventRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssociationEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssociationEventRequest) ProtoMessage() {}

func (x *GetAssociationEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssociationEventRequest.ProtoReflect.Descriptor instead.
func (*GetAssociationEventRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{20}
}

func (x *GetAssociationEventRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetAssociationEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssociationEvent *AssociationEvent `protobuf:"bytes,1,opt,name=association_event,json=associationEvent,proto3" json:"association_event,omitempty"`
}

func (x *GetAssociationEventResponse) Reset() {
	*x = GetAssociationEventResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssociationEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssociationEventResponse) ProtoMessage() {}

func (x *GetAssociationEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssociationEventResponse.ProtoReflect.Descriptor instead.
func (*GetAssociationEventResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{21}
}

func (x *GetAssociationEventResponse) GetAssociationEvent() *AssociationEvent {
	if x != nil {
		return x.AssociationEvent
	}
	return nil
}

type GetAssociationEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetAssociationEventsRequest) Reset() {
	*x = GetAssociationEventsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssociationEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssociationEventsRequest) ProtoMessage() {}

func (x *GetAssociationEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssociationEventsRequest.ProtoReflect.Descriptor instead.
func (*GetAssociationEventsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{22}
}

func (x *GetAssociationEventsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetAssociationEventsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetAssociationEventsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetAssociationEventsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetAssociationEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssociationEvents []*AssociationEvent `protobuf:"bytes,1,rep,name=association_events,json=associationEvents,proto3" json:"association_events,omitempty"`
	NextCursor        string              `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetAssociationEventsResponse) Reset() {
	*x = GetAssociationEventsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssociationEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssociationEventsResponse) ProtoMessage() {}

func (x *GetAssociationEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssociationEventsResponse.ProtoReflect.Descriptor instead.
func (*GetAssociationEventsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{23}
}

func (x *GetAssociationEventsResponse) GetAssociationEvents() []*AssociationEvent {
	if x != nil {
		return x.AssociationEvents
	}
	return nil
}

func (x *GetAssociationEventsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type TransactionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcisEventD            *v1.EpcisEventD          `protobuf:"bytes,1,opt,name=epcis_event_d,json=epcisEventD,proto3" json:"epcis_event_d,omitempty"`
	EpcisEventT            *v1.EpcisEventT          `protobuf:"bytes,2,opt,name=epcis_event_t,json=epcisEventT,proto3" json:"epcis_event_t,omitempty"`
	ErrorDeclarationD      *v1.ErrorDeclarationD    `protobuf:"bytes,3,opt,name=error_declaration_d,json=errorDeclarationD,proto3" json:"error_declaration_d,omitempty"`
	ErrorDeclarationT      *v1.ErrorDeclarationT    `protobuf:"bytes,4,opt,name=error_declaration_t,json=errorDeclarationT,proto3" json:"error_declaration_t,omitempty"`
	TransactionEventD      *TransactionEventD       `protobuf:"bytes,5,opt,name=transaction_event_d,json=transactionEventD,proto3" json:"transaction_event_d,omitempty"`
	CrUpdUser              *v1.CrUpdUser            `protobuf:"bytes,6,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	PersistentDispositions []*PersistentDisposition `protobuf:"bytes,7,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
	EpcList                []*Epc                   `protobuf:"bytes,8,rep,name=epc_list,json=epcList,proto3" json:"epc_list,omitempty"`
	BizTransactionList     []*BizTransaction        `protobuf:"bytes,9,rep,name=biz_transaction_list,json=bizTransactionList,proto3" json:"biz_transaction_list,omitempty"`
	QuantityList           []*QuantityElement       `protobuf:"bytes,10,rep,name=quantity_list,json=quantityList,proto3" json:"quantity_list,omitempty"`
	SourceList             []*Source                `protobuf:"bytes,11,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	DestinationList        []*Destination           `protobuf:"bytes,12,rep,name=destination_list,json=destinationList,proto3" json:"destination_list,omitempty"`
	SensorElementList      []*SensorElement         `protobuf:"bytes,13,rep,name=sensor_element_list,json=sensorElementList,proto3" json:"sensor_element_list,omitempty"`
}

func (x *TransactionEvent) Reset() {
	*x = TransactionEvent{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEvent) ProtoMessage() {}

func (x *TransactionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEvent.ProtoReflect.Descriptor instead.
func (*TransactionEvent) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{24}
}

func (x *TransactionEvent) GetEpcisEventD() *v1.EpcisEventD {
	if x != nil {
		return x.EpcisEventD
	}
	return nil
}

func (x *TransactionEvent) GetEpcisEventT() *v1.EpcisEventT {
	if x != nil {
		return x.EpcisEventT
	}
	return nil
}

func (x *TransactionEvent) GetErrorDeclarationD() *v1.ErrorDeclarationD {
	if x != nil {
		return x.ErrorDeclarationD
	}
	return nil
}

func (x *TransactionEvent) GetErrorDeclarationT() *v1.ErrorDeclarationT {
	if x != nil {
		return x.ErrorDeclarationT
	}
	return nil
}

func (x *TransactionEvent) GetTransactionEventD() *TransactionEventD {
	if x != nil {
		return x.TransactionEventD
	}
	return nil
}

func (x *TransactionEvent) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TransactionEvent) GetPersistentDispositions() []*PersistentDisposition {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

func (x *TransactionEvent) GetEpcList() []*Epc {
	if x != nil {
		return x.EpcList
	}
	return nil
}

func (x *TransactionEvent) GetBizTransactionList() []*BizTransaction {
	if x != nil {
		return x.BizTransactionList
	}
	return nil
}

func (x *TransactionEvent) GetQuantityList() []*QuantityElement {
	if x != nil {
		return x.QuantityList
	}
	return nil
}

func (x *TransactionEvent) GetSourceList() []*Source {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *TransactionEvent) GetDestinationList() []*Destination {
	if x != nil {
		return x.DestinationList
	}
	return nil
}

func (x *TransactionEvent) GetSensorElementList() []*SensorElement {
	if x != nil {
		return x.SensorElementList
	}
	return nil
}

type TransactionEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4       []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS         string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ParentId    string `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Action      string `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	BizStep     string `protobuf:"bytes,6,opt,name=biz_step,json=bizStep,proto3" json:"biz_step,omitempty"`
	Disposition string `protobuf:"bytes,7,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ReadPoint   string `protobuf:"bytes,8,opt,name=read_point,json=readPoint,proto3" json:"read_point,omitempty"`
	BizLocation string `protobuf:"bytes,9,opt,name=biz_location,json=bizLocation,proto3" json:"biz_location,omitempty"`
}

func (x *TransactionEventD) Reset() {
	*x = TransactionEventD{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEventD) ProtoMessage() {}

func (x *TransactionEventD) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEventD.ProtoReflect.Descriptor instead.
func (*TransactionEventD) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{25}
}

func (x *TransactionEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionEventD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TransactionEventD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TransactionEventD) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *TransactionEventD) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TransactionEventD) GetBizStep() string {
	if x != nil {
		return x.BizStep
	}
	return ""
}

func (x *TransactionEventD) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *TransactionEventD) GetReadPoint() string {
	if x != nil {
		return x.ReadPoint
	}
	return ""
}

func (x *TransactionEventD) GetBizLocation() string {
	if x != nil {
		return x.BizLocation
	}
	return ""
}

type CreateTransactionEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId                string                                `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTimeZoneOffset    string                                `protobuf:"bytes,2,opt,name=event_time_zone_offset,json=eventTimeZoneOffset,proto3" json:"event_time_zone_offset,omitempty"`
	Certification          string                                `protobuf:"bytes,3,opt,name=certification,proto3" json:"certification,omitempty"`
	EventTime              string                                `protobuf:"bytes,4,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	Reason                 string                                `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	DeclarationTime        string                                `protobuf:"bytes,6,opt,name=declaration_time,json=declarationTime,proto3" json:"declaration_time,omitempty"`
	ParentId               string                                `protobuf:"bytes,7,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Action                 string                                `protobuf:"bytes,8,opt,name=action,proto3" json:"action,omitempty"`
	BizStep                string                                `protobuf:"bytes,9,opt,name=biz_step,json=bizStep,proto3" json:"biz_step,omitempty"`
	Disposition            string                                `protobuf:"bytes,10,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ReadPoint              string                                `protobuf:"bytes,11,opt,name=read_point,json=readPoint,proto3" json:"read_point,omitempty"`
	BizLocation            string                                `protobuf:"bytes,12,opt,name=biz_location,json=bizLocation,proto3" json:"biz_location,omitempty"`
	UserId                 string                                `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string                                `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string                                `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	PersistentDispositions []*CreatePersistentDispositionRequest `protobuf:"bytes,16,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
	EpcList                []*CreateEpcRequest                   `protobuf:"bytes,17,rep,name=epc_list,json=epcList,proto3" json:"epc_list,omitempty"`
	BizTransactionList     []*CreateBizTransactionRequest        `protobuf:"bytes,18,rep,name=biz_transaction_list,json=bizTransactionList,proto3" json:"biz_transaction_list,omitempty"`
	QuantityList           []*CreateQuantityElementRequest       `protobuf:"bytes,19,rep,name=quantity_list,json=quantityList,proto3" json:"quantity_list,omitempty"`
	SourceList             []*CreateSourceRequest                `protobuf:"bytes,20,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	DestinationList        []*CreateDestinationRequest           `protobuf:"bytes,21,rep,name=destination_list,json=destinationList,proto3" json:"destination_list,omitempty"`
	SensorElementList      []*CreateSensorElementRequest         `protobuf:"bytes,22,rep,name=sensor_element_list,json=sensorElementList,proto3" json:"sensor_element_list,omitempty"`
}

func (x *CreateTransactionEventRequest) Reset() {
	*x = CreateTransactionEventRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionEventRequest) ProtoMessage() {}

func (x *CreateTransactionEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionEventRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionEventRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{26}
}

func (x *CreateTransactionEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetEventTimeZoneOffset() string {
	if x != nil {
		return x.EventTimeZoneOffset
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetCertification() string {
	if x != nil {
		return x.Certification
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetDeclarationTime() string {
	if x != nil {
		return x.DeclarationTime
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetBizStep() string {
	if x != nil {
		return x.BizStep
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetReadPoint() string {
	if x != nil {
		return x.ReadPoint
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetBizLocation() string {
	if x != nil {
		return x.BizLocation
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateTransactionEventRequest) GetPersistentDispositions() []*CreatePersistentDispositionRequest {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

func (x *CreateTransactionEventRequest) GetEpcList() []*CreateEpcRequest {
	if x != nil {
		return x.EpcList
	}
	return nil
}

func (x *CreateTransactionEventRequest) GetBizTransactionList() []*CreateBizTransactionRequest {
	if x != nil {
		return x.BizTransactionList
	}
	return nil
}

func (x *CreateTransactionEventRequest) GetQuantityList() []*CreateQuantityElementRequest {
	if x != nil {
		return x.QuantityList
	}
	return nil
}

func (x *CreateTransactionEventRequest) GetSourceList() []*CreateSourceRequest {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *CreateTransactionEventRequest) GetDestinationList() []*CreateDestinationRequest {
	if x != nil {
		return x.DestinationList
	}
	return nil
}

func (x *CreateTransactionEventRequest) GetSensorElementList() []*CreateSensorElementRequest {
	if x != nil {
		return x.SensorElementList
	}
	return nil
}

type CreateTransactionEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionEvent *TransactionEvent `protobuf:"bytes,1,opt,name=transaction_event,json=transactionEvent,proto3" json:"transaction_event,omitempty"`
}

func (x *CreateTransactionEventResponse) Reset() {
	*x = CreateTransactionEventResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionEventResponse) ProtoMessage() {}

func (x *CreateTransactionEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionEventResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionEventResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{27}
}

func (x *CreateTransactionEventResponse) GetTransactionEvent() *TransactionEvent {
	if x != nil {
		return x.TransactionEvent
	}
	return nil
}

type GetTransactionEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetTransactionEventRequest) Reset() {
	*x = GetTransactionEventRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionEventRequest) ProtoMessage() {}

func (x *GetTransactionEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionEventRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionEventRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{28}
}

func (x *GetTransactionEventRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetTransactionEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionEvent *TransactionEvent `protobuf:"bytes,1,opt,name=transaction_event,json=transactionEvent,proto3" json:"transaction_event,omitempty"`
}

func (x *GetTransactionEventResponse) Reset() {
	*x = GetTransactionEventResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionEventResponse) ProtoMessage() {}

func (x *GetTransactionEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionEventResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionEventResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{29}
}

func (x *GetTransactionEventResponse) GetTransactionEvent() *TransactionEvent {
	if x != nil {
		return x.TransactionEvent
	}
	return nil
}

type GetTransactionEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetTransactionEventsRequest) Reset() {
	*x = GetTransactionEventsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionEventsRequest) ProtoMessage() {}

func (x *GetTransactionEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionEventsRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionEventsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{30}
}

func (x *GetTransactionEventsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetTransactionEventsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetTransactionEventsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetTransactionEventsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetTransactionEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionEvents []*TransactionEvent `protobuf:"bytes,1,rep,name=transaction_events,json=transactionEvents,proto3" json:"transaction_events,omitempty"`
	NextCursor        string              `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetTransactionEventsResponse) Reset() {
	*x = GetTransactionEventsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionEventsResponse) ProtoMessage() {}

func (x *GetTransactionEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionEventsResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionEventsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{31}
}

func (x *GetTransactionEventsResponse) GetTransactionEvents() []*TransactionEvent {
	if x != nil {
		return x.TransactionEvents
	}
	return nil
}

func (x *GetTransactionEventsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type TransformationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcisEventD            *v1.EpcisEventD          `protobuf:"bytes,1,opt,name=epcis_event_d,json=epcisEventD,proto3" json:"epcis_event_d,omitempty"`
	EpcisEventT            *v1.EpcisEventT          `protobuf:"bytes,2,opt,name=epcis_event_t,json=epcisEventT,proto3" json:"epcis_event_t,omitempty"`
	ErrorDeclarationD      *v1.ErrorDeclarationD    `protobuf:"bytes,3,opt,name=error_declaration_d,json=errorDeclarationD,proto3" json:"error_declaration_d,omitempty"`
	ErrorDeclarationT      *v1.ErrorDeclarationT    `protobuf:"bytes,4,opt,name=error_declaration_t,json=errorDeclarationT,proto3" json:"error_declaration_t,omitempty"`
	TransformationEventD   *TransformationEventD    `protobuf:"bytes,5,opt,name=transformation_event_d,json=transformationEventD,proto3" json:"transformation_event_d,omitempty"`
	CrUpdUser              *v1.CrUpdUser            `protobuf:"bytes,6,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	InputEpcList           []*Epc                   `protobuf:"bytes,7,rep,name=input_epc_list,json=inputEpcList,proto3" json:"input_epc_list,omitempty"`
	InputQuantityList      []*QuantityElement       `protobuf:"bytes,8,rep,name=input_quantity_list,json=inputQuantityList,proto3" json:"input_quantity_list,omitempty"`
	OutputEpcList          []*Epc                   `protobuf:"bytes,9,rep,name=output_epc_list,json=outputEpcList,proto3" json:"output_epc_list,omitempty"`
	OutputQuantityList     []*QuantityElement       `protobuf:"bytes,10,rep,name=output_quantity_list,json=outputQuantityList,proto3" json:"output_quantity_list,omitempty"`
	PersistentDispositions []*PersistentDisposition `protobuf:"bytes,11,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
	BizTransactionList     []*BizTransaction        `protobuf:"bytes,12,rep,name=biz_transaction_list,json=bizTransactionList,proto3" json:"biz_transaction_list,omitempty"`
	SourceList             []*Source                `protobuf:"bytes,13,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	DestinationList        []*Destination           `protobuf:"bytes,14,rep,name=destination_list,json=destinationList,proto3" json:"destination_list,omitempty"`
	SensorElementList      []*SensorElement         `protobuf:"bytes,15,rep,name=sensor_element_list,json=sensorElementList,proto3" json:"sensor_element_list,omitempty"`
}

func (x *TransformationEvent) Reset() {
	*x = TransformationEvent{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformationEvent) ProtoMessage() {}

func (x *TransformationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformationEvent.ProtoReflect.Descriptor instead.
func (*TransformationEvent) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{32}
}

func (x *TransformationEvent) GetEpcisEventD() *v1.EpcisEventD {
	if x != nil {
		return x.EpcisEventD
	}
	return nil
}

func (x *TransformationEvent) GetEpcisEventT() *v1.EpcisEventT {
	if x != nil {
		return x.EpcisEventT
	}
	return nil
}

func (x *TransformationEvent) GetErrorDeclarationD() *v1.ErrorDeclarationD {
	if x != nil {
		return x.ErrorDeclarationD
	}
	return nil
}

func (x *TransformationEvent) GetErrorDeclarationT() *v1.ErrorDeclarationT {
	if x != nil {
		return x.ErrorDeclarationT
	}
	return nil
}

func (x *TransformationEvent) GetTransformationEventD() *TransformationEventD {
	if x != nil {
		return x.TransformationEventD
	}
	return nil
}

func (x *TransformationEvent) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TransformationEvent) GetInputEpcList() []*Epc {
	if x != nil {
		return x.InputEpcList
	}
	return nil
}

func (x *TransformationEvent) GetInputQuantityList() []*QuantityElement {
	if x != nil {
		return x.InputQuantityList
	}
	return nil
}

func (x *TransformationEvent) GetOutputEpcList() []*Epc {
	if x != nil {
		return x.OutputEpcList
	}
	return nil
}

func (x *TransformationEvent) GetOutputQuantityList() []*QuantityElement {
	if x != nil {
		return x.OutputQuantityList
	}
	return nil
}

func (x *TransformationEvent) GetPersistentDispositions() []*PersistentDisposition {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

func (x *TransformationEvent) GetBizTransactionList() []*BizTransaction {
	if x != nil {
		return x.BizTransactionList
	}
	return nil
}

func (x *TransformationEvent) GetSourceList() []*Source {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *TransformationEvent) GetDestinationList() []*Destination {
	if x != nil {
		return x.DestinationList
	}
	return nil
}

func (x *TransformationEvent) GetSensorElementList() []*SensorElement {
	if x != nil {
		return x.SensorElementList
	}
	return nil
}

type TransformationEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4            []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS              string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TransformationId string `protobuf:"bytes,4,opt,name=transformation_id,json=transformationId,proto3" json:"transformation_id,omitempty"`
	BizStep          string `protobuf:"bytes,5,opt,name=biz_step,json=bizStep,proto3" json:"biz_step,omitempty"`
	Disposition      string `protobuf:"bytes,6,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ReadPoint        string `protobuf:"bytes,7,opt,name=read_point,json=readPoint,proto3" json:"read_point,omitempty"`
	BizLocation      string `protobuf:"bytes,8,opt,name=biz_location,json=bizLocation,proto3" json:"biz_location,omitempty"`
	Ilmd             string `protobuf:"bytes,9,opt,name=ilmd,proto3" json:"ilmd,omitempty"`
}

func (x *TransformationEventD) Reset() {
	*x = TransformationEventD{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformationEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformationEventD) ProtoMessage() {}

func (x *TransformationEventD) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformationEventD.ProtoReflect.Descriptor instead.
func (*TransformationEventD) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{33}
}

func (x *TransformationEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransformationEventD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TransformationEventD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TransformationEventD) GetTransformationId() string {
	if x != nil {
		return x.TransformationId
	}
	return ""
}

func (x *TransformationEventD) GetBizStep() string {
	if x != nil {
		return x.BizStep
	}
	return ""
}

func (x *TransformationEventD) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *TransformationEventD) GetReadPoint() string {
	if x != nil {
		return x.ReadPoint
	}
	return ""
}

func (x *TransformationEventD) GetBizLocation() string {
	if x != nil {
		return x.BizLocation
	}
	return ""
}

func (x *TransformationEventD) GetIlmd() string {
	if x != nil {
		return x.Ilmd
	}
	return ""
}

type CreateTransformationEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId                string                                `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTimeZoneOffset    string                                `protobuf:"bytes,2,opt,name=event_time_zone_offset,json=eventTimeZoneOffset,proto3" json:"event_time_zone_offset,omitempty"`
	Certification          string                                `protobuf:"bytes,3,opt,name=certification,proto3" json:"certification,omitempty"`
	EventTime              string                                `protobuf:"bytes,4,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	Reason                 string                                `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	DeclarationTime        string                                `protobuf:"bytes,6,opt,name=declaration_time,json=declarationTime,proto3" json:"declaration_time,omitempty"`
	TransformationId       string                                `protobuf:"bytes,7,opt,name=transformation_id,json=transformationId,proto3" json:"transformation_id,omitempty"`
	BizStep                string                                `protobuf:"bytes,8,opt,name=biz_step,json=bizStep,proto3" json:"biz_step,omitempty"`
	Disposition            string                                `protobuf:"bytes,9,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ReadPoint              string                                `protobuf:"bytes,10,opt,name=read_point,json=readPoint,proto3" json:"read_point,omitempty"`
	BizLocation            string                                `protobuf:"bytes,11,opt,name=biz_location,json=bizLocation,proto3" json:"biz_location,omitempty"`
	Ilmd                   string                                `protobuf:"bytes,12,opt,name=ilmd,proto3" json:"ilmd,omitempty"`
	UserId                 string                                `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string                                `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string                                `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InputEpcList           []*CreateEpcRequest                   `protobuf:"bytes,16,rep,name=input_epc_list,json=inputEpcList,proto3" json:"input_epc_list,omitempty"`
	InputQuantityList      []*CreateQuantityElementRequest       `protobuf:"bytes,17,rep,name=input_quantity_list,json=inputQuantityList,proto3" json:"input_quantity_list,omitempty"`
	OutputEpcList          []*CreateEpcRequest                   `protobuf:"bytes,18,rep,name=output_epc_list,json=outputEpcList,proto3" json:"output_epc_list,omitempty"`
	OutputQuantityList     []*CreateQuantityElementRequest       `protobuf:"bytes,19,rep,name=output_quantity_list,json=outputQuantityList,proto3" json:"output_quantity_list,omitempty"`
	PersistentDispositions []*CreatePersistentDispositionRequest `protobuf:"bytes,20,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
	BizTransactionList     []*CreateBizTransactionRequest        `protobuf:"bytes,21,rep,name=biz_transaction_list,json=bizTransactionList,proto3" json:"biz_transaction_list,omitempty"`
	SourceList             []*CreateSourceRequest                `protobuf:"bytes,22,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	DestinationList        []*CreateDestinationRequest           `protobuf:"bytes,23,rep,name=destination_list,json=destinationList,proto3" json:"destination_list,omitempty"`
	SensorElementList      []*CreateSensorElementRequest         `protobuf:"bytes,24,rep,name=sensor_element_list,json=sensorElementList,proto3" json:"sensor_element_list,omitempty"`
}

func (x *CreateTransformationEventRequest) Reset() {
	*x = CreateTransformationEventRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransformationEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransformationEventRequest) ProtoMessage() {}

func (x *CreateTransformationEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransformationEventRequest.ProtoReflect.Descriptor instead.
func (*CreateTransformationEventRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{34}
}

func (x *CreateTransformationEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetEventTimeZoneOffset() string {
	if x != nil {
		return x.EventTimeZoneOffset
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetCertification() string {
	if x != nil {
		return x.Certification
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetDeclarationTime() string {
	if x != nil {
		return x.DeclarationTime
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetTransformationId() string {
	if x != nil {
		return x.TransformationId
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetBizStep() string {
	if x != nil {
		return x.BizStep
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetReadPoint() string {
	if x != nil {
		return x.ReadPoint
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetBizLocation() string {
	if x != nil {
		return x.BizLocation
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetIlmd() string {
	if x != nil {
		return x.Ilmd
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateTransformationEventRequest) GetInputEpcList() []*CreateEpcRequest {
	if x != nil {
		return x.InputEpcList
	}
	return nil
}

func (x *CreateTransformationEventRequest) GetInputQuantityList() []*CreateQuantityElementRequest {
	if x != nil {
		return x.InputQuantityList
	}
	return nil
}

func (x *CreateTransformationEventRequest) GetOutputEpcList() []*CreateEpcRequest {
	if x != nil {
		return x.OutputEpcList
	}
	return nil
}

func (x *CreateTransformationEventRequest) GetOutputQuantityList() []*CreateQuantityElementRequest {
	if x != nil {
		return x.OutputQuantityList
	}
	return nil
}

func (x *CreateTransformationEventRequest) GetPersistentDispositions() []*CreatePersistentDispositionRequest {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

func (x *CreateTransformationEventRequest) GetBizTransactionList() []*CreateBizTransactionRequest {
	if x != nil {
		return x.BizTransactionList
	}
	return nil
}

func (x *CreateTransformationEventRequest) GetSourceList() []*CreateSourceRequest {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *CreateTransformationEventRequest) GetDestinationList() []*CreateDestinationRequest {
	if x != nil {
		return x.DestinationList
	}
	return nil
}

func (x *CreateTransformationEventRequest) GetSensorElementList() []*CreateSensorElementRequest {
	if x != nil {
		return x.SensorElementList
	}
	return nil
}

type CreateTransformationEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformationEvent *TransformationEvent `protobuf:"bytes,1,opt,name=transformation_event,json=transformationEvent,proto3" json:"transformation_event,omitempty"`
}

func (x *CreateTransformationEventResponse) Reset() {
	*x = CreateTransformationEventResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransformationEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransformationEventResponse) ProtoMessage() {}

func (x *CreateTransformationEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransformationEventResponse.ProtoReflect.Descriptor instead.
func (*CreateTransformationEventResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{35}
}

func (x *CreateTransformationEventResponse) GetTransformationEvent() *TransformationEvent {
	if x != nil {
		return x.TransformationEvent
	}
	return nil
}

type GetTransformationEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetTransformationEventRequest) Reset() {
	*x = GetTransformationEventRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransformationEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransformationEventRequest) ProtoMessage() {}

func (x *GetTransformationEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransformationEventRequest.ProtoReflect.Descriptor instead.
func (*GetTransformationEventRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{36}
}

func (x *GetTransformationEventRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetTransformationEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformationEvent *TransformationEvent `protobuf:"bytes,1,opt,name=transformation_event,json=transformationEvent,proto3" json:"transformation_event,omitempty"`
}

func (x *GetTransformationEventResponse) Reset() {
	*x = GetTransformationEventResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransformationEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransformationEventResponse) ProtoMessage() {}

func (x *GetTransformationEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransformationEventResponse.ProtoReflect.Descriptor instead.
func (*GetTransformationEventResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{37}
}

func (x *GetTransformationEventResponse) GetTransformationEvent() *TransformationEvent {
	if x != nil {
		return x.TransformationEvent
	}
	return nil
}

type GetTransformationEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetTransformationEventsRequest) Reset() {
	*x = GetTransformationEventsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransformationEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransformationEventsRequest) ProtoMessage() {}

func (x *GetTransformationEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransformationEventsRequest.ProtoReflect.Descriptor instead.
func (*GetTransformationEventsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{38}
}

func (x *GetTransformationEventsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetTransformationEventsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetTransformationEventsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetTransformationEventsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetTransformationEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformationEvents []*TransformationEvent `protobuf:"bytes,1,rep,name=transformation_events,json=transformationEvents,proto3" json:"transformation_events,omitempty"`
	NextCursor           string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetTransformationEventsResponse) Reset() {
	*x = GetTransformationEventsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransformationEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransformationEventsResponse) ProtoMessage() {}

func (x *GetTransformationEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransformationEventsResponse.ProtoReflect.Descriptor instead.
func (*GetTransformationEventsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{39}
}

func (x *GetTransformationEventsResponse) GetTransformationEvents() []*TransformationEvent {
	if x != nil {
		return x.TransformationEvents
	}
	return nil
}

func (x *GetTransformationEventsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type PersistentDisposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetDisp     string `protobuf:"bytes,1,opt,name=set_disp,json=setDisp,proto3" json:"set_disp,omitempty"`
	UnsetDisp   string `protobuf:"bytes,2,opt,name=unset_disp,json=unsetDisp,proto3" json:"unset_disp,omitempty"`
	EventId     uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,4,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
}

func (x *PersistentDisposition) Reset() {
	*x = PersistentDisposition{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersistentDisposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentDisposition) ProtoMessage() {}

func (x *PersistentDisposition) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentDisposition.ProtoReflect.Descriptor instead.
func (*PersistentDisposition) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{40}
}

func (x *PersistentDisposition) GetSetDisp() string {
	if x != nil {
		return x.SetDisp
	}
	return ""
}

func (x *PersistentDisposition) GetUnsetDisp() string {
	if x != nil {
		return x.UnsetDisp
	}
	return ""
}

func (x *PersistentDisposition) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *PersistentDisposition) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

type CreatePersistentDispositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetDisp     string `protobuf:"bytes,1,opt,name=set_disp,json=setDisp,proto3" json:"set_disp,omitempty"`
	UnsetDisp   string `protobuf:"bytes,2,opt,name=unset_disp,json=unsetDisp,proto3" json:"unset_disp,omitempty"`
	EventId     uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,4,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	UserId      string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail   string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId   string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePersistentDispositionRequest) Reset() {
	*x = CreatePersistentDispositionRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePersistentDispositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePersistentDispositionRequest) ProtoMessage() {}

func (x *CreatePersistentDispositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePersistentDispositionRequest.ProtoReflect.Descriptor instead.
func (*CreatePersistentDispositionRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{41}
}

func (x *CreatePersistentDispositionRequest) GetSetDisp() string {
	if x != nil {
		return x.SetDisp
	}
	return ""
}

func (x *CreatePersistentDispositionRequest) GetUnsetDisp() string {
	if x != nil {
		return x.UnsetDisp
	}
	return ""
}

func (x *CreatePersistentDispositionRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *CreatePersistentDispositionRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *CreatePersistentDispositionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePersistentDispositionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePersistentDispositionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePersistentDispositionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersistentDisposition *PersistentDisposition `protobuf:"bytes,1,opt,name=persistent_disposition,json=persistentDisposition,proto3" json:"persistent_disposition,omitempty"`
}

func (x *CreatePersistentDispositionResponse) Reset() {
	*x = CreatePersistentDispositionResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePersistentDispositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePersistentDispositionResponse) ProtoMessage() {}

func (x *CreatePersistentDispositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePersistentDispositionResponse.ProtoReflect.Descriptor instead.
func (*CreatePersistentDispositionResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{42}
}

func (x *CreatePersistentDispositionResponse) GetPersistentDisposition() *PersistentDisposition {
	if x != nil {
		return x.PersistentDisposition
	}
	return nil
}

type GetPersistentDispositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,2,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	UserEmail   string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId   string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetPersistentDispositionsRequest) Reset() {
	*x = GetPersistentDispositionsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPersistentDispositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersistentDispositionsRequest) ProtoMessage() {}

func (x *GetPersistentDispositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersistentDispositionsRequest.ProtoReflect.Descriptor instead.
func (*GetPersistentDispositionsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{43}
}

func (x *GetPersistentDispositionsRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *GetPersistentDispositionsRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *GetPersistentDispositionsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetPersistentDispositionsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetPersistentDispositionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersistentDispositions []*PersistentDisposition `protobuf:"bytes,1,rep,name=persistent_dispositions,json=persistentDispositions,proto3" json:"persistent_dispositions,omitempty"`
}

func (x *GetPersistentDispositionsResponse) Reset() {
	*x = GetPersistentDispositionsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPersistentDispositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersistentDispositionsResponse) ProtoMessage() {}

func (x *GetPersistentDispositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersistentDispositionsResponse.ProtoReflect.Descriptor instead.
func (*GetPersistentDispositionsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{44}
}

func (x *GetPersistentDispositionsResponse) GetPersistentDispositions() []*PersistentDisposition {
	if x != nil {
		return x.PersistentDispositions
	}
	return nil
}

type Epc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcValue    string `protobuf:"bytes,1,opt,name=epc_value,json=epcValue,proto3" json:"epc_value,omitempty"`
	EventId     uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,3,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	TypeOfEpc   string `protobuf:"bytes,4,opt,name=type_of_epc,json=typeOfEpc,proto3" json:"type_of_epc,omitempty"`
}

func (x *Epc) Reset() {
	*x = Epc{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Epc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epc) ProtoMessage() {}

func (x *Epc) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epc.ProtoReflect.Descriptor instead.
func (*Epc) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{45}
}

func (x *Epc) GetEpcValue() string {
	if x != nil {
		return x.EpcValue
	}
	return ""
}

func (x *Epc) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *Epc) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *Epc) GetTypeOfEpc() string {
	if x != nil {
		return x.TypeOfEpc
	}
	return ""
}

type CreateEpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcValue    string `protobuf:"bytes,1,opt,name=epc_value,json=epcValue,proto3" json:"epc_value,omitempty"`
	EventId     uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,3,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	TypeOfEpc   string `protobuf:"bytes,4,opt,name=type_of_epc,json=typeOfEpc,proto3" json:"type_of_epc,omitempty"`
	UserId      string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail   string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId   string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateEpcRequest) Reset() {
	*x = CreateEpcRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEpcRequest) ProtoMessage() {}

func (x *CreateEpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEpcRequest.ProtoReflect.Descriptor instead.
func (*CreateEpcRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{46}
}

func (x *CreateEpcRequest) GetEpcValue() string {
	if x != nil {
		return x.EpcValue
	}
	return ""
}

func (x *CreateEpcRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *CreateEpcRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *CreateEpcRequest) GetTypeOfEpc() string {
	if x != nil {
		return x.TypeOfEpc
	}
	return ""
}

func (x *CreateEpcRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateEpcRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateEpcRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateEpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epc *Epc `protobuf:"bytes,1,opt,name=epc,proto3" json:"epc,omitempty"`
}

func (x *CreateEpcResponse) Reset() {
	*x = CreateEpcResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEpcResponse) ProtoMessage() {}

func (x *CreateEpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEpcResponse.ProtoReflect.Descriptor instead.
func (*CreateEpcResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{47}
}

func (x *CreateEpcResponse) GetEpc() *Epc {
	if x != nil {
		return x.Epc
	}
	return nil
}

type GetEpcsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,2,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	TypeOfEpc   string `protobuf:"bytes,3,opt,name=type_of_epc,json=typeOfEpc,proto3" json:"type_of_epc,omitempty"`
	UserEmail   string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId   string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetEpcsRequest) Reset() {
	*x = GetEpcsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEpcsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEpcsRequest) ProtoMessage() {}

func (x *GetEpcsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEpcsRequest.ProtoReflect.Descriptor instead.
func (*GetEpcsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{48}
}

func (x *GetEpcsRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *GetEpcsRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *GetEpcsRequest) GetTypeOfEpc() string {
	if x != nil {
		return x.TypeOfEpc
	}
	return ""
}

func (x *GetEpcsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetEpcsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetEpcsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epcs []*Epc `protobuf:"bytes,1,rep,name=epcs,proto3" json:"epcs,omitempty"`
}

func (x *GetEpcsResponse) Reset() {
	*x = GetEpcsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEpcsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEpcsResponse) ProtoMessage() {}

func (x *GetEpcsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEpcsResponse.ProtoReflect.Descriptor instead.
func (*GetEpcsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{49}
}

func (x *GetEpcsResponse) GetEpcs() []*Epc {
	if x != nil {
		return x.Epcs
	}
	return nil
}

type BizTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizTransactionType string `protobuf:"bytes,1,opt,name=biz_transaction_type,json=bizTransactionType,proto3" json:"biz_transaction_type,omitempty"`
	BizTransaction     string `protobuf:"bytes,2,opt,name=biz_transaction,json=bizTransaction,proto3" json:"biz_transaction,omitempty"`
	EventId            uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent        string `protobuf:"bytes,4,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
}

func (x *BizTransaction) Reset() {
	*x = BizTransaction{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BizTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizTransaction) ProtoMessage() {}

func (x *BizTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizTransaction.ProtoReflect.Descriptor instead.
func (*BizTransaction) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{50}
}

func (x *BizTransaction) GetBizTransactionType() string {
	if x != nil {
		return x.BizTransactionType
	}
	return ""
}

func (x *BizTransaction) GetBizTransaction() string {
	if x != nil {
		return x.BizTransaction
	}
	return ""
}

func (x *BizTransaction) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *BizTransaction) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

type CreateBizTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizTransactionType string `protobuf:"bytes,1,opt,name=biz_transaction_type,json=bizTransactionType,proto3" json:"biz_transaction_type,omitempty"`
	BizTransaction     string `protobuf:"bytes,2,opt,name=biz_transaction,json=bizTransaction,proto3" json:"biz_transaction,omitempty"`
	EventId            uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent        string `protobuf:"bytes,4,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	UserId             string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail          string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId          string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateBizTransactionRequest) Reset() {
	*x = CreateBizTransactionRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBizTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBizTransactionRequest) ProtoMessage() {}

func (x *CreateBizTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBizTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateBizTransactionRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{51}
}

func (x *CreateBizTransactionRequest) GetBizTransactionType() string {
	if x != nil {
		return x.BizTransactionType
	}
	return ""
}

func (x *CreateBizTransactionRequest) GetBizTransaction() string {
	if x != nil {
		return x.BizTransaction
	}
	return ""
}

func (x *CreateBizTransactionRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *CreateBizTransactionRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *CreateBizTransactionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateBizTransactionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateBizTransactionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateBizTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizTransaction *BizTransaction `protobuf:"bytes,1,opt,name=biz_transaction,json=bizTransaction,proto3" json:"biz_transaction,omitempty"`
}

func (x *CreateBizTransactionResponse) Reset() {
	*x = CreateBizTransactionResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBizTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBizTransactionResponse) ProtoMessage() {}

func (x *CreateBizTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBizTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateBizTransactionResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{52}
}

func (x *CreateBizTransactionResponse) GetBizTransaction() *BizTransaction {
	if x != nil {
		return x.BizTransaction
	}
	return nil
}

type GetBizTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,2,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	UserEmail   string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId   string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetBizTransactionsRequest) Reset() {
	*x = GetBizTransactionsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBizTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBizTransactionsRequest) ProtoMessage() {}

func (x *GetBizTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBizTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetBizTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{53}
}

func (x *GetBizTransactionsRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *GetBizTransactionsRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *GetBizTransactionsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetBizTransactionsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetBizTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizTransactions []*BizTransaction `protobuf:"bytes,1,rep,name=biz_transactions,json=bizTransactions,proto3" json:"biz_transactions,omitempty"`
}

func (x *GetBizTransactionsResponse) Reset() {
	*x = GetBizTransactionsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBizTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBizTransactionsResponse) ProtoMessage() {}

func (x *GetBizTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBizTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetBizTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{54}
}

func (x *GetBizTransactionsResponse) GetBizTransactions() []*BizTransaction {
	if x != nil {
		return x.BizTransactions
	}
	return nil
}

type QuantityElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcClass       string  `protobuf:"bytes,1,opt,name=epc_class,json=epcClass,proto3" json:"epc_class,omitempty"`
	Quantity       float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Uom            string  `protobuf:"bytes,3,opt,name=uom,proto3" json:"uom,omitempty"`
	EventId        uint32  `protobuf:"varint,4,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent    string  `protobuf:"bytes,5,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	TypeOfQuantity string  `protobuf:"bytes,6,opt,name=type_of_quantity,json=typeOfQuantity,proto3" json:"type_of_quantity,omitempty"`
}

func (x *QuantityElement) Reset() {
	*x = QuantityElement{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuantityElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantityElement) ProtoMessage() {}

func (x *QuantityElement) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantityElement.ProtoReflect.Descriptor instead.
func (*QuantityElement) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{55}
}

func (x *QuantityElement) GetEpcClass() string {
	if x != nil {
		return x.EpcClass
	}
	return ""
}

func (x *QuantityElement) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *QuantityElement) GetUom() string {
	if x != nil {
		return x.Uom
	}
	return ""
}

func (x *QuantityElement) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *QuantityElement) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *QuantityElement) GetTypeOfQuantity() string {
	if x != nil {
		return x.TypeOfQuantity
	}
	return ""
}

type CreateQuantityElementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpcClass       string  `protobuf:"bytes,1,opt,name=epc_class,json=epcClass,proto3" json:"epc_class,omitempty"`
	Quantity       float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Uom            string  `protobuf:"bytes,3,opt,name=uom,proto3" json:"uom,omitempty"`
	EventId        uint32  `protobuf:"varint,4,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent    string  `protobuf:"bytes,5,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	TypeOfQuantity string  `protobuf:"bytes,6,opt,name=type_of_quantity,json=typeOfQuantity,proto3" json:"type_of_quantity,omitempty"`
	UserId         string  `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail      string  `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId      string  `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateQuantityElementRequest) Reset() {
	*x = CreateQuantityElementRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuantityElementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuantityElementRequest) ProtoMessage() {}

func (x *CreateQuantityElementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuantityElementRequest.ProtoReflect.Descriptor instead.
func (*CreateQuantityElementRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{56}
}

func (x *CreateQuantityElementRequest) GetEpcClass() string {
	if x != nil {
		return x.EpcClass
	}
	return ""
}

func (x *CreateQuantityElementRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateQuantityElementRequest) GetUom() string {
	if x != nil {
		return x.Uom
	}
	return ""
}

func (x *CreateQuantityElementRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *CreateQuantityElementRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *CreateQuantityElementRequest) GetTypeOfQuantity() string {
	if x != nil {
		return x.TypeOfQuantity
	}
	return ""
}

func (x *CreateQuantityElementRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateQuantityElementRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateQuantityElementRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateQuantityElementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuantityElement *QuantityElement `protobuf:"bytes,1,opt,name=quantity_element,json=quantityElement,proto3" json:"quantity_element,omitempty"`
}

func (x *CreateQuantityElementResponse) Reset() {
	*x = CreateQuantityElementResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuantityElementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuantityElementResponse) ProtoMessage() {}

func (x *CreateQuantityElementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuantityElementResponse.ProtoReflect.Descriptor instead.
func (*CreateQuantityElementResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{57}
}

func (x *CreateQuantityElementResponse) GetQuantityElement() *QuantityElement {
	if x != nil {
		return x.QuantityElement
	}
	return nil
}

type GetQuantityElementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent    string `protobuf:"bytes,2,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	TypeOfQuantity string `protobuf:"bytes,3,opt,name=type_of_quantity,json=typeOfQuantity,proto3" json:"type_of_quantity,omitempty"`
	UserEmail      string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId      string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetQuantityElementsRequest) Reset() {
	*x = GetQuantityElementsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuantityElementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuantityElementsRequest) ProtoMessage() {}

func (x *GetQuantityElementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuantityElementsRequest.ProtoReflect.Descriptor instead.
func (*GetQuantityElementsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{58}
}

func (x *GetQuantityElementsRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *GetQuantityElementsRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *GetQuantityElementsRequest) GetTypeOfQuantity() string {
	if x != nil {
		return x.TypeOfQuantity
	}
	return ""
}

func (x *GetQuantityElementsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetQuantityElementsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetQuantityElementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuantityElements []*QuantityElement `protobuf:"bytes,1,rep,name=quantity_elements,json=quantityElements,proto3" json:"quantity_elements,omitempty"`
}

func (x *GetQuantityElementsResponse) Reset() {
	*x = GetQuantityElementsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuantityElementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuantityElementsResponse) ProtoMessage() {}

func (x *GetQuantityElementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuantityElementsResponse.ProtoReflect.Descriptor instead.
func (*GetQuantityElementsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{59}
}

func (x *GetQuantityElementsResponse) GetQuantityElements() []*QuantityElement {
	if x != nil {
		return x.QuantityElements
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType  string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	Source      string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	EventId     uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,4,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{60}
}

func (x *Source) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *Source) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Source) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *Source) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

type CreateSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType  string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	Source      string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	EventId     uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,4,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	UserId      string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail   string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId   string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateSourceRequest) Reset() {
	*x = CreateSourceRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSourceRequest) ProtoMessage() {}

func (x *CreateSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSourceRequest.ProtoReflect.Descriptor instead.
func (*CreateSourceRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{61}
}

func (x *CreateSourceRequest) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *CreateSourceRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateSourceRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *CreateSourceRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *CreateSourceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateSourceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateSourceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *CreateSourceResponse) Reset() {
	*x = CreateSourceResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSourceResponse) ProtoMessage() {}

func (x *CreateSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSourceResponse.ProtoReflect.Descriptor instead.
func (*CreateSourceResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{62}
}

func (x *CreateSourceResponse) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type GetSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,2,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	UserEmail   string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId   string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetSourcesRequest) Reset() {
	*x = GetSourcesRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesRequest) ProtoMessage() {}

func (x *GetSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesRequest.ProtoReflect.Descriptor instead.
func (*GetSourcesRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{63}
}

func (x *GetSourcesRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *GetSourcesRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *GetSourcesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetSourcesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetSourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources []*Source `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *GetSourcesResponse) Reset() {
	*x = GetSourcesResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesResponse) ProtoMessage() {}

func (x *GetSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesResponse.ProtoReflect.Descriptor instead.
func (*GetSourcesResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{64}
}

func (x *GetSourcesResponse) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestType    string `protobuf:"bytes,1,opt,name=dest_type,json=destType,proto3" json:"dest_type,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	EventId     uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,4,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{65}
}

func (x *Destination) GetDestType() string {
	if x != nil {
		return x.DestType
	}
	return ""
}

func (x *Destination) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Destination) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *Destination) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

type CreateDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestType    string `protobuf:"bytes,1,opt,name=dest_type,json=destType,proto3" json:"dest_type,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	EventId     uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,4,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	UserId      string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail   string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId   string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDestinationRequest) Reset() {
	*x = CreateDestinationRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDestinationRequest) ProtoMessage() {}

func (x *CreateDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDestinationRequest.ProtoReflect.Descriptor instead.
func (*CreateDestinationRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{66}
}

func (x *CreateDestinationRequest) GetDestType() string {
	if x != nil {
		return x.DestType
	}
	return ""
}

func (x *CreateDestinationRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *CreateDestinationRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *CreateDestinationRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *CreateDestinationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDestinationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDestinationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination *Destination `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *CreateDestinationResponse) Reset() {
	*x = CreateDestinationResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDestinationResponse) ProtoMessage() {}

func (x *CreateDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDestinationResponse.ProtoReflect.Descriptor instead.
func (*CreateDestinationResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{67}
}

func (x *CreateDestinationResponse) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

type GetDestinationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,2,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	UserEmail   string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId   string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetDestinationsRequest) Reset() {
	*x = GetDestinationsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDestinationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDestinationsRequest) ProtoMessage() {}

func (x *GetDestinationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDestinationsRequest.ProtoReflect.Descriptor instead.
func (*GetDestinationsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{68}
}

func (x *GetDestinationsRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *GetDestinationsRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *GetDestinationsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetDestinationsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetDestinationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destinations []*Destination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *GetDestinationsResponse) Reset() {
	*x = GetDestinationsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDestinationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDestinationsResponse) ProtoMessage() {}

func (x *GetDestinationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDestinationsResponse.ProtoReflect.Descriptor instead.
func (*GetDestinationsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{69}
}

func (x *GetDestinationsResponse) GetDestinations() []*Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

type SensorElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorMetadataD *v1.SensorMetadataD `protobuf:"bytes,1,opt,name=sensor_metadata_d,json=sensorMetadataD,proto3" json:"sensor_metadata_d,omitempty"`
	SensorMetadataT *v1.SensorMetadataT `protobuf:"bytes,2,opt,name=sensor_metadata_t,json=sensorMetadataT,proto3" json:"sensor_metadata_t,omitempty"`
	SensorElementD  *SensorElementD     `protobuf:"bytes,3,opt,name=sensor_element_d,json=sensorElementD,proto3" json:"sensor_element_d,omitempty"`
	SensorReports   []*SensorReport     `protobuf:"bytes,4,rep,name=sensor_reports,json=sensorReports,proto3" json:"sensor_reports,omitempty"`
}

func (x *SensorElement) Reset() {
	*x = SensorElement{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorElement) ProtoMessage() {}

func (x *SensorElement) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorElement.ProtoReflect.Descriptor instead.
func (*SensorElement) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{70}
}

func (x *SensorElement) GetSensorMetadataD() *v1.SensorMetadataD {
	if x != nil {
		return x.SensorMetadataD
	}
	return nil
}

func (x *SensorElement) GetSensorMetadataT() *v1.SensorMetadataT {
	if x != nil {
		return x.SensorMetadataT
	}
	return nil
}

func (x *SensorElement) GetSensorElementD() *SensorElementD {
	if x != nil {
		return x.SensorElementD
	}
	return nil
}

func (x *SensorElement) GetSensorReports() []*SensorReport {
	if x != nil {
		return x.SensorReports
	}
	return nil
}

type SensorElementD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId     uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,3,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
}

func (x *SensorElementD) Reset() {
	*x = SensorElementD{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorElementD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorElementD) ProtoMessage() {}

func (x *SensorElementD) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorElementD.ProtoReflect.Descriptor instead.
func (*SensorElementD) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{71}
}

func (x *SensorElementD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SensorElementD) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *SensorElementD) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

type CreateSensorElementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId             string                       `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	DeviceMetadata       string                       `protobuf:"bytes,2,opt,name=device_metadata,json=deviceMetadata,proto3" json:"device_metadata,omitempty"`
	RawData              string                       `protobuf:"bytes,3,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	DataProcessingMethod string                       `protobuf:"bytes,4,opt,name=data_processing_method,json=dataProcessingMethod,proto3" json:"data_processing_method,omitempty"`
	BizRules             string                       `protobuf:"bytes,5,opt,name=biz_rules,json=bizRules,proto3" json:"biz_rules,omitempty"`
	SensorTime           string                       `protobuf:"bytes,6,opt,name=sensor_time,json=sensorTime,proto3" json:"sensor_time,omitempty"`
	StartTime            string                       `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              string                       `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	EventId              uint32                       `protobuf:"varint,9,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent          string                       `protobuf:"bytes,10,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	UserId               string                       `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail            string                       `protobuf:"bytes,12,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId            string                       `protobuf:"bytes,13,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	SensorReports        []*CreateSensorReportRequest `protobuf:"bytes,14,rep,name=sensor_reports,json=sensorReports,proto3" json:"sensor_reports,omitempty"`
}

func (x *CreateSensorElementRequest) Reset() {
	*x = CreateSensorElementRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSensorElementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSensorElementRequest) ProtoMessage() {}

func (x *CreateSensorElementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSensorElementRequest.ProtoReflect.Descriptor instead.
func (*CreateSensorElementRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{72}
}

func (x *CreateSensorElementRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CreateSensorElementRequest) GetDeviceMetadata() string {
	if x != nil {
		return x.DeviceMetadata
	}
	return ""
}

func (x *CreateSensorElementRequest) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *CreateSensorElementRequest) GetDataProcessingMethod() string {
	if x != nil {
		return x.DataProcessingMethod
	}
	return ""
}

func (x *CreateSensorElementRequest) GetBizRules() string {
	if x != nil {
		return x.BizRules
	}
	return ""
}

func (x *CreateSensorElementRequest) GetSensorTime() string {
	if x != nil {
		return x.SensorTime
	}
	return ""
}

func (x *CreateSensorElementRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CreateSensorElementRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CreateSensorElementRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *CreateSensorElementRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *CreateSensorElementRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateSensorElementRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateSensorElementRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateSensorElementRequest) GetSensorReports() []*CreateSensorReportRequest {
	if x != nil {
		return x.SensorReports
	}
	return nil
}

type CreateSensorElementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorElement *SensorElement `protobuf:"bytes,1,opt,name=sensor_element,json=sensorElement,proto3" json:"sensor_element,omitempty"`
}

func (x *CreateSensorElementResponse) Reset() {
	*x = CreateSensorElementResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSensorElementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSensorElementResponse) ProtoMessage() {}

func (x *CreateSensorElementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSensorElementResponse.ProtoReflect.Descriptor instead.
func (*CreateSensorElementResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{73}
}

func (x *CreateSensorElementResponse) GetSensorElement() *SensorElement {
	if x != nil {
		return x.SensorElement
	}
	return nil
}

type GetSensorElementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TypeOfEvent string `protobuf:"bytes,2,opt,name=type_of_event,json=typeOfEvent,proto3" json:"type_of_event,omitempty"`
	UserEmail   string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId   string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetSensorElementsRequest) Reset() {
	*x = GetSensorElementsRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSensorElementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorElementsRequest) ProtoMessage() {}

func (x *GetSensorElementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorElementsRequest.ProtoReflect.Descriptor instead.
func (*GetSensorElementsRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{74}
}

func (x *GetSensorElementsRequest) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *GetSensorElementsRequest) GetTypeOfEvent() string {
	if x != nil {
		return x.TypeOfEvent
	}
	return ""
}

func (x *GetSensorElementsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetSensorElementsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetSensorElementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorElements []*SensorElement `protobuf:"bytes,1,rep,name=sensor_elements,json=sensorElements,proto3" json:"sensor_elements,omitempty"`
}

func (x *GetSensorElementsResponse) Reset() {
	*x = GetSensorElementsResponse{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSensorElementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorElementsResponse) ProtoMessage() {}

func (x *GetSensorElementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorElementsResponse.ProtoReflect.Descriptor instead.
func (*GetSensorElementsResponse) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{75}
}

func (x *GetSensorElementsResponse) GetSensorElements() []*SensorElement {
	if x != nil {
		return x.SensorElements
	}
	return nil
}

type SensorReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorReportD *SensorReportD `protobuf:"bytes,1,opt,name=sensor_report_d,json=sensorReportD,proto3" json:"sensor_report_d,omitempty"`
	SensorReportT *SensorReportT `protobuf:"bytes,2,opt,name=sensor_report_t,json=sensorReportT,proto3" json:"sensor_report_t,omitempty"`
}

func (x *SensorReport) Reset() {
	*x = SensorReport{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorReport) ProtoMessage() {}

func (x *SensorReport) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorReport.ProtoReflect.Descriptor instead.
func (*SensorReport) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{76}
}

func (x *SensorReport) GetSensorReportD() *SensorReportD {
	if x != nil {
		return x.SensorReportD
	}
	return nil
}

func (x *SensorReport) GetSensorReportT() *SensorReportT {
	if x != nil {
		return x.SensorReportT
	}
	return nil
}

type CreateSensorReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorReportType     string  `protobuf:"bytes,1,opt,name=sensor_report_type,json=sensorReportType,proto3" json:"sensor_report_type,omitempty"`
	DeviceId             string  `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	RawData              string  `protobuf:"bytes,3,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	DataProcessingMethod string  `protobuf:"bytes,4,opt,name=data_processing_method,json=dataProcessingMethod,proto3" json:"data_processing_method,omitempty"`
	Microorganism        string  `protobuf:"bytes,5,opt,name=microorganism,proto3" json:"microorganism,omitempty"`
	ChemicalSubstance    string  `protobuf:"bytes,6,opt,name=chemical_substance,json=chemicalSubstance,proto3" json:"chemical_substance,omitempty"`
	SensorValue          float64 `protobuf:"fixed64,7,opt,name=sensor_value,json=sensorValue,proto3" json:"sensor_value,omitempty"`
	Component            string  `protobuf:"bytes,8,opt,name=component,proto3" json:"component,omitempty"`
	StringValue          string  `protobuf:"bytes,9,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BooleanValue         bool    `protobuf:"varint,10,opt,name=boolean_value,json=booleanValue,proto3" json:"boolean_value,omitempty"`
	HexBinaryValue       string  `protobuf:"bytes,11,opt,name=hex_binary_value,json=hexBinaryValue,proto3" json:"hex_binary_value,omitempty"`
	UriValue             string  `protobuf:"bytes,12,opt,name=uri_value,json=uriValue,proto3" json:"uri_value,omitempty"`
	MinValue             float64 `protobuf:"fixed64,13,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue             float64 `protobuf:"fixed64,14,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	MeanValue            float64 `protobuf:"fixed64,15,opt,name=mean_value,json=meanValue,proto3" json:"mean_value,omitempty"`
	PercRank             float64 `protobuf:"fixed64,16,opt,name=perc_rank,json=percRank,proto3" json:"perc_rank,omitempty"`
	PercValue            float64 `protobuf:"fixed64,17,opt,name=perc_value,json=percValue,proto3" json:"perc_value,omitempty"`
	Uom                  string  `protobuf:"bytes,18,opt,name=uom,proto3" json:"uom,omitempty"`
	SDev                 float64 `protobuf:"fixed64,19,opt,name=s_dev,json=sDev,proto3" json:"s_dev,omitempty"`
	DeviceMetadata       string  `protobuf:"bytes,20,opt,name=device_metadata,json=deviceMetadata,proto3" json:"device_metadata,omitempty"`
	SensorElementId      uint32  `protobuf:"varint,21,opt,name=sensor_element_id,json=sensorElementId,proto3" json:"sensor_element_id,omitempty"`
	SensorReportTime     string  `protobuf:"bytes,22,opt,name=sensor_report_time,json=sensorReportTime,proto3" json:"sensor_report_time,omitempty"`
	UserId               string  `protobuf:"bytes,23,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail            string  `protobuf:"bytes,24,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId            string  `protobuf:"bytes,25,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateSensorReportRequest) Reset() {
	*x = CreateSensorReportRequest{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSensorReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSensorReportRequest) ProtoMessage() {}

func (x *CreateSensorReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSensorReportRequest.ProtoReflect.Descriptor instead.
func (*CreateSensorReportRequest) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{77}
}

func (x *CreateSensorReportRequest) GetSensorReportType() string {
	if x != nil {
		return x.SensorReportType
	}
	return ""
}

func (x *CreateSensorReportRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CreateSensorReportRequest) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *CreateSensorReportRequest) GetDataProcessingMethod() string {
	if x != nil {
		return x.DataProcessingMethod
	}
	return ""
}

func (x *CreateSensorReportRequest) GetMicroorganism() string {
	if x != nil {
		return x.Microorganism
	}
	return ""
}

func (x *CreateSensorReportRequest) GetChemicalSubstance() string {
	if x != nil {
		return x.ChemicalSubstance
	}
	return ""
}

func (x *CreateSensorReportRequest) GetSensorValue() float64 {
	if x != nil {
		return x.SensorValue
	}
	return 0
}

func (x *CreateSensorReportRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *CreateSensorReportRequest) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *CreateSensorReportRequest) GetBooleanValue() bool {
	if x != nil {
		return x.BooleanValue
	}
	return false
}

func (x *CreateSensorReportRequest) GetHexBinaryValue() string {
	if x != nil {
		return x.HexBinaryValue
	}
	return ""
}

func (x *CreateSensorReportRequest) GetUriValue() string {
	if x != nil {
		return x.UriValue
	}
	return ""
}

func (x *CreateSensorReportRequest) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *CreateSensorReportRequest) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *CreateSensorReportRequest) GetMeanValue() float64 {
	if x != nil {
		return x.MeanValue
	}
	return 0
}

func (x *CreateSensorReportRequest) GetPercRank() float64 {
	if x != nil {
		return x.PercRank
	}
	return 0
}

func (x *CreateSensorReportRequest) GetPercValue() float64 {
	if x != nil {
		return x.PercValue
	}
	return 0
}

func (x *CreateSensorReportRequest) GetUom() string {
	if x != nil {
		return x.Uom
	}
	return ""
}

func (x *CreateSensorReportRequest) GetSDev() float64 {
	if x != nil {
		return x.SDev
	}
	return 0
}

func (x *CreateSensorReportRequest) GetDeviceMetadata() string {
	if x != nil {
		return x.DeviceMetadata
	}
	return ""
}

func (x *CreateSensorReportRequest) GetSensorElementId() uint32 {
	if x != nil {
		return x.SensorElementId
	}
	return 0
}

func (x *CreateSensorReportRequest) GetSensorReportTime() string {
	if x != nil {
		return x.SensorReportTime
	}
	return ""
}

func (x *CreateSensorReportRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateSensorReportRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateSensorReportRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type SensorReportD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorReportType     string  `protobuf:"bytes,1,opt,name=sensor_report_type,json=sensorReportType,proto3" json:"sensor_report_type,omitempty"`
	DeviceId             string  `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	RawData              string  `protobuf:"bytes,3,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	DataProcessingMethod string  `protobuf:"bytes,4,opt,name=data_processing_method,json=dataProcessingMethod,proto3" json:"data_processing_method,omitempty"`
	Microorganism        string  `protobuf:"bytes,5,opt,name=microorganism,proto3" json:"microorganism,omitempty"`
	ChemicalSubstance    string  `protobuf:"bytes,6,opt,name=chemical_substance,json=chemicalSubstance,proto3" json:"chemical_substance,omitempty"`
	SensorValue          float64 `protobuf:"fixed64,7,opt,name=sensor_value,json=sensorValue,proto3" json:"sensor_value,omitempty"`
	Component            string  `protobuf:"bytes,8,opt,name=component,proto3" json:"component,omitempty"`
	StringValue          string  `protobuf:"bytes,9,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BooleanValue         bool    `protobuf:"varint,10,opt,name=boolean_value,json=booleanValue,proto3" json:"boolean_value,omitempty"`
	HexBinaryValue       string  `protobuf:"bytes,11,opt,name=hex_binary_value,json=hexBinaryValue,proto3" json:"hex_binary_value,omitempty"`
	UriValue             string  `protobuf:"bytes,12,opt,name=uri_value,json=uriValue,proto3" json:"uri_value,omitempty"`
	MinValue             float64 `protobuf:"fixed64,13,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue             float64 `protobuf:"fixed64,14,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	MeanValue            float64 `protobuf:"fixed64,15,opt,name=mean_value,json=meanValue,proto3" json:"mean_value,omitempty"`
	PercRank             float64 `protobuf:"fixed64,16,opt,name=perc_rank,json=percRank,proto3" json:"perc_rank,omitempty"`
	PercValue            float64 `protobuf:"fixed64,17,opt,name=perc_value,json=percValue,proto3" json:"perc_value,omitempty"`
	Uom                  string  `protobuf:"bytes,18,opt,name=uom,proto3" json:"uom,omitempty"`
	SDev                 float64 `protobuf:"fixed64,19,opt,name=s_dev,json=sDev,proto3" json:"s_dev,omitempty"`
	DeviceMetadata       string  `protobuf:"bytes,20,opt,name=device_metadata,json=deviceMetadata,proto3" json:"device_metadata,omitempty"`
	SensorElementId      uint32  `protobuf:"varint,21,opt,name=sensor_element_id,json=sensorElementId,proto3" json:"sensor_element_id,omitempty"`
}

func (x *SensorReportD) Reset() {
	*x = SensorReportD{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorReportD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorReportD) ProtoMessage() {}

func (x *SensorReportD) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorReportD.ProtoReflect.Descriptor instead.
func (*SensorReportD) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{78}
}

func (x *SensorReportD) GetSensorReportType() string {
	if x != nil {
		return x.SensorReportType
	}
	return ""
}

func (x *SensorReportD) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SensorReportD) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *SensorReportD) GetDataProcessingMethod() string {
	if x != nil {
		return x.DataProcessingMethod
	}
	return ""
}

func (x *SensorReportD) GetMicroorganism() string {
	if x != nil {
		return x.Microorganism
	}
	return ""
}

func (x *SensorReportD) GetChemicalSubstance() string {
	if x != nil {
		return x.ChemicalSubstance
	}
	return ""
}

func (x *SensorReportD) GetSensorValue() float64 {
	if x != nil {
		return x.SensorValue
	}
	return 0
}

func (x *SensorReportD) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *SensorReportD) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *SensorReportD) GetBooleanValue() bool {
	if x != nil {
		return x.BooleanValue
	}
	return false
}

func (x *SensorReportD) GetHexBinaryValue() string {
	if x != nil {
		return x.HexBinaryValue
	}
	return ""
}

func (x *SensorReportD) GetUriValue() string {
	if x != nil {
		return x.UriValue
	}
	return ""
}

func (x *SensorReportD) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *SensorReportD) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *SensorReportD) GetMeanValue() float64 {
	if x != nil {
		return x.MeanValue
	}
	return 0
}

func (x *SensorReportD) GetPercRank() float64 {
	if x != nil {
		return x.PercRank
	}
	return 0
}

func (x *SensorReportD) GetPercValue() float64 {
	if x != nil {
		return x.PercValue
	}
	return 0
}

func (x *SensorReportD) GetUom() string {
	if x != nil {
		return x.Uom
	}
	return ""
}

func (x *SensorReportD) GetSDev() float64 {
	if x != nil {
		return x.SDev
	}
	return 0
}

func (x *SensorReportD) GetDeviceMetadata() string {
	if x != nil {
		return x.DeviceMetadata
	}
	return ""
}

func (x *SensorReportD) GetSensorElementId() uint32 {
	if x != nil {
		return x.SensorElementId
	}
	return 0
}

type SensorReportT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorReportTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=sensor_report_time,json=sensorReportTime,proto3" json:"sensor_report_time,omitempty"`
}

func (x *SensorReportT) Reset() {
	*x = SensorReportT{}
	mi := &file_epcis_v1_epcis_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorReportT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorReportT) ProtoMessage() {}

func (x *SensorReportT) ProtoReflect() protoreflect.Message {
	mi := &file_epcis_v1_epcis_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorReportT.ProtoReflect.Descriptor instead.
func (*SensorReportT) Descriptor() ([]byte, []int) {
	return file_epcis_v1_epcis_proto_rawDescGZIP(), []int{79}
}

func (x *SensorReportT) GetSensorReportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SensorReportTime
	}
	return nil
}

var File_epcis_v1_epcis_proto protoreflect.FileDescriptor

var file_epcis_v1_epcis_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x06, 0x0a, 0x0b, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x63,
	0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x0b, 0x65, 0x70, 0x63, 0x69, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x70, 0x63, 0x69, 0x73, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x52, 0x0b, 0x65, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x12, 0x4c, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x52, 0x11, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12,
	0x4c, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x12, 0x3c, 0x0a,
	0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x0c, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x58, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x65,
	0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x63, 0x52, 0x07, 0x65, 0x70,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x62,
	0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xf2, 0x01, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x53, 0x74, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x69, 0x7a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6c, 0x6d, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6c, 0x6d, 0x64, 0x22, 0x9d, 0x08, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x53, 0x74, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x69, 0x7a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6c, 0x6d, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6c, 0x6d, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x17, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65,
	0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x65, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x14, 0x62, 0x69, 0x7a,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12,
	0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x8d, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x76, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x86, 0x07, 0x0a, 0x10, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x0d, 0x65, 0x70, 0x63, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x0b, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x63,
	0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x52, 0x0b, 0x65, 0x70, 0x63, 0x69, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x4c, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x12, 0x4c, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x52, 0x11,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x11, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c,
	0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x70, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70,
	0x63, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x45, 0x70, 0x63, 0x73, 0x12, 0x4a, 0x0a, 0x14,
	0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a,
	0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x7a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x08, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x53, 0x74, 0x65, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x69, 0x7a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x17, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x70, 0x63, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x45, 0x70, 0x63, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x62,
	0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x12, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x13, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x69, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x66, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x8a, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x86, 0x07, 0x0a,
	0x10, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x70, 0x63, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x52, 0x0b, 0x65, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x3a, 0x0a,
	0x0d, 0x65, 0x70, 0x63, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x52, 0x0b, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x4c, 0x0a, 0x13, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x4c, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52,
	0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x70, 0x63, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x70, 0x63, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x45, 0x70, 0x63, 0x73,
	0x12, 0x4a, 0x0a, 0x14, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x13,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x13,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64,
	0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x7a, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x08, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x7a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x65, 0x0a,
	0x17, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x70,
	0x63, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x45, 0x70, 0x63, 0x73, 0x12,
	0x57, 0x0a, 0x14, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4d, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x54, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65,
	0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x54, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x92,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x22, 0xf7, 0x06, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x70, 0x63, 0x69, 0x73, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x52, 0x0b, 0x65, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x70, 0x63, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x52, 0x0b, 0x65, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x4c, 0x0a,
	0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x4c, 0x0a, 0x13, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x12, 0x4b, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x17,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x65, 0x70, 0x63, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x63, 0x52, 0x07, 0x65, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x14, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x69, 0x7a, 0x53, 0x74, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69,
	0x7a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x69, 0x7a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x08,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x69, 0x7a, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x69, 0x7a, 0x53, 0x74, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x7a, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x69, 0x7a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x65, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x70, 0x63,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x65, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x57, 0x0a, 0x14, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x1e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x9d, 0x08, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x0d, 0x65, 0x70, 0x63, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x70, 0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x0b, 0x65,
	0x70, 0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70,
	0x63, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x52, 0x0b, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x4c, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x12, 0x4c, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x52,
	0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x12, 0x54, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x70, 0x63, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x70, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x70, 0x63, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x70,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x58, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x14,
	0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x7a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6c, 0x6d, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6c, 0x6d, 0x64, 0x22, 0xee, 0x09, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x53, 0x74, 0x65, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x69, 0x7a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6c, 0x6d, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6c, 0x6d, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x65, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x45, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x62,
	0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x12, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x57, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x90,
	0x01, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0xf4, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x15, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x17, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x03, 0x45, 0x70, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x70, 0x63, 0x22, 0xe5, 0x01, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x70, 0x63, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x65, 0x70, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x70, 0x63, 0x52, 0x03, 0x65, 0x70, 0x63, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x45, 0x70, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x70, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x45, 0x70, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x04, 0x65, 0x70, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x63, 0x52, 0x04, 0x65, 0x70, 0x63, 0x73,
	0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x02,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x69, 0x7a,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65,
	0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x61,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0f, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x62, 0x69,
	0x7a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x62, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xc5, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x6f, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xa9, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x63, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x79,
	0x70, 0x65, 0x4f, 0x66, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70,
	0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x65, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x40, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70,
	0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f,
	0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70,
	0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa2, 0x02, 0x0a,
	0x0d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46,
	0x0a, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x44, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x52, 0x0f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x12, 0x42,
	0x0a, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x22, 0x5f, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x8d, 0x04, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x7a, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x7a,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x22, 0x5d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x12, 0x3f, 0x0a, 0x0f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x22, 0xf2, 0x06,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x65, 0x6d, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x78, 0x5f, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x65, 0x78, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x72, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x72, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x63, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x65, 0x72, 0x63, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x65, 0x72, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x6f, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x73, 0x44, 0x65, 0x76, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0xe1, 0x05, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x65, 0x78, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x65, 0x78, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x72, 0x69, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x72, 0x69,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x70, 0x65, 0x72, 0x63, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x6f,
	0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05,
	0x73, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x44, 0x65,
	0x76, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0xb2, 0x16, 0x0a, 0x0c, 0x45, 0x70, 0x63, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x70, 0x63,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x63, 0x12, 0x1a, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x45, 0x70, 0x63, 0x73, 0x12, 0x18, 0x2e, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x70, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x70, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x69,
	0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e,
	0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x7a, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x69, 0x7a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x26, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x70, 0x63, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x20, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x70,
	0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e,
	0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x2f, 0x73, 0x63, 0x2d, 0x67, 0x73, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x70, 0x63, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_epcis_v1_epcis_proto_rawDescOnce sync.Once
	file_epcis_v1_epcis_proto_rawDescData = file_epcis_v1_epcis_proto_rawDesc
)

func file_epcis_v1_epcis_proto_rawDescGZIP() []byte {
	file_epcis_v1_epcis_proto_rawDescOnce.Do(func() {
		file_epcis_v1_epcis_proto_rawDescData = protoimpl.X.CompressGZIP(file_epcis_v1_epcis_proto_rawDescData)
	})
	return file_epcis_v1_epcis_proto_rawDescData
}

var file_epcis_v1_epcis_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_epcis_v1_epcis_proto_goTypes = []any{
	(*ObjectEvent)(nil),                         // 0: epcis.v1.ObjectEvent
	(*ObjectEventD)(nil),                        // 1: epcis.v1.ObjectEventD
	(*CreateObjectEventRequest)(nil),            // 2: epcis.v1.CreateObjectEventRequest
	(*CreateObjectEventResponse)(nil),           // 3: epcis.v1.CreateObjectEventResponse
	(*GetObjectEventRequest)(nil),               // 4: epcis.v1.GetObjectEventRequest
	(*GetObjectEventResponse)(nil),              // 5: epcis.v1.GetObjectEventResponse
	(*GetObjectEventsRequest)(nil),              // 6: epcis.v1.GetObjectEventsRequest
	(*GetObjectEventsResponse)(nil),             // 7: epcis.v1.GetObjectEventsResponse
	(*AggregationEvent)(nil),                    // 8: epcis.v1.AggregationEvent
	(*AggregationEventD)(nil),                   // 9: epcis.v1.AggregationEventD
	(*CreateAggregationEventRequest)(nil),       // 10: epcis.v1.CreateAggregationEventRequest
	(*CreateAggregationEventResponse)(nil),      // 11: epcis.v1.CreateAggregationEventResponse
	(*GetAggregationEventRequest)(nil),          // 12: epcis.v1.GetAggregationEventRequest
	(*GetAggregationEventResponse)(nil),         // 13: epcis.v1.GetAggregationEventResponse
	(*GetAggregationEventsRequest)(nil),         // 14: epcis.v1.GetAggregationEventsRequest
	(*GetAggregationEventsResponse)(nil),        // 15: epcis.v1.GetAggregationEventsResponse
	(*AssociationEvent)(nil),                    // 16: epcis.v1.AssociationEvent
	(*AssociationEventD)(nil),                   // 17: epcis.v1.AssociationEventD
	(*CreateAssociationEventRequest)(nil),       // 18: epcis.v1.CreateAssociationEventRequest
	(*CreateAssociationEventResponse)(nil),      // 19: epcis.v1.CreateAssociationEventResponse
	(*GetAssociationEventRequest)(nil),          // 20: epcis.v1.GetAssociationEventRequest
	(*GetAssociationEventResponse)(nil),         // 21: epcis.v1.GetAssociationEventResponse
	(*GetAssociationEventsRequest)(nil),         // 22: epcis.v1.GetAssociationEventsRequest
	(*GetAssociationEventsResponse)(nil),        // 23: epcis.v1.GetAssociationEventsResponse
	(*TransactionEvent)(nil),                    // 24: epcis.v1.TransactionEvent
	(*TransactionEventD)(nil),                   // 25: epcis.v1.TransactionEventD
	(*CreateTransactionEventRequest)(nil),       // 26: epcis.v1.CreateTransactionEventRequest
	(*CreateTransactionEventResponse)(nil),      // 27: epcis.v1.CreateTransactionEventResponse
	(*GetTransactionEventRequest)(nil),          // 28: epcis.v1.GetTransactionEventRequest
	(*GetTransactionEventResponse)(nil),         // 29: epcis.v1.GetTransactionEventResponse
	(*GetTransactionEventsRequest)(nil),         // 30: epcis.v1.GetTransactionEventsRequest
	(*GetTransactionEventsResponse)(nil),        // 31: epcis.v1.GetTransactionEventsResponse
	(*TransformationEvent)(nil),                 // 32: epcis.v1.TransformationEvent
	(*TransformationEventD)(nil),                // 33: epcis.v1.TransformationEventD
	(*CreateTransformationEventRequest)(nil),    // 34: epcis.v1.CreateTransformationEventRequest
	(*CreateTransformationEventResponse)(nil),   // 35: epcis.v1.CreateTransformationEventResponse
	(*GetTransformationEventRequest)(nil),       // 36: epcis.v1.GetTransformationEventRequest
	(*GetTransformationEventResponse)(nil),      // 37: epcis.v1.GetTransformationEventResponse
	(*GetTransformationEventsRequest)(nil),      // 38: epcis.v1.GetTransformationEventsRequest
	(*GetTransformationEventsResponse)(nil),     // 39: epcis.v1.GetTransformationEventsResponse
	(*PersistentDisposition)(nil),               // 40: epcis.v1.PersistentDisposition
	(*CreatePersistentDispositionRequest)(nil),  // 41: epcis.v1.CreatePersistentDispositionRequest
	(*CreatePersistentDispositionResponse)(nil), // 42: epcis.v1.CreatePersistentDispositionResponse
	(*GetPersistentDispositionsRequest)(nil),    // 43: epcis.v1.GetPersistentDispositionsRequest
	(*GetPersistentDispositionsResponse)(nil),   // 44: epcis.v1.GetPersistentDispositionsResponse
	(*Epc)(nil),                           // 45: epcis.v1.Epc
	(*CreateEpcRequest)(nil),              // 46: epcis.v1.CreateEpcRequest
	(*CreateEpcResponse)(nil),             // 47: epcis.v1.CreateEpcResponse
	(*GetEpcsRequest)(nil),                // 48: epcis.v1.GetEpcsRequest
	(*GetEpcsResponse)(nil),               // 49: epcis.v1.GetEpcsResponse
	(*BizTransaction)(nil),                // 50: epcis.v1.BizTransaction
	(*CreateBizTransactionRequest)(nil),   // 51: epcis.v1.CreateBizTransactionRequest
	(*CreateBizTransactionResponse)(nil),  // 52: epcis.v1.CreateBizTransactionResponse
	(*GetBizTransactionsRequest)(nil),     // 53: epcis.v1.GetBizTransactionsRequest
	(*GetBizTransactionsResponse)(nil),    // 54: epcis.v1.GetBizTransactionsResponse
	(*QuantityElement)(nil),               // 55: epcis.v1.QuantityElement
	(*CreateQuantityElementRequest)(nil),  // 56: epcis.v1.CreateQuantityElementRequest
	(*CreateQuantityElementResponse)(nil), // 57: epcis.v1.CreateQuantityElementResponse
	(*GetQuantityElementsRequest)(nil),    // 58: epcis.v1.GetQuantityElementsRequest
	(*GetQuantityElementsResponse)(nil),   // 59: epcis.v1.GetQuantityElementsResponse
	(*Source)(nil),                        // 60: epcis.v1.Source
	(*CreateSourceRequest)(nil),           // 61: epcis.v1.CreateSourceRequest
	(*CreateSourceResponse)(nil),          // 62: epcis.v1.CreateSourceResponse
	(*GetSourcesRequest)(nil),             // 63: epcis.v1.GetSourcesRequest
	(*GetSourcesResponse)(nil),            // 64: epcis.v1.GetSourcesResponse
	(*Destination)(nil),                   // 65: epcis.v1.Destination
	(*CreateDestinationRequest)(nil),      // 66: epcis.v1.CreateDestinationRequest
	(*CreateDestinationResponse)(nil),     // 67: epcis.v1.CreateDestinationResponse
	(*GetDestinationsRequest)(nil),        // 68: epcis.v1.GetDestinationsRequest
	(*GetDestinationsResponse)(nil),       // 69: epcis.v1.GetDestinationsResponse
	(*SensorElement)(nil),                 // 70: epcis.v1.SensorElement
	(*SensorElementD)(nil),                // 71: epcis.v1.SensorElementD
	(*CreateSensorElementRequest)(nil),    // 72: epcis.v1.CreateSensorElementRequest
	(*CreateSensorElementResponse)(nil),   // 73: epcis.v1.CreateSensorElementResponse
	(*GetSensorElementsRequest)(nil),      // 74: epcis.v1.GetSensorElementsRequest
	(*GetSensorElementsResponse)(nil),     // 75: epcis.v1.GetSensorElementsResponse
	(*SensorReport)(nil),                  // 76: epcis.v1.SensorReport
	(*CreateSensorReportRequest)(nil),     // 77: epcis.v1.CreateSensorReportRequest
	(*SensorReportD)(nil),                 // 78: epcis.v1.SensorReportD
	(*SensorReportT)(nil),                 // 79: epcis.v1.SensorReportT
	(*v1.EpcisEventD)(nil),                // 80: common.v1.EpcisEventD
	(*v1.EpcisEventT)(nil),                // 81: common.v1.EpcisEventT
	(*v1.ErrorDeclarationD)(nil),          // 82: common.v1.ErrorDeclarationD
	(*v1.ErrorDeclarationT)(nil),          // 83: common.v1.ErrorDeclarationT
	(*v1.CrUpdUser)(nil),                  // 84: common.v1.CrUpdUser
	(*v1.GetRequest)(nil),                 // 85: common.v1.GetRequest
	(*v1.SensorMetadataD)(nil),            // 86: common.v1.SensorMetadataD
	(*v1.SensorMetadataT)(nil),            // 87: common.v1.SensorMetadataT
	(*timestamppb.Timestamp)(nil),         // 88: google.protobuf.Timestamp
}
var file_epcis_v1_epcis_proto_depIdxs = []int32{
	80,  // 0: epcis.v1.ObjectEvent.epcis_event_d:type_name -> common.v1.EpcisEventD
	81,  // 1: epcis.v1.ObjectEvent.epcis_event_t:type_name -> common.v1.EpcisEventT
	82,  // 2: epcis.v1.ObjectEvent.error_declaration_d:type_name -> common.v1.ErrorDeclarationD
	83,  // 3: epcis.v1.ObjectEvent.error_declaration_t:type_name -> common.v1.ErrorDeclarationT
	1,   // 4: epcis.v1.ObjectEvent.object_event_d:type_name -> epcis.v1.ObjectEventD
	84,  // 5: epcis.v1.ObjectEvent.cr_upd_user:type_name -> common.v1.CrUpdUser
	40,  // 6: epcis.v1.ObjectEvent.persistent_dispositions:type_name -> epcis.v1.PersistentDisposition
	45,  // 7: epcis.v1.ObjectEvent.epc_list:type_name -> epcis.v1.Epc
	50,  // 8: epcis.v1.ObjectEvent.biz_transaction_list:type_name -> epcis.v1.BizTransaction
	55,  // 9: epcis.v1.ObjectEvent.quantity_list:type_name -> epcis.v1.QuantityElement
	60,  // 10: epcis.v1.ObjectEvent.source_list:type_name -> epcis.v1.Source
	65,  // 11: epcis.v1.ObjectEvent.destination_list:type_name -> epcis.v1.Destination
	70,  // 12: epcis.v1.ObjectEvent.sensor_element_list:type_name -> epcis.v1.SensorElement
	41,  // 13: epcis.v1.CreateObjectEventRequest.persistent_dispositions:type_name -> epcis.v1.CreatePersistentDispositionRequest
	46,  // 14: epcis.v1.CreateObjectEventRequest.epc_list:type_name -> epcis.v1.CreateEpcRequest
	51,  // 15: epcis.v1.CreateObjectEventRequest.biz_transaction_list:type_name -> epcis.v1.CreateBizTransactionRequest
	56,  // 16: epcis.v1.CreateObjectEventRequest.quantity_list:type_name -> epcis.v1.CreateQuantityElementRequest
	61,  // 17: epcis.v1.CreateObjectEventRequest.source_list:type_name -> epcis.v1.CreateSourceRequest
	66,  // 18: epcis.v1.CreateObjectEventRequest.destination_list:type_name -> epcis.v1.CreateDestinationRequest
	72,  // 19: epcis.v1.CreateObjectEventRequest.sensor_element_list:type_name -> epcis.v1.CreateSensorElementRequest
	0,   // 20: epcis.v1.CreateObjectEventResponse.object_event:type_name -> epcis.v1.ObjectEvent
	85,  // 21: epcis.v1.GetObjectEventRequest.get_request:type_name -> common.v1.GetRequest
	0,   // 22: epcis.v1.GetObjectEventResponse.object_event:type_name -> epcis.v1.ObjectEvent
	0,   // 23: epcis.v1.GetObjectEventsResponse.object_events:type_name -> epcis.v1.ObjectEvent
	80,  // 24: epcis.v1.AggregationEvent.epcis_event_d:type_name -> common.v1.EpcisEventD
	81,  // 25: epcis.v1.AggregationEvent.epcis_event_t:type_name -> common.v1.EpcisEventT
	82,  // 26: epcis.v1.AggregationEvent.error_declaration_d:type_name -> common.v1.ErrorDeclarationD
	83,  // 27: epcis.v1.AggregationEvent.error_declaration_t:type_name -> common.v1.ErrorDeclarationT
	9,   // 28: epcis.v1.AggregationEvent.aggregation_event_d:type_name -> epcis.v1.AggregationEventD
	84,  // 29: epcis.v1.AggregationEvent.cr_upd_user:type_name -> common.v1.CrUpdUser
	40,  // 30: epcis.v1.AggregationEvent.persistent_dispositions:type_name -> epcis.v1.PersistentDisposition
	45,  // 31: epcis.v1.AggregationEvent.child_epcs:type_name -> epcis.v1.Epc
	50,  // 32: epcis.v1.AggregationEvent.biz_transaction_list:type_name -> epcis.v1.BizTransaction
	55,  // 33: epcis.v1.AggregationEvent.child_quantity_list:type_name -> epcis.v1.QuantityElement
	60,  // 34: epcis.v1.AggregationEvent.source_list:type_name -> epcis.v1.Source
	65,  // 35: epcis.v1.AggregationEvent.destination_list:type_name -> epcis.v1.Destination
	70,  // 36: epcis.v1.AggregationEvent.sensor_element_list:type_name -> epcis.v1.SensorElement
	41,  // 37: epcis.v1.CreateAggregationEventRequest.persistent_dispositions:type_name -> epcis.v1.CreatePersistentDispositionRequest
	46,  // 38: epcis.v1.CreateAggregationEventRequest.child_epcs:type_name -> epcis.v1.CreateEpcRequest
	51,  // 39: epcis.v1.CreateAggregationEventRequest.biz_transaction_list:type_name -> epcis.v1.CreateBizTransactionRequest
	56,  // 40: epcis.v1.CreateAggregationEventRequest.child_quantity_list:type_name -> epcis.v1.CreateQuantityElementRequest
	61,  // 41: epcis.v1.CreateAggregationEventRequest.source_list:type_name -> epcis.v1.CreateSourceRequest
	66,  // 42: epcis.v1.CreateAggregationEventRequest.destination_list:type_name -> epcis.v1.CreateDestinationRequest
	72,  // 43: epcis.v1.CreateAggregationEventRequest.sensor_element_list:type_name -> epcis.v1.CreateSensorElementRequest
	8,   // 44: epcis.v1.CreateAggregationEventResponse.aggregation_event:type_name -> epcis.v1.AggregationEvent
	85,  // 45: epcis.v1.GetAggregationEventRequest.get_request:type_name -> common.v1.GetRequest
	8,   // 46: epcis.v1.GetAggregationEventResponse.aggregation_event:type_name -> epcis.v1.AggregationEvent
	8,   // 47: epcis.v1.GetAggregationEventsResponse.aggregation_events:type_name -> epcis.v1.AggregationEvent
	80,  // 48: epcis.v1.AssociationEvent.epcis_event_d:type_name -> common.v1.EpcisEventD
	81,  // 49: epcis.v1.AssociationEvent.epcis_event_t:type_name -> common.v1.EpcisEventT
	82,  // 50: epcis.v1.AssociationEvent.error_declaration_d:type_name -> common.v1.ErrorDeclarationD
	83,  // 51: epcis.v1.AssociationEvent.error_declaration_t:type_name -> common.v1.ErrorDeclarationT
	17,  // 52: epcis.v1.AssociationEvent.association_event_d:type_name -> epcis.v1.AssociationEventD
	84,  // 53: epcis.v1.AssociationEvent.cr_upd_user:type_name -> common.v1.CrUpdUser
	40,  // 54: epcis.v1.AssociationEvent.persistent_dispositions:type_name -> epcis.v1.PersistentDisposition
	45,  // 55: epcis.v1.AssociationEvent.child_epcs:type_name -> epcis.v1.Epc
	50,  // 56: epcis.v1.AssociationEvent.biz_transaction_list:type_name -> epcis.v1.BizTransaction
	55,  // 57: epcis.v1.AssociationEvent.child_quantity_list:type_name -> epcis.v1.QuantityElement
	60,  // 58: epcis.v1.AssociationEvent.source_list:type_name -> epcis.v1.Source
	65,  // 59: epcis.v1.AssociationEvent.destination_list:type_name -> epcis.v1.Destination
	70,  // 60: epcis.v1.AssociationEvent.sensor_element_list:type_name -> epcis.v1.SensorElement
	41,  // 61: epcis.v1.CreateAssociationEventRequest.persistent_dispositions:type_name -> epcis.v1.CreatePersistentDispositionRequest
	46,  // 62: epcis.v1.CreateAssociationEventRequest.child_epcs:type_name -> epcis.v1.CreateEpcRequest
	51,  // 63: epcis.v1.CreateAssociationEventRequest.biz_transaction_list:type_name -> epcis.v1.CreateBizTransactionRequest
	56,  // 64: epcis.v1.CreateAssociationEventRequest.child_quantity_list:type_name -> epcis.v1.CreateQuantityElementRequest
	61,  // 65: epcis.v1.CreateAssociationEventRequest.source_list:type_name -> epcis.v1.CreateSourceRequest
	66,  // 66: epcis.v1.CreateAssociationEventRequest.destination_list:type_name -> epcis.v1.CreateDestinationRequest
	72,  // 67: epcis.v1.CreateAssociationEventRequest.sensor_element_list:type_name -> epcis.v1.CreateSensorElementRequest
	16,  // 68: epcis.v1.CreateAssociationEventResponse.association_event:type_name -> epcis.v1.AssociationEvent
	85,  // 69: epcis.v1.GetAssociationEventRequest.get_request:type_name -> common.v1.GetRequest
	16,  // 70: epcis.v1.GetAssociationEventResponse.association_event:type_name -> epcis.v1.AssociationEvent
	16,  // 71: epcis.v1.GetAssociationEventsResponse.association_events:type_name -> epcis.v1.AssociationEvent
	80,  // 72: epcis.v1.TransactionEvent.epcis_event_d:type_name -> common.v1.EpcisEventD
	81,  // 73: epcis.v1.TransactionEvent.epcis_event_t:type_name -> common.v1.EpcisEventT
	82,  // 74: epcis.v1.TransactionEvent.error_declaration_d:type_name -> common.v1.ErrorDeclarationD
	83,  // 75: epcis.v1.TransactionEvent.error_declaration_t:type_name -> common.v1.ErrorDeclarationT
	25,  // 76: epcis.v1.TransactionEvent.transaction_event_d:type_name -> epcis.v1.TransactionEventD
	84,  // 77: epcis.v1.TransactionEvent.cr_upd_user:type_name -> common.v1.CrUpdUser
	40,  // 78: epcis.v1.TransactionEvent.persistent_dispositions:type_name -> epcis.v1.PersistentDisposition
	45,  // 79: epcis.v1.TransactionEvent.epc_list:type_name -> epcis.v1.Epc
	50,  // 80: epcis.v1.TransactionEvent.biz_transaction_list:type_name -> epcis.v1.BizTransaction
	55,  // 81: epcis.v1.TransactionEvent.quantity_list:type_name -> epcis.v1.QuantityElement
	60,  // 82: epcis.v1.TransactionEvent.source_list:type_name -> epcis.v1.Source
	65,  // 83: epcis.v1.TransactionEvent.destination_list:type_name -> epcis.v1.Destination
	70,  // 84: epcis.v1.TransactionEvent.sensor_element_list:type_name -> epcis.v1.SensorElement
	41,  // 85: epcis.v1.CreateTransactionEventRequest.persistent_dispositions:type_name -> epcis.v1.CreatePersistentDispositionRequest
	46,  // 86: epcis.v1.CreateTransactionEventRequest.epc_list:type_name -> epcis.v1.CreateEpcRequest
	51,  // 87: epcis.v1.CreateTransactionEventRequest.biz_transaction_list:type_name -> epcis.v1.CreateBizTransactionRequest
	56,  // 88: epcis.v1.CreateTransactionEventRequest.quantity_list:type_name -> epcis.v1.CreateQuantityElementRequest
	61,  // 89: epcis.v1.CreateTransactionEventRequest.source_list:type_name -> epcis.v1.CreateSourceRequest
	66,  // 90: epcis.v1.CreateTransactionEventRequest.destination_list:type_name -> epcis.v1.CreateDestinationRequest
	72,  // 91: epcis.v1.CreateTransactionEventRequest.sensor_element_list:type_name -> epcis.v1.CreateSensorElementRequest
	24,  // 92: epcis.v1.CreateTransactionEventResponse.transaction_event:type_name -> epcis.v1.TransactionEvent
	85,  // 93: epcis.v1.GetTransactionEventRequest.get_request:type_name -> common.v1.GetRequest
	24,  // 94: epcis.v1.GetTransactionEventResponse.transaction_event:type_name -> epcis.v1.TransactionEvent
	24,  // 95: epcis.v1.GetTransactionEventsResponse.transaction_events:type_name -> epcis.v1.TransactionEvent
	80,  // 96: epcis.v1.TransformationEvent.epcis_event_d:type_name -> common.v1.EpcisEventD
	81,  // 97: epcis.v1.TransformationEvent.epcis_event_t:type_name -> common.v1.EpcisEventT
	82,  // 98: epcis.v1.TransformationEvent.error_declaration_d:type_name -> common.v1.ErrorDeclarationD
	83,  // 99: epcis.v1.TransformationEvent.error_declaration_t:type_name -> common.v1.ErrorDeclarationT
	33,  // 100: epcis.v1.TransformationEvent.transformation_event_d:type_name -> epcis.v1.TransformationEventD
	84,  // 101: epcis.v1.TransformationEvent.cr_upd_user:type_name -> common.v1.CrUpdUser
	45,  // 102: epcis.v1.TransformationEvent.input_epc_list:type_name -> epcis.v1.Epc
	55,  // 103: epcis.v1.TransformationEvent.input_quantity_list:type_name -> epcis.v1.QuantityElement
	45,  // 104: epcis.v1.TransformationEvent.output_epc_list:type_name -> epcis.v1.Epc
	55,  // 105: epcis.v1.TransformationEvent.output_quantity_list:type_name -> epcis.v1.QuantityElement
	40,  // 106: epcis.v1.TransformationEvent.persistent_dispositions:type_name -> epcis.v1.PersistentDisposition
	50,  // 107: epcis.v1.TransformationEvent.biz_transaction_list:type_name -> epcis.v1.BizTransaction
	60,  // 108: epcis.v1.TransformationEvent.source_list:type_name -> epcis.v1.Source
	65,  // 109: epcis.v1.TransformationEvent.destination_list:type_name -> epcis.v1.Destination
	70,  // 110: epcis.v1.TransformationEvent.sensor_element_list:type_name -> epcis.v1.SensorElement
	46,  // 111: epcis.v1.CreateTransformationEventRequest.input_epc_list:type_name -> epcis.v1.CreateEpcRequest
	56,  // 112: epcis.v1.CreateTransformationEventRequest.input_quantity_list:type_name -> epcis.v1.CreateQuantityElementRequest
	46,  // 113: epcis.v1.CreateTransformationEventRequest.output_epc_list:type_name -> epcis.v1.CreateEpcRequest
	56,  // 114: epcis.v1.CreateTransformationEventRequest.output_quantity_list:type_name -> epcis.v1.CreateQuantityElementRequest
	41,  // 115: epcis.v1.CreateTransformationEventRequest.persistent_dispositions:type_name -> epcis.v1.CreatePersistentDispositionRequest
	51,  // 116: epcis.v1.CreateTransformationEventRequest.biz_transaction_list:type_name -> epcis.v1.CreateBizTransactionRequest
	61,  // 117: epcis.v1.CreateTransformationEventRequest.source_list:type_name -> epcis.v1.CreateSourceRequest
	66,  // 118: epcis.v1.CreateTransformationEventRequest.destination_list:type_name -> epcis.v1.CreateDestinationRequest
	72,  // 119: epcis.v1.CreateTransformationEventRequest.sensor_element_list:type_name -> epcis.v1.CreateSensorElementRequest
	32,  // 120: epcis.v1.CreateTransformationEventResponse.transformation_event:type_name -> epcis.v1.TransformationEvent
	85,  // 121: epcis.v1.GetTransformationEventRequest.get_request:type_name -> common.v1.GetRequest
	32,  // 122: epcis.v1.GetTransformationEventResponse.transformation_event:type_name -> epcis.v1.TransformationEvent
	32,  // 123: epcis.v1.GetTransformationEventsResponse.transformation_events:type_name -> epcis.v1.TransformationEvent
	40,  // 124: epcis.v1.CreatePersistentDispositionResponse.persistent_disposition:type_name -> epcis.v1.PersistentDisposition
	40,  // 125: epcis.v1.GetPersistentDispositionsResponse.persistent_dispositions:type_name -> epcis.v1.PersistentDisposition
	45,  // 126: epcis.v1.CreateEpcResponse.epc:type_name -> epcis.v1.Epc
	45,  // 127: epcis.v1.GetEpcsResponse.epcs:type_name -> epcis.v1.Epc
	50,  // 128: epcis.v1.CreateBizTransactionResponse.biz_transaction:type_name -> epcis.v1.BizTransaction
	50,  // 129: epcis.v1.GetBizTransactionsResponse.biz_transactions:type_name -> epcis.v1.BizTransaction
	55,  // 130: epcis.v1.CreateQuantityElementResponse.quantity_element:type_name -> epcis.v1.QuantityElement
	55,  // 131: epcis.v1.GetQuantityElementsResponse.quantity_elements:type_name -> epcis.v1.QuantityElement
	60,  // 132: epcis.v1.CreateSourceResponse.source:type_name -> epcis.v1.Source
	60,  // 133: epcis.v1.GetSourcesResponse.sources:type_name -> epcis.v1.Source
	65,  // 134: epcis.v1.CreateDestinationResponse.destination:type_name -> epcis.v1.Destination
	65,  // 135: epcis.v1.GetDestinationsResponse.destinations:type_name -> epcis.v1.Destination
	86,  // 136: epcis.v1.SensorElement.sensor_metadata_d:type_name -> common.v1.SensorMetadataD
	87,  // 137: epcis.v1.SensorElement.sensor_metadata_t:type_name -> common.v1.SensorMetadataT
	71,  // 138: epcis.v1.SensorElement.sensor_element_d:type_name -> epcis.v1.SensorElementD
	76,  // 139: epcis.v1.SensorElement.sensor_reports:type_name -> epcis.v1.SensorReport
	77,  // 140: epcis.v1.CreateSensorElementRequest.sensor_reports:type_name -> epcis.v1.CreateSensorReportRequest
	70,  // 141: epcis.v1.CreateSensorElementResponse.sensor_element:type_name -> epcis.v1.SensorElement
	70,  // 142: epcis.v1.GetSensorElementsResponse.sensor_elements:type_name -> epcis.v1.SensorElement
	78,  // 143: epcis.v1.SensorReport.sensor_report_d:type_name -> epcis.v1.SensorReportD
	79,  // 144: epcis.v1.SensorReport.sensor_report_t:type_name -> epcis.v1.SensorReportT
	88,  // 145: epcis.v1.SensorReportT.sensor_report_time:type_name -> google.protobuf.Timestamp
	2,   // 146: epcis.v1.EpcisService.CreateObjectEvent:input_type -> epcis.v1.CreateObjectEventRequest
	6,   // 147: epcis.v1.EpcisService.GetObjectEvents:input_type -> epcis.v1.GetObjectEventsRequest
	4,   // 148: epcis.v1.EpcisService.GetObjectEvent:input_type -> epcis.v1.GetObjectEventRequest
	10,  // 149: epcis.v1.EpcisService.CreateAggregationEvent:input_type -> epcis.v1.CreateAggregationEventRequest
	14,  // 150: epcis.v1.EpcisService.GetAggregationEvents:input_type -> epcis.v1.GetAggregationEventsRequest
	12,  // 151: epcis.v1.EpcisService.GetAggregationEvent:input_type -> epcis.v1.GetAggregationEventRequest
	18,  // 152: epcis.v1.EpcisService.CreateAssociationEvent:input_type -> epcis.v1.CreateAssociationEventRequest
	22,  // 153: epcis.v1.EpcisService.GetAssociationEvents:input_type -> epcis.v1.GetAssociationEventsRequest
	20,  // 154: epcis.v1.EpcisService.GetAssociationEvent:input_type -> epcis.v1.GetAssociationEventRequest
	26,  // 155: epcis.v1.EpcisService.CreateTransactionEvent:input_type -> epcis.v1.CreateTransactionEventRequest
	30,  // 156: epcis.v1.EpcisService.GetTransactionEvents:input_type -> epcis.v1.GetTransactionEventsRequest
	28,  // 157: epcis.v1.EpcisService.GetTransactionEvent:input_type -> epcis.v1.GetTransactionEventRequest
	34,  // 158: epcis.v1.EpcisService.CreateTransformationEvent:input_type -> epcis.v1.CreateTransformationEventRequest
	38,  // 159: epcis.v1.EpcisService.GetTransformationEvents:input_type -> epcis.v1.GetTransformationEventsRequest
	36,  // 160: epcis.v1.EpcisService.GetTransformationEvent:input_type -> epcis.v1.GetTransformationEventRequest
	41,  // 161: epcis.v1.EpcisService.CreatePersistentDisposition:input_type -> epcis.v1.CreatePersistentDispositionRequest
	43,  // 162: epcis.v1.EpcisService.GetPersistentDispositions:input_type -> epcis.v1.GetPersistentDispositionsRequest
	46,  // 163: epcis.v1.EpcisService.CreateEpc:input_type -> epcis.v1.CreateEpcRequest
	48,  // 164: epcis.v1.EpcisService.GetEpcs:input_type -> epcis.v1.GetEpcsRequest
	51,  // 165: epcis.v1.EpcisService.CreateBizTransaction:input_type -> epcis.v1.CreateBizTransactionRequest
	53,  // 166: epcis.v1.EpcisService.GetBizTransactions:input_type -> epcis.v1.GetBizTransactionsRequest
	56,  // 167: epcis.v1.EpcisService.CreateQuantityElement:input_type -> epcis.v1.CreateQuantityElementRequest
	58,  // 168: epcis.v1.EpcisService.GetQuantityElements:input_type -> epcis.v1.GetQuantityElementsRequest
	61,  // 169: epcis.v1.EpcisService.CreateSource:input_type -> epcis.v1.CreateSourceRequest
	63,  // 170: epcis.v1.EpcisService.GetSources:input_type -> epcis.v1.GetSourcesRequest
	66,  // 171: epcis.v1.EpcisService.CreateDestination:input_type -> epcis.v1.CreateDestinationRequest
	68,  // 172: epcis.v1.EpcisService.GetDestinations:input_type -> epcis.v1.GetDestinationsRequest
	72,  // 173: epcis.v1.EpcisService.CreateSensorElement:input_type -> epcis.v1.CreateSensorElementRequest
	74,  // 174: epcis.v1.EpcisService.GetSensorElements:input_type -> epcis.v1.GetSensorElementsRequest
	3,   // 175: epcis.v1.EpcisService.CreateObjectEvent:output_type -> epcis.v1.CreateObjectEventResponse
	7,   // 176: epcis.v1.EpcisService.GetObjectEvents:output_type -> epcis.v1.GetObjectEventsResponse
	5,   // 177: epcis.v1.EpcisService.GetObjectEvent:output_type -> epcis.v1.GetObjectEventResponse
	11,  // 178: epcis.v1.EpcisService.CreateAggregationEvent:output_type -> epcis.v1.CreateAggregationEventResponse
	15,  // 179: epcis.v1.EpcisService.GetAggregationEvents:output_type -> epcis.v1.GetAggregationEventsResponse
	13,  // 180: epcis.v1.EpcisService.GetAggregationEvent:output_type -> epcis.v1.GetAggregationEventResponse
	19,  // 181: epcis.v1.EpcisService.CreateAssociationEvent:output_type -> epcis.v1.CreateAssociationEventResponse
	23,  // 182: epcis.v1.EpcisService.GetAssociationEvents:output_type -> epcis.v1.GetAssociationEventsResponse
	21,  // 183: epcis.v1.EpcisService.GetAssociationEvent:output_type -> epcis.v1.GetAssociationEventResponse
	27,  // 184: epcis.v1.EpcisService.CreateTransactionEvent:output_type -> epcis.v1.CreateTransactionEventResponse
	31,  // 185: epcis.v1.EpcisService.GetTransactionEvents:output_type -> epcis.v1.GetTransactionEventsResponse
	29,  // 186: epcis.v1.EpcisService.GetTransactionEvent:output_type -> epcis.v1.GetTransactionEventResponse
	35,  // 187: epcis.v1.EpcisService.CreateTransformationEvent:output_type -> epcis.v1.CreateTransformationEventResponse
	39,  // 188: epcis.v1.EpcisService.GetTransformationEvents:output_type -> epcis.v1.GetTransformationEventsResponse
	37,  // 189: epcis.v1.EpcisService.GetTransformationEvent:output_type -> epcis.v1.GetTransformationEventResponse
	42,  // 190: epcis.v1.EpcisService.CreatePersistentDisposition:output_type -> epcis.v1.CreatePersistentDispositionResponse
	44,  // 191: epcis.v1.EpcisService.GetPersistentDispositions:output_type -> epcis.v1.GetPersistentDispositionsResponse
	47,  // 192: epcis.v1.EpcisService.CreateEpc:output_type -> epcis.v1.CreateEpcResponse
	49,  // 193: epcis.v1.EpcisService.GetEpcs:output_type -> epcis.v1.GetEpcsResponse
	52,  // 194: epcis.v1.EpcisService.CreateBizTransaction:output_type -> epcis.v1.CreateBizTransactionResponse
	54,  // 195: epcis.v1.EpcisService.GetBizTransactions:output_type -> epcis.v1.GetBizTransactionsResponse
	57,  // 196: epcis.v1.EpcisService.CreateQuantityElement:output_type -> epcis.v1.CreateQuantityElementResponse
	59,  // 197: epcis.v1.EpcisService.GetQuantityElements:output_type -> epcis.v1.GetQuantityElementsResponse
	62,  // 198: epcis.v1.EpcisService.CreateSource:output_type -> epcis.v1.CreateSourceResponse
	64,  // 199: epcis.v1.EpcisService.GetSources:output_type -> epcis.v1.GetSourcesResponse
	67,  // 200: epcis.v1.EpcisService.CreateDestination:output_type -> epcis.v1.CreateDestinationResponse
	69,  // 201: epcis.v1.EpcisService.GetDestinations:output_type -> epcis.v1.GetDestinationsResponse
	73,  // 202: epcis.v1.EpcisService.CreateSensorElement:output_type -> epcis.v1.CreateSensorElementResponse
	75,  // 203: epcis.v1.EpcisService.GetSensorElements:output_type -> epcis.v1.GetSensorElementsResponse
	175, // [175:204] is the sub-list for method output_type
	146, // [146:175] is the sub-list for method input_type
	146, // [146:146] is the sub-list for extension type_name
	146, // [146:146] is the sub-list for extension extendee
	0,   // [0:146] is the sub-list for field type_name
}

func init() { file_epcis_v1_epcis_proto_init() }
func file_epcis_v1_epcis_proto_init() {
	if File_epcis_v1_epcis_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_epcis_v1_epcis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_epcis_v1_epcis_proto_goTypes,
		DependencyIndexes: file_epcis_v1_epcis_proto_depIdxs,
		MessageInfos:      file_epcis_v1_epcis_proto_msgTypes,
	}.Build()
	File_epcis_v1_epcis_proto = out.File
	file_epcis_v1_epcis_proto_rawDesc = nil
	file_epcis_v1_epcis_proto_goTypes = nil
	file_epcis_v1_epcis_proto_depIdxs = nil
}
