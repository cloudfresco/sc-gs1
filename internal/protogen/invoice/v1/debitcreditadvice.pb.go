// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: invoice/v1/debitcreditadvice.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-gs1/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DebitCreditAdvice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditAdviceD *DebitCreditAdviceD `protobuf:"bytes,1,opt,name=debit_credit_advice_d,json=debitCreditAdviceD,proto3" json:"debit_credit_advice_d,omitempty"`
	CrUpdUser          *v1.CrUpdUser       `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime          *v1.CrUpdTime       `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *DebitCreditAdvice) Reset() {
	*x = DebitCreditAdvice{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitCreditAdvice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitCreditAdvice) ProtoMessage() {}

func (x *DebitCreditAdvice) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitCreditAdvice.ProtoReflect.Descriptor instead.
func (*DebitCreditAdvice) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{0}
}

func (x *DebitCreditAdvice) GetDebitCreditAdviceD() *DebitCreditAdviceD {
	if x != nil {
		return x.DebitCreditAdviceD
	}
	return nil
}

func (x *DebitCreditAdvice) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *DebitCreditAdvice) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type DebitCreditAdviceD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                           []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                             string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	DebitCreditIndicatorCode        string  `protobuf:"bytes,4,opt,name=debit_credit_indicator_code,json=debitCreditIndicatorCode,proto3" json:"debit_credit_indicator_code,omitempty"`
	TotalAmount                     float64 `protobuf:"fixed64,5,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	TaCodeListVersion               string  `protobuf:"bytes,6,opt,name=ta_code_list_version,json=taCodeListVersion,proto3" json:"ta_code_list_version,omitempty"`
	TaCurrencyCode                  string  `protobuf:"bytes,7,opt,name=ta_currency_code,json=taCurrencyCode,proto3" json:"ta_currency_code,omitempty"`
	BillTo                          uint32  `protobuf:"varint,8,opt,name=bill_to,json=billTo,proto3" json:"bill_to,omitempty"`
	Buyer                           uint32  `protobuf:"varint,9,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Carrier                         uint32  `protobuf:"varint,10,opt,name=carrier,proto3" json:"carrier,omitempty"`
	DebitCreditAdviceIdentification uint32  `protobuf:"varint,11,opt,name=debit_credit_advice_identification,json=debitCreditAdviceIdentification,proto3" json:"debit_credit_advice_identification,omitempty"`
	Seller                          uint32  `protobuf:"varint,12,opt,name=seller,proto3" json:"seller,omitempty"`
	ShipFrom                        uint32  `protobuf:"varint,13,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	ShipTo                          uint32  `protobuf:"varint,14,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	UltimateConsignee               uint32  `protobuf:"varint,15,opt,name=ultimate_consignee,json=ultimateConsignee,proto3" json:"ultimate_consignee,omitempty"`
}

func (x *DebitCreditAdviceD) Reset() {
	*x = DebitCreditAdviceD{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitCreditAdviceD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitCreditAdviceD) ProtoMessage() {}

func (x *DebitCreditAdviceD) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitCreditAdviceD.ProtoReflect.Descriptor instead.
func (*DebitCreditAdviceD) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{1}
}

func (x *DebitCreditAdviceD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DebitCreditAdviceD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DebitCreditAdviceD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DebitCreditAdviceD) GetDebitCreditIndicatorCode() string {
	if x != nil {
		return x.DebitCreditIndicatorCode
	}
	return ""
}

func (x *DebitCreditAdviceD) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *DebitCreditAdviceD) GetTaCodeListVersion() string {
	if x != nil {
		return x.TaCodeListVersion
	}
	return ""
}

func (x *DebitCreditAdviceD) GetTaCurrencyCode() string {
	if x != nil {
		return x.TaCurrencyCode
	}
	return ""
}

func (x *DebitCreditAdviceD) GetBillTo() uint32 {
	if x != nil {
		return x.BillTo
	}
	return 0
}

func (x *DebitCreditAdviceD) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *DebitCreditAdviceD) GetCarrier() uint32 {
	if x != nil {
		return x.Carrier
	}
	return 0
}

func (x *DebitCreditAdviceD) GetDebitCreditAdviceIdentification() uint32 {
	if x != nil {
		return x.DebitCreditAdviceIdentification
	}
	return 0
}

func (x *DebitCreditAdviceD) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *DebitCreditAdviceD) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *DebitCreditAdviceD) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *DebitCreditAdviceD) GetUltimateConsignee() uint32 {
	if x != nil {
		return x.UltimateConsignee
	}
	return 0
}

type CreateDebitCreditAdviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditIndicatorCode        string                                    `protobuf:"bytes,1,opt,name=debit_credit_indicator_code,json=debitCreditIndicatorCode,proto3" json:"debit_credit_indicator_code,omitempty"`
	TotalAmount                     float64                                   `protobuf:"fixed64,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	TaCodeListVersion               string                                    `protobuf:"bytes,3,opt,name=ta_code_list_version,json=taCodeListVersion,proto3" json:"ta_code_list_version,omitempty"`
	TaCurrencyCode                  string                                    `protobuf:"bytes,4,opt,name=ta_currency_code,json=taCurrencyCode,proto3" json:"ta_currency_code,omitempty"`
	BillTo                          uint32                                    `protobuf:"varint,5,opt,name=bill_to,json=billTo,proto3" json:"bill_to,omitempty"`
	Buyer                           uint32                                    `protobuf:"varint,6,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Carrier                         uint32                                    `protobuf:"varint,7,opt,name=carrier,proto3" json:"carrier,omitempty"`
	DebitCreditAdviceIdentification uint32                                    `protobuf:"varint,8,opt,name=debit_credit_advice_identification,json=debitCreditAdviceIdentification,proto3" json:"debit_credit_advice_identification,omitempty"`
	Seller                          uint32                                    `protobuf:"varint,9,opt,name=seller,proto3" json:"seller,omitempty"`
	ShipFrom                        uint32                                    `protobuf:"varint,10,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	ShipTo                          uint32                                    `protobuf:"varint,11,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	UltimateConsignee               uint32                                    `protobuf:"varint,12,opt,name=ultimate_consignee,json=ultimateConsignee,proto3" json:"ultimate_consignee,omitempty"`
	UserId                          string                                    `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                       string                                    `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                       string                                    `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DebitCreditAdviceLineItems      []*CreateDebitCreditAdviceLineItemRequest `protobuf:"bytes,16,rep,name=debit_credit_advice_line_items,json=debitCreditAdviceLineItems,proto3" json:"debit_credit_advice_line_items,omitempty"`
}

func (x *CreateDebitCreditAdviceRequest) Reset() {
	*x = CreateDebitCreditAdviceRequest{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebitCreditAdviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebitCreditAdviceRequest) ProtoMessage() {}

func (x *CreateDebitCreditAdviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebitCreditAdviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDebitCreditAdviceRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDebitCreditAdviceRequest) GetDebitCreditIndicatorCode() string {
	if x != nil {
		return x.DebitCreditIndicatorCode
	}
	return ""
}

func (x *CreateDebitCreditAdviceRequest) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *CreateDebitCreditAdviceRequest) GetTaCodeListVersion() string {
	if x != nil {
		return x.TaCodeListVersion
	}
	return ""
}

func (x *CreateDebitCreditAdviceRequest) GetTaCurrencyCode() string {
	if x != nil {
		return x.TaCurrencyCode
	}
	return ""
}

func (x *CreateDebitCreditAdviceRequest) GetBillTo() uint32 {
	if x != nil {
		return x.BillTo
	}
	return 0
}

func (x *CreateDebitCreditAdviceRequest) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *CreateDebitCreditAdviceRequest) GetCarrier() uint32 {
	if x != nil {
		return x.Carrier
	}
	return 0
}

func (x *CreateDebitCreditAdviceRequest) GetDebitCreditAdviceIdentification() uint32 {
	if x != nil {
		return x.DebitCreditAdviceIdentification
	}
	return 0
}

func (x *CreateDebitCreditAdviceRequest) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *CreateDebitCreditAdviceRequest) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *CreateDebitCreditAdviceRequest) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *CreateDebitCreditAdviceRequest) GetUltimateConsignee() uint32 {
	if x != nil {
		return x.UltimateConsignee
	}
	return 0
}

func (x *CreateDebitCreditAdviceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDebitCreditAdviceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDebitCreditAdviceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateDebitCreditAdviceRequest) GetDebitCreditAdviceLineItems() []*CreateDebitCreditAdviceLineItemRequest {
	if x != nil {
		return x.DebitCreditAdviceLineItems
	}
	return nil
}

type CreateDebitCreditAdviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditAdvice *DebitCreditAdvice `protobuf:"bytes,1,opt,name=debit_credit_advice,json=debitCreditAdvice,proto3" json:"debit_credit_advice,omitempty"`
}

func (x *CreateDebitCreditAdviceResponse) Reset() {
	*x = CreateDebitCreditAdviceResponse{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebitCreditAdviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebitCreditAdviceResponse) ProtoMessage() {}

func (x *CreateDebitCreditAdviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebitCreditAdviceResponse.ProtoReflect.Descriptor instead.
func (*CreateDebitCreditAdviceResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDebitCreditAdviceResponse) GetDebitCreditAdvice() *DebitCreditAdvice {
	if x != nil {
		return x.DebitCreditAdvice
	}
	return nil
}

type GetDebitCreditAdviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetDebitCreditAdviceRequest) Reset() {
	*x = GetDebitCreditAdviceRequest{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitCreditAdviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitCreditAdviceRequest) ProtoMessage() {}

func (x *GetDebitCreditAdviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitCreditAdviceRequest.ProtoReflect.Descriptor instead.
func (*GetDebitCreditAdviceRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{4}
}

func (x *GetDebitCreditAdviceRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetDebitCreditAdviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditAdvice *DebitCreditAdvice `protobuf:"bytes,1,opt,name=debit_credit_advice,json=debitCreditAdvice,proto3" json:"debit_credit_advice,omitempty"`
}

func (x *GetDebitCreditAdviceResponse) Reset() {
	*x = GetDebitCreditAdviceResponse{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitCreditAdviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitCreditAdviceResponse) ProtoMessage() {}

func (x *GetDebitCreditAdviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitCreditAdviceResponse.ProtoReflect.Descriptor instead.
func (*GetDebitCreditAdviceResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{5}
}

func (x *GetDebitCreditAdviceResponse) GetDebitCreditAdvice() *DebitCreditAdvice {
	if x != nil {
		return x.DebitCreditAdvice
	}
	return nil
}

type GetDebitCreditAdviceByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetDebitCreditAdviceByPkRequest) Reset() {
	*x = GetDebitCreditAdviceByPkRequest{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitCreditAdviceByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitCreditAdviceByPkRequest) ProtoMessage() {}

func (x *GetDebitCreditAdviceByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitCreditAdviceByPkRequest.ProtoReflect.Descriptor instead.
func (*GetDebitCreditAdviceByPkRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{6}
}

func (x *GetDebitCreditAdviceByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetDebitCreditAdviceByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditAdvice *DebitCreditAdvice `protobuf:"bytes,1,opt,name=debit_credit_advice,json=debitCreditAdvice,proto3" json:"debit_credit_advice,omitempty"`
}

func (x *GetDebitCreditAdviceByPkResponse) Reset() {
	*x = GetDebitCreditAdviceByPkResponse{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitCreditAdviceByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitCreditAdviceByPkResponse) ProtoMessage() {}

func (x *GetDebitCreditAdviceByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitCreditAdviceByPkResponse.ProtoReflect.Descriptor instead.
func (*GetDebitCreditAdviceByPkResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{7}
}

func (x *GetDebitCreditAdviceByPkResponse) GetDebitCreditAdvice() *DebitCreditAdvice {
	if x != nil {
		return x.DebitCreditAdvice
	}
	return nil
}

type GetDebitCreditAdvicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditAdvices []*DebitCreditAdvice `protobuf:"bytes,1,rep,name=debit_credit_advices,json=debitCreditAdvices,proto3" json:"debit_credit_advices,omitempty"`
	NextCursor         string               `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetDebitCreditAdvicesResponse) Reset() {
	*x = GetDebitCreditAdvicesResponse{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitCreditAdvicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitCreditAdvicesResponse) ProtoMessage() {}

func (x *GetDebitCreditAdvicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitCreditAdvicesResponse.ProtoReflect.Descriptor instead.
func (*GetDebitCreditAdvicesResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{8}
}

func (x *GetDebitCreditAdvicesResponse) GetDebitCreditAdvices() []*DebitCreditAdvice {
	if x != nil {
		return x.DebitCreditAdvices
	}
	return nil
}

func (x *GetDebitCreditAdvicesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetDebitCreditAdvicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetDebitCreditAdvicesRequest) Reset() {
	*x = GetDebitCreditAdvicesRequest{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitCreditAdvicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitCreditAdvicesRequest) ProtoMessage() {}

func (x *GetDebitCreditAdvicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitCreditAdvicesRequest.ProtoReflect.Descriptor instead.
func (*GetDebitCreditAdvicesRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{9}
}

func (x *GetDebitCreditAdvicesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetDebitCreditAdvicesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetDebitCreditAdvicesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetDebitCreditAdvicesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateDebitCreditAdviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditIndicatorCode string  `protobuf:"bytes,1,opt,name=debit_credit_indicator_code,json=debitCreditIndicatorCode,proto3" json:"debit_credit_indicator_code,omitempty"`
	TotalAmount              float64 `protobuf:"fixed64,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	TaCodeListVersion        string  `protobuf:"bytes,3,opt,name=ta_code_list_version,json=taCodeListVersion,proto3" json:"ta_code_list_version,omitempty"`
	TaCurrencyCode           string  `protobuf:"bytes,4,opt,name=ta_currency_code,json=taCurrencyCode,proto3" json:"ta_currency_code,omitempty"`
	Id                       string  `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	UserId                   string  `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                string  `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                string  `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateDebitCreditAdviceRequest) Reset() {
	*x = UpdateDebitCreditAdviceRequest{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDebitCreditAdviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDebitCreditAdviceRequest) ProtoMessage() {}

func (x *UpdateDebitCreditAdviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDebitCreditAdviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDebitCreditAdviceRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDebitCreditAdviceRequest) GetDebitCreditIndicatorCode() string {
	if x != nil {
		return x.DebitCreditIndicatorCode
	}
	return ""
}

func (x *UpdateDebitCreditAdviceRequest) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *UpdateDebitCreditAdviceRequest) GetTaCodeListVersion() string {
	if x != nil {
		return x.TaCodeListVersion
	}
	return ""
}

func (x *UpdateDebitCreditAdviceRequest) GetTaCurrencyCode() string {
	if x != nil {
		return x.TaCurrencyCode
	}
	return ""
}

func (x *UpdateDebitCreditAdviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDebitCreditAdviceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateDebitCreditAdviceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateDebitCreditAdviceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateDebitCreditAdviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDebitCreditAdviceResponse) Reset() {
	*x = UpdateDebitCreditAdviceResponse{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDebitCreditAdviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDebitCreditAdviceResponse) ProtoMessage() {}

func (x *UpdateDebitCreditAdviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDebitCreditAdviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateDebitCreditAdviceResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{11}
}

type DebitCreditAdviceLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditAdviceLineItemD *DebitCreditAdviceLineItemD `protobuf:"bytes,1,opt,name=debit_credit_advice_line_item_d,json=debitCreditAdviceLineItemD,proto3" json:"debit_credit_advice_line_item_d,omitempty"`
	CrUpdUser                  *v1.CrUpdUser               `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                  *v1.CrUpdTime               `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *DebitCreditAdviceLineItem) Reset() {
	*x = DebitCreditAdviceLineItem{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitCreditAdviceLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitCreditAdviceLineItem) ProtoMessage() {}

func (x *DebitCreditAdviceLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitCreditAdviceLineItem.ProtoReflect.Descriptor instead.
func (*DebitCreditAdviceLineItem) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{12}
}

func (x *DebitCreditAdviceLineItem) GetDebitCreditAdviceLineItemD() *DebitCreditAdviceLineItemD {
	if x != nil {
		return x.DebitCreditAdviceLineItemD
	}
	return nil
}

func (x *DebitCreditAdviceLineItem) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *DebitCreditAdviceLineItem) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type DebitCreditAdviceLineItemD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                         []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                           string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	AdjustmentAmount              float64 `protobuf:"fixed64,4,opt,name=adjustment_amount,json=adjustmentAmount,proto3" json:"adjustment_amount,omitempty"`
	AaCodeListVersion             string  `protobuf:"bytes,5,opt,name=aa_code_list_version,json=aaCodeListVersion,proto3" json:"aa_code_list_version,omitempty"`
	AaCurrencyCode                string  `protobuf:"bytes,6,opt,name=aa_currency_code,json=aaCurrencyCode,proto3" json:"aa_currency_code,omitempty"`
	DebitCreditIndicatorCode      string  `protobuf:"bytes,7,opt,name=debit_credit_indicator_code,json=debitCreditIndicatorCode,proto3" json:"debit_credit_indicator_code,omitempty"`
	FinancialAdjustmentReasonCode string  `protobuf:"bytes,8,opt,name=financial_adjustment_reason_code,json=financialAdjustmentReasonCode,proto3" json:"financial_adjustment_reason_code,omitempty"`
	LineItemNumber                uint32  `protobuf:"varint,9,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ParentLineItemNumber          uint32  `protobuf:"varint,10,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	DebitCreditAdviceId           uint32  `protobuf:"varint,11,opt,name=debit_credit_advice_id,json=debitCreditAdviceId,proto3" json:"debit_credit_advice_id,omitempty"`
}

func (x *DebitCreditAdviceLineItemD) Reset() {
	*x = DebitCreditAdviceLineItemD{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitCreditAdviceLineItemD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitCreditAdviceLineItemD) ProtoMessage() {}

func (x *DebitCreditAdviceLineItemD) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitCreditAdviceLineItemD.ProtoReflect.Descriptor instead.
func (*DebitCreditAdviceLineItemD) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{13}
}

func (x *DebitCreditAdviceLineItemD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DebitCreditAdviceLineItemD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DebitCreditAdviceLineItemD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DebitCreditAdviceLineItemD) GetAdjustmentAmount() float64 {
	if x != nil {
		return x.AdjustmentAmount
	}
	return 0
}

func (x *DebitCreditAdviceLineItemD) GetAaCodeListVersion() string {
	if x != nil {
		return x.AaCodeListVersion
	}
	return ""
}

func (x *DebitCreditAdviceLineItemD) GetAaCurrencyCode() string {
	if x != nil {
		return x.AaCurrencyCode
	}
	return ""
}

func (x *DebitCreditAdviceLineItemD) GetDebitCreditIndicatorCode() string {
	if x != nil {
		return x.DebitCreditIndicatorCode
	}
	return ""
}

func (x *DebitCreditAdviceLineItemD) GetFinancialAdjustmentReasonCode() string {
	if x != nil {
		return x.FinancialAdjustmentReasonCode
	}
	return ""
}

func (x *DebitCreditAdviceLineItemD) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *DebitCreditAdviceLineItemD) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *DebitCreditAdviceLineItemD) GetDebitCreditAdviceId() uint32 {
	if x != nil {
		return x.DebitCreditAdviceId
	}
	return 0
}

type CreateDebitCreditAdviceLineItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjustmentAmount              float64 `protobuf:"fixed64,1,opt,name=adjustment_amount,json=adjustmentAmount,proto3" json:"adjustment_amount,omitempty"`
	AaCodeListVersion             string  `protobuf:"bytes,2,opt,name=aa_code_list_version,json=aaCodeListVersion,proto3" json:"aa_code_list_version,omitempty"`
	AaCurrencyCode                string  `protobuf:"bytes,3,opt,name=aa_currency_code,json=aaCurrencyCode,proto3" json:"aa_currency_code,omitempty"`
	DebitCreditIndicatorCode      string  `protobuf:"bytes,4,opt,name=debit_credit_indicator_code,json=debitCreditIndicatorCode,proto3" json:"debit_credit_indicator_code,omitempty"`
	FinancialAdjustmentReasonCode string  `protobuf:"bytes,5,opt,name=financial_adjustment_reason_code,json=financialAdjustmentReasonCode,proto3" json:"financial_adjustment_reason_code,omitempty"`
	LineItemNumber                uint32  `protobuf:"varint,6,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ParentLineItemNumber          uint32  `protobuf:"varint,7,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	DebitCreditAdviceId           uint32  `protobuf:"varint,8,opt,name=debit_credit_advice_id,json=debitCreditAdviceId,proto3" json:"debit_credit_advice_id,omitempty"`
	UserId                        string  `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                     string  `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                     string  `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDebitCreditAdviceLineItemRequest) Reset() {
	*x = CreateDebitCreditAdviceLineItemRequest{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebitCreditAdviceLineItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebitCreditAdviceLineItemRequest) ProtoMessage() {}

func (x *CreateDebitCreditAdviceLineItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebitCreditAdviceLineItemRequest.ProtoReflect.Descriptor instead.
func (*CreateDebitCreditAdviceLineItemRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{14}
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetAdjustmentAmount() float64 {
	if x != nil {
		return x.AdjustmentAmount
	}
	return 0
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetAaCodeListVersion() string {
	if x != nil {
		return x.AaCodeListVersion
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetAaCurrencyCode() string {
	if x != nil {
		return x.AaCurrencyCode
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetDebitCreditIndicatorCode() string {
	if x != nil {
		return x.DebitCreditIndicatorCode
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetFinancialAdjustmentReasonCode() string {
	if x != nil {
		return x.FinancialAdjustmentReasonCode
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetDebitCreditAdviceId() uint32 {
	if x != nil {
		return x.DebitCreditAdviceId
	}
	return 0
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDebitCreditAdviceLineItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditAdviceLineItem *DebitCreditAdviceLineItem `protobuf:"bytes,1,opt,name=debit_credit_advice_line_item,json=debitCreditAdviceLineItem,proto3" json:"debit_credit_advice_line_item,omitempty"`
}

func (x *CreateDebitCreditAdviceLineItemResponse) Reset() {
	*x = CreateDebitCreditAdviceLineItemResponse{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebitCreditAdviceLineItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebitCreditAdviceLineItemResponse) ProtoMessage() {}

func (x *CreateDebitCreditAdviceLineItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebitCreditAdviceLineItemResponse.ProtoReflect.Descriptor instead.
func (*CreateDebitCreditAdviceLineItemResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{15}
}

func (x *CreateDebitCreditAdviceLineItemResponse) GetDebitCreditAdviceLineItem() *DebitCreditAdviceLineItem {
	if x != nil {
		return x.DebitCreditAdviceLineItem
	}
	return nil
}

type GetDebitCreditAdviceLineItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetDebitCreditAdviceLineItemsRequest) Reset() {
	*x = GetDebitCreditAdviceLineItemsRequest{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitCreditAdviceLineItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitCreditAdviceLineItemsRequest) ProtoMessage() {}

func (x *GetDebitCreditAdviceLineItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitCreditAdviceLineItemsRequest.ProtoReflect.Descriptor instead.
func (*GetDebitCreditAdviceLineItemsRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{16}
}

func (x *GetDebitCreditAdviceLineItemsRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetDebitCreditAdviceLineItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditAdviceLineItems []*DebitCreditAdviceLineItem `protobuf:"bytes,1,rep,name=debit_credit_advice_line_items,json=debitCreditAdviceLineItems,proto3" json:"debit_credit_advice_line_items,omitempty"`
}

func (x *GetDebitCreditAdviceLineItemsResponse) Reset() {
	*x = GetDebitCreditAdviceLineItemsResponse{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitCreditAdviceLineItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitCreditAdviceLineItemsResponse) ProtoMessage() {}

func (x *GetDebitCreditAdviceLineItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitCreditAdviceLineItemsResponse.ProtoReflect.Descriptor instead.
func (*GetDebitCreditAdviceLineItemsResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{17}
}

func (x *GetDebitCreditAdviceLineItemsResponse) GetDebitCreditAdviceLineItems() []*DebitCreditAdviceLineItem {
	if x != nil {
		return x.DebitCreditAdviceLineItems
	}
	return nil
}

type DebitCreditAdviceLineItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditAdviceLineItems []*DebitCreditAdviceLineItem `protobuf:"bytes,1,rep,name=debit_credit_advice_line_items,json=debitCreditAdviceLineItems,proto3" json:"debit_credit_advice_line_items,omitempty"`
}

func (x *DebitCreditAdviceLineItems) Reset() {
	*x = DebitCreditAdviceLineItems{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitCreditAdviceLineItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitCreditAdviceLineItems) ProtoMessage() {}

func (x *DebitCreditAdviceLineItems) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitCreditAdviceLineItems.ProtoReflect.Descriptor instead.
func (*DebitCreditAdviceLineItems) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{18}
}

func (x *DebitCreditAdviceLineItems) GetDebitCreditAdviceLineItems() []*DebitCreditAdviceLineItem {
	if x != nil {
		return x.DebitCreditAdviceLineItems
	}
	return nil
}

type DebitCreditAdviceLineItemDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AlignedPrice                float64 `protobuf:"fixed64,2,opt,name=aligned_price,json=alignedPrice,proto3" json:"aligned_price,omitempty"`
	ApCodeListVersion           string  `protobuf:"bytes,3,opt,name=ap_code_list_version,json=apCodeListVersion,proto3" json:"ap_code_list_version,omitempty"`
	ApCurrencyCode              string  `protobuf:"bytes,4,opt,name=ap_currency_code,json=apCurrencyCode,proto3" json:"ap_currency_code,omitempty"`
	InvoicedPrice               float64 `protobuf:"fixed64,5,opt,name=invoiced_price,json=invoicedPrice,proto3" json:"invoiced_price,omitempty"`
	IpCodeListVersion           string  `protobuf:"bytes,6,opt,name=ip_code_list_version,json=ipCodeListVersion,proto3" json:"ip_code_list_version,omitempty"`
	IpCurrencyCode              string  `protobuf:"bytes,7,opt,name=ip_currency_code,json=ipCurrencyCode,proto3" json:"ip_currency_code,omitempty"`
	Quantity                    float64 `protobuf:"fixed64,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	QMeasurementUnitCode        string  `protobuf:"bytes,9,opt,name=q_measurement_unit_code,json=qMeasurementUnitCode,proto3" json:"q_measurement_unit_code,omitempty"`
	QCodeListVersion            string  `protobuf:"bytes,10,opt,name=q_code_list_version,json=qCodeListVersion,proto3" json:"q_code_list_version,omitempty"`
	DebitCreditAdviceId         uint32  `protobuf:"varint,11,opt,name=debit_credit_advice_id,json=debitCreditAdviceId,proto3" json:"debit_credit_advice_id,omitempty"`
	DebitCreditAdviceLineItemId uint32  `protobuf:"varint,12,opt,name=debit_credit_advice_line_item_id,json=debitCreditAdviceLineItemId,proto3" json:"debit_credit_advice_line_item_id,omitempty"`
}

func (x *DebitCreditAdviceLineItemDetail) Reset() {
	*x = DebitCreditAdviceLineItemDetail{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitCreditAdviceLineItemDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitCreditAdviceLineItemDetail) ProtoMessage() {}

func (x *DebitCreditAdviceLineItemDetail) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitCreditAdviceLineItemDetail.ProtoReflect.Descriptor instead.
func (*DebitCreditAdviceLineItemDetail) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{19}
}

func (x *DebitCreditAdviceLineItemDetail) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DebitCreditAdviceLineItemDetail) GetAlignedPrice() float64 {
	if x != nil {
		return x.AlignedPrice
	}
	return 0
}

func (x *DebitCreditAdviceLineItemDetail) GetApCodeListVersion() string {
	if x != nil {
		return x.ApCodeListVersion
	}
	return ""
}

func (x *DebitCreditAdviceLineItemDetail) GetApCurrencyCode() string {
	if x != nil {
		return x.ApCurrencyCode
	}
	return ""
}

func (x *DebitCreditAdviceLineItemDetail) GetInvoicedPrice() float64 {
	if x != nil {
		return x.InvoicedPrice
	}
	return 0
}

func (x *DebitCreditAdviceLineItemDetail) GetIpCodeListVersion() string {
	if x != nil {
		return x.IpCodeListVersion
	}
	return ""
}

func (x *DebitCreditAdviceLineItemDetail) GetIpCurrencyCode() string {
	if x != nil {
		return x.IpCurrencyCode
	}
	return ""
}

func (x *DebitCreditAdviceLineItemDetail) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *DebitCreditAdviceLineItemDetail) GetQMeasurementUnitCode() string {
	if x != nil {
		return x.QMeasurementUnitCode
	}
	return ""
}

func (x *DebitCreditAdviceLineItemDetail) GetQCodeListVersion() string {
	if x != nil {
		return x.QCodeListVersion
	}
	return ""
}

func (x *DebitCreditAdviceLineItemDetail) GetDebitCreditAdviceId() uint32 {
	if x != nil {
		return x.DebitCreditAdviceId
	}
	return 0
}

func (x *DebitCreditAdviceLineItemDetail) GetDebitCreditAdviceLineItemId() uint32 {
	if x != nil {
		return x.DebitCreditAdviceLineItemId
	}
	return 0
}

type CreateDebitCreditAdviceLineItemDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlignedPrice                float64 `protobuf:"fixed64,1,opt,name=aligned_price,json=alignedPrice,proto3" json:"aligned_price,omitempty"`
	ApCodeListVersion           string  `protobuf:"bytes,2,opt,name=ap_code_list_version,json=apCodeListVersion,proto3" json:"ap_code_list_version,omitempty"`
	ApCurrencyCode              string  `protobuf:"bytes,3,opt,name=ap_currency_code,json=apCurrencyCode,proto3" json:"ap_currency_code,omitempty"`
	InvoicedPrice               float64 `protobuf:"fixed64,4,opt,name=invoiced_price,json=invoicedPrice,proto3" json:"invoiced_price,omitempty"`
	IpCodeListVersion           string  `protobuf:"bytes,5,opt,name=ip_code_list_version,json=ipCodeListVersion,proto3" json:"ip_code_list_version,omitempty"`
	IpCurrencyCode              string  `protobuf:"bytes,6,opt,name=ip_currency_code,json=ipCurrencyCode,proto3" json:"ip_currency_code,omitempty"`
	Quantity                    float64 `protobuf:"fixed64,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	QMeasurementUnitCode        string  `protobuf:"bytes,8,opt,name=q_measurement_unit_code,json=qMeasurementUnitCode,proto3" json:"q_measurement_unit_code,omitempty"`
	QCodeListVersion            string  `protobuf:"bytes,9,opt,name=q_code_list_version,json=qCodeListVersion,proto3" json:"q_code_list_version,omitempty"`
	DebitCreditAdviceId         uint32  `protobuf:"varint,10,opt,name=debit_credit_advice_id,json=debitCreditAdviceId,proto3" json:"debit_credit_advice_id,omitempty"`
	DebitCreditAdviceLineItemId uint32  `protobuf:"varint,11,opt,name=debit_credit_advice_line_item_id,json=debitCreditAdviceLineItemId,proto3" json:"debit_credit_advice_line_item_id,omitempty"`
	UserId                      string  `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                   string  `protobuf:"bytes,13,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                   string  `protobuf:"bytes,14,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) Reset() {
	*x = CreateDebitCreditAdviceLineItemDetailRequest{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebitCreditAdviceLineItemDetailRequest) ProtoMessage() {}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebitCreditAdviceLineItemDetailRequest.ProtoReflect.Descriptor instead.
func (*CreateDebitCreditAdviceLineItemDetailRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{20}
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetAlignedPrice() float64 {
	if x != nil {
		return x.AlignedPrice
	}
	return 0
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetApCodeListVersion() string {
	if x != nil {
		return x.ApCodeListVersion
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetApCurrencyCode() string {
	if x != nil {
		return x.ApCurrencyCode
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetInvoicedPrice() float64 {
	if x != nil {
		return x.InvoicedPrice
	}
	return 0
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetIpCodeListVersion() string {
	if x != nil {
		return x.IpCodeListVersion
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetIpCurrencyCode() string {
	if x != nil {
		return x.IpCurrencyCode
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetQMeasurementUnitCode() string {
	if x != nil {
		return x.QMeasurementUnitCode
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetQCodeListVersion() string {
	if x != nil {
		return x.QCodeListVersion
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetDebitCreditAdviceId() uint32 {
	if x != nil {
		return x.DebitCreditAdviceId
	}
	return 0
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetDebitCreditAdviceLineItemId() uint32 {
	if x != nil {
		return x.DebitCreditAdviceLineItemId
	}
	return 0
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDebitCreditAdviceLineItemDetailRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDebitCreditAdviceLineItemDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitCreditAdviceLineItemDetail *DebitCreditAdviceLineItemDetail `protobuf:"bytes,1,opt,name=debit_credit_advice_line_item_detail,json=debitCreditAdviceLineItemDetail,proto3" json:"debit_credit_advice_line_item_detail,omitempty"`
}

func (x *CreateDebitCreditAdviceLineItemDetailResponse) Reset() {
	*x = CreateDebitCreditAdviceLineItemDetailResponse{}
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebitCreditAdviceLineItemDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebitCreditAdviceLineItemDetailResponse) ProtoMessage() {}

func (x *CreateDebitCreditAdviceLineItemDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitcreditadvice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebitCreditAdviceLineItemDetailResponse.ProtoReflect.Descriptor instead.
func (*CreateDebitCreditAdviceLineItemDetailResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitcreditadvice_proto_rawDescGZIP(), []int{21}
}

func (x *CreateDebitCreditAdviceLineItemDetailResponse) GetDebitCreditAdviceLineItemDetail() *DebitCreditAdviceLineItemDetail {
	if x != nil {
		return x.DebitCreditAdviceLineItemDetail
	}
	return nil
}

var File_invoice_v1_debitcreditadvice_proto protoreflect.FileDescriptor

var file_invoice_v1_debitcreditadvice_proto_rawDesc = []byte{
	0x0a, 0x22, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51,
	0x0a, 0x15, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x52, 0x12, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x04,
	0x0a, 0x12, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64,
	0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x3d, 0x0a,
	0x1b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69,
	0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x69, 0x6c,
	0x6c, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x22, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x69,
	0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x12, 0x2d,
	0x0a, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x22, 0xbf, 0x05,
	0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x62, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x22, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54,
	0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x1e, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x1a, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x70, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x11,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x55, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x11, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x22, 0x67, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x71, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x11, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x12, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xc4, 0x02,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6b, 0x0a, 0x1f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x52, 0x1a, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfb,
	0x03, 0x0a, 0x1a, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a,
	0x20, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xa5, 0x04, 0x0a,
	0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47,
	0x0a, 0x20, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x67, 0x0a, 0x1d, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x19,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x5e, 0x0a, 0x24, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x25, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x1e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x1a, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x1a, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x69, 0x0a,
	0x1e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x1a, 0x64, 0x65,
	0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb1, 0x04, 0x0a, 0x1f, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x71, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x71, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2d, 0x0a, 0x13, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x20, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x85, 0x05, 0x0a,
	0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x71,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x71, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x20, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x24, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x1f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x32, 0x85, 0x08, 0x0a, 0x18, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x72, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a,
	0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x25,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x67, 0x73, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_invoice_v1_debitcreditadvice_proto_rawDescOnce sync.Once
	file_invoice_v1_debitcreditadvice_proto_rawDescData = file_invoice_v1_debitcreditadvice_proto_rawDesc
)

func file_invoice_v1_debitcreditadvice_proto_rawDescGZIP() []byte {
	file_invoice_v1_debitcreditadvice_proto_rawDescOnce.Do(func() {
		file_invoice_v1_debitcreditadvice_proto_rawDescData = protoimpl.X.CompressGZIP(file_invoice_v1_debitcreditadvice_proto_rawDescData)
	})
	return file_invoice_v1_debitcreditadvice_proto_rawDescData
}

var file_invoice_v1_debitcreditadvice_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_invoice_v1_debitcreditadvice_proto_goTypes = []any{
	(*DebitCreditAdvice)(nil),                             // 0: invoice.v1.DebitCreditAdvice
	(*DebitCreditAdviceD)(nil),                            // 1: invoice.v1.DebitCreditAdviceD
	(*CreateDebitCreditAdviceRequest)(nil),                // 2: invoice.v1.CreateDebitCreditAdviceRequest
	(*CreateDebitCreditAdviceResponse)(nil),               // 3: invoice.v1.CreateDebitCreditAdviceResponse
	(*GetDebitCreditAdviceRequest)(nil),                   // 4: invoice.v1.GetDebitCreditAdviceRequest
	(*GetDebitCreditAdviceResponse)(nil),                  // 5: invoice.v1.GetDebitCreditAdviceResponse
	(*GetDebitCreditAdviceByPkRequest)(nil),               // 6: invoice.v1.GetDebitCreditAdviceByPkRequest
	(*GetDebitCreditAdviceByPkResponse)(nil),              // 7: invoice.v1.GetDebitCreditAdviceByPkResponse
	(*GetDebitCreditAdvicesResponse)(nil),                 // 8: invoice.v1.GetDebitCreditAdvicesResponse
	(*GetDebitCreditAdvicesRequest)(nil),                  // 9: invoice.v1.GetDebitCreditAdvicesRequest
	(*UpdateDebitCreditAdviceRequest)(nil),                // 10: invoice.v1.UpdateDebitCreditAdviceRequest
	(*UpdateDebitCreditAdviceResponse)(nil),               // 11: invoice.v1.UpdateDebitCreditAdviceResponse
	(*DebitCreditAdviceLineItem)(nil),                     // 12: invoice.v1.DebitCreditAdviceLineItem
	(*DebitCreditAdviceLineItemD)(nil),                    // 13: invoice.v1.DebitCreditAdviceLineItemD
	(*CreateDebitCreditAdviceLineItemRequest)(nil),        // 14: invoice.v1.CreateDebitCreditAdviceLineItemRequest
	(*CreateDebitCreditAdviceLineItemResponse)(nil),       // 15: invoice.v1.CreateDebitCreditAdviceLineItemResponse
	(*GetDebitCreditAdviceLineItemsRequest)(nil),          // 16: invoice.v1.GetDebitCreditAdviceLineItemsRequest
	(*GetDebitCreditAdviceLineItemsResponse)(nil),         // 17: invoice.v1.GetDebitCreditAdviceLineItemsResponse
	(*DebitCreditAdviceLineItems)(nil),                    // 18: invoice.v1.DebitCreditAdviceLineItems
	(*DebitCreditAdviceLineItemDetail)(nil),               // 19: invoice.v1.DebitCreditAdviceLineItemDetail
	(*CreateDebitCreditAdviceLineItemDetailRequest)(nil),  // 20: invoice.v1.CreateDebitCreditAdviceLineItemDetailRequest
	(*CreateDebitCreditAdviceLineItemDetailResponse)(nil), // 21: invoice.v1.CreateDebitCreditAdviceLineItemDetailResponse
	(*v1.CrUpdUser)(nil),                                  // 22: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                  // 23: common.v1.CrUpdTime
	(*v1.GetRequest)(nil),                                 // 24: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                             // 25: common.v1.GetByIdRequest
}
var file_invoice_v1_debitcreditadvice_proto_depIdxs = []int32{
	1,  // 0: invoice.v1.DebitCreditAdvice.debit_credit_advice_d:type_name -> invoice.v1.DebitCreditAdviceD
	22, // 1: invoice.v1.DebitCreditAdvice.cr_upd_user:type_name -> common.v1.CrUpdUser
	23, // 2: invoice.v1.DebitCreditAdvice.cr_upd_time:type_name -> common.v1.CrUpdTime
	14, // 3: invoice.v1.CreateDebitCreditAdviceRequest.debit_credit_advice_line_items:type_name -> invoice.v1.CreateDebitCreditAdviceLineItemRequest
	0,  // 4: invoice.v1.CreateDebitCreditAdviceResponse.debit_credit_advice:type_name -> invoice.v1.DebitCreditAdvice
	24, // 5: invoice.v1.GetDebitCreditAdviceRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 6: invoice.v1.GetDebitCreditAdviceResponse.debit_credit_advice:type_name -> invoice.v1.DebitCreditAdvice
	25, // 7: invoice.v1.GetDebitCreditAdviceByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 8: invoice.v1.GetDebitCreditAdviceByPkResponse.debit_credit_advice:type_name -> invoice.v1.DebitCreditAdvice
	0,  // 9: invoice.v1.GetDebitCreditAdvicesResponse.debit_credit_advices:type_name -> invoice.v1.DebitCreditAdvice
	13, // 10: invoice.v1.DebitCreditAdviceLineItem.debit_credit_advice_line_item_d:type_name -> invoice.v1.DebitCreditAdviceLineItemD
	22, // 11: invoice.v1.DebitCreditAdviceLineItem.cr_upd_user:type_name -> common.v1.CrUpdUser
	23, // 12: invoice.v1.DebitCreditAdviceLineItem.cr_upd_time:type_name -> common.v1.CrUpdTime
	12, // 13: invoice.v1.CreateDebitCreditAdviceLineItemResponse.debit_credit_advice_line_item:type_name -> invoice.v1.DebitCreditAdviceLineItem
	24, // 14: invoice.v1.GetDebitCreditAdviceLineItemsRequest.get_request:type_name -> common.v1.GetRequest
	12, // 15: invoice.v1.GetDebitCreditAdviceLineItemsResponse.debit_credit_advice_line_items:type_name -> invoice.v1.DebitCreditAdviceLineItem
	12, // 16: invoice.v1.DebitCreditAdviceLineItems.debit_credit_advice_line_items:type_name -> invoice.v1.DebitCreditAdviceLineItem
	19, // 17: invoice.v1.CreateDebitCreditAdviceLineItemDetailResponse.debit_credit_advice_line_item_detail:type_name -> invoice.v1.DebitCreditAdviceLineItemDetail
	2,  // 18: invoice.v1.DebitCreditAdviceService.CreateDebitCreditAdvice:input_type -> invoice.v1.CreateDebitCreditAdviceRequest
	9,  // 19: invoice.v1.DebitCreditAdviceService.GetDebitCreditAdvices:input_type -> invoice.v1.GetDebitCreditAdvicesRequest
	4,  // 20: invoice.v1.DebitCreditAdviceService.GetDebitCreditAdvice:input_type -> invoice.v1.GetDebitCreditAdviceRequest
	6,  // 21: invoice.v1.DebitCreditAdviceService.GetDebitCreditAdviceByPk:input_type -> invoice.v1.GetDebitCreditAdviceByPkRequest
	10, // 22: invoice.v1.DebitCreditAdviceService.UpdateDebitCreditAdvice:input_type -> invoice.v1.UpdateDebitCreditAdviceRequest
	14, // 23: invoice.v1.DebitCreditAdviceService.CreateDebitCreditAdviceLineItem:input_type -> invoice.v1.CreateDebitCreditAdviceLineItemRequest
	16, // 24: invoice.v1.DebitCreditAdviceService.GetDebitCreditAdviceLineItems:input_type -> invoice.v1.GetDebitCreditAdviceLineItemsRequest
	20, // 25: invoice.v1.DebitCreditAdviceService.CreateDebitCreditAdviceLineItemDetail:input_type -> invoice.v1.CreateDebitCreditAdviceLineItemDetailRequest
	3,  // 26: invoice.v1.DebitCreditAdviceService.CreateDebitCreditAdvice:output_type -> invoice.v1.CreateDebitCreditAdviceResponse
	8,  // 27: invoice.v1.DebitCreditAdviceService.GetDebitCreditAdvices:output_type -> invoice.v1.GetDebitCreditAdvicesResponse
	5,  // 28: invoice.v1.DebitCreditAdviceService.GetDebitCreditAdvice:output_type -> invoice.v1.GetDebitCreditAdviceResponse
	7,  // 29: invoice.v1.DebitCreditAdviceService.GetDebitCreditAdviceByPk:output_type -> invoice.v1.GetDebitCreditAdviceByPkResponse
	11, // 30: invoice.v1.DebitCreditAdviceService.UpdateDebitCreditAdvice:output_type -> invoice.v1.UpdateDebitCreditAdviceResponse
	15, // 31: invoice.v1.DebitCreditAdviceService.CreateDebitCreditAdviceLineItem:output_type -> invoice.v1.CreateDebitCreditAdviceLineItemResponse
	17, // 32: invoice.v1.DebitCreditAdviceService.GetDebitCreditAdviceLineItems:output_type -> invoice.v1.GetDebitCreditAdviceLineItemsResponse
	21, // 33: invoice.v1.DebitCreditAdviceService.CreateDebitCreditAdviceLineItemDetail:output_type -> invoice.v1.CreateDebitCreditAdviceLineItemDetailResponse
	26, // [26:34] is the sub-list for method output_type
	18, // [18:26] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_invoice_v1_debitcreditadvice_proto_init() }
func file_invoice_v1_debitcreditadvice_proto_init() {
	if File_invoice_v1_debitcreditadvice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_invoice_v1_debitcreditadvice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_invoice_v1_debitcreditadvice_proto_goTypes,
		DependencyIndexes: file_invoice_v1_debitcreditadvice_proto_depIdxs,
		MessageInfos:      file_invoice_v1_debitcreditadvice_proto_msgTypes,
	}.Build()
	File_invoice_v1_debitcreditadvice_proto = out.File
	file_invoice_v1_debitcreditadvice_proto_rawDesc = nil
	file_invoice_v1_debitcreditadvice_proto_goTypes = nil
	file_invoice_v1_debitcreditadvice_proto_depIdxs = nil
}
