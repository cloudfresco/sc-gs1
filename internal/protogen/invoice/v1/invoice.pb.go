// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: invoice/v1/invoice.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-gs1/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Invoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceD  *InvoiceD     `protobuf:"bytes,1,opt,name=invoice_d,json=invoiceD,proto3" json:"invoice_d,omitempty"`
	InvoiceT  *InvoiceT     `protobuf:"bytes,2,opt,name=invoice_t,json=invoiceT,proto3" json:"invoice_t,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Invoice) Reset() {
	*x = Invoice{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Invoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invoice) ProtoMessage() {}

func (x *Invoice) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invoice.ProtoReflect.Descriptor instead.
func (*Invoice) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{0}
}

func (x *Invoice) GetInvoiceD() *InvoiceD {
	if x != nil {
		return x.InvoiceD
	}
	return nil
}

func (x *Invoice) GetInvoiceT() *InvoiceT {
	if x != nil {
		return x.InvoiceT
	}
	return nil
}

func (x *Invoice) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Invoice) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type InvoiceD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                       []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                         string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	CountryOfSupplyOfGoods      string `protobuf:"bytes,4,opt,name=country_of_supply_of_goods,json=countryOfSupplyOfGoods,proto3" json:"country_of_supply_of_goods,omitempty"`
	CreditReasonCode            string `protobuf:"bytes,5,opt,name=credit_reason_code,json=creditReasonCode,proto3" json:"credit_reason_code,omitempty"`
	DiscountAgreementTerms      string `protobuf:"bytes,6,opt,name=discount_agreement_terms,json=discountAgreementTerms,proto3" json:"discount_agreement_terms,omitempty"`
	InvoiceCurrencyCode         string `protobuf:"bytes,7,opt,name=invoice_currency_code,json=invoiceCurrencyCode,proto3" json:"invoice_currency_code,omitempty"`
	InvoiceType                 string `protobuf:"bytes,8,opt,name=invoice_type,json=invoiceType,proto3" json:"invoice_type,omitempty"`
	IsBuyerBasedInEu            bool   `protobuf:"varint,9,opt,name=is_buyer_based_in_eu,json=isBuyerBasedInEu,proto3" json:"is_buyer_based_in_eu,omitempty"`
	IsFirstSellerBasedInEu      bool   `protobuf:"varint,10,opt,name=is_first_seller_based_in_eu,json=isFirstSellerBasedInEu,proto3" json:"is_first_seller_based_in_eu,omitempty"`
	SupplierAccountReceivable   string `protobuf:"bytes,11,opt,name=supplier_account_receivable,json=supplierAccountReceivable,proto3" json:"supplier_account_receivable,omitempty"`
	BlanketOrder                uint32 `protobuf:"varint,12,opt,name=blanket_order,json=blanketOrder,proto3" json:"blanket_order,omitempty"`
	Buyer                       uint32 `protobuf:"varint,13,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Contract                    uint32 `protobuf:"varint,14,opt,name=contract,proto3" json:"contract,omitempty"`
	DeliveryNote                uint32 `protobuf:"varint,15,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	DespatchAdvice              uint32 `protobuf:"varint,16,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
	DisputeNotice               uint32 `protobuf:"varint,17,opt,name=dispute_notice,json=disputeNotice,proto3" json:"dispute_notice,omitempty"`
	InventoryLocation           uint32 `protobuf:"varint,18,opt,name=inventory_location,json=inventoryLocation,proto3" json:"inventory_location,omitempty"`
	InventoryReport             uint32 `protobuf:"varint,19,opt,name=inventory_report,json=inventoryReport,proto3" json:"inventory_report,omitempty"`
	Invoice                     uint32 `protobuf:"varint,20,opt,name=invoice,proto3" json:"invoice,omitempty"`
	InvoiceIdentification       uint32 `protobuf:"varint,21,opt,name=invoice_identification,json=invoiceIdentification,proto3" json:"invoice_identification,omitempty"`
	Manifest                    uint32 `protobuf:"varint,22,opt,name=manifest,proto3" json:"manifest,omitempty"`
	OrderResponse               uint32 `protobuf:"varint,23,opt,name=order_response,json=orderResponse,proto3" json:"order_response,omitempty"`
	Payee                       uint32 `protobuf:"varint,24,opt,name=payee,proto3" json:"payee,omitempty"`
	Payer                       uint32 `protobuf:"varint,25,opt,name=payer,proto3" json:"payer,omitempty"`
	PickupFrom                  uint32 `protobuf:"varint,26,opt,name=pickup_from,json=pickupFrom,proto3" json:"pickup_from,omitempty"`
	PriceList                   uint32 `protobuf:"varint,27,opt,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	PromotionalDeal             uint32 `protobuf:"varint,28,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseOrder               uint32 `protobuf:"varint,29,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	ReceivingAdvice             uint32 `protobuf:"varint,30,opt,name=receiving_advice,json=receivingAdvice,proto3" json:"receiving_advice,omitempty"`
	RemitTo                     uint32 `protobuf:"varint,31,opt,name=remit_to,json=remitTo,proto3" json:"remit_to,omitempty"`
	ReturnsNotice               uint32 `protobuf:"varint,32,opt,name=returns_notice,json=returnsNotice,proto3" json:"returns_notice,omitempty"`
	SalesOrder                  uint32 `protobuf:"varint,33,opt,name=sales_order,json=salesOrder,proto3" json:"sales_order,omitempty"`
	SalesReport                 uint32 `protobuf:"varint,34,opt,name=sales_report,json=salesReport,proto3" json:"sales_report,omitempty"`
	Seller                      uint32 `protobuf:"varint,35,opt,name=seller,proto3" json:"seller,omitempty"`
	ShipFrom                    uint32 `protobuf:"varint,36,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	ShipTo                      uint32 `protobuf:"varint,37,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	SupplierAgentRepresentative uint32 `protobuf:"varint,38,opt,name=supplier_agent_representative,json=supplierAgentRepresentative,proto3" json:"supplier_agent_representative,omitempty"`
	SupplierCorporateOffice     uint32 `protobuf:"varint,39,opt,name=supplier_corporate_office,json=supplierCorporateOffice,proto3" json:"supplier_corporate_office,omitempty"`
	TaxCurrencyInformation      uint32 `protobuf:"varint,40,opt,name=tax_currency_information,json=taxCurrencyInformation,proto3" json:"tax_currency_information,omitempty"`
	TaxRepresentative           uint32 `protobuf:"varint,41,opt,name=tax_representative,json=taxRepresentative,proto3" json:"tax_representative,omitempty"`
	TradeAgreement              uint32 `protobuf:"varint,42,opt,name=trade_agreement,json=tradeAgreement,proto3" json:"trade_agreement,omitempty"`
	UltimateConsignee           uint32 `protobuf:"varint,43,opt,name=ultimate_consignee,json=ultimateConsignee,proto3" json:"ultimate_consignee,omitempty"`
}

func (x *InvoiceD) Reset() {
	*x = InvoiceD{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceD) ProtoMessage() {}

func (x *InvoiceD) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceD.ProtoReflect.Descriptor instead.
func (*InvoiceD) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{1}
}

func (x *InvoiceD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvoiceD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *InvoiceD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *InvoiceD) GetCountryOfSupplyOfGoods() string {
	if x != nil {
		return x.CountryOfSupplyOfGoods
	}
	return ""
}

func (x *InvoiceD) GetCreditReasonCode() string {
	if x != nil {
		return x.CreditReasonCode
	}
	return ""
}

func (x *InvoiceD) GetDiscountAgreementTerms() string {
	if x != nil {
		return x.DiscountAgreementTerms
	}
	return ""
}

func (x *InvoiceD) GetInvoiceCurrencyCode() string {
	if x != nil {
		return x.InvoiceCurrencyCode
	}
	return ""
}

func (x *InvoiceD) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *InvoiceD) GetIsBuyerBasedInEu() bool {
	if x != nil {
		return x.IsBuyerBasedInEu
	}
	return false
}

func (x *InvoiceD) GetIsFirstSellerBasedInEu() bool {
	if x != nil {
		return x.IsFirstSellerBasedInEu
	}
	return false
}

func (x *InvoiceD) GetSupplierAccountReceivable() string {
	if x != nil {
		return x.SupplierAccountReceivable
	}
	return ""
}

func (x *InvoiceD) GetBlanketOrder() uint32 {
	if x != nil {
		return x.BlanketOrder
	}
	return 0
}

func (x *InvoiceD) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *InvoiceD) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *InvoiceD) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *InvoiceD) GetDespatchAdvice() uint32 {
	if x != nil {
		return x.DespatchAdvice
	}
	return 0
}

func (x *InvoiceD) GetDisputeNotice() uint32 {
	if x != nil {
		return x.DisputeNotice
	}
	return 0
}

func (x *InvoiceD) GetInventoryLocation() uint32 {
	if x != nil {
		return x.InventoryLocation
	}
	return 0
}

func (x *InvoiceD) GetInventoryReport() uint32 {
	if x != nil {
		return x.InventoryReport
	}
	return 0
}

func (x *InvoiceD) GetInvoice() uint32 {
	if x != nil {
		return x.Invoice
	}
	return 0
}

func (x *InvoiceD) GetInvoiceIdentification() uint32 {
	if x != nil {
		return x.InvoiceIdentification
	}
	return 0
}

func (x *InvoiceD) GetManifest() uint32 {
	if x != nil {
		return x.Manifest
	}
	return 0
}

func (x *InvoiceD) GetOrderResponse() uint32 {
	if x != nil {
		return x.OrderResponse
	}
	return 0
}

func (x *InvoiceD) GetPayee() uint32 {
	if x != nil {
		return x.Payee
	}
	return 0
}

func (x *InvoiceD) GetPayer() uint32 {
	if x != nil {
		return x.Payer
	}
	return 0
}

func (x *InvoiceD) GetPickupFrom() uint32 {
	if x != nil {
		return x.PickupFrom
	}
	return 0
}

func (x *InvoiceD) GetPriceList() uint32 {
	if x != nil {
		return x.PriceList
	}
	return 0
}

func (x *InvoiceD) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *InvoiceD) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *InvoiceD) GetReceivingAdvice() uint32 {
	if x != nil {
		return x.ReceivingAdvice
	}
	return 0
}

func (x *InvoiceD) GetRemitTo() uint32 {
	if x != nil {
		return x.RemitTo
	}
	return 0
}

func (x *InvoiceD) GetReturnsNotice() uint32 {
	if x != nil {
		return x.ReturnsNotice
	}
	return 0
}

func (x *InvoiceD) GetSalesOrder() uint32 {
	if x != nil {
		return x.SalesOrder
	}
	return 0
}

func (x *InvoiceD) GetSalesReport() uint32 {
	if x != nil {
		return x.SalesReport
	}
	return 0
}

func (x *InvoiceD) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *InvoiceD) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *InvoiceD) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *InvoiceD) GetSupplierAgentRepresentative() uint32 {
	if x != nil {
		return x.SupplierAgentRepresentative
	}
	return 0
}

func (x *InvoiceD) GetSupplierCorporateOffice() uint32 {
	if x != nil {
		return x.SupplierCorporateOffice
	}
	return 0
}

func (x *InvoiceD) GetTaxCurrencyInformation() uint32 {
	if x != nil {
		return x.TaxCurrencyInformation
	}
	return 0
}

func (x *InvoiceD) GetTaxRepresentative() uint32 {
	if x != nil {
		return x.TaxRepresentative
	}
	return 0
}

func (x *InvoiceD) GetTradeAgreement() uint32 {
	if x != nil {
		return x.TradeAgreement
	}
	return 0
}

func (x *InvoiceD) GetUltimateConsignee() uint32 {
	if x != nil {
		return x.UltimateConsignee
	}
	return 0
}

type InvoiceT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualDeliveryDate   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=actual_delivery_date,json=actualDeliveryDate,proto3" json:"actual_delivery_date,omitempty"`
	InvoicingPeriodBegin *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=invoicing_period_begin,json=invoicingPeriodBegin,proto3" json:"invoicing_period_begin,omitempty"`
	InvoicingPeriodEnd   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=invoicing_period_end,json=invoicingPeriodEnd,proto3" json:"invoicing_period_end,omitempty"`
}

func (x *InvoiceT) Reset() {
	*x = InvoiceT{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceT) ProtoMessage() {}

func (x *InvoiceT) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceT.ProtoReflect.Descriptor instead.
func (*InvoiceT) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{2}
}

func (x *InvoiceT) GetActualDeliveryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDeliveryDate
	}
	return nil
}

func (x *InvoiceT) GetInvoicingPeriodBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicingPeriodBegin
	}
	return nil
}

func (x *InvoiceT) GetInvoicingPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicingPeriodEnd
	}
	return nil
}

type CreateInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryOfSupplyOfGoods      string                          `protobuf:"bytes,1,opt,name=country_of_supply_of_goods,json=countryOfSupplyOfGoods,proto3" json:"country_of_supply_of_goods,omitempty"`
	CreditReasonCode            string                          `protobuf:"bytes,2,opt,name=credit_reason_code,json=creditReasonCode,proto3" json:"credit_reason_code,omitempty"`
	DiscountAgreementTerms      string                          `protobuf:"bytes,3,opt,name=discount_agreement_terms,json=discountAgreementTerms,proto3" json:"discount_agreement_terms,omitempty"`
	InvoiceCurrencyCode         string                          `protobuf:"bytes,4,opt,name=invoice_currency_code,json=invoiceCurrencyCode,proto3" json:"invoice_currency_code,omitempty"`
	InvoiceType                 string                          `protobuf:"bytes,5,opt,name=invoice_type,json=invoiceType,proto3" json:"invoice_type,omitempty"`
	IsBuyerBasedInEu            bool                            `protobuf:"varint,6,opt,name=is_buyer_based_in_eu,json=isBuyerBasedInEu,proto3" json:"is_buyer_based_in_eu,omitempty"`
	IsFirstSellerBasedInEu      bool                            `protobuf:"varint,7,opt,name=is_first_seller_based_in_eu,json=isFirstSellerBasedInEu,proto3" json:"is_first_seller_based_in_eu,omitempty"`
	SupplierAccountReceivable   string                          `protobuf:"bytes,8,opt,name=supplier_account_receivable,json=supplierAccountReceivable,proto3" json:"supplier_account_receivable,omitempty"`
	ActualDeliveryDate          string                          `protobuf:"bytes,9,opt,name=actual_delivery_date,json=actualDeliveryDate,proto3" json:"actual_delivery_date,omitempty"`
	BlanketOrder                uint32                          `protobuf:"varint,10,opt,name=blanket_order,json=blanketOrder,proto3" json:"blanket_order,omitempty"`
	Buyer                       uint32                          `protobuf:"varint,11,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Contract                    uint32                          `protobuf:"varint,12,opt,name=contract,proto3" json:"contract,omitempty"`
	DeliveryNote                uint32                          `protobuf:"varint,13,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	DespatchAdvice              uint32                          `protobuf:"varint,14,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
	DisputeNotice               uint32                          `protobuf:"varint,15,opt,name=dispute_notice,json=disputeNotice,proto3" json:"dispute_notice,omitempty"`
	InventoryLocation           uint32                          `protobuf:"varint,16,opt,name=inventory_location,json=inventoryLocation,proto3" json:"inventory_location,omitempty"`
	InventoryReport             uint32                          `protobuf:"varint,17,opt,name=inventory_report,json=inventoryReport,proto3" json:"inventory_report,omitempty"`
	Invoice                     uint32                          `protobuf:"varint,18,opt,name=invoice,proto3" json:"invoice,omitempty"`
	InvoiceIdentification       uint32                          `protobuf:"varint,19,opt,name=invoice_identification,json=invoiceIdentification,proto3" json:"invoice_identification,omitempty"`
	InvoicingPeriodBegin        string                          `protobuf:"bytes,20,opt,name=invoicing_period_begin,json=invoicingPeriodBegin,proto3" json:"invoicing_period_begin,omitempty"`
	InvoicingPeriodEnd          string                          `protobuf:"bytes,21,opt,name=invoicing_period_end,json=invoicingPeriodEnd,proto3" json:"invoicing_period_end,omitempty"`
	Manifest                    uint32                          `protobuf:"varint,22,opt,name=manifest,proto3" json:"manifest,omitempty"`
	OrderResponse               uint32                          `protobuf:"varint,23,opt,name=order_response,json=orderResponse,proto3" json:"order_response,omitempty"`
	Payee                       uint32                          `protobuf:"varint,24,opt,name=payee,proto3" json:"payee,omitempty"`
	Payer                       uint32                          `protobuf:"varint,25,opt,name=payer,proto3" json:"payer,omitempty"`
	PickupFrom                  uint32                          `protobuf:"varint,26,opt,name=pickup_from,json=pickupFrom,proto3" json:"pickup_from,omitempty"`
	PriceList                   uint32                          `protobuf:"varint,27,opt,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	PromotionalDeal             uint32                          `protobuf:"varint,28,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseOrder               uint32                          `protobuf:"varint,29,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	ReceivingAdvice             uint32                          `protobuf:"varint,30,opt,name=receiving_advice,json=receivingAdvice,proto3" json:"receiving_advice,omitempty"`
	RemitTo                     uint32                          `protobuf:"varint,31,opt,name=remit_to,json=remitTo,proto3" json:"remit_to,omitempty"`
	ReturnsNotice               uint32                          `protobuf:"varint,32,opt,name=returns_notice,json=returnsNotice,proto3" json:"returns_notice,omitempty"`
	SalesOrder                  uint32                          `protobuf:"varint,33,opt,name=sales_order,json=salesOrder,proto3" json:"sales_order,omitempty"`
	SalesReport                 uint32                          `protobuf:"varint,34,opt,name=sales_report,json=salesReport,proto3" json:"sales_report,omitempty"`
	Seller                      uint32                          `protobuf:"varint,35,opt,name=seller,proto3" json:"seller,omitempty"`
	ShipFrom                    uint32                          `protobuf:"varint,36,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	ShipTo                      uint32                          `protobuf:"varint,37,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	SupplierAgentRepresentative uint32                          `protobuf:"varint,38,opt,name=supplier_agent_representative,json=supplierAgentRepresentative,proto3" json:"supplier_agent_representative,omitempty"`
	SupplierCorporateOffice     uint32                          `protobuf:"varint,39,opt,name=supplier_corporate_office,json=supplierCorporateOffice,proto3" json:"supplier_corporate_office,omitempty"`
	TaxCurrencyInformation      uint32                          `protobuf:"varint,40,opt,name=tax_currency_information,json=taxCurrencyInformation,proto3" json:"tax_currency_information,omitempty"`
	TaxRepresentative           uint32                          `protobuf:"varint,41,opt,name=tax_representative,json=taxRepresentative,proto3" json:"tax_representative,omitempty"`
	TradeAgreement              uint32                          `protobuf:"varint,42,opt,name=trade_agreement,json=tradeAgreement,proto3" json:"trade_agreement,omitempty"`
	UltimateConsignee           uint32                          `protobuf:"varint,43,opt,name=ultimate_consignee,json=ultimateConsignee,proto3" json:"ultimate_consignee,omitempty"`
	UserId                      string                          `protobuf:"bytes,44,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                   string                          `protobuf:"bytes,45,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                   string                          `protobuf:"bytes,46,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InvoiceLineItems            []*CreateInvoiceLineItemRequest `protobuf:"bytes,47,rep,name=invoice_line_items,json=invoiceLineItems,proto3" json:"invoice_line_items,omitempty"`
}

func (x *CreateInvoiceRequest) Reset() {
	*x = CreateInvoiceRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceRequest) ProtoMessage() {}

func (x *CreateInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceRequest.ProtoReflect.Descriptor instead.
func (*CreateInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{3}
}

func (x *CreateInvoiceRequest) GetCountryOfSupplyOfGoods() string {
	if x != nil {
		return x.CountryOfSupplyOfGoods
	}
	return ""
}

func (x *CreateInvoiceRequest) GetCreditReasonCode() string {
	if x != nil {
		return x.CreditReasonCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetDiscountAgreementTerms() string {
	if x != nil {
		return x.DiscountAgreementTerms
	}
	return ""
}

func (x *CreateInvoiceRequest) GetInvoiceCurrencyCode() string {
	if x != nil {
		return x.InvoiceCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *CreateInvoiceRequest) GetIsBuyerBasedInEu() bool {
	if x != nil {
		return x.IsBuyerBasedInEu
	}
	return false
}

func (x *CreateInvoiceRequest) GetIsFirstSellerBasedInEu() bool {
	if x != nil {
		return x.IsFirstSellerBasedInEu
	}
	return false
}

func (x *CreateInvoiceRequest) GetSupplierAccountReceivable() string {
	if x != nil {
		return x.SupplierAccountReceivable
	}
	return ""
}

func (x *CreateInvoiceRequest) GetActualDeliveryDate() string {
	if x != nil {
		return x.ActualDeliveryDate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetBlanketOrder() uint32 {
	if x != nil {
		return x.BlanketOrder
	}
	return 0
}

func (x *CreateInvoiceRequest) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *CreateInvoiceRequest) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *CreateInvoiceRequest) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *CreateInvoiceRequest) GetDespatchAdvice() uint32 {
	if x != nil {
		return x.DespatchAdvice
	}
	return 0
}

func (x *CreateInvoiceRequest) GetDisputeNotice() uint32 {
	if x != nil {
		return x.DisputeNotice
	}
	return 0
}

func (x *CreateInvoiceRequest) GetInventoryLocation() uint32 {
	if x != nil {
		return x.InventoryLocation
	}
	return 0
}

func (x *CreateInvoiceRequest) GetInventoryReport() uint32 {
	if x != nil {
		return x.InventoryReport
	}
	return 0
}

func (x *CreateInvoiceRequest) GetInvoice() uint32 {
	if x != nil {
		return x.Invoice
	}
	return 0
}

func (x *CreateInvoiceRequest) GetInvoiceIdentification() uint32 {
	if x != nil {
		return x.InvoiceIdentification
	}
	return 0
}

func (x *CreateInvoiceRequest) GetInvoicingPeriodBegin() string {
	if x != nil {
		return x.InvoicingPeriodBegin
	}
	return ""
}

func (x *CreateInvoiceRequest) GetInvoicingPeriodEnd() string {
	if x != nil {
		return x.InvoicingPeriodEnd
	}
	return ""
}

func (x *CreateInvoiceRequest) GetManifest() uint32 {
	if x != nil {
		return x.Manifest
	}
	return 0
}

func (x *CreateInvoiceRequest) GetOrderResponse() uint32 {
	if x != nil {
		return x.OrderResponse
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPayee() uint32 {
	if x != nil {
		return x.Payee
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPayer() uint32 {
	if x != nil {
		return x.Payer
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPickupFrom() uint32 {
	if x != nil {
		return x.PickupFrom
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPriceList() uint32 {
	if x != nil {
		return x.PriceList
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *CreateInvoiceRequest) GetReceivingAdvice() uint32 {
	if x != nil {
		return x.ReceivingAdvice
	}
	return 0
}

func (x *CreateInvoiceRequest) GetRemitTo() uint32 {
	if x != nil {
		return x.RemitTo
	}
	return 0
}

func (x *CreateInvoiceRequest) GetReturnsNotice() uint32 {
	if x != nil {
		return x.ReturnsNotice
	}
	return 0
}

func (x *CreateInvoiceRequest) GetSalesOrder() uint32 {
	if x != nil {
		return x.SalesOrder
	}
	return 0
}

func (x *CreateInvoiceRequest) GetSalesReport() uint32 {
	if x != nil {
		return x.SalesReport
	}
	return 0
}

func (x *CreateInvoiceRequest) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *CreateInvoiceRequest) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *CreateInvoiceRequest) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *CreateInvoiceRequest) GetSupplierAgentRepresentative() uint32 {
	if x != nil {
		return x.SupplierAgentRepresentative
	}
	return 0
}

func (x *CreateInvoiceRequest) GetSupplierCorporateOffice() uint32 {
	if x != nil {
		return x.SupplierCorporateOffice
	}
	return 0
}

func (x *CreateInvoiceRequest) GetTaxCurrencyInformation() uint32 {
	if x != nil {
		return x.TaxCurrencyInformation
	}
	return 0
}

func (x *CreateInvoiceRequest) GetTaxRepresentative() uint32 {
	if x != nil {
		return x.TaxRepresentative
	}
	return 0
}

func (x *CreateInvoiceRequest) GetTradeAgreement() uint32 {
	if x != nil {
		return x.TradeAgreement
	}
	return 0
}

func (x *CreateInvoiceRequest) GetUltimateConsignee() uint32 {
	if x != nil {
		return x.UltimateConsignee
	}
	return 0
}

func (x *CreateInvoiceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInvoiceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInvoiceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateInvoiceRequest) GetInvoiceLineItems() []*CreateInvoiceLineItemRequest {
	if x != nil {
		return x.InvoiceLineItems
	}
	return nil
}

type CreateInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invoice *Invoice `protobuf:"bytes,1,opt,name=invoice,proto3" json:"invoice,omitempty"`
}

func (x *CreateInvoiceResponse) Reset() {
	*x = CreateInvoiceResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceResponse) ProtoMessage() {}

func (x *CreateInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceResponse.ProtoReflect.Descriptor instead.
func (*CreateInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{4}
}

func (x *CreateInvoiceResponse) GetInvoice() *Invoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

type GetInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetInvoiceRequest) Reset() {
	*x = GetInvoiceRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceRequest) ProtoMessage() {}

func (x *GetInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceRequest.ProtoReflect.Descriptor instead.
func (*GetInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{5}
}

func (x *GetInvoiceRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invoice *Invoice `protobuf:"bytes,1,opt,name=invoice,proto3" json:"invoice,omitempty"`
}

func (x *GetInvoiceResponse) Reset() {
	*x = GetInvoiceResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceResponse) ProtoMessage() {}

func (x *GetInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceResponse.ProtoReflect.Descriptor instead.
func (*GetInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{6}
}

func (x *GetInvoiceResponse) GetInvoice() *Invoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

type GetInvoiceByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetInvoiceByPkRequest) Reset() {
	*x = GetInvoiceByPkRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceByPkRequest) ProtoMessage() {}

func (x *GetInvoiceByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceByPkRequest.ProtoReflect.Descriptor instead.
func (*GetInvoiceByPkRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{7}
}

func (x *GetInvoiceByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetInvoiceByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invoice *Invoice `protobuf:"bytes,1,opt,name=invoice,proto3" json:"invoice,omitempty"`
}

func (x *GetInvoiceByPkResponse) Reset() {
	*x = GetInvoiceByPkResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceByPkResponse) ProtoMessage() {}

func (x *GetInvoiceByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceByPkResponse.ProtoReflect.Descriptor instead.
func (*GetInvoiceByPkResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{8}
}

func (x *GetInvoiceByPkResponse) GetInvoice() *Invoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

type GetInvoicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetInvoicesRequest) Reset() {
	*x = GetInvoicesRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoicesRequest) ProtoMessage() {}

func (x *GetInvoicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoicesRequest.ProtoReflect.Descriptor instead.
func (*GetInvoicesRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{9}
}

func (x *GetInvoicesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetInvoicesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetInvoicesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetInvoicesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetInvoicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invoices   []*Invoice `protobuf:"bytes,1,rep,name=invoices,proto3" json:"invoices,omitempty"`
	NextCursor string     `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetInvoicesResponse) Reset() {
	*x = GetInvoicesResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoicesResponse) ProtoMessage() {}

func (x *GetInvoicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoicesResponse.ProtoReflect.Descriptor instead.
func (*GetInvoicesResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{10}
}

func (x *GetInvoicesResponse) GetInvoices() []*Invoice {
	if x != nil {
		return x.Invoices
	}
	return nil
}

func (x *GetInvoicesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type UpdateInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryOfSupplyOfGoods    string `protobuf:"bytes,1,opt,name=country_of_supply_of_goods,json=countryOfSupplyOfGoods,proto3" json:"country_of_supply_of_goods,omitempty"`
	CreditReasonCode          string `protobuf:"bytes,2,opt,name=credit_reason_code,json=creditReasonCode,proto3" json:"credit_reason_code,omitempty"`
	DiscountAgreementTerms    string `protobuf:"bytes,3,opt,name=discount_agreement_terms,json=discountAgreementTerms,proto3" json:"discount_agreement_terms,omitempty"`
	InvoiceCurrencyCode       string `protobuf:"bytes,4,opt,name=invoice_currency_code,json=invoiceCurrencyCode,proto3" json:"invoice_currency_code,omitempty"`
	InvoiceType               string `protobuf:"bytes,5,opt,name=invoice_type,json=invoiceType,proto3" json:"invoice_type,omitempty"`
	SupplierAccountReceivable string `protobuf:"bytes,6,opt,name=supplier_account_receivable,json=supplierAccountReceivable,proto3" json:"supplier_account_receivable,omitempty"`
	Id                        string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	UserId                    string `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateInvoiceRequest) Reset() {
	*x = UpdateInvoiceRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvoiceRequest) ProtoMessage() {}

func (x *UpdateInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvoiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateInvoiceRequest) GetCountryOfSupplyOfGoods() string {
	if x != nil {
		return x.CountryOfSupplyOfGoods
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetCreditReasonCode() string {
	if x != nil {
		return x.CreditReasonCode
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetDiscountAgreementTerms() string {
	if x != nil {
		return x.DiscountAgreementTerms
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetInvoiceCurrencyCode() string {
	if x != nil {
		return x.InvoiceCurrencyCode
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetSupplierAccountReceivable() string {
	if x != nil {
		return x.SupplierAccountReceivable
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInvoiceResponse) Reset() {
	*x = UpdateInvoiceResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvoiceResponse) ProtoMessage() {}

func (x *UpdateInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvoiceResponse.ProtoReflect.Descriptor instead.
func (*UpdateInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{12}
}

type InvoiceLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceLineItemD *InvoiceLineItemD `protobuf:"bytes,1,opt,name=invoice_line_item_d,json=invoiceLineItemD,proto3" json:"invoice_line_item_d,omitempty"`
	InvoiceLineItemT *InvoiceLineItemT `protobuf:"bytes,2,opt,name=invoice_line_item_t,json=invoiceLineItemT,proto3" json:"invoice_line_item_t,omitempty"`
	CrUpdUser        *v1.CrUpdUser     `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime        *v1.CrUpdTime     `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *InvoiceLineItem) Reset() {
	*x = InvoiceLineItem{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLineItem) ProtoMessage() {}

func (x *InvoiceLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLineItem.ProtoReflect.Descriptor instead.
func (*InvoiceLineItem) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{13}
}

func (x *InvoiceLineItem) GetInvoiceLineItemD() *InvoiceLineItemD {
	if x != nil {
		return x.InvoiceLineItemD
	}
	return nil
}

func (x *InvoiceLineItem) GetInvoiceLineItemT() *InvoiceLineItemT {
	if x != nil {
		return x.InvoiceLineItemT
	}
	return nil
}

func (x *InvoiceLineItem) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *InvoiceLineItem) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type InvoiceLineItemD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                   uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                                []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                  string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	AmountExclusiveAllowancesCharges     float64 `protobuf:"fixed64,4,opt,name=amount_exclusive_allowances_charges,json=amountExclusiveAllowancesCharges,proto3" json:"amount_exclusive_allowances_charges,omitempty"`
	AeacCodeListVersion                  string  `protobuf:"bytes,5,opt,name=aeac_code_list_version,json=aeacCodeListVersion,proto3" json:"aeac_code_list_version,omitempty"`
	AeacCurrencyCode                     string  `protobuf:"bytes,6,opt,name=aeac_currency_code,json=aeacCurrencyCode,proto3" json:"aeac_currency_code,omitempty"`
	AmountInclusiveAllowancesCharges     float64 `protobuf:"fixed64,7,opt,name=amount_inclusive_allowances_charges,json=amountInclusiveAllowancesCharges,proto3" json:"amount_inclusive_allowances_charges,omitempty"`
	AiacCodeListVersion                  string  `protobuf:"bytes,8,opt,name=aiac_code_list_version,json=aiacCodeListVersion,proto3" json:"aiac_code_list_version,omitempty"`
	AiacCurrencyCode                     string  `protobuf:"bytes,9,opt,name=aiac_currency_code,json=aiacCurrencyCode,proto3" json:"aiac_currency_code,omitempty"`
	CreditLineIndicator                  string  `protobuf:"bytes,10,opt,name=credit_line_indicator,json=creditLineIndicator,proto3" json:"credit_line_indicator,omitempty"`
	CreditReason                         string  `protobuf:"bytes,11,opt,name=credit_reason,json=creditReason,proto3" json:"credit_reason,omitempty"`
	DeliveredQuantity                    float64 `protobuf:"fixed64,12,opt,name=delivered_quantity,json=deliveredQuantity,proto3" json:"delivered_quantity,omitempty"`
	DqMeasurementUnitCode                string  `protobuf:"bytes,13,opt,name=dq_measurement_unit_code,json=dqMeasurementUnitCode,proto3" json:"dq_measurement_unit_code,omitempty"`
	DqCodeListVersion                    string  `protobuf:"bytes,14,opt,name=dq_code_list_version,json=dqCodeListVersion,proto3" json:"dq_code_list_version,omitempty"`
	ExcludedFromPaymentDiscountIndicator bool    `protobuf:"varint,15,opt,name=excluded_from_payment_discount_indicator,json=excludedFromPaymentDiscountIndicator,proto3" json:"excluded_from_payment_discount_indicator,omitempty"`
	Extension                            string  `protobuf:"bytes,16,opt,name=extension,proto3" json:"extension,omitempty"`
	FreeGoodsQuantity                    float64 `protobuf:"fixed64,17,opt,name=free_goods_quantity,json=freeGoodsQuantity,proto3" json:"free_goods_quantity,omitempty"`
	FgqMeasurementUnitCode               string  `protobuf:"bytes,18,opt,name=fgq_measurement_unit_code,json=fgqMeasurementUnitCode,proto3" json:"fgq_measurement_unit_code,omitempty"`
	FgqCodeListVersion                   string  `protobuf:"bytes,19,opt,name=fgq_code_list_version,json=fgqCodeListVersion,proto3" json:"fgq_code_list_version,omitempty"`
	InvoicedQuantity                     float64 `protobuf:"fixed64,20,opt,name=invoiced_quantity,json=invoicedQuantity,proto3" json:"invoiced_quantity,omitempty"`
	IqMeasurementUnitCode                string  `protobuf:"bytes,21,opt,name=iq_measurement_unit_code,json=iqMeasurementUnitCode,proto3" json:"iq_measurement_unit_code,omitempty"`
	IqCodeListVersion                    string  `protobuf:"bytes,22,opt,name=iq_code_list_version,json=iqCodeListVersion,proto3" json:"iq_code_list_version,omitempty"`
	ItemPriceBaseQuantity                float64 `protobuf:"fixed64,23,opt,name=item_price_base_quantity,json=itemPriceBaseQuantity,proto3" json:"item_price_base_quantity,omitempty"`
	IpbqMeasurementUnitCode              string  `protobuf:"bytes,24,opt,name=ipbq_measurement_unit_code,json=ipbqMeasurementUnitCode,proto3" json:"ipbq_measurement_unit_code,omitempty"`
	IpbqCodeListVersion                  string  `protobuf:"bytes,25,opt,name=ipbq_code_list_version,json=ipbqCodeListVersion,proto3" json:"ipbq_code_list_version,omitempty"`
	ItemPriceExclusiveAllowancesCharges  float64 `protobuf:"fixed64,26,opt,name=item_price_exclusive_allowances_charges,json=itemPriceExclusiveAllowancesCharges,proto3" json:"item_price_exclusive_allowances_charges,omitempty"`
	IpeacCodeListVersion                 string  `protobuf:"bytes,27,opt,name=ipeac_code_list_version,json=ipeacCodeListVersion,proto3" json:"ipeac_code_list_version,omitempty"`
	IpeacCurrencyCode                    string  `protobuf:"bytes,28,opt,name=ipeac_currency_code,json=ipeacCurrencyCode,proto3" json:"ipeac_currency_code,omitempty"`
	ItemPriceInclusiveAllowancesCharges  float64 `protobuf:"fixed64,29,opt,name=item_price_inclusive_allowances_charges,json=itemPriceInclusiveAllowancesCharges,proto3" json:"item_price_inclusive_allowances_charges,omitempty"`
	IpiacCodeListVersion                 string  `protobuf:"bytes,30,opt,name=ipiac_code_list_version,json=ipiacCodeListVersion,proto3" json:"ipiac_code_list_version,omitempty"`
	IpiacCurrencyCode                    string  `protobuf:"bytes,31,opt,name=ipiac_currency_code,json=ipiacCurrencyCode,proto3" json:"ipiac_currency_code,omitempty"`
	LegallyFixedRetailPrice              float64 `protobuf:"fixed64,32,opt,name=legally_fixed_retail_price,json=legallyFixedRetailPrice,proto3" json:"legally_fixed_retail_price,omitempty"`
	LfrpCodeListVersion                  string  `protobuf:"bytes,33,opt,name=lfrp_code_list_version,json=lfrpCodeListVersion,proto3" json:"lfrp_code_list_version,omitempty"`
	LfrpCurrencyCode                     string  `protobuf:"bytes,34,opt,name=lfrp_currency_code,json=lfrpCurrencyCode,proto3" json:"lfrp_currency_code,omitempty"`
	LineItemNumber                       uint32  `protobuf:"varint,35,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	MarginSchemeInformation              string  `protobuf:"bytes,36,opt,name=margin_scheme_information,json=marginSchemeInformation,proto3" json:"margin_scheme_information,omitempty"`
	OwenrshipPriorToPayment              string  `protobuf:"bytes,37,opt,name=owenrship_prior_to_payment,json=owenrshipPriorToPayment,proto3" json:"owenrship_prior_to_payment,omitempty"`
	ParentLineItemNumber                 uint32  `protobuf:"varint,38,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	RecommendedRetailPrice               float64 `protobuf:"fixed64,39,opt,name=recommended_retail_price,json=recommendedRetailPrice,proto3" json:"recommended_retail_price,omitempty"`
	RrpCodeListVersion                   string  `protobuf:"bytes,40,opt,name=rrp_code_list_version,json=rrpCodeListVersion,proto3" json:"rrp_code_list_version,omitempty"`
	RrpCurrencyCode                      string  `protobuf:"bytes,41,opt,name=rrp_currency_code,json=rrpCurrencyCode,proto3" json:"rrp_currency_code,omitempty"`
	RetailPriceExcludingExcise           float64 `protobuf:"fixed64,42,opt,name=retail_price_excluding_excise,json=retailPriceExcludingExcise,proto3" json:"retail_price_excluding_excise,omitempty"`
	RpeeCodeListVersion                  string  `protobuf:"bytes,43,opt,name=rpee_code_list_version,json=rpeeCodeListVersion,proto3" json:"rpee_code_list_version,omitempty"`
	RpeeCurrencyCode                     string  `protobuf:"bytes,44,opt,name=rpee_currency_code,json=rpeeCurrencyCode,proto3" json:"rpee_currency_code,omitempty"`
	TotalOrderedQuantity                 float64 `protobuf:"fixed64,45,opt,name=total_ordered_quantity,json=totalOrderedQuantity,proto3" json:"total_ordered_quantity,omitempty"`
	ToqMeasurementUnitCode               string  `protobuf:"bytes,46,opt,name=toq_measurement_unit_code,json=toqMeasurementUnitCode,proto3" json:"toq_measurement_unit_code,omitempty"`
	ToqCodeListVersion                   string  `protobuf:"bytes,47,opt,name=toq_code_list_version,json=toqCodeListVersion,proto3" json:"toq_code_list_version,omitempty"`
	ConsumptionReport                    uint32  `protobuf:"varint,48,opt,name=consumption_report,json=consumptionReport,proto3" json:"consumption_report,omitempty"`
	Contract                             uint32  `protobuf:"varint,49,opt,name=contract,proto3" json:"contract,omitempty"`
	DeliveryNote                         uint32  `protobuf:"varint,50,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	DespatchAdvice                       uint32  `protobuf:"varint,51,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
	EnergyQuantity                       uint32  `protobuf:"varint,52,opt,name=energy_quantity,json=energyQuantity,proto3" json:"energy_quantity,omitempty"`
	InventoryLocationFrom                uint32  `protobuf:"varint,53,opt,name=inventory_location_from,json=inventoryLocationFrom,proto3" json:"inventory_location_from,omitempty"`
	InventoryLocationTo                  uint32  `protobuf:"varint,54,opt,name=inventory_location_to,json=inventoryLocationTo,proto3" json:"inventory_location_to,omitempty"`
	Invoice                              uint32  `protobuf:"varint,55,opt,name=invoice,proto3" json:"invoice,omitempty"`
	PromotionalDeal                      uint32  `protobuf:"varint,56,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseConditions                   uint32  `protobuf:"varint,57,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	PurchaseOrder                        uint32  `protobuf:"varint,58,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	ReceivingAdvice                      uint32  `protobuf:"varint,59,opt,name=receiving_advice,json=receivingAdvice,proto3" json:"receiving_advice,omitempty"`
	ReturnableAssetIdentification        uint32  `protobuf:"varint,60,opt,name=returnable_asset_identification,json=returnableAssetIdentification,proto3" json:"returnable_asset_identification,omitempty"`
	SalesOrder                           uint32  `protobuf:"varint,61,opt,name=sales_order,json=salesOrder,proto3" json:"sales_order,omitempty"`
	ShipFrom                             uint32  `protobuf:"varint,62,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	ShipTo                               uint32  `protobuf:"varint,63,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	TradeAgreement                       uint32  `protobuf:"varint,64,opt,name=trade_agreement,json=tradeAgreement,proto3" json:"trade_agreement,omitempty"`
	InvoiceId                            uint32  `protobuf:"varint,65,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (x *InvoiceLineItemD) Reset() {
	*x = InvoiceLineItemD{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceLineItemD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLineItemD) ProtoMessage() {}

func (x *InvoiceLineItemD) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLineItemD.ProtoReflect.Descriptor instead.
func (*InvoiceLineItemD) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{14}
}

func (x *InvoiceLineItemD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvoiceLineItemD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *InvoiceLineItemD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *InvoiceLineItemD) GetAmountExclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.AmountExclusiveAllowancesCharges
	}
	return 0
}

func (x *InvoiceLineItemD) GetAeacCodeListVersion() string {
	if x != nil {
		return x.AeacCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetAeacCurrencyCode() string {
	if x != nil {
		return x.AeacCurrencyCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetAmountInclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.AmountInclusiveAllowancesCharges
	}
	return 0
}

func (x *InvoiceLineItemD) GetAiacCodeListVersion() string {
	if x != nil {
		return x.AiacCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetAiacCurrencyCode() string {
	if x != nil {
		return x.AiacCurrencyCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetCreditLineIndicator() string {
	if x != nil {
		return x.CreditLineIndicator
	}
	return ""
}

func (x *InvoiceLineItemD) GetCreditReason() string {
	if x != nil {
		return x.CreditReason
	}
	return ""
}

func (x *InvoiceLineItemD) GetDeliveredQuantity() float64 {
	if x != nil {
		return x.DeliveredQuantity
	}
	return 0
}

func (x *InvoiceLineItemD) GetDqMeasurementUnitCode() string {
	if x != nil {
		return x.DqMeasurementUnitCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetDqCodeListVersion() string {
	if x != nil {
		return x.DqCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetExcludedFromPaymentDiscountIndicator() bool {
	if x != nil {
		return x.ExcludedFromPaymentDiscountIndicator
	}
	return false
}

func (x *InvoiceLineItemD) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *InvoiceLineItemD) GetFreeGoodsQuantity() float64 {
	if x != nil {
		return x.FreeGoodsQuantity
	}
	return 0
}

func (x *InvoiceLineItemD) GetFgqMeasurementUnitCode() string {
	if x != nil {
		return x.FgqMeasurementUnitCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetFgqCodeListVersion() string {
	if x != nil {
		return x.FgqCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetInvoicedQuantity() float64 {
	if x != nil {
		return x.InvoicedQuantity
	}
	return 0
}

func (x *InvoiceLineItemD) GetIqMeasurementUnitCode() string {
	if x != nil {
		return x.IqMeasurementUnitCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetIqCodeListVersion() string {
	if x != nil {
		return x.IqCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetItemPriceBaseQuantity() float64 {
	if x != nil {
		return x.ItemPriceBaseQuantity
	}
	return 0
}

func (x *InvoiceLineItemD) GetIpbqMeasurementUnitCode() string {
	if x != nil {
		return x.IpbqMeasurementUnitCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetIpbqCodeListVersion() string {
	if x != nil {
		return x.IpbqCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetItemPriceExclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.ItemPriceExclusiveAllowancesCharges
	}
	return 0
}

func (x *InvoiceLineItemD) GetIpeacCodeListVersion() string {
	if x != nil {
		return x.IpeacCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetIpeacCurrencyCode() string {
	if x != nil {
		return x.IpeacCurrencyCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetItemPriceInclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.ItemPriceInclusiveAllowancesCharges
	}
	return 0
}

func (x *InvoiceLineItemD) GetIpiacCodeListVersion() string {
	if x != nil {
		return x.IpiacCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetIpiacCurrencyCode() string {
	if x != nil {
		return x.IpiacCurrencyCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetLegallyFixedRetailPrice() float64 {
	if x != nil {
		return x.LegallyFixedRetailPrice
	}
	return 0
}

func (x *InvoiceLineItemD) GetLfrpCodeListVersion() string {
	if x != nil {
		return x.LfrpCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetLfrpCurrencyCode() string {
	if x != nil {
		return x.LfrpCurrencyCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *InvoiceLineItemD) GetMarginSchemeInformation() string {
	if x != nil {
		return x.MarginSchemeInformation
	}
	return ""
}

func (x *InvoiceLineItemD) GetOwenrshipPriorToPayment() string {
	if x != nil {
		return x.OwenrshipPriorToPayment
	}
	return ""
}

func (x *InvoiceLineItemD) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *InvoiceLineItemD) GetRecommendedRetailPrice() float64 {
	if x != nil {
		return x.RecommendedRetailPrice
	}
	return 0
}

func (x *InvoiceLineItemD) GetRrpCodeListVersion() string {
	if x != nil {
		return x.RrpCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetRrpCurrencyCode() string {
	if x != nil {
		return x.RrpCurrencyCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetRetailPriceExcludingExcise() float64 {
	if x != nil {
		return x.RetailPriceExcludingExcise
	}
	return 0
}

func (x *InvoiceLineItemD) GetRpeeCodeListVersion() string {
	if x != nil {
		return x.RpeeCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetRpeeCurrencyCode() string {
	if x != nil {
		return x.RpeeCurrencyCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetTotalOrderedQuantity() float64 {
	if x != nil {
		return x.TotalOrderedQuantity
	}
	return 0
}

func (x *InvoiceLineItemD) GetToqMeasurementUnitCode() string {
	if x != nil {
		return x.ToqMeasurementUnitCode
	}
	return ""
}

func (x *InvoiceLineItemD) GetToqCodeListVersion() string {
	if x != nil {
		return x.ToqCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemD) GetConsumptionReport() uint32 {
	if x != nil {
		return x.ConsumptionReport
	}
	return 0
}

func (x *InvoiceLineItemD) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *InvoiceLineItemD) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *InvoiceLineItemD) GetDespatchAdvice() uint32 {
	if x != nil {
		return x.DespatchAdvice
	}
	return 0
}

func (x *InvoiceLineItemD) GetEnergyQuantity() uint32 {
	if x != nil {
		return x.EnergyQuantity
	}
	return 0
}

func (x *InvoiceLineItemD) GetInventoryLocationFrom() uint32 {
	if x != nil {
		return x.InventoryLocationFrom
	}
	return 0
}

func (x *InvoiceLineItemD) GetInventoryLocationTo() uint32 {
	if x != nil {
		return x.InventoryLocationTo
	}
	return 0
}

func (x *InvoiceLineItemD) GetInvoice() uint32 {
	if x != nil {
		return x.Invoice
	}
	return 0
}

func (x *InvoiceLineItemD) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *InvoiceLineItemD) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *InvoiceLineItemD) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *InvoiceLineItemD) GetReceivingAdvice() uint32 {
	if x != nil {
		return x.ReceivingAdvice
	}
	return 0
}

func (x *InvoiceLineItemD) GetReturnableAssetIdentification() uint32 {
	if x != nil {
		return x.ReturnableAssetIdentification
	}
	return 0
}

func (x *InvoiceLineItemD) GetSalesOrder() uint32 {
	if x != nil {
		return x.SalesOrder
	}
	return 0
}

func (x *InvoiceLineItemD) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *InvoiceLineItemD) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *InvoiceLineItemD) GetTradeAgreement() uint32 {
	if x != nil {
		return x.TradeAgreement
	}
	return 0
}

func (x *InvoiceLineItemD) GetInvoiceId() uint32 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

type InvoiceLineItemT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferOfOwnershipDate         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=transfer_of_ownership_date,json=transferOfOwnershipDate,proto3" json:"transfer_of_ownership_date,omitempty"`
	ActualDeliveryDate              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=actual_delivery_date,json=actualDeliveryDate,proto3" json:"actual_delivery_date,omitempty"`
	ServicetimePeriodLineLevelBegin *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=servicetime_period_line_level_begin,json=servicetimePeriodLineLevelBegin,proto3" json:"servicetime_period_line_level_begin,omitempty"`
	ServicetimePeriodLineLevelEnd   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=servicetime_period_line_level_end,json=servicetimePeriodLineLevelEnd,proto3" json:"servicetime_period_line_level_end,omitempty"`
}

func (x *InvoiceLineItemT) Reset() {
	*x = InvoiceLineItemT{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceLineItemT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLineItemT) ProtoMessage() {}

func (x *InvoiceLineItemT) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLineItemT.ProtoReflect.Descriptor instead.
func (*InvoiceLineItemT) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{15}
}

func (x *InvoiceLineItemT) GetTransferOfOwnershipDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransferOfOwnershipDate
	}
	return nil
}

func (x *InvoiceLineItemT) GetActualDeliveryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDeliveryDate
	}
	return nil
}

func (x *InvoiceLineItemT) GetServicetimePeriodLineLevelBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.ServicetimePeriodLineLevelBegin
	}
	return nil
}

func (x *InvoiceLineItemT) GetServicetimePeriodLineLevelEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.ServicetimePeriodLineLevelEnd
	}
	return nil
}

type CreateInvoiceLineItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountExclusiveAllowancesCharges     float64 `protobuf:"fixed64,1,opt,name=amount_exclusive_allowances_charges,json=amountExclusiveAllowancesCharges,proto3" json:"amount_exclusive_allowances_charges,omitempty"`
	AeacCodeListVersion                  string  `protobuf:"bytes,2,opt,name=aeac_code_list_version,json=aeacCodeListVersion,proto3" json:"aeac_code_list_version,omitempty"`
	AeacCurrencyCode                     string  `protobuf:"bytes,3,opt,name=aeac_currency_code,json=aeacCurrencyCode,proto3" json:"aeac_currency_code,omitempty"`
	AmountInclusiveAllowancesCharges     float64 `protobuf:"fixed64,4,opt,name=amount_inclusive_allowances_charges,json=amountInclusiveAllowancesCharges,proto3" json:"amount_inclusive_allowances_charges,omitempty"`
	AiacCodeListVersion                  string  `protobuf:"bytes,5,opt,name=aiac_code_list_version,json=aiacCodeListVersion,proto3" json:"aiac_code_list_version,omitempty"`
	AiacCurrencyCode                     string  `protobuf:"bytes,6,opt,name=aiac_currency_code,json=aiacCurrencyCode,proto3" json:"aiac_currency_code,omitempty"`
	CreditLineIndicator                  string  `protobuf:"bytes,7,opt,name=credit_line_indicator,json=creditLineIndicator,proto3" json:"credit_line_indicator,omitempty"`
	CreditReason                         string  `protobuf:"bytes,8,opt,name=credit_reason,json=creditReason,proto3" json:"credit_reason,omitempty"`
	DeliveredQuantity                    float64 `protobuf:"fixed64,9,opt,name=delivered_quantity,json=deliveredQuantity,proto3" json:"delivered_quantity,omitempty"`
	DqMeasurementUnitCode                string  `protobuf:"bytes,10,opt,name=dq_measurement_unit_code,json=dqMeasurementUnitCode,proto3" json:"dq_measurement_unit_code,omitempty"`
	DqCodeListVersion                    string  `protobuf:"bytes,11,opt,name=dq_code_list_version,json=dqCodeListVersion,proto3" json:"dq_code_list_version,omitempty"`
	ExcludedFromPaymentDiscountIndicator bool    `protobuf:"varint,12,opt,name=excluded_from_payment_discount_indicator,json=excludedFromPaymentDiscountIndicator,proto3" json:"excluded_from_payment_discount_indicator,omitempty"`
	Extension                            string  `protobuf:"bytes,13,opt,name=extension,proto3" json:"extension,omitempty"`
	FreeGoodsQuantity                    float64 `protobuf:"fixed64,14,opt,name=free_goods_quantity,json=freeGoodsQuantity,proto3" json:"free_goods_quantity,omitempty"`
	FgqMeasurementUnitCode               string  `protobuf:"bytes,15,opt,name=fgq_measurement_unit_code,json=fgqMeasurementUnitCode,proto3" json:"fgq_measurement_unit_code,omitempty"`
	FgqCodeListVersion                   string  `protobuf:"bytes,16,opt,name=fgq_code_list_version,json=fgqCodeListVersion,proto3" json:"fgq_code_list_version,omitempty"`
	InvoicedQuantity                     float64 `protobuf:"fixed64,17,opt,name=invoiced_quantity,json=invoicedQuantity,proto3" json:"invoiced_quantity,omitempty"`
	IqMeasurementUnitCode                string  `protobuf:"bytes,18,opt,name=iq_measurement_unit_code,json=iqMeasurementUnitCode,proto3" json:"iq_measurement_unit_code,omitempty"`
	IqCodeListVersion                    string  `protobuf:"bytes,19,opt,name=iq_code_list_version,json=iqCodeListVersion,proto3" json:"iq_code_list_version,omitempty"`
	ItemPriceBaseQuantity                float64 `protobuf:"fixed64,20,opt,name=item_price_base_quantity,json=itemPriceBaseQuantity,proto3" json:"item_price_base_quantity,omitempty"`
	IpbqMeasurementUnitCode              string  `protobuf:"bytes,21,opt,name=ipbq_measurement_unit_code,json=ipbqMeasurementUnitCode,proto3" json:"ipbq_measurement_unit_code,omitempty"`
	IpbqCodeListVersion                  string  `protobuf:"bytes,22,opt,name=ipbq_code_list_version,json=ipbqCodeListVersion,proto3" json:"ipbq_code_list_version,omitempty"`
	ItemPriceExclusiveAllowancesCharges  float64 `protobuf:"fixed64,23,opt,name=item_price_exclusive_allowances_charges,json=itemPriceExclusiveAllowancesCharges,proto3" json:"item_price_exclusive_allowances_charges,omitempty"`
	IpeacCodeListVersion                 string  `protobuf:"bytes,24,opt,name=ipeac_code_list_version,json=ipeacCodeListVersion,proto3" json:"ipeac_code_list_version,omitempty"`
	IpeacCurrencyCode                    string  `protobuf:"bytes,25,opt,name=ipeac_currency_code,json=ipeacCurrencyCode,proto3" json:"ipeac_currency_code,omitempty"`
	ItemPriceInclusiveAllowancesCharges  float64 `protobuf:"fixed64,26,opt,name=item_price_inclusive_allowances_charges,json=itemPriceInclusiveAllowancesCharges,proto3" json:"item_price_inclusive_allowances_charges,omitempty"`
	IpiacCodeListVersion                 string  `protobuf:"bytes,27,opt,name=ipiac_code_list_version,json=ipiacCodeListVersion,proto3" json:"ipiac_code_list_version,omitempty"`
	IpiacCurrencyCode                    string  `protobuf:"bytes,28,opt,name=ipiac_currency_code,json=ipiacCurrencyCode,proto3" json:"ipiac_currency_code,omitempty"`
	LegallyFixedRetailPrice              float64 `protobuf:"fixed64,29,opt,name=legally_fixed_retail_price,json=legallyFixedRetailPrice,proto3" json:"legally_fixed_retail_price,omitempty"`
	LfrpCodeListVersion                  string  `protobuf:"bytes,30,opt,name=lfrp_code_list_version,json=lfrpCodeListVersion,proto3" json:"lfrp_code_list_version,omitempty"`
	LfrpCurrencyCode                     string  `protobuf:"bytes,31,opt,name=lfrp_currency_code,json=lfrpCurrencyCode,proto3" json:"lfrp_currency_code,omitempty"`
	LineItemNumber                       uint32  `protobuf:"varint,32,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	MarginSchemeInformation              string  `protobuf:"bytes,33,opt,name=margin_scheme_information,json=marginSchemeInformation,proto3" json:"margin_scheme_information,omitempty"`
	OwenrshipPriorToPayment              string  `protobuf:"bytes,34,opt,name=owenrship_prior_to_payment,json=owenrshipPriorToPayment,proto3" json:"owenrship_prior_to_payment,omitempty"`
	ParentLineItemNumber                 uint32  `protobuf:"varint,35,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	RecommendedRetailPrice               float64 `protobuf:"fixed64,36,opt,name=recommended_retail_price,json=recommendedRetailPrice,proto3" json:"recommended_retail_price,omitempty"`
	RrpCodeListVersion                   string  `protobuf:"bytes,37,opt,name=rrp_code_list_version,json=rrpCodeListVersion,proto3" json:"rrp_code_list_version,omitempty"`
	RrpCurrencyCode                      string  `protobuf:"bytes,38,opt,name=rrp_currency_code,json=rrpCurrencyCode,proto3" json:"rrp_currency_code,omitempty"`
	RetailPriceExcludingExcise           float64 `protobuf:"fixed64,39,opt,name=retail_price_excluding_excise,json=retailPriceExcludingExcise,proto3" json:"retail_price_excluding_excise,omitempty"`
	RpeeCodeListVersion                  string  `protobuf:"bytes,40,opt,name=rpee_code_list_version,json=rpeeCodeListVersion,proto3" json:"rpee_code_list_version,omitempty"`
	RpeeCurrencyCode                     string  `protobuf:"bytes,41,opt,name=rpee_currency_code,json=rpeeCurrencyCode,proto3" json:"rpee_currency_code,omitempty"`
	TotalOrderedQuantity                 float64 `protobuf:"fixed64,42,opt,name=total_ordered_quantity,json=totalOrderedQuantity,proto3" json:"total_ordered_quantity,omitempty"`
	ToqMeasurementUnitCode               string  `protobuf:"bytes,43,opt,name=toq_measurement_unit_code,json=toqMeasurementUnitCode,proto3" json:"toq_measurement_unit_code,omitempty"`
	ToqCodeListVersion                   string  `protobuf:"bytes,44,opt,name=toq_code_list_version,json=toqCodeListVersion,proto3" json:"toq_code_list_version,omitempty"`
	TransferOfOwnershipDate              string  `protobuf:"bytes,45,opt,name=transfer_of_ownership_date,json=transferOfOwnershipDate,proto3" json:"transfer_of_ownership_date,omitempty"`
	ActualDeliveryDate                   string  `protobuf:"bytes,46,opt,name=actual_delivery_date,json=actualDeliveryDate,proto3" json:"actual_delivery_date,omitempty"`
	ConsumptionReport                    uint32  `protobuf:"varint,47,opt,name=consumption_report,json=consumptionReport,proto3" json:"consumption_report,omitempty"`
	Contract                             uint32  `protobuf:"varint,48,opt,name=contract,proto3" json:"contract,omitempty"`
	DeliveryNote                         uint32  `protobuf:"varint,49,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	DespatchAdvice                       uint32  `protobuf:"varint,50,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
	EnergyQuantity                       uint32  `protobuf:"varint,51,opt,name=energy_quantity,json=energyQuantity,proto3" json:"energy_quantity,omitempty"`
	InventoryLocationFrom                uint32  `protobuf:"varint,52,opt,name=inventory_location_from,json=inventoryLocationFrom,proto3" json:"inventory_location_from,omitempty"`
	InventoryLocationTo                  uint32  `protobuf:"varint,53,opt,name=inventory_location_to,json=inventoryLocationTo,proto3" json:"inventory_location_to,omitempty"`
	Invoice                              uint32  `protobuf:"varint,54,opt,name=invoice,proto3" json:"invoice,omitempty"`
	PromotionalDeal                      uint32  `protobuf:"varint,55,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseConditions                   uint32  `protobuf:"varint,56,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	PurchaseOrder                        uint32  `protobuf:"varint,57,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	ReceivingAdvice                      uint32  `protobuf:"varint,58,opt,name=receiving_advice,json=receivingAdvice,proto3" json:"receiving_advice,omitempty"`
	ReturnableAssetIdentification        uint32  `protobuf:"varint,59,opt,name=returnable_asset_identification,json=returnableAssetIdentification,proto3" json:"returnable_asset_identification,omitempty"`
	SalesOrder                           uint32  `protobuf:"varint,60,opt,name=sales_order,json=salesOrder,proto3" json:"sales_order,omitempty"`
	ServicetimePeriodLineLevelBegin      string  `protobuf:"bytes,61,opt,name=servicetime_period_line_level_begin,json=servicetimePeriodLineLevelBegin,proto3" json:"servicetime_period_line_level_begin,omitempty"`
	ServicetimePeriodLineLevelEnd        string  `protobuf:"bytes,62,opt,name=servicetime_period_line_level_end,json=servicetimePeriodLineLevelEnd,proto3" json:"servicetime_period_line_level_end,omitempty"`
	ShipFrom                             uint32  `protobuf:"varint,63,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	ShipTo                               uint32  `protobuf:"varint,64,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	TradeAgreement                       uint32  `protobuf:"varint,65,opt,name=trade_agreement,json=tradeAgreement,proto3" json:"trade_agreement,omitempty"`
	InvoiceId                            uint32  `protobuf:"varint,66,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	UserId                               string  `protobuf:"bytes,67,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                            string  `protobuf:"bytes,68,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                            string  `protobuf:"bytes,69,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInvoiceLineItemRequest) Reset() {
	*x = CreateInvoiceLineItemRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceLineItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceLineItemRequest) ProtoMessage() {}

func (x *CreateInvoiceLineItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceLineItemRequest.ProtoReflect.Descriptor instead.
func (*CreateInvoiceLineItemRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{16}
}

func (x *CreateInvoiceLineItemRequest) GetAmountExclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.AmountExclusiveAllowancesCharges
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetAeacCodeListVersion() string {
	if x != nil {
		return x.AeacCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetAeacCurrencyCode() string {
	if x != nil {
		return x.AeacCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetAmountInclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.AmountInclusiveAllowancesCharges
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetAiacCodeListVersion() string {
	if x != nil {
		return x.AiacCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetAiacCurrencyCode() string {
	if x != nil {
		return x.AiacCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetCreditLineIndicator() string {
	if x != nil {
		return x.CreditLineIndicator
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetCreditReason() string {
	if x != nil {
		return x.CreditReason
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetDeliveredQuantity() float64 {
	if x != nil {
		return x.DeliveredQuantity
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetDqMeasurementUnitCode() string {
	if x != nil {
		return x.DqMeasurementUnitCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetDqCodeListVersion() string {
	if x != nil {
		return x.DqCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetExcludedFromPaymentDiscountIndicator() bool {
	if x != nil {
		return x.ExcludedFromPaymentDiscountIndicator
	}
	return false
}

func (x *CreateInvoiceLineItemRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetFreeGoodsQuantity() float64 {
	if x != nil {
		return x.FreeGoodsQuantity
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetFgqMeasurementUnitCode() string {
	if x != nil {
		return x.FgqMeasurementUnitCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetFgqCodeListVersion() string {
	if x != nil {
		return x.FgqCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetInvoicedQuantity() float64 {
	if x != nil {
		return x.InvoicedQuantity
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetIqMeasurementUnitCode() string {
	if x != nil {
		return x.IqMeasurementUnitCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetIqCodeListVersion() string {
	if x != nil {
		return x.IqCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetItemPriceBaseQuantity() float64 {
	if x != nil {
		return x.ItemPriceBaseQuantity
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetIpbqMeasurementUnitCode() string {
	if x != nil {
		return x.IpbqMeasurementUnitCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetIpbqCodeListVersion() string {
	if x != nil {
		return x.IpbqCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetItemPriceExclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.ItemPriceExclusiveAllowancesCharges
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetIpeacCodeListVersion() string {
	if x != nil {
		return x.IpeacCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetIpeacCurrencyCode() string {
	if x != nil {
		return x.IpeacCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetItemPriceInclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.ItemPriceInclusiveAllowancesCharges
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetIpiacCodeListVersion() string {
	if x != nil {
		return x.IpiacCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetIpiacCurrencyCode() string {
	if x != nil {
		return x.IpiacCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetLegallyFixedRetailPrice() float64 {
	if x != nil {
		return x.LegallyFixedRetailPrice
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetLfrpCodeListVersion() string {
	if x != nil {
		return x.LfrpCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetLfrpCurrencyCode() string {
	if x != nil {
		return x.LfrpCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetMarginSchemeInformation() string {
	if x != nil {
		return x.MarginSchemeInformation
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetOwenrshipPriorToPayment() string {
	if x != nil {
		return x.OwenrshipPriorToPayment
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetRecommendedRetailPrice() float64 {
	if x != nil {
		return x.RecommendedRetailPrice
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetRrpCodeListVersion() string {
	if x != nil {
		return x.RrpCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetRrpCurrencyCode() string {
	if x != nil {
		return x.RrpCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetRetailPriceExcludingExcise() float64 {
	if x != nil {
		return x.RetailPriceExcludingExcise
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetRpeeCodeListVersion() string {
	if x != nil {
		return x.RpeeCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetRpeeCurrencyCode() string {
	if x != nil {
		return x.RpeeCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetTotalOrderedQuantity() float64 {
	if x != nil {
		return x.TotalOrderedQuantity
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetToqMeasurementUnitCode() string {
	if x != nil {
		return x.ToqMeasurementUnitCode
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetToqCodeListVersion() string {
	if x != nil {
		return x.ToqCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetTransferOfOwnershipDate() string {
	if x != nil {
		return x.TransferOfOwnershipDate
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetActualDeliveryDate() string {
	if x != nil {
		return x.ActualDeliveryDate
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetConsumptionReport() uint32 {
	if x != nil {
		return x.ConsumptionReport
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetDespatchAdvice() uint32 {
	if x != nil {
		return x.DespatchAdvice
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetEnergyQuantity() uint32 {
	if x != nil {
		return x.EnergyQuantity
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetInventoryLocationFrom() uint32 {
	if x != nil {
		return x.InventoryLocationFrom
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetInventoryLocationTo() uint32 {
	if x != nil {
		return x.InventoryLocationTo
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetInvoice() uint32 {
	if x != nil {
		return x.Invoice
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetReceivingAdvice() uint32 {
	if x != nil {
		return x.ReceivingAdvice
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetReturnableAssetIdentification() uint32 {
	if x != nil {
		return x.ReturnableAssetIdentification
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetSalesOrder() uint32 {
	if x != nil {
		return x.SalesOrder
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetServicetimePeriodLineLevelBegin() string {
	if x != nil {
		return x.ServicetimePeriodLineLevelBegin
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetServicetimePeriodLineLevelEnd() string {
	if x != nil {
		return x.ServicetimePeriodLineLevelEnd
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetTradeAgreement() uint32 {
	if x != nil {
		return x.TradeAgreement
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetInvoiceId() uint32 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

func (x *CreateInvoiceLineItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInvoiceLineItemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInvoiceLineItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceLineItem *InvoiceLineItem `protobuf:"bytes,1,opt,name=invoice_line_item,json=invoiceLineItem,proto3" json:"invoice_line_item,omitempty"`
}

func (x *CreateInvoiceLineItemResponse) Reset() {
	*x = CreateInvoiceLineItemResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceLineItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceLineItemResponse) ProtoMessage() {}

func (x *CreateInvoiceLineItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceLineItemResponse.ProtoReflect.Descriptor instead.
func (*CreateInvoiceLineItemResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{17}
}

func (x *CreateInvoiceLineItemResponse) GetInvoiceLineItem() *InvoiceLineItem {
	if x != nil {
		return x.InvoiceLineItem
	}
	return nil
}

type GetInvoiceLineItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetInvoiceLineItemsRequest) Reset() {
	*x = GetInvoiceLineItemsRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceLineItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceLineItemsRequest) ProtoMessage() {}

func (x *GetInvoiceLineItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceLineItemsRequest.ProtoReflect.Descriptor instead.
func (*GetInvoiceLineItemsRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{18}
}

func (x *GetInvoiceLineItemsRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetInvoiceLineItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceLineItems []*InvoiceLineItem `protobuf:"bytes,1,rep,name=invoice_line_items,json=invoiceLineItems,proto3" json:"invoice_line_items,omitempty"`
}

func (x *GetInvoiceLineItemsResponse) Reset() {
	*x = GetInvoiceLineItemsResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceLineItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceLineItemsResponse) ProtoMessage() {}

func (x *GetInvoiceLineItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceLineItemsResponse.ProtoReflect.Descriptor instead.
func (*GetInvoiceLineItemsResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{19}
}

func (x *GetInvoiceLineItemsResponse) GetInvoiceLineItems() []*InvoiceLineItem {
	if x != nil {
		return x.InvoiceLineItems
	}
	return nil
}

type InvoiceLineItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceLineItems []*InvoiceLineItem `protobuf:"bytes,1,rep,name=invoice_line_items,json=invoiceLineItems,proto3" json:"invoice_line_items,omitempty"`
}

func (x *InvoiceLineItems) Reset() {
	*x = InvoiceLineItems{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceLineItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLineItems) ProtoMessage() {}

func (x *InvoiceLineItems) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLineItems.ProtoReflect.Descriptor instead.
func (*InvoiceLineItems) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{20}
}

func (x *InvoiceLineItems) GetInvoiceLineItems() []*InvoiceLineItem {
	if x != nil {
		return x.InvoiceLineItems
	}
	return nil
}

type InvoiceTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceTotalD *InvoiceTotalD `protobuf:"bytes,1,opt,name=invoice_total_d,json=invoiceTotalD,proto3" json:"invoice_total_d,omitempty"`
	InvoiceTotalT *InvoiceTotalT `protobuf:"bytes,2,opt,name=invoice_total_t,json=invoiceTotalT,proto3" json:"invoice_total_t,omitempty"`
}

func (x *InvoiceTotal) Reset() {
	*x = InvoiceTotal{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceTotal) ProtoMessage() {}

func (x *InvoiceTotal) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceTotal.ProtoReflect.Descriptor instead.
func (*InvoiceTotal) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{21}
}

func (x *InvoiceTotal) GetInvoiceTotalD() *InvoiceTotalD {
	if x != nil {
		return x.InvoiceTotalD
	}
	return nil
}

func (x *InvoiceTotal) GetInvoiceTotalT() *InvoiceTotalT {
	if x != nil {
		return x.InvoiceTotalT
	}
	return nil
}

type InvoiceTotalD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                        uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseAmount                                float64 `protobuf:"fixed64,2,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	BaCodeListVersion                         string  `protobuf:"bytes,3,opt,name=ba_code_list_version,json=baCodeListVersion,proto3" json:"ba_code_list_version,omitempty"`
	BaCurrencyCode                            string  `protobuf:"bytes,4,opt,name=ba_currency_code,json=baCurrencyCode,proto3" json:"ba_currency_code,omitempty"`
	PrepaidAmount                             float64 `protobuf:"fixed64,5,opt,name=prepaid_amount,json=prepaidAmount,proto3" json:"prepaid_amount,omitempty"`
	PaCodeListVersion                         string  `protobuf:"bytes,6,opt,name=pa_code_list_version,json=paCodeListVersion,proto3" json:"pa_code_list_version,omitempty"`
	PaCurrencyCode                            string  `protobuf:"bytes,7,opt,name=pa_currency_code,json=paCurrencyCode,proto3" json:"pa_currency_code,omitempty"`
	TaxAccountingCurrency                     string  `protobuf:"bytes,8,opt,name=tax_accounting_currency,json=taxAccountingCurrency,proto3" json:"tax_accounting_currency,omitempty"`
	TotalAmountInvoiceAllowancesCharges       float64 `protobuf:"fixed64,9,opt,name=total_amount_invoice_allowances_charges,json=totalAmountInvoiceAllowancesCharges,proto3" json:"total_amount_invoice_allowances_charges,omitempty"`
	TaiacCodeListVersion                      string  `protobuf:"bytes,10,opt,name=taiac_code_list_version,json=taiacCodeListVersion,proto3" json:"taiac_code_list_version,omitempty"`
	TaiacCurrencyCode                         string  `protobuf:"bytes,11,opt,name=taiac_currency_code,json=taiacCurrencyCode,proto3" json:"taiac_currency_code,omitempty"`
	TotalAmountLineAllowancesCharges          float64 `protobuf:"fixed64,12,opt,name=total_amount_line_allowances_charges,json=totalAmountLineAllowancesCharges,proto3" json:"total_amount_line_allowances_charges,omitempty"`
	TalacCodeListVersion                      string  `protobuf:"bytes,13,opt,name=talac_code_list_version,json=talacCodeListVersion,proto3" json:"talac_code_list_version,omitempty"`
	TalacCurrencyCode                         string  `protobuf:"bytes,14,opt,name=talac_currency_code,json=talacCurrencyCode,proto3" json:"talac_currency_code,omitempty"`
	TotalEconomicValue                        float64 `protobuf:"fixed64,15,opt,name=total_economic_value,json=totalEconomicValue,proto3" json:"total_economic_value,omitempty"`
	TevCodeListVersion                        string  `protobuf:"bytes,16,opt,name=tev_code_list_version,json=tevCodeListVersion,proto3" json:"tev_code_list_version,omitempty"`
	TevCurrencyCode                           string  `protobuf:"bytes,17,opt,name=tev_currency_code,json=tevCurrencyCode,proto3" json:"tev_currency_code,omitempty"`
	TotalGoodsValue                           float64 `protobuf:"fixed64,18,opt,name=total_goods_value,json=totalGoodsValue,proto3" json:"total_goods_value,omitempty"`
	TgvCodeListVersion                        string  `protobuf:"bytes,19,opt,name=tgv_code_list_version,json=tgvCodeListVersion,proto3" json:"tgv_code_list_version,omitempty"`
	TgvCurrencyCode                           string  `protobuf:"bytes,20,opt,name=tgv_currency_code,json=tgvCurrencyCode,proto3" json:"tgv_currency_code,omitempty"`
	TotalInvoiceAmount                        float64 `protobuf:"fixed64,21,opt,name=total_invoice_amount,json=totalInvoiceAmount,proto3" json:"total_invoice_amount,omitempty"`
	TiaCodeListVersion                        string  `protobuf:"bytes,22,opt,name=tia_code_list_version,json=tiaCodeListVersion,proto3" json:"tia_code_list_version,omitempty"`
	TiaCurrencyCode                           string  `protobuf:"bytes,23,opt,name=tia_currency_code,json=tiaCurrencyCode,proto3" json:"tia_currency_code,omitempty"`
	TotalInvoiceAmountPayable                 float64 `protobuf:"fixed64,24,opt,name=total_invoice_amount_payable,json=totalInvoiceAmountPayable,proto3" json:"total_invoice_amount_payable,omitempty"`
	TiapCodeListVersion                       string  `protobuf:"bytes,25,opt,name=tiap_code_list_version,json=tiapCodeListVersion,proto3" json:"tiap_code_list_version,omitempty"`
	TiapCurrencyCode                          string  `protobuf:"bytes,26,opt,name=tiap_currency_code,json=tiapCurrencyCode,proto3" json:"tiap_currency_code,omitempty"`
	TotalLineAmountExclusiveAllowancesCharges float64 `protobuf:"fixed64,27,opt,name=total_line_amount_exclusive_allowances_charges,json=totalLineAmountExclusiveAllowancesCharges,proto3" json:"total_line_amount_exclusive_allowances_charges,omitempty"`
	TlaeacCodeListVersion                     string  `protobuf:"bytes,28,opt,name=tlaeac_code_list_version,json=tlaeacCodeListVersion,proto3" json:"tlaeac_code_list_version,omitempty"`
	TlaeacCurrencyCode                        string  `protobuf:"bytes,29,opt,name=tlaeac_currency_code,json=tlaeacCurrencyCode,proto3" json:"tlaeac_currency_code,omitempty"`
	TotalLineAmountInclusiveAllowancesCharges float64 `protobuf:"fixed64,30,opt,name=total_line_amount_inclusive_allowances_charges,json=totalLineAmountInclusiveAllowancesCharges,proto3" json:"total_line_amount_inclusive_allowances_charges,omitempty"`
	TlaiacCodeListVersion                     string  `protobuf:"bytes,31,opt,name=tlaiac_code_list_version,json=tlaiacCodeListVersion,proto3" json:"tlaiac_code_list_version,omitempty"`
	TlaiacCurrencyCode                        string  `protobuf:"bytes,32,opt,name=tlaiac_currency_code,json=tlaiacCurrencyCode,proto3" json:"tlaiac_currency_code,omitempty"`
	TotalPaymentDiscountBasisAmount           float64 `protobuf:"fixed64,33,opt,name=total_payment_discount_basis_amount,json=totalPaymentDiscountBasisAmount,proto3" json:"total_payment_discount_basis_amount,omitempty"`
	TpdbaCodeListVersion                      string  `protobuf:"bytes,34,opt,name=tpdba_code_list_version,json=tpdbaCodeListVersion,proto3" json:"tpdba_code_list_version,omitempty"`
	TpdbaCurrencyCode                         string  `protobuf:"bytes,35,opt,name=tpdba_currency_code,json=tpdbaCurrencyCode,proto3" json:"tpdba_currency_code,omitempty"`
	TotalRetailValue                          float64 `protobuf:"fixed64,36,opt,name=total_retail_value,json=totalRetailValue,proto3" json:"total_retail_value,omitempty"`
	TrvCodeListVersion                        string  `protobuf:"bytes,37,opt,name=trv_code_list_version,json=trvCodeListVersion,proto3" json:"trv_code_list_version,omitempty"`
	TrvCurrencyCode                           string  `protobuf:"bytes,38,opt,name=trv_currency_code,json=trvCurrencyCode,proto3" json:"trv_currency_code,omitempty"`
	TotalTaxAmount                            float64 `protobuf:"fixed64,39,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	TtaCodeListVersion                        string  `protobuf:"bytes,40,opt,name=tta_code_list_version,json=ttaCodeListVersion,proto3" json:"tta_code_list_version,omitempty"`
	TtaCurrencyCode                           string  `protobuf:"bytes,41,opt,name=tta_currency_code,json=ttaCurrencyCode,proto3" json:"tta_currency_code,omitempty"`
	TotalTaxBasisAmount                       float64 `protobuf:"fixed64,42,opt,name=total_tax_basis_amount,json=totalTaxBasisAmount,proto3" json:"total_tax_basis_amount,omitempty"`
	TtbaCodeListVersion                       string  `protobuf:"bytes,43,opt,name=ttba_code_list_version,json=ttbaCodeListVersion,proto3" json:"ttba_code_list_version,omitempty"`
	TtbaCurrencyCode                          string  `protobuf:"bytes,44,opt,name=ttba_currency_code,json=ttbaCurrencyCode,proto3" json:"ttba_currency_code,omitempty"`
	TotalVATAmount                            float64 `protobuf:"fixed64,45,opt,name=total_v_a_t_amount,json=totalVATAmount,proto3" json:"total_v_a_t_amount,omitempty"`
	TvaCodeListVersion                        string  `protobuf:"bytes,46,opt,name=tva_code_list_version,json=tvaCodeListVersion,proto3" json:"tva_code_list_version,omitempty"`
	TvaCurrencyCode                           string  `protobuf:"bytes,47,opt,name=tva_currency_code,json=tvaCurrencyCode,proto3" json:"tva_currency_code,omitempty"`
	InvoiceLineItemId                         uint32  `protobuf:"varint,48,opt,name=invoice_line_item_id,json=invoiceLineItemId,proto3" json:"invoice_line_item_id,omitempty"`
	InvoiceId                                 uint32  `protobuf:"varint,49,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (x *InvoiceTotalD) Reset() {
	*x = InvoiceTotalD{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceTotalD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceTotalD) ProtoMessage() {}

func (x *InvoiceTotalD) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceTotalD.ProtoReflect.Descriptor instead.
func (*InvoiceTotalD) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{22}
}

func (x *InvoiceTotalD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvoiceTotalD) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *InvoiceTotalD) GetBaCodeListVersion() string {
	if x != nil {
		return x.BaCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetBaCurrencyCode() string {
	if x != nil {
		return x.BaCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetPrepaidAmount() float64 {
	if x != nil {
		return x.PrepaidAmount
	}
	return 0
}

func (x *InvoiceTotalD) GetPaCodeListVersion() string {
	if x != nil {
		return x.PaCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetPaCurrencyCode() string {
	if x != nil {
		return x.PaCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTaxAccountingCurrency() string {
	if x != nil {
		return x.TaxAccountingCurrency
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalAmountInvoiceAllowancesCharges() float64 {
	if x != nil {
		return x.TotalAmountInvoiceAllowancesCharges
	}
	return 0
}

func (x *InvoiceTotalD) GetTaiacCodeListVersion() string {
	if x != nil {
		return x.TaiacCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTaiacCurrencyCode() string {
	if x != nil {
		return x.TaiacCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalAmountLineAllowancesCharges() float64 {
	if x != nil {
		return x.TotalAmountLineAllowancesCharges
	}
	return 0
}

func (x *InvoiceTotalD) GetTalacCodeListVersion() string {
	if x != nil {
		return x.TalacCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTalacCurrencyCode() string {
	if x != nil {
		return x.TalacCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalEconomicValue() float64 {
	if x != nil {
		return x.TotalEconomicValue
	}
	return 0
}

func (x *InvoiceTotalD) GetTevCodeListVersion() string {
	if x != nil {
		return x.TevCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTevCurrencyCode() string {
	if x != nil {
		return x.TevCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalGoodsValue() float64 {
	if x != nil {
		return x.TotalGoodsValue
	}
	return 0
}

func (x *InvoiceTotalD) GetTgvCodeListVersion() string {
	if x != nil {
		return x.TgvCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTgvCurrencyCode() string {
	if x != nil {
		return x.TgvCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalInvoiceAmount() float64 {
	if x != nil {
		return x.TotalInvoiceAmount
	}
	return 0
}

func (x *InvoiceTotalD) GetTiaCodeListVersion() string {
	if x != nil {
		return x.TiaCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTiaCurrencyCode() string {
	if x != nil {
		return x.TiaCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalInvoiceAmountPayable() float64 {
	if x != nil {
		return x.TotalInvoiceAmountPayable
	}
	return 0
}

func (x *InvoiceTotalD) GetTiapCodeListVersion() string {
	if x != nil {
		return x.TiapCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTiapCurrencyCode() string {
	if x != nil {
		return x.TiapCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalLineAmountExclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.TotalLineAmountExclusiveAllowancesCharges
	}
	return 0
}

func (x *InvoiceTotalD) GetTlaeacCodeListVersion() string {
	if x != nil {
		return x.TlaeacCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTlaeacCurrencyCode() string {
	if x != nil {
		return x.TlaeacCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalLineAmountInclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.TotalLineAmountInclusiveAllowancesCharges
	}
	return 0
}

func (x *InvoiceTotalD) GetTlaiacCodeListVersion() string {
	if x != nil {
		return x.TlaiacCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTlaiacCurrencyCode() string {
	if x != nil {
		return x.TlaiacCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalPaymentDiscountBasisAmount() float64 {
	if x != nil {
		return x.TotalPaymentDiscountBasisAmount
	}
	return 0
}

func (x *InvoiceTotalD) GetTpdbaCodeListVersion() string {
	if x != nil {
		return x.TpdbaCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTpdbaCurrencyCode() string {
	if x != nil {
		return x.TpdbaCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalRetailValue() float64 {
	if x != nil {
		return x.TotalRetailValue
	}
	return 0
}

func (x *InvoiceTotalD) GetTrvCodeListVersion() string {
	if x != nil {
		return x.TrvCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTrvCurrencyCode() string {
	if x != nil {
		return x.TrvCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *InvoiceTotalD) GetTtaCodeListVersion() string {
	if x != nil {
		return x.TtaCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTtaCurrencyCode() string {
	if x != nil {
		return x.TtaCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalTaxBasisAmount() float64 {
	if x != nil {
		return x.TotalTaxBasisAmount
	}
	return 0
}

func (x *InvoiceTotalD) GetTtbaCodeListVersion() string {
	if x != nil {
		return x.TtbaCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTtbaCurrencyCode() string {
	if x != nil {
		return x.TtbaCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetTotalVATAmount() float64 {
	if x != nil {
		return x.TotalVATAmount
	}
	return 0
}

func (x *InvoiceTotalD) GetTvaCodeListVersion() string {
	if x != nil {
		return x.TvaCodeListVersion
	}
	return ""
}

func (x *InvoiceTotalD) GetTvaCurrencyCode() string {
	if x != nil {
		return x.TvaCurrencyCode
	}
	return ""
}

func (x *InvoiceTotalD) GetInvoiceLineItemId() uint32 {
	if x != nil {
		return x.InvoiceLineItemId
	}
	return 0
}

func (x *InvoiceTotalD) GetInvoiceId() uint32 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

type InvoiceTotalT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrepaidAmountDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=prepaid_amount_date,json=prepaidAmountDate,proto3" json:"prepaid_amount_date,omitempty"`
}

func (x *InvoiceTotalT) Reset() {
	*x = InvoiceTotalT{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceTotalT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceTotalT) ProtoMessage() {}

func (x *InvoiceTotalT) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceTotalT.ProtoReflect.Descriptor instead.
func (*InvoiceTotalT) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{23}
}

func (x *InvoiceTotalT) GetPrepaidAmountDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PrepaidAmountDate
	}
	return nil
}

type CreateInvoiceTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAmount                                float64 `protobuf:"fixed64,1,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	BaCodeListVersion                         string  `protobuf:"bytes,2,opt,name=ba_code_list_version,json=baCodeListVersion,proto3" json:"ba_code_list_version,omitempty"`
	BaCurrencyCode                            string  `protobuf:"bytes,3,opt,name=ba_currency_code,json=baCurrencyCode,proto3" json:"ba_currency_code,omitempty"`
	PrepaidAmount                             float64 `protobuf:"fixed64,4,opt,name=prepaid_amount,json=prepaidAmount,proto3" json:"prepaid_amount,omitempty"`
	PaCodeListVersion                         string  `protobuf:"bytes,5,opt,name=pa_code_list_version,json=paCodeListVersion,proto3" json:"pa_code_list_version,omitempty"`
	PaCurrencyCode                            string  `protobuf:"bytes,6,opt,name=pa_currency_code,json=paCurrencyCode,proto3" json:"pa_currency_code,omitempty"`
	TaxAccountingCurrency                     string  `protobuf:"bytes,7,opt,name=tax_accounting_currency,json=taxAccountingCurrency,proto3" json:"tax_accounting_currency,omitempty"`
	TotalAmountInvoiceAllowancesCharges       float64 `protobuf:"fixed64,8,opt,name=total_amount_invoice_allowances_charges,json=totalAmountInvoiceAllowancesCharges,proto3" json:"total_amount_invoice_allowances_charges,omitempty"`
	TaiacCodeListVersion                      string  `protobuf:"bytes,9,opt,name=taiac_code_list_version,json=taiacCodeListVersion,proto3" json:"taiac_code_list_version,omitempty"`
	TaiacCurrencyCode                         string  `protobuf:"bytes,10,opt,name=taiac_currency_code,json=taiacCurrencyCode,proto3" json:"taiac_currency_code,omitempty"`
	TotalAmountLineAllowancesCharges          float64 `protobuf:"fixed64,11,opt,name=total_amount_line_allowances_charges,json=totalAmountLineAllowancesCharges,proto3" json:"total_amount_line_allowances_charges,omitempty"`
	TalacCodeListVersion                      string  `protobuf:"bytes,12,opt,name=talac_code_list_version,json=talacCodeListVersion,proto3" json:"talac_code_list_version,omitempty"`
	TalacCurrencyCode                         string  `protobuf:"bytes,13,opt,name=talac_currency_code,json=talacCurrencyCode,proto3" json:"talac_currency_code,omitempty"`
	TotalEconomicValue                        float64 `protobuf:"fixed64,14,opt,name=total_economic_value,json=totalEconomicValue,proto3" json:"total_economic_value,omitempty"`
	TevCodeListVersion                        string  `protobuf:"bytes,15,opt,name=tev_code_list_version,json=tevCodeListVersion,proto3" json:"tev_code_list_version,omitempty"`
	TevCurrencyCode                           string  `protobuf:"bytes,16,opt,name=tev_currency_code,json=tevCurrencyCode,proto3" json:"tev_currency_code,omitempty"`
	TotalGoodsValue                           float64 `protobuf:"fixed64,17,opt,name=total_goods_value,json=totalGoodsValue,proto3" json:"total_goods_value,omitempty"`
	TgvCodeListVersion                        string  `protobuf:"bytes,18,opt,name=tgv_code_list_version,json=tgvCodeListVersion,proto3" json:"tgv_code_list_version,omitempty"`
	TgvCurrencyCode                           string  `protobuf:"bytes,19,opt,name=tgv_currency_code,json=tgvCurrencyCode,proto3" json:"tgv_currency_code,omitempty"`
	TotalInvoiceAmount                        float64 `protobuf:"fixed64,20,opt,name=total_invoice_amount,json=totalInvoiceAmount,proto3" json:"total_invoice_amount,omitempty"`
	TiaCodeListVersion                        string  `protobuf:"bytes,21,opt,name=tia_code_list_version,json=tiaCodeListVersion,proto3" json:"tia_code_list_version,omitempty"`
	TiaCurrencyCode                           string  `protobuf:"bytes,22,opt,name=tia_currency_code,json=tiaCurrencyCode,proto3" json:"tia_currency_code,omitempty"`
	TotalInvoiceAmountPayable                 float64 `protobuf:"fixed64,23,opt,name=total_invoice_amount_payable,json=totalInvoiceAmountPayable,proto3" json:"total_invoice_amount_payable,omitempty"`
	TiapCodeListVersion                       string  `protobuf:"bytes,24,opt,name=tiap_code_list_version,json=tiapCodeListVersion,proto3" json:"tiap_code_list_version,omitempty"`
	TiapCurrencyCode                          string  `protobuf:"bytes,25,opt,name=tiap_currency_code,json=tiapCurrencyCode,proto3" json:"tiap_currency_code,omitempty"`
	TotalLineAmountExclusiveAllowancesCharges float64 `protobuf:"fixed64,26,opt,name=total_line_amount_exclusive_allowances_charges,json=totalLineAmountExclusiveAllowancesCharges,proto3" json:"total_line_amount_exclusive_allowances_charges,omitempty"`
	TlaeacCodeListVersion                     string  `protobuf:"bytes,27,opt,name=tlaeac_code_list_version,json=tlaeacCodeListVersion,proto3" json:"tlaeac_code_list_version,omitempty"`
	TlaeacCurrencyCode                        string  `protobuf:"bytes,28,opt,name=tlaeac_currency_code,json=tlaeacCurrencyCode,proto3" json:"tlaeac_currency_code,omitempty"`
	TotalLineAmountInclusiveAllowancesCharges float64 `protobuf:"fixed64,29,opt,name=total_line_amount_inclusive_allowances_charges,json=totalLineAmountInclusiveAllowancesCharges,proto3" json:"total_line_amount_inclusive_allowances_charges,omitempty"`
	TlaiacCodeListVersion                     string  `protobuf:"bytes,30,opt,name=tlaiac_code_list_version,json=tlaiacCodeListVersion,proto3" json:"tlaiac_code_list_version,omitempty"`
	TlaiacCurrencyCode                        string  `protobuf:"bytes,31,opt,name=tlaiac_currency_code,json=tlaiacCurrencyCode,proto3" json:"tlaiac_currency_code,omitempty"`
	TotalPaymentDiscountBasisAmount           float64 `protobuf:"fixed64,32,opt,name=total_payment_discount_basis_amount,json=totalPaymentDiscountBasisAmount,proto3" json:"total_payment_discount_basis_amount,omitempty"`
	TpdbaCodeListVersion                      string  `protobuf:"bytes,33,opt,name=tpdba_code_list_version,json=tpdbaCodeListVersion,proto3" json:"tpdba_code_list_version,omitempty"`
	TpdbaCurrencyCode                         string  `protobuf:"bytes,34,opt,name=tpdba_currency_code,json=tpdbaCurrencyCode,proto3" json:"tpdba_currency_code,omitempty"`
	TotalRetailValue                          float64 `protobuf:"fixed64,35,opt,name=total_retail_value,json=totalRetailValue,proto3" json:"total_retail_value,omitempty"`
	TrvCodeListVersion                        string  `protobuf:"bytes,36,opt,name=trv_code_list_version,json=trvCodeListVersion,proto3" json:"trv_code_list_version,omitempty"`
	TrvCurrencyCode                           string  `protobuf:"bytes,37,opt,name=trv_currency_code,json=trvCurrencyCode,proto3" json:"trv_currency_code,omitempty"`
	TotalTaxAmount                            float64 `protobuf:"fixed64,38,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	TtaCodeListVersion                        string  `protobuf:"bytes,39,opt,name=tta_code_list_version,json=ttaCodeListVersion,proto3" json:"tta_code_list_version,omitempty"`
	TtaCurrencyCode                           string  `protobuf:"bytes,40,opt,name=tta_currency_code,json=ttaCurrencyCode,proto3" json:"tta_currency_code,omitempty"`
	TotalTaxBasisAmount                       float64 `protobuf:"fixed64,41,opt,name=total_tax_basis_amount,json=totalTaxBasisAmount,proto3" json:"total_tax_basis_amount,omitempty"`
	TtbaCodeListVersion                       string  `protobuf:"bytes,42,opt,name=ttba_code_list_version,json=ttbaCodeListVersion,proto3" json:"ttba_code_list_version,omitempty"`
	TtbaCurrencyCode                          string  `protobuf:"bytes,43,opt,name=ttba_currency_code,json=ttbaCurrencyCode,proto3" json:"ttba_currency_code,omitempty"`
	TotalVATAmount                            float64 `protobuf:"fixed64,44,opt,name=total_v_a_t_amount,json=totalVATAmount,proto3" json:"total_v_a_t_amount,omitempty"`
	TvaCodeListVersion                        string  `protobuf:"bytes,45,opt,name=tva_code_list_version,json=tvaCodeListVersion,proto3" json:"tva_code_list_version,omitempty"`
	TvaCurrencyCode                           string  `protobuf:"bytes,46,opt,name=tva_currency_code,json=tvaCurrencyCode,proto3" json:"tva_currency_code,omitempty"`
	InvoiceLineItemId                         uint32  `protobuf:"varint,47,opt,name=invoice_line_item_id,json=invoiceLineItemId,proto3" json:"invoice_line_item_id,omitempty"`
	InvoiceId                                 uint32  `protobuf:"varint,48,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	PrepaidAmountDate                         string  `protobuf:"bytes,49,opt,name=prepaid_amount_date,json=prepaidAmountDate,proto3" json:"prepaid_amount_date,omitempty"`
	UserId                                    string  `protobuf:"bytes,50,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                 string  `protobuf:"bytes,51,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                 string  `protobuf:"bytes,52,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInvoiceTotalRequest) Reset() {
	*x = CreateInvoiceTotalRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceTotalRequest) ProtoMessage() {}

func (x *CreateInvoiceTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceTotalRequest.ProtoReflect.Descriptor instead.
func (*CreateInvoiceTotalRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{24}
}

func (x *CreateInvoiceTotalRequest) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetBaCodeListVersion() string {
	if x != nil {
		return x.BaCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetBaCurrencyCode() string {
	if x != nil {
		return x.BaCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetPrepaidAmount() float64 {
	if x != nil {
		return x.PrepaidAmount
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetPaCodeListVersion() string {
	if x != nil {
		return x.PaCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetPaCurrencyCode() string {
	if x != nil {
		return x.PaCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTaxAccountingCurrency() string {
	if x != nil {
		return x.TaxAccountingCurrency
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalAmountInvoiceAllowancesCharges() float64 {
	if x != nil {
		return x.TotalAmountInvoiceAllowancesCharges
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTaiacCodeListVersion() string {
	if x != nil {
		return x.TaiacCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTaiacCurrencyCode() string {
	if x != nil {
		return x.TaiacCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalAmountLineAllowancesCharges() float64 {
	if x != nil {
		return x.TotalAmountLineAllowancesCharges
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTalacCodeListVersion() string {
	if x != nil {
		return x.TalacCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTalacCurrencyCode() string {
	if x != nil {
		return x.TalacCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalEconomicValue() float64 {
	if x != nil {
		return x.TotalEconomicValue
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTevCodeListVersion() string {
	if x != nil {
		return x.TevCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTevCurrencyCode() string {
	if x != nil {
		return x.TevCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalGoodsValue() float64 {
	if x != nil {
		return x.TotalGoodsValue
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTgvCodeListVersion() string {
	if x != nil {
		return x.TgvCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTgvCurrencyCode() string {
	if x != nil {
		return x.TgvCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalInvoiceAmount() float64 {
	if x != nil {
		return x.TotalInvoiceAmount
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTiaCodeListVersion() string {
	if x != nil {
		return x.TiaCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTiaCurrencyCode() string {
	if x != nil {
		return x.TiaCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalInvoiceAmountPayable() float64 {
	if x != nil {
		return x.TotalInvoiceAmountPayable
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTiapCodeListVersion() string {
	if x != nil {
		return x.TiapCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTiapCurrencyCode() string {
	if x != nil {
		return x.TiapCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalLineAmountExclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.TotalLineAmountExclusiveAllowancesCharges
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTlaeacCodeListVersion() string {
	if x != nil {
		return x.TlaeacCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTlaeacCurrencyCode() string {
	if x != nil {
		return x.TlaeacCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalLineAmountInclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.TotalLineAmountInclusiveAllowancesCharges
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTlaiacCodeListVersion() string {
	if x != nil {
		return x.TlaiacCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTlaiacCurrencyCode() string {
	if x != nil {
		return x.TlaiacCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalPaymentDiscountBasisAmount() float64 {
	if x != nil {
		return x.TotalPaymentDiscountBasisAmount
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTpdbaCodeListVersion() string {
	if x != nil {
		return x.TpdbaCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTpdbaCurrencyCode() string {
	if x != nil {
		return x.TpdbaCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalRetailValue() float64 {
	if x != nil {
		return x.TotalRetailValue
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTrvCodeListVersion() string {
	if x != nil {
		return x.TrvCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTrvCurrencyCode() string {
	if x != nil {
		return x.TrvCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTtaCodeListVersion() string {
	if x != nil {
		return x.TtaCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTtaCurrencyCode() string {
	if x != nil {
		return x.TtaCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalTaxBasisAmount() float64 {
	if x != nil {
		return x.TotalTaxBasisAmount
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTtbaCodeListVersion() string {
	if x != nil {
		return x.TtbaCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTtbaCurrencyCode() string {
	if x != nil {
		return x.TtbaCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTotalVATAmount() float64 {
	if x != nil {
		return x.TotalVATAmount
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetTvaCodeListVersion() string {
	if x != nil {
		return x.TvaCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetTvaCurrencyCode() string {
	if x != nil {
		return x.TvaCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetInvoiceLineItemId() uint32 {
	if x != nil {
		return x.InvoiceLineItemId
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetInvoiceId() uint32 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

func (x *CreateInvoiceTotalRequest) GetPrepaidAmountDate() string {
	if x != nil {
		return x.PrepaidAmountDate
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInvoiceTotalRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInvoiceTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceTotal *InvoiceTotal `protobuf:"bytes,1,opt,name=invoice_total,json=invoiceTotal,proto3" json:"invoice_total,omitempty"`
}

func (x *CreateInvoiceTotalResponse) Reset() {
	*x = CreateInvoiceTotalResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceTotalResponse) ProtoMessage() {}

func (x *CreateInvoiceTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceTotalResponse.ProtoReflect.Descriptor instead.
func (*CreateInvoiceTotalResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{25}
}

func (x *CreateInvoiceTotalResponse) GetInvoiceTotal() *InvoiceTotal {
	if x != nil {
		return x.InvoiceTotal
	}
	return nil
}

type InvoiceLineItemInformationAfterTaxes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                               uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AmountExclusiveAllowancesCharges float64 `protobuf:"fixed64,2,opt,name=amount_exclusive_allowances_charges,json=amountExclusiveAllowancesCharges,proto3" json:"amount_exclusive_allowances_charges,omitempty"`
	AeacCodeListVersion              string  `protobuf:"bytes,3,opt,name=aeac_code_list_version,json=aeacCodeListVersion,proto3" json:"aeac_code_list_version,omitempty"`
	AeacCurrencyCode                 string  `protobuf:"bytes,4,opt,name=aeac_currency_code,json=aeacCurrencyCode,proto3" json:"aeac_currency_code,omitempty"`
	AmountInclusiveAllowancesCharges float64 `protobuf:"fixed64,5,opt,name=amount_inclusive_allowances_charges,json=amountInclusiveAllowancesCharges,proto3" json:"amount_inclusive_allowances_charges,omitempty"`
	AiacCodeListVersion              string  `protobuf:"bytes,6,opt,name=aiac_code_list_version,json=aiacCodeListVersion,proto3" json:"aiac_code_list_version,omitempty"`
	AiacCurrencyCode                 string  `protobuf:"bytes,7,opt,name=aiac_currency_code,json=aiacCurrencyCode,proto3" json:"aiac_currency_code,omitempty"`
	InvoiceId                        uint32  `protobuf:"varint,8,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	InvoiceLineItemId                uint32  `protobuf:"varint,9,opt,name=invoice_line_item_id,json=invoiceLineItemId,proto3" json:"invoice_line_item_id,omitempty"`
}

func (x *InvoiceLineItemInformationAfterTaxes) Reset() {
	*x = InvoiceLineItemInformationAfterTaxes{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceLineItemInformationAfterTaxes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLineItemInformationAfterTaxes) ProtoMessage() {}

func (x *InvoiceLineItemInformationAfterTaxes) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLineItemInformationAfterTaxes.ProtoReflect.Descriptor instead.
func (*InvoiceLineItemInformationAfterTaxes) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{26}
}

func (x *InvoiceLineItemInformationAfterTaxes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvoiceLineItemInformationAfterTaxes) GetAmountExclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.AmountExclusiveAllowancesCharges
	}
	return 0
}

func (x *InvoiceLineItemInformationAfterTaxes) GetAeacCodeListVersion() string {
	if x != nil {
		return x.AeacCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemInformationAfterTaxes) GetAeacCurrencyCode() string {
	if x != nil {
		return x.AeacCurrencyCode
	}
	return ""
}

func (x *InvoiceLineItemInformationAfterTaxes) GetAmountInclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.AmountInclusiveAllowancesCharges
	}
	return 0
}

func (x *InvoiceLineItemInformationAfterTaxes) GetAiacCodeListVersion() string {
	if x != nil {
		return x.AiacCodeListVersion
	}
	return ""
}

func (x *InvoiceLineItemInformationAfterTaxes) GetAiacCurrencyCode() string {
	if x != nil {
		return x.AiacCurrencyCode
	}
	return ""
}

func (x *InvoiceLineItemInformationAfterTaxes) GetInvoiceId() uint32 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

func (x *InvoiceLineItemInformationAfterTaxes) GetInvoiceLineItemId() uint32 {
	if x != nil {
		return x.InvoiceLineItemId
	}
	return 0
}

type CreateInvoiceLineItemInformationAfterTaxesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountExclusiveAllowancesCharges float64 `protobuf:"fixed64,1,opt,name=amount_exclusive_allowances_charges,json=amountExclusiveAllowancesCharges,proto3" json:"amount_exclusive_allowances_charges,omitempty"`
	AeacCodeListVersion              string  `protobuf:"bytes,2,opt,name=aeac_code_list_version,json=aeacCodeListVersion,proto3" json:"aeac_code_list_version,omitempty"`
	AeacCurrencyCode                 string  `protobuf:"bytes,3,opt,name=aeac_currency_code,json=aeacCurrencyCode,proto3" json:"aeac_currency_code,omitempty"`
	AmountInclusiveAllowancesCharges float64 `protobuf:"fixed64,4,opt,name=amount_inclusive_allowances_charges,json=amountInclusiveAllowancesCharges,proto3" json:"amount_inclusive_allowances_charges,omitempty"`
	AiacCodeListVersion              string  `protobuf:"bytes,5,opt,name=aiac_code_list_version,json=aiacCodeListVersion,proto3" json:"aiac_code_list_version,omitempty"`
	AiacCurrencyCode                 string  `protobuf:"bytes,6,opt,name=aiac_currency_code,json=aiacCurrencyCode,proto3" json:"aiac_currency_code,omitempty"`
	InvoiceId                        uint32  `protobuf:"varint,7,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	InvoiceLineItemId                uint32  `protobuf:"varint,8,opt,name=invoice_line_item_id,json=invoiceLineItemId,proto3" json:"invoice_line_item_id,omitempty"`
	UserId                           string  `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                        string  `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                        string  `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) Reset() {
	*x = CreateInvoiceLineItemInformationAfterTaxesRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceLineItemInformationAfterTaxesRequest) ProtoMessage() {}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceLineItemInformationAfterTaxesRequest.ProtoReflect.Descriptor instead.
func (*CreateInvoiceLineItemInformationAfterTaxesRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{27}
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetAmountExclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.AmountExclusiveAllowancesCharges
	}
	return 0
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetAeacCodeListVersion() string {
	if x != nil {
		return x.AeacCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetAeacCurrencyCode() string {
	if x != nil {
		return x.AeacCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetAmountInclusiveAllowancesCharges() float64 {
	if x != nil {
		return x.AmountInclusiveAllowancesCharges
	}
	return 0
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetAiacCodeListVersion() string {
	if x != nil {
		return x.AiacCodeListVersion
	}
	return ""
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetAiacCurrencyCode() string {
	if x != nil {
		return x.AiacCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetInvoiceId() uint32 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetInvoiceLineItemId() uint32 {
	if x != nil {
		return x.InvoiceLineItemId
	}
	return 0
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInvoiceLineItemInformationAfterTaxesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInvoiceLineItemInformationAfterTaxesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceLineItemInformationAfterTaxes *InvoiceLineItemInformationAfterTaxes `protobuf:"bytes,1,opt,name=invoice_line_item_information_after_taxes,json=invoiceLineItemInformationAfterTaxes,proto3" json:"invoice_line_item_information_after_taxes,omitempty"`
}

func (x *CreateInvoiceLineItemInformationAfterTaxesResponse) Reset() {
	*x = CreateInvoiceLineItemInformationAfterTaxesResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceLineItemInformationAfterTaxesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceLineItemInformationAfterTaxesResponse) ProtoMessage() {}

func (x *CreateInvoiceLineItemInformationAfterTaxesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceLineItemInformationAfterTaxesResponse.ProtoReflect.Descriptor instead.
func (*CreateInvoiceLineItemInformationAfterTaxesResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{28}
}

func (x *CreateInvoiceLineItemInformationAfterTaxesResponse) GetInvoiceLineItemInformationAfterTaxes() *InvoiceLineItemInformationAfterTaxes {
	if x != nil {
		return x.InvoiceLineItemInformationAfterTaxes
	}
	return nil
}

type InvoiceAllowanceCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LeviedDutyFeeTax uint32 `protobuf:"varint,2,opt,name=levied_duty_fee_tax,json=leviedDutyFeeTax,proto3" json:"levied_duty_fee_tax,omitempty"`
	AllowanceCharge  uint32 `protobuf:"varint,3,opt,name=allowance_charge,json=allowanceCharge,proto3" json:"allowance_charge,omitempty"`
	InvoiceId        uint32 `protobuf:"varint,4,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (x *InvoiceAllowanceCharge) Reset() {
	*x = InvoiceAllowanceCharge{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceAllowanceCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceAllowanceCharge) ProtoMessage() {}

func (x *InvoiceAllowanceCharge) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceAllowanceCharge.ProtoReflect.Descriptor instead.
func (*InvoiceAllowanceCharge) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{29}
}

func (x *InvoiceAllowanceCharge) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvoiceAllowanceCharge) GetLeviedDutyFeeTax() uint32 {
	if x != nil {
		return x.LeviedDutyFeeTax
	}
	return 0
}

func (x *InvoiceAllowanceCharge) GetAllowanceCharge() uint32 {
	if x != nil {
		return x.AllowanceCharge
	}
	return 0
}

func (x *InvoiceAllowanceCharge) GetInvoiceId() uint32 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

type CreateInvoiceAllowanceChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeviedDutyFeeTax uint32 `protobuf:"varint,1,opt,name=levied_duty_fee_tax,json=leviedDutyFeeTax,proto3" json:"levied_duty_fee_tax,omitempty"`
	AllowanceCharge  uint32 `protobuf:"varint,2,opt,name=allowance_charge,json=allowanceCharge,proto3" json:"allowance_charge,omitempty"`
	InvoiceId        uint32 `protobuf:"varint,3,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	UserId           string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail        string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId        string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInvoiceAllowanceChargeRequest) Reset() {
	*x = CreateInvoiceAllowanceChargeRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceAllowanceChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceAllowanceChargeRequest) ProtoMessage() {}

func (x *CreateInvoiceAllowanceChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceAllowanceChargeRequest.ProtoReflect.Descriptor instead.
func (*CreateInvoiceAllowanceChargeRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{30}
}

func (x *CreateInvoiceAllowanceChargeRequest) GetLeviedDutyFeeTax() uint32 {
	if x != nil {
		return x.LeviedDutyFeeTax
	}
	return 0
}

func (x *CreateInvoiceAllowanceChargeRequest) GetAllowanceCharge() uint32 {
	if x != nil {
		return x.AllowanceCharge
	}
	return 0
}

func (x *CreateInvoiceAllowanceChargeRequest) GetInvoiceId() uint32 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

func (x *CreateInvoiceAllowanceChargeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInvoiceAllowanceChargeRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInvoiceAllowanceChargeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInvoiceAllowanceChargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceAllowanceCharge *InvoiceAllowanceCharge `protobuf:"bytes,1,opt,name=invoice_allowance_charge,json=invoiceAllowanceCharge,proto3" json:"invoice_allowance_charge,omitempty"`
}

func (x *CreateInvoiceAllowanceChargeResponse) Reset() {
	*x = CreateInvoiceAllowanceChargeResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceAllowanceChargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceAllowanceChargeResponse) ProtoMessage() {}

func (x *CreateInvoiceAllowanceChargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceAllowanceChargeResponse.ProtoReflect.Descriptor instead.
func (*CreateInvoiceAllowanceChargeResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{31}
}

func (x *CreateInvoiceAllowanceChargeResponse) GetInvoiceAllowanceCharge() *InvoiceAllowanceCharge {
	if x != nil {
		return x.InvoiceAllowanceCharge
	}
	return nil
}

type LeviedDutyFeeTax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeviedDutyFeeTaxD *LeviedDutyFeeTaxD `protobuf:"bytes,1,opt,name=levied_duty_fee_tax_d,json=leviedDutyFeeTaxD,proto3" json:"levied_duty_fee_tax_d,omitempty"`
	LeviedDutyFeeTaxT *LeviedDutyFeeTaxT `protobuf:"bytes,2,opt,name=levied_duty_fee_tax_t,json=leviedDutyFeeTaxT,proto3" json:"levied_duty_fee_tax_t,omitempty"`
}

func (x *LeviedDutyFeeTax) Reset() {
	*x = LeviedDutyFeeTax{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeviedDutyFeeTax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeviedDutyFeeTax) ProtoMessage() {}

func (x *LeviedDutyFeeTax) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeviedDutyFeeTax.ProtoReflect.Descriptor instead.
func (*LeviedDutyFeeTax) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{32}
}

func (x *LeviedDutyFeeTax) GetLeviedDutyFeeTaxD() *LeviedDutyFeeTaxD {
	if x != nil {
		return x.LeviedDutyFeeTaxD
	}
	return nil
}

func (x *LeviedDutyFeeTax) GetLeviedDutyFeeTaxT() *LeviedDutyFeeTaxT {
	if x != nil {
		return x.LeviedDutyFeeTaxT
	}
	return nil
}

type LeviedDutyFeeTaxD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                        uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DutyFeeTaxAccountingCurrency              string  `protobuf:"bytes,2,opt,name=duty_fee_tax_accounting_currency,json=dutyFeeTaxAccountingCurrency,proto3" json:"duty_fee_tax_accounting_currency,omitempty"`
	DutyFeeTaxAgencyName                      string  `protobuf:"bytes,3,opt,name=duty_fee_tax_agency_name,json=dutyFeeTaxAgencyName,proto3" json:"duty_fee_tax_agency_name,omitempty"`
	DutyFeeTaxAmount                          float64 `protobuf:"fixed64,4,opt,name=duty_fee_tax_amount,json=dutyFeeTaxAmount,proto3" json:"duty_fee_tax_amount,omitempty"`
	DftaCodeListVersion                       string  `protobuf:"bytes,5,opt,name=dfta_code_list_version,json=dftaCodeListVersion,proto3" json:"dfta_code_list_version,omitempty"`
	DftaCurrencyCode                          string  `protobuf:"bytes,6,opt,name=dfta_currency_code,json=dftaCurrencyCode,proto3" json:"dfta_currency_code,omitempty"`
	DutyFeeTaxAmountInAccountingCurrency      float64 `protobuf:"fixed64,7,opt,name=duty_fee_tax_amount_in_accounting_currency,json=dutyFeeTaxAmountInAccountingCurrency,proto3" json:"duty_fee_tax_amount_in_accounting_currency,omitempty"`
	DftaiacCodeListVersion                    string  `protobuf:"bytes,8,opt,name=dftaiac_code_list_version,json=dftaiacCodeListVersion,proto3" json:"dftaiac_code_list_version,omitempty"`
	DftaiacCurrencyCode                       string  `protobuf:"bytes,9,opt,name=dftaiac_currency_code,json=dftaiacCurrencyCode,proto3" json:"dftaiac_currency_code,omitempty"`
	DutyFeeTaxBasisAmount                     float64 `protobuf:"fixed64,10,opt,name=duty_fee_tax_basis_amount,json=dutyFeeTaxBasisAmount,proto3" json:"duty_fee_tax_basis_amount,omitempty"`
	DftbaCodeListVersion                      string  `protobuf:"bytes,11,opt,name=dftba_code_list_version,json=dftbaCodeListVersion,proto3" json:"dftba_code_list_version,omitempty"`
	DftbaCurrencyCode                         string  `protobuf:"bytes,12,opt,name=dftba_currency_code,json=dftbaCurrencyCode,proto3" json:"dftba_currency_code,omitempty"`
	DutyFeeTaxBasisAmountInAccountingCurrency float64 `protobuf:"fixed64,13,opt,name=duty_fee_tax_basis_amount_in_accounting_currency,json=dutyFeeTaxBasisAmountInAccountingCurrency,proto3" json:"duty_fee_tax_basis_amount_in_accounting_currency,omitempty"`
	DftbaiacCodeListVersion                   string  `protobuf:"bytes,14,opt,name=dftbaiac_code_list_version,json=dftbaiacCodeListVersion,proto3" json:"dftbaiac_code_list_version,omitempty"`
	DftbaiacCurrencyCode                      string  `protobuf:"bytes,15,opt,name=dftbaiac_currency_code,json=dftbaiacCurrencyCode,proto3" json:"dftbaiac_currency_code,omitempty"`
	DutyFeeTaxCategoryCode                    string  `protobuf:"bytes,16,opt,name=duty_fee_tax_category_code,json=dutyFeeTaxCategoryCode,proto3" json:"duty_fee_tax_category_code,omitempty"`
	DutyFeeTaxDescription                     string  `protobuf:"bytes,17,opt,name=duty_fee_tax_description,json=dutyFeeTaxDescription,proto3" json:"duty_fee_tax_description,omitempty"`
	DutyFeeTaxExemptionDescription            string  `protobuf:"bytes,18,opt,name=duty_fee_tax_exemption_description,json=dutyFeeTaxExemptionDescription,proto3" json:"duty_fee_tax_exemption_description,omitempty"`
	DutyFeeTaxExemptionReason                 string  `protobuf:"bytes,19,opt,name=duty_fee_tax_exemption_reason,json=dutyFeeTaxExemptionReason,proto3" json:"duty_fee_tax_exemption_reason,omitempty"`
	DutyFeeTaxPercentage                      float64 `protobuf:"fixed64,20,opt,name=duty_fee_tax_percentage,json=dutyFeeTaxPercentage,proto3" json:"duty_fee_tax_percentage,omitempty"`
	DutyFeeTaxTypeCode                        string  `protobuf:"bytes,21,opt,name=duty_fee_tax_type_code,json=dutyFeeTaxTypeCode,proto3" json:"duty_fee_tax_type_code,omitempty"`
	Extension                                 string  `protobuf:"bytes,22,opt,name=extension,proto3" json:"extension,omitempty"`
	OrderLineItemId                           uint32  `protobuf:"varint,23,opt,name=order_line_item_id,json=orderLineItemId,proto3" json:"order_line_item_id,omitempty"`
	InvoiceLineItemId                         uint32  `protobuf:"varint,24,opt,name=invoice_line_item_id,json=invoiceLineItemId,proto3" json:"invoice_line_item_id,omitempty"`
	InvoiceId                                 uint32  `protobuf:"varint,25,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (x *LeviedDutyFeeTaxD) Reset() {
	*x = LeviedDutyFeeTaxD{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeviedDutyFeeTaxD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeviedDutyFeeTaxD) ProtoMessage() {}

func (x *LeviedDutyFeeTaxD) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeviedDutyFeeTaxD.ProtoReflect.Descriptor instead.
func (*LeviedDutyFeeTaxD) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{33}
}

func (x *LeviedDutyFeeTaxD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxAccountingCurrency() string {
	if x != nil {
		return x.DutyFeeTaxAccountingCurrency
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxAgencyName() string {
	if x != nil {
		return x.DutyFeeTaxAgencyName
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxAmount() float64 {
	if x != nil {
		return x.DutyFeeTaxAmount
	}
	return 0
}

func (x *LeviedDutyFeeTaxD) GetDftaCodeListVersion() string {
	if x != nil {
		return x.DftaCodeListVersion
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDftaCurrencyCode() string {
	if x != nil {
		return x.DftaCurrencyCode
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxAmountInAccountingCurrency() float64 {
	if x != nil {
		return x.DutyFeeTaxAmountInAccountingCurrency
	}
	return 0
}

func (x *LeviedDutyFeeTaxD) GetDftaiacCodeListVersion() string {
	if x != nil {
		return x.DftaiacCodeListVersion
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDftaiacCurrencyCode() string {
	if x != nil {
		return x.DftaiacCurrencyCode
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxBasisAmount() float64 {
	if x != nil {
		return x.DutyFeeTaxBasisAmount
	}
	return 0
}

func (x *LeviedDutyFeeTaxD) GetDftbaCodeListVersion() string {
	if x != nil {
		return x.DftbaCodeListVersion
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDftbaCurrencyCode() string {
	if x != nil {
		return x.DftbaCurrencyCode
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxBasisAmountInAccountingCurrency() float64 {
	if x != nil {
		return x.DutyFeeTaxBasisAmountInAccountingCurrency
	}
	return 0
}

func (x *LeviedDutyFeeTaxD) GetDftbaiacCodeListVersion() string {
	if x != nil {
		return x.DftbaiacCodeListVersion
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDftbaiacCurrencyCode() string {
	if x != nil {
		return x.DftbaiacCurrencyCode
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxCategoryCode() string {
	if x != nil {
		return x.DutyFeeTaxCategoryCode
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxDescription() string {
	if x != nil {
		return x.DutyFeeTaxDescription
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxExemptionDescription() string {
	if x != nil {
		return x.DutyFeeTaxExemptionDescription
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxExemptionReason() string {
	if x != nil {
		return x.DutyFeeTaxExemptionReason
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxPercentage() float64 {
	if x != nil {
		return x.DutyFeeTaxPercentage
	}
	return 0
}

func (x *LeviedDutyFeeTaxD) GetDutyFeeTaxTypeCode() string {
	if x != nil {
		return x.DutyFeeTaxTypeCode
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *LeviedDutyFeeTaxD) GetOrderLineItemId() uint32 {
	if x != nil {
		return x.OrderLineItemId
	}
	return 0
}

func (x *LeviedDutyFeeTaxD) GetInvoiceLineItemId() uint32 {
	if x != nil {
		return x.InvoiceLineItemId
	}
	return 0
}

func (x *LeviedDutyFeeTaxD) GetInvoiceId() uint32 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

type LeviedDutyFeeTaxT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DutyFeeTaxPointDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=duty_fee_tax_point_date,json=dutyFeeTaxPointDate,proto3" json:"duty_fee_tax_point_date,omitempty"`
}

func (x *LeviedDutyFeeTaxT) Reset() {
	*x = LeviedDutyFeeTaxT{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeviedDutyFeeTaxT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeviedDutyFeeTaxT) ProtoMessage() {}

func (x *LeviedDutyFeeTaxT) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeviedDutyFeeTaxT.ProtoReflect.Descriptor instead.
func (*LeviedDutyFeeTaxT) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{34}
}

func (x *LeviedDutyFeeTaxT) GetDutyFeeTaxPointDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DutyFeeTaxPointDate
	}
	return nil
}

type CreateLeviedDutyFeeTaxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DutyFeeTaxAccountingCurrency              string  `protobuf:"bytes,1,opt,name=duty_fee_tax_accounting_currency,json=dutyFeeTaxAccountingCurrency,proto3" json:"duty_fee_tax_accounting_currency,omitempty"`
	DutyFeeTaxAgencyName                      string  `protobuf:"bytes,2,opt,name=duty_fee_tax_agency_name,json=dutyFeeTaxAgencyName,proto3" json:"duty_fee_tax_agency_name,omitempty"`
	DutyFeeTaxAmount                          float64 `protobuf:"fixed64,3,opt,name=duty_fee_tax_amount,json=dutyFeeTaxAmount,proto3" json:"duty_fee_tax_amount,omitempty"`
	DftaCodeListVersion                       string  `protobuf:"bytes,4,opt,name=dfta_code_list_version,json=dftaCodeListVersion,proto3" json:"dfta_code_list_version,omitempty"`
	DftaCurrencyCode                          string  `protobuf:"bytes,5,opt,name=dfta_currency_code,json=dftaCurrencyCode,proto3" json:"dfta_currency_code,omitempty"`
	DutyFeeTaxAmountInAccountingCurrency      float64 `protobuf:"fixed64,6,opt,name=duty_fee_tax_amount_in_accounting_currency,json=dutyFeeTaxAmountInAccountingCurrency,proto3" json:"duty_fee_tax_amount_in_accounting_currency,omitempty"`
	DftaiacCodeListVersion                    string  `protobuf:"bytes,7,opt,name=dftaiac_code_list_version,json=dftaiacCodeListVersion,proto3" json:"dftaiac_code_list_version,omitempty"`
	DftaiacCurrencyCode                       string  `protobuf:"bytes,8,opt,name=dftaiac_currency_code,json=dftaiacCurrencyCode,proto3" json:"dftaiac_currency_code,omitempty"`
	DutyFeeTaxBasisAmount                     float64 `protobuf:"fixed64,9,opt,name=duty_fee_tax_basis_amount,json=dutyFeeTaxBasisAmount,proto3" json:"duty_fee_tax_basis_amount,omitempty"`
	DftbaCodeListVersion                      string  `protobuf:"bytes,10,opt,name=dftba_code_list_version,json=dftbaCodeListVersion,proto3" json:"dftba_code_list_version,omitempty"`
	DftbaCurrencyCode                         string  `protobuf:"bytes,11,opt,name=dftba_currency_code,json=dftbaCurrencyCode,proto3" json:"dftba_currency_code,omitempty"`
	DutyFeeTaxBasisAmountInAccountingCurrency float64 `protobuf:"fixed64,12,opt,name=duty_fee_tax_basis_amount_in_accounting_currency,json=dutyFeeTaxBasisAmountInAccountingCurrency,proto3" json:"duty_fee_tax_basis_amount_in_accounting_currency,omitempty"`
	DftbaiacCodeListVersion                   string  `protobuf:"bytes,13,opt,name=dftbaiac_code_list_version,json=dftbaiacCodeListVersion,proto3" json:"dftbaiac_code_list_version,omitempty"`
	DftbaiacCurrencyCode                      string  `protobuf:"bytes,14,opt,name=dftbaiac_currency_code,json=dftbaiacCurrencyCode,proto3" json:"dftbaiac_currency_code,omitempty"`
	DutyFeeTaxCategoryCode                    string  `protobuf:"bytes,15,opt,name=duty_fee_tax_category_code,json=dutyFeeTaxCategoryCode,proto3" json:"duty_fee_tax_category_code,omitempty"`
	DutyFeeTaxDescription                     string  `protobuf:"bytes,16,opt,name=duty_fee_tax_description,json=dutyFeeTaxDescription,proto3" json:"duty_fee_tax_description,omitempty"`
	DutyFeeTaxExemptionDescription            string  `protobuf:"bytes,17,opt,name=duty_fee_tax_exemption_description,json=dutyFeeTaxExemptionDescription,proto3" json:"duty_fee_tax_exemption_description,omitempty"`
	DutyFeeTaxExemptionReason                 string  `protobuf:"bytes,18,opt,name=duty_fee_tax_exemption_reason,json=dutyFeeTaxExemptionReason,proto3" json:"duty_fee_tax_exemption_reason,omitempty"`
	DutyFeeTaxPercentage                      float64 `protobuf:"fixed64,19,opt,name=duty_fee_tax_percentage,json=dutyFeeTaxPercentage,proto3" json:"duty_fee_tax_percentage,omitempty"`
	DutyFeeTaxTypeCode                        string  `protobuf:"bytes,20,opt,name=duty_fee_tax_type_code,json=dutyFeeTaxTypeCode,proto3" json:"duty_fee_tax_type_code,omitempty"`
	Extension                                 string  `protobuf:"bytes,21,opt,name=extension,proto3" json:"extension,omitempty"`
	OrderLineItemId                           uint32  `protobuf:"varint,22,opt,name=order_line_item_id,json=orderLineItemId,proto3" json:"order_line_item_id,omitempty"`
	InvoiceLineItemId                         uint32  `protobuf:"varint,23,opt,name=invoice_line_item_id,json=invoiceLineItemId,proto3" json:"invoice_line_item_id,omitempty"`
	InvoiceId                                 uint32  `protobuf:"varint,24,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	DutyFeeTaxPointDate                       string  `protobuf:"bytes,25,opt,name=duty_fee_tax_point_date,json=dutyFeeTaxPointDate,proto3" json:"duty_fee_tax_point_date,omitempty"`
	UserId                                    string  `protobuf:"bytes,26,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                 string  `protobuf:"bytes,27,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                 string  `protobuf:"bytes,28,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateLeviedDutyFeeTaxRequest) Reset() {
	*x = CreateLeviedDutyFeeTaxRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLeviedDutyFeeTaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLeviedDutyFeeTaxRequest) ProtoMessage() {}

func (x *CreateLeviedDutyFeeTaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLeviedDutyFeeTaxRequest.ProtoReflect.Descriptor instead.
func (*CreateLeviedDutyFeeTaxRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{35}
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxAccountingCurrency() string {
	if x != nil {
		return x.DutyFeeTaxAccountingCurrency
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxAgencyName() string {
	if x != nil {
		return x.DutyFeeTaxAgencyName
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxAmount() float64 {
	if x != nil {
		return x.DutyFeeTaxAmount
	}
	return 0
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDftaCodeListVersion() string {
	if x != nil {
		return x.DftaCodeListVersion
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDftaCurrencyCode() string {
	if x != nil {
		return x.DftaCurrencyCode
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxAmountInAccountingCurrency() float64 {
	if x != nil {
		return x.DutyFeeTaxAmountInAccountingCurrency
	}
	return 0
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDftaiacCodeListVersion() string {
	if x != nil {
		return x.DftaiacCodeListVersion
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDftaiacCurrencyCode() string {
	if x != nil {
		return x.DftaiacCurrencyCode
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxBasisAmount() float64 {
	if x != nil {
		return x.DutyFeeTaxBasisAmount
	}
	return 0
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDftbaCodeListVersion() string {
	if x != nil {
		return x.DftbaCodeListVersion
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDftbaCurrencyCode() string {
	if x != nil {
		return x.DftbaCurrencyCode
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxBasisAmountInAccountingCurrency() float64 {
	if x != nil {
		return x.DutyFeeTaxBasisAmountInAccountingCurrency
	}
	return 0
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDftbaiacCodeListVersion() string {
	if x != nil {
		return x.DftbaiacCodeListVersion
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDftbaiacCurrencyCode() string {
	if x != nil {
		return x.DftbaiacCurrencyCode
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxCategoryCode() string {
	if x != nil {
		return x.DutyFeeTaxCategoryCode
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxDescription() string {
	if x != nil {
		return x.DutyFeeTaxDescription
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxExemptionDescription() string {
	if x != nil {
		return x.DutyFeeTaxExemptionDescription
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxExemptionReason() string {
	if x != nil {
		return x.DutyFeeTaxExemptionReason
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxPercentage() float64 {
	if x != nil {
		return x.DutyFeeTaxPercentage
	}
	return 0
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxTypeCode() string {
	if x != nil {
		return x.DutyFeeTaxTypeCode
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetOrderLineItemId() uint32 {
	if x != nil {
		return x.OrderLineItemId
	}
	return 0
}

func (x *CreateLeviedDutyFeeTaxRequest) GetInvoiceLineItemId() uint32 {
	if x != nil {
		return x.InvoiceLineItemId
	}
	return 0
}

func (x *CreateLeviedDutyFeeTaxRequest) GetInvoiceId() uint32 {
	if x != nil {
		return x.InvoiceId
	}
	return 0
}

func (x *CreateLeviedDutyFeeTaxRequest) GetDutyFeeTaxPointDate() string {
	if x != nil {
		return x.DutyFeeTaxPointDate
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateLeviedDutyFeeTaxRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateLeviedDutyFeeTaxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeviedDutyFeeTax *LeviedDutyFeeTax `protobuf:"bytes,1,opt,name=levied_duty_fee_tax,json=leviedDutyFeeTax,proto3" json:"levied_duty_fee_tax,omitempty"`
}

func (x *CreateLeviedDutyFeeTaxResponse) Reset() {
	*x = CreateLeviedDutyFeeTaxResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLeviedDutyFeeTaxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLeviedDutyFeeTaxResponse) ProtoMessage() {}

func (x *CreateLeviedDutyFeeTaxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLeviedDutyFeeTaxResponse.ProtoReflect.Descriptor instead.
func (*CreateLeviedDutyFeeTaxResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{36}
}

func (x *CreateLeviedDutyFeeTaxResponse) GetLeviedDutyFeeTax() *LeviedDutyFeeTax {
	if x != nil {
		return x.LeviedDutyFeeTax
	}
	return nil
}

var File_invoice_v1_invoice_proto protoreflect.FileDescriptor

var file_invoice_v1_invoice_proto_rawDesc = []byte{
	0x0a, 0x18, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdb, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x44, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x12, 0x31,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa3, 0x0d,
	0x0a, 0x08, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x53, 0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x66, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x66, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x14, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x42, 0x75, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x45, 0x75, 0x12, 0x3b,
	0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x45, 0x75, 0x12, 0x3e, 0x0a, 0x1b, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x6c, 0x61, 0x6e, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x74, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70,
	0x54, 0x6f, 0x12, 0x42, 0x0a, 0x1d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x61, 0x78, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12,
	0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x61, 0x78, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x12, 0x4c, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x50,
	0x0a, 0x16, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x4c, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0xbf,
	0x0f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x66, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x42, 0x75, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64, 0x49, 0x6e,
	0x45, 0x75, 0x12, 0x3b, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x65,
	0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x45, 0x75, 0x12,
	0x3e, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x68, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x74, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f,
	0x12, 0x42, 0x0a, 0x1d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x74, 0x61, 0x78, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x61, 0x78, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x2f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x46, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x67,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xb8, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x66, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x0f,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x4b, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x4b, 0x0a, 0x13,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xab, 0x19, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x53, 0x12, 0x4d, 0x0a, 0x23, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x65, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x61, 0x65, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x65, 0x61, 0x63, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x65, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x23, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x69, 0x61,
	0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x37, 0x0a, 0x18, 0x64, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x64, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x71, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x28, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x72,
	0x65, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x39, 0x0a, 0x19, 0x66, 0x67, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x66, 0x67, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x67,
	0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x67, 0x71, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x71,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x71,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a,
	0x1a, 0x69, 0x70, 0x62, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x69, 0x70, 0x62, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x70,
	0x62, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x62, 0x71,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x27, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x23, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x70, 0x65, 0x61, 0x63, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x70, 0x65, 0x61, 0x63, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x70, 0x65, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x70, 0x65, 0x61, 0x63,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x27,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x23, 0x69,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x70, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x70, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x70, 0x69,
	0x61, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x70, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x6c, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x66, 0x72, 0x70, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x66, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x66, 0x72, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x66, 0x72, 0x70, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x1a, 0x6f, 0x77, 0x65, 0x6e, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x77, 0x65, 0x6e, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x54, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x72, 0x72, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x72,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x72, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x72, 0x70,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x1d,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x63, 0x69, 0x73, 0x65, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1a, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x16, 0x72, 0x70, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x72, 0x70, 0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x70, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x70, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x71, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x6f, 0x71,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x61, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x1f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x57, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x66, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x68, 0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x64, 0x0a, 0x21, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x22,
	0xdc, 0x1b, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4d, 0x0a, 0x23, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x61, 0x65, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x61, 0x65, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x65, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x65, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4d, 0x0a, 0x23, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x61, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18,
	0x64, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x64, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x72, 0x65, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x19,
	0x66, 0x67, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x66, 0x67, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x67, 0x71, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x67, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x71, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x71, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x69, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x69, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x70,
	0x62, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x69, 0x70, 0x62, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x70, 0x62, 0x71, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x62, 0x71, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x27,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x23, 0x69,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x70, 0x65, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x70, 0x65, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x70, 0x65,
	0x61, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x70, 0x65, 0x61, 0x63, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x27, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x23, 0x69, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x69, 0x70, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x70, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x70, 0x69, 0x61, 0x63, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x70, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x6c,
	0x79, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x6c, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x66, 0x72, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x66, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x66, 0x72, 0x70,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x66, 0x72, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a,
	0x6f, 0x77, 0x65, 0x6e, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x6f, 0x77, 0x65, 0x6e, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x54, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x72,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x72, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x72, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x72, 0x70, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x63, 0x69, 0x73, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1a, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x72, 0x70, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x70,
	0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x70, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x70, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x71, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x6f, 0x71, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x6f, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x66, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x6f,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x15,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x1f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x48, 0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68,
	0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74,
	0x6f, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x68,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x54, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x68,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x12,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x12, 0x41, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x22, 0xf4,
	0x13, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x62, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x74, 0x61, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x27, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x23, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74,
	0x61, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x61, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x6c, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x61, 0x6c, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61,
	0x6c, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x6c, 0x61, 0x63, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x74, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x76,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x65, 0x76, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x76, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x67, 0x76, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x67, 0x76, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x67,
	0x76, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x67, 0x76, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x69, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x69, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x69, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x69, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x69, 0x61, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x69, 0x61, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x69, 0x61, 0x70, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x2e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x29, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x74, 0x6c, 0x61, 0x65, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x74, 0x6c, 0x61, 0x65, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6c, 0x61, 0x65, 0x61,
	0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6c, 0x61, 0x65, 0x61, 0x63, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x2e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x29, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x74, 0x6c, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x74, 0x6c, 0x61, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6c, 0x61, 0x69, 0x61, 0x63, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6c, 0x61, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x70, 0x64, 0x62, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x70, 0x64, 0x62, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x70, 0x64, 0x62, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x70, 0x64, 0x62, 0x61,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x72,
	0x76, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x76, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x72, 0x76, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x76, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x74, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x74, 0x61, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x74, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x42, 0x61, 0x73, 0x69,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x74, 0x62, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x74, 0x62, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x74, 0x62, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x74, 0x62, 0x61, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x76, 0x5f, 0x61, 0x5f, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x41, 0x54,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x76, 0x61, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x76, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x76, 0x61,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x76, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x12, 0x4a, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xf7, 0x14, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x62, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x74, 0x61, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x27, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x23, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74,
	0x61, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x61, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x6c, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x61, 0x6c, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61,
	0x6c, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x6c, 0x61, 0x63, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x74, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x76,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x65, 0x76, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x76, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x67, 0x76, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x67, 0x76, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x67,
	0x76, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x67, 0x76, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x69, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x69, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x69, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x69, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x69, 0x61, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x69, 0x61, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x69, 0x61, 0x70, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x2e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x29, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x74, 0x6c, 0x61, 0x65, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x74, 0x6c, 0x61, 0x65, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6c, 0x61, 0x65, 0x61,
	0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6c, 0x61, 0x65, 0x61, 0x63, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x2e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x29, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x74, 0x6c, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x74, 0x6c, 0x61, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6c, 0x61, 0x69, 0x61, 0x63, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6c, 0x61, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x70, 0x64, 0x62, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x70, 0x64, 0x62, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x70, 0x64, 0x62, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x70, 0x64, 0x62, 0x61,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x72,
	0x76, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x76, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x72, 0x76, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x76, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x74, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x74, 0x61, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x74, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x42, 0x61, 0x73, 0x69,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x74, 0x62, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x74, 0x62, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x74, 0x62, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x74, 0x62, 0x61, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x76, 0x5f, 0x61, 0x5f, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x41, 0x54,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x76, 0x61, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x76, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x76, 0x61,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x76, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x0c, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xea, 0x03, 0x0a, 0x24, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x61, 0x78,
	0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x4d, 0x0a, 0x23, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x65, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x61, 0x65, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x65, 0x61, 0x63, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x65, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x23, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x69, 0x61, 0x63,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xbe, 0x04, 0x0a, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x23,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61,
	0x65, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x65, 0x61,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x65, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x65,
	0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d,
	0x0a, 0x23, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61,
	0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x32, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x54, 0x61, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89,
	0x01, 0x0a, 0x29, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x78, 0x65, 0x73, 0x52, 0x24, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x61, 0x78, 0x65, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x16, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x5f,
	0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x54, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xf5,
	0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x69, 0x65, 0x64,
	0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x54, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x18, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0xb4, 0x01,
	0x0a, 0x10, 0x4c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54,
	0x61, 0x78, 0x12, 0x4f, 0x0a, 0x15, 0x6c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x74,
	0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x44,
	0x52, 0x11, 0x6c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54,
	0x61, 0x78, 0x44, 0x12, 0x4f, 0x0a, 0x15, 0x6c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x75,
	0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78,
	0x54, 0x52, 0x11, 0x6c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x54, 0x61, 0x78, 0x54, 0x22, 0x80, 0x0b, 0x0a, 0x11, 0x4c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44,
	0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x75,
	0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78,
	0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x75,
	0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x66, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x66, 0x74, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x66, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x66, 0x74, 0x61,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x2a,
	0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x24, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x66, 0x74, 0x61, 0x69, 0x61,
	0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x66, 0x74, 0x61, 0x69,
	0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x66, 0x74, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x66, 0x74, 0x61, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x54, 0x61, 0x78, 0x42, 0x61, 0x73, 0x69, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x17, 0x64, 0x66, 0x74, 0x62, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x64, 0x66, 0x74, 0x62, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x66, 0x74, 0x62, 0x61, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x66, 0x74, 0x62, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x30, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x29, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x42, 0x61, 0x73, 0x69,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x64,
	0x66, 0x74, 0x62, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x64, 0x66, 0x74, 0x62, 0x61, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x66, 0x74, 0x62,
	0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x66, 0x74, 0x62, 0x61, 0x69,
	0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x1a, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x75,
	0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x75,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1e, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x45, 0x78, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x1d, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54,
	0x61, 0x78, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61,
	0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x64, 0x75, 0x74, 0x79,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x54, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x11, 0x4c, 0x65, 0x76, 0x69, 0x65,
	0x64, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x54, 0x12, 0x50, 0x0a, 0x17,
	0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x64, 0x75, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x54, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x89,
	0x0c, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44,
	0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x20, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x64, 0x75, 0x74, 0x79,
	0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x75, 0x74, 0x79,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x75, 0x74, 0x79,
	0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64,
	0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x64, 0x66, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x64, 0x66, 0x74, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x66, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x66, 0x74, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x58, 0x0a, 0x2a, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x24, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54,
	0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x19,
	0x64, 0x66, 0x74, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x64, 0x66, 0x74, 0x61, 0x69, 0x61, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x66, 0x74, 0x61, 0x69,
	0x61, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x66, 0x74, 0x61, 0x69, 0x61, 0x63, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x64,
	0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x73, 0x69,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x42, 0x61, 0x73, 0x69, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x66, 0x74, 0x62, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x66, 0x74, 0x62, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x64, 0x66, 0x74, 0x62, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x66, 0x74, 0x62, 0x61,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x30,
	0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x73,
	0x69, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x29, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54,
	0x61, 0x78, 0x42, 0x61, 0x73, 0x69, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x66, 0x74, 0x62, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x66, 0x74, 0x62, 0x61, 0x69, 0x61, 0x63, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x16, 0x64, 0x66, 0x74, 0x62, 0x61, 0x69, 0x61, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x64, 0x66, 0x74, 0x62, 0x61, 0x69, 0x61, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x54, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x37, 0x0a, 0x18, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x75, 0x74,
	0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61,
	0x78, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x75,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x75, 0x74, 0x79, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x54, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x16, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x17, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x54, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x13,
	0x6c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x74, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52, 0x10, 0x6c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44,
	0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x32, 0x90, 0x09, 0x0a, 0x0e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50,
	0x6b, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x78, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x61, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x61, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x54, 0x61, 0x78, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44,
	0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x69, 0x65, 0x64, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x54, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x67, 0x73, 0x31, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_invoice_v1_invoice_proto_rawDescOnce sync.Once
	file_invoice_v1_invoice_proto_rawDescData = file_invoice_v1_invoice_proto_rawDesc
)

func file_invoice_v1_invoice_proto_rawDescGZIP() []byte {
	file_invoice_v1_invoice_proto_rawDescOnce.Do(func() {
		file_invoice_v1_invoice_proto_rawDescData = protoimpl.X.CompressGZIP(file_invoice_v1_invoice_proto_rawDescData)
	})
	return file_invoice_v1_invoice_proto_rawDescData
}

var file_invoice_v1_invoice_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_invoice_v1_invoice_proto_goTypes = []any{
	(*Invoice)(nil),                                            // 0: invoice.v1.Invoice
	(*InvoiceD)(nil),                                           // 1: invoice.v1.InvoiceD
	(*InvoiceT)(nil),                                           // 2: invoice.v1.InvoiceT
	(*CreateInvoiceRequest)(nil),                               // 3: invoice.v1.CreateInvoiceRequest
	(*CreateInvoiceResponse)(nil),                              // 4: invoice.v1.CreateInvoiceResponse
	(*GetInvoiceRequest)(nil),                                  // 5: invoice.v1.GetInvoiceRequest
	(*GetInvoiceResponse)(nil),                                 // 6: invoice.v1.GetInvoiceResponse
	(*GetInvoiceByPkRequest)(nil),                              // 7: invoice.v1.GetInvoiceByPkRequest
	(*GetInvoiceByPkResponse)(nil),                             // 8: invoice.v1.GetInvoiceByPkResponse
	(*GetInvoicesRequest)(nil),                                 // 9: invoice.v1.GetInvoicesRequest
	(*GetInvoicesResponse)(nil),                                // 10: invoice.v1.GetInvoicesResponse
	(*UpdateInvoiceRequest)(nil),                               // 11: invoice.v1.UpdateInvoiceRequest
	(*UpdateInvoiceResponse)(nil),                              // 12: invoice.v1.UpdateInvoiceResponse
	(*InvoiceLineItem)(nil),                                    // 13: invoice.v1.InvoiceLineItem
	(*InvoiceLineItemD)(nil),                                   // 14: invoice.v1.InvoiceLineItemD
	(*InvoiceLineItemT)(nil),                                   // 15: invoice.v1.InvoiceLineItemT
	(*CreateInvoiceLineItemRequest)(nil),                       // 16: invoice.v1.CreateInvoiceLineItemRequest
	(*CreateInvoiceLineItemResponse)(nil),                      // 17: invoice.v1.CreateInvoiceLineItemResponse
	(*GetInvoiceLineItemsRequest)(nil),                         // 18: invoice.v1.GetInvoiceLineItemsRequest
	(*GetInvoiceLineItemsResponse)(nil),                        // 19: invoice.v1.GetInvoiceLineItemsResponse
	(*InvoiceLineItems)(nil),                                   // 20: invoice.v1.InvoiceLineItems
	(*InvoiceTotal)(nil),                                       // 21: invoice.v1.InvoiceTotal
	(*InvoiceTotalD)(nil),                                      // 22: invoice.v1.InvoiceTotalD
	(*InvoiceTotalT)(nil),                                      // 23: invoice.v1.InvoiceTotalT
	(*CreateInvoiceTotalRequest)(nil),                          // 24: invoice.v1.CreateInvoiceTotalRequest
	(*CreateInvoiceTotalResponse)(nil),                         // 25: invoice.v1.CreateInvoiceTotalResponse
	(*InvoiceLineItemInformationAfterTaxes)(nil),               // 26: invoice.v1.InvoiceLineItemInformationAfterTaxes
	(*CreateInvoiceLineItemInformationAfterTaxesRequest)(nil),  // 27: invoice.v1.CreateInvoiceLineItemInformationAfterTaxesRequest
	(*CreateInvoiceLineItemInformationAfterTaxesResponse)(nil), // 28: invoice.v1.CreateInvoiceLineItemInformationAfterTaxesResponse
	(*InvoiceAllowanceCharge)(nil),                             // 29: invoice.v1.InvoiceAllowanceCharge
	(*CreateInvoiceAllowanceChargeRequest)(nil),                // 30: invoice.v1.CreateInvoiceAllowanceChargeRequest
	(*CreateInvoiceAllowanceChargeResponse)(nil),               // 31: invoice.v1.CreateInvoiceAllowanceChargeResponse
	(*LeviedDutyFeeTax)(nil),                                   // 32: invoice.v1.LeviedDutyFeeTax
	(*LeviedDutyFeeTaxD)(nil),                                  // 33: invoice.v1.LeviedDutyFeeTaxD
	(*LeviedDutyFeeTaxT)(nil),                                  // 34: invoice.v1.LeviedDutyFeeTaxT
	(*CreateLeviedDutyFeeTaxRequest)(nil),                      // 35: invoice.v1.CreateLeviedDutyFeeTaxRequest
	(*CreateLeviedDutyFeeTaxResponse)(nil),                     // 36: invoice.v1.CreateLeviedDutyFeeTaxResponse
	(*v1.CrUpdUser)(nil),                                       // 37: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                       // 38: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),                              // 39: google.protobuf.Timestamp
	(*v1.GetRequest)(nil),                                      // 40: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                                  // 41: common.v1.GetByIdRequest
}
var file_invoice_v1_invoice_proto_depIdxs = []int32{
	1,  // 0: invoice.v1.Invoice.invoice_d:type_name -> invoice.v1.InvoiceD
	2,  // 1: invoice.v1.Invoice.invoice_t:type_name -> invoice.v1.InvoiceT
	37, // 2: invoice.v1.Invoice.cr_upd_user:type_name -> common.v1.CrUpdUser
	38, // 3: invoice.v1.Invoice.cr_upd_time:type_name -> common.v1.CrUpdTime
	39, // 4: invoice.v1.InvoiceT.actual_delivery_date:type_name -> google.protobuf.Timestamp
	39, // 5: invoice.v1.InvoiceT.invoicing_period_begin:type_name -> google.protobuf.Timestamp
	39, // 6: invoice.v1.InvoiceT.invoicing_period_end:type_name -> google.protobuf.Timestamp
	16, // 7: invoice.v1.CreateInvoiceRequest.invoice_line_items:type_name -> invoice.v1.CreateInvoiceLineItemRequest
	0,  // 8: invoice.v1.CreateInvoiceResponse.invoice:type_name -> invoice.v1.Invoice
	40, // 9: invoice.v1.GetInvoiceRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 10: invoice.v1.GetInvoiceResponse.invoice:type_name -> invoice.v1.Invoice
	41, // 11: invoice.v1.GetInvoiceByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 12: invoice.v1.GetInvoiceByPkResponse.invoice:type_name -> invoice.v1.Invoice
	0,  // 13: invoice.v1.GetInvoicesResponse.invoices:type_name -> invoice.v1.Invoice
	14, // 14: invoice.v1.InvoiceLineItem.invoice_line_item_d:type_name -> invoice.v1.InvoiceLineItemD
	15, // 15: invoice.v1.InvoiceLineItem.invoice_line_item_t:type_name -> invoice.v1.InvoiceLineItemT
	37, // 16: invoice.v1.InvoiceLineItem.cr_upd_user:type_name -> common.v1.CrUpdUser
	38, // 17: invoice.v1.InvoiceLineItem.cr_upd_time:type_name -> common.v1.CrUpdTime
	39, // 18: invoice.v1.InvoiceLineItemT.transfer_of_ownership_date:type_name -> google.protobuf.Timestamp
	39, // 19: invoice.v1.InvoiceLineItemT.actual_delivery_date:type_name -> google.protobuf.Timestamp
	39, // 20: invoice.v1.InvoiceLineItemT.servicetime_period_line_level_begin:type_name -> google.protobuf.Timestamp
	39, // 21: invoice.v1.InvoiceLineItemT.servicetime_period_line_level_end:type_name -> google.protobuf.Timestamp
	13, // 22: invoice.v1.CreateInvoiceLineItemResponse.invoice_line_item:type_name -> invoice.v1.InvoiceLineItem
	40, // 23: invoice.v1.GetInvoiceLineItemsRequest.get_request:type_name -> common.v1.GetRequest
	13, // 24: invoice.v1.GetInvoiceLineItemsResponse.invoice_line_items:type_name -> invoice.v1.InvoiceLineItem
	13, // 25: invoice.v1.InvoiceLineItems.invoice_line_items:type_name -> invoice.v1.InvoiceLineItem
	22, // 26: invoice.v1.InvoiceTotal.invoice_total_d:type_name -> invoice.v1.InvoiceTotalD
	23, // 27: invoice.v1.InvoiceTotal.invoice_total_t:type_name -> invoice.v1.InvoiceTotalT
	39, // 28: invoice.v1.InvoiceTotalT.prepaid_amount_date:type_name -> google.protobuf.Timestamp
	21, // 29: invoice.v1.CreateInvoiceTotalResponse.invoice_total:type_name -> invoice.v1.InvoiceTotal
	26, // 30: invoice.v1.CreateInvoiceLineItemInformationAfterTaxesResponse.invoice_line_item_information_after_taxes:type_name -> invoice.v1.InvoiceLineItemInformationAfterTaxes
	29, // 31: invoice.v1.CreateInvoiceAllowanceChargeResponse.invoice_allowance_charge:type_name -> invoice.v1.InvoiceAllowanceCharge
	33, // 32: invoice.v1.LeviedDutyFeeTax.levied_duty_fee_tax_d:type_name -> invoice.v1.LeviedDutyFeeTaxD
	34, // 33: invoice.v1.LeviedDutyFeeTax.levied_duty_fee_tax_t:type_name -> invoice.v1.LeviedDutyFeeTaxT
	39, // 34: invoice.v1.LeviedDutyFeeTaxT.duty_fee_tax_point_date:type_name -> google.protobuf.Timestamp
	32, // 35: invoice.v1.CreateLeviedDutyFeeTaxResponse.levied_duty_fee_tax:type_name -> invoice.v1.LeviedDutyFeeTax
	3,  // 36: invoice.v1.InvoiceService.CreateInvoice:input_type -> invoice.v1.CreateInvoiceRequest
	9,  // 37: invoice.v1.InvoiceService.GetInvoices:input_type -> invoice.v1.GetInvoicesRequest
	5,  // 38: invoice.v1.InvoiceService.GetInvoice:input_type -> invoice.v1.GetInvoiceRequest
	7,  // 39: invoice.v1.InvoiceService.GetInvoiceByPk:input_type -> invoice.v1.GetInvoiceByPkRequest
	11, // 40: invoice.v1.InvoiceService.UpdateInvoice:input_type -> invoice.v1.UpdateInvoiceRequest
	16, // 41: invoice.v1.InvoiceService.CreateInvoiceLineItem:input_type -> invoice.v1.CreateInvoiceLineItemRequest
	18, // 42: invoice.v1.InvoiceService.GetInvoiceLineItems:input_type -> invoice.v1.GetInvoiceLineItemsRequest
	27, // 43: invoice.v1.InvoiceService.CreateInvoiceLineItemInformationAfterTaxes:input_type -> invoice.v1.CreateInvoiceLineItemInformationAfterTaxesRequest
	24, // 44: invoice.v1.InvoiceService.CreateInvoiceTotal:input_type -> invoice.v1.CreateInvoiceTotalRequest
	30, // 45: invoice.v1.InvoiceService.CreateInvoiceAllowanceCharge:input_type -> invoice.v1.CreateInvoiceAllowanceChargeRequest
	35, // 46: invoice.v1.InvoiceService.CreateLeviedDutyFeeTax:input_type -> invoice.v1.CreateLeviedDutyFeeTaxRequest
	4,  // 47: invoice.v1.InvoiceService.CreateInvoice:output_type -> invoice.v1.CreateInvoiceResponse
	10, // 48: invoice.v1.InvoiceService.GetInvoices:output_type -> invoice.v1.GetInvoicesResponse
	6,  // 49: invoice.v1.InvoiceService.GetInvoice:output_type -> invoice.v1.GetInvoiceResponse
	8,  // 50: invoice.v1.InvoiceService.GetInvoiceByPk:output_type -> invoice.v1.GetInvoiceByPkResponse
	12, // 51: invoice.v1.InvoiceService.UpdateInvoice:output_type -> invoice.v1.UpdateInvoiceResponse
	17, // 52: invoice.v1.InvoiceService.CreateInvoiceLineItem:output_type -> invoice.v1.CreateInvoiceLineItemResponse
	19, // 53: invoice.v1.InvoiceService.GetInvoiceLineItems:output_type -> invoice.v1.GetInvoiceLineItemsResponse
	28, // 54: invoice.v1.InvoiceService.CreateInvoiceLineItemInformationAfterTaxes:output_type -> invoice.v1.CreateInvoiceLineItemInformationAfterTaxesResponse
	25, // 55: invoice.v1.InvoiceService.CreateInvoiceTotal:output_type -> invoice.v1.CreateInvoiceTotalResponse
	31, // 56: invoice.v1.InvoiceService.CreateInvoiceAllowanceCharge:output_type -> invoice.v1.CreateInvoiceAllowanceChargeResponse
	36, // 57: invoice.v1.InvoiceService.CreateLeviedDutyFeeTax:output_type -> invoice.v1.CreateLeviedDutyFeeTaxResponse
	47, // [47:58] is the sub-list for method output_type
	36, // [36:47] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_invoice_v1_invoice_proto_init() }
func file_invoice_v1_invoice_proto_init() {
	if File_invoice_v1_invoice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_invoice_v1_invoice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_invoice_v1_invoice_proto_goTypes,
		DependencyIndexes: file_invoice_v1_invoice_proto_depIdxs,
		MessageInfos:      file_invoice_v1_invoice_proto_msgTypes,
	}.Build()
	File_invoice_v1_invoice_proto = out.File
	file_invoice_v1_invoice_proto_rawDesc = nil
	file_invoice_v1_invoice_proto_goTypes = nil
	file_invoice_v1_invoice_proto_depIdxs = nil
}
