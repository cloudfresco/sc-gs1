// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: invoice/v1/debitcreditadvice.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DebitCreditAdvice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DebitCreditAdvice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebitCreditAdvice with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebitCreditAdviceMultiError, or nil if none found.
func (m *DebitCreditAdvice) ValidateAll() error {
	return m.validate(true)
}

func (m *DebitCreditAdvice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDebitCreditAdviceD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DebitCreditAdviceValidationError{
					field:  "DebitCreditAdviceD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DebitCreditAdviceValidationError{
					field:  "DebitCreditAdviceD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebitCreditAdviceD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebitCreditAdviceValidationError{
				field:  "DebitCreditAdviceD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DebitCreditAdviceValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DebitCreditAdviceValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebitCreditAdviceValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DebitCreditAdviceValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DebitCreditAdviceValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebitCreditAdviceValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DebitCreditAdviceMultiError(errors)
	}

	return nil
}

// DebitCreditAdviceMultiError is an error wrapping multiple validation errors
// returned by DebitCreditAdvice.ValidateAll() if the designated constraints
// aren't met.
type DebitCreditAdviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebitCreditAdviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebitCreditAdviceMultiError) AllErrors() []error { return m }

// DebitCreditAdviceValidationError is the validation error returned by
// DebitCreditAdvice.Validate if the designated constraints aren't met.
type DebitCreditAdviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitCreditAdviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitCreditAdviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitCreditAdviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitCreditAdviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitCreditAdviceValidationError) ErrorName() string {
	return "DebitCreditAdviceValidationError"
}

// Error satisfies the builtin error interface
func (e DebitCreditAdviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitCreditAdvice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitCreditAdviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitCreditAdviceValidationError{}

// Validate checks the field values on DebitCreditAdviceD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DebitCreditAdviceD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebitCreditAdviceD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebitCreditAdviceDMultiError, or nil if none found.
func (m *DebitCreditAdviceD) ValidateAll() error {
	return m.validate(true)
}

func (m *DebitCreditAdviceD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for DebitCreditIndicatorCode

	// no validation rules for TotalAmount

	// no validation rules for TaCodeListVersion

	// no validation rules for TaCurrencyCode

	// no validation rules for BillTo

	// no validation rules for Buyer

	// no validation rules for Carrier

	// no validation rules for DebitCreditAdviceIdentification

	// no validation rules for Seller

	// no validation rules for ShipFrom

	// no validation rules for ShipTo

	// no validation rules for UltimateConsignee

	if len(errors) > 0 {
		return DebitCreditAdviceDMultiError(errors)
	}

	return nil
}

// DebitCreditAdviceDMultiError is an error wrapping multiple validation errors
// returned by DebitCreditAdviceD.ValidateAll() if the designated constraints
// aren't met.
type DebitCreditAdviceDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebitCreditAdviceDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebitCreditAdviceDMultiError) AllErrors() []error { return m }

// DebitCreditAdviceDValidationError is the validation error returned by
// DebitCreditAdviceD.Validate if the designated constraints aren't met.
type DebitCreditAdviceDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitCreditAdviceDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitCreditAdviceDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitCreditAdviceDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitCreditAdviceDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitCreditAdviceDValidationError) ErrorName() string {
	return "DebitCreditAdviceDValidationError"
}

// Error satisfies the builtin error interface
func (e DebitCreditAdviceDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitCreditAdviceD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitCreditAdviceDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitCreditAdviceDValidationError{}

// Validate checks the field values on CreateDebitCreditAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDebitCreditAdviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDebitCreditAdviceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDebitCreditAdviceRequestMultiError, or nil if none found.
func (m *CreateDebitCreditAdviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDebitCreditAdviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DebitCreditIndicatorCode

	// no validation rules for TotalAmount

	// no validation rules for TaCodeListVersion

	// no validation rules for TaCurrencyCode

	// no validation rules for BillTo

	// no validation rules for Buyer

	// no validation rules for Carrier

	// no validation rules for DebitCreditAdviceIdentification

	// no validation rules for Seller

	// no validation rules for ShipFrom

	// no validation rules for ShipTo

	// no validation rules for UltimateConsignee

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	for idx, item := range m.GetDebitCreditAdviceLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDebitCreditAdviceRequestValidationError{
						field:  fmt.Sprintf("DebitCreditAdviceLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDebitCreditAdviceRequestValidationError{
						field:  fmt.Sprintf("DebitCreditAdviceLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDebitCreditAdviceRequestValidationError{
					field:  fmt.Sprintf("DebitCreditAdviceLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDebitCreditAdviceRequestMultiError(errors)
	}

	return nil
}

// CreateDebitCreditAdviceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDebitCreditAdviceRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateDebitCreditAdviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDebitCreditAdviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDebitCreditAdviceRequestMultiError) AllErrors() []error { return m }

// CreateDebitCreditAdviceRequestValidationError is the validation error
// returned by CreateDebitCreditAdviceRequest.Validate if the designated
// constraints aren't met.
type CreateDebitCreditAdviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDebitCreditAdviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDebitCreditAdviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDebitCreditAdviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDebitCreditAdviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDebitCreditAdviceRequestValidationError) ErrorName() string {
	return "CreateDebitCreditAdviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDebitCreditAdviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDebitCreditAdviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDebitCreditAdviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDebitCreditAdviceRequestValidationError{}

// Validate checks the field values on CreateDebitCreditAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDebitCreditAdviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDebitCreditAdviceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDebitCreditAdviceResponseMultiError, or nil if none found.
func (m *CreateDebitCreditAdviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDebitCreditAdviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDebitCreditAdvice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDebitCreditAdviceResponseValidationError{
					field:  "DebitCreditAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDebitCreditAdviceResponseValidationError{
					field:  "DebitCreditAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebitCreditAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDebitCreditAdviceResponseValidationError{
				field:  "DebitCreditAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDebitCreditAdviceResponseMultiError(errors)
	}

	return nil
}

// CreateDebitCreditAdviceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateDebitCreditAdviceResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateDebitCreditAdviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDebitCreditAdviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDebitCreditAdviceResponseMultiError) AllErrors() []error { return m }

// CreateDebitCreditAdviceResponseValidationError is the validation error
// returned by CreateDebitCreditAdviceResponse.Validate if the designated
// constraints aren't met.
type CreateDebitCreditAdviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDebitCreditAdviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDebitCreditAdviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDebitCreditAdviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDebitCreditAdviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDebitCreditAdviceResponseValidationError) ErrorName() string {
	return "CreateDebitCreditAdviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDebitCreditAdviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDebitCreditAdviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDebitCreditAdviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDebitCreditAdviceResponseValidationError{}

// Validate checks the field values on GetDebitCreditAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDebitCreditAdviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDebitCreditAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDebitCreditAdviceRequestMultiError, or nil if none found.
func (m *GetDebitCreditAdviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDebitCreditAdviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDebitCreditAdviceRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDebitCreditAdviceRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDebitCreditAdviceRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDebitCreditAdviceRequestMultiError(errors)
	}

	return nil
}

// GetDebitCreditAdviceRequestMultiError is an error wrapping multiple
// validation errors returned by GetDebitCreditAdviceRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDebitCreditAdviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDebitCreditAdviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDebitCreditAdviceRequestMultiError) AllErrors() []error { return m }

// GetDebitCreditAdviceRequestValidationError is the validation error returned
// by GetDebitCreditAdviceRequest.Validate if the designated constraints
// aren't met.
type GetDebitCreditAdviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDebitCreditAdviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDebitCreditAdviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDebitCreditAdviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDebitCreditAdviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDebitCreditAdviceRequestValidationError) ErrorName() string {
	return "GetDebitCreditAdviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDebitCreditAdviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDebitCreditAdviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDebitCreditAdviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDebitCreditAdviceRequestValidationError{}

// Validate checks the field values on GetDebitCreditAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDebitCreditAdviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDebitCreditAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDebitCreditAdviceResponseMultiError, or nil if none found.
func (m *GetDebitCreditAdviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDebitCreditAdviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDebitCreditAdvice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDebitCreditAdviceResponseValidationError{
					field:  "DebitCreditAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDebitCreditAdviceResponseValidationError{
					field:  "DebitCreditAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebitCreditAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDebitCreditAdviceResponseValidationError{
				field:  "DebitCreditAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDebitCreditAdviceResponseMultiError(errors)
	}

	return nil
}

// GetDebitCreditAdviceResponseMultiError is an error wrapping multiple
// validation errors returned by GetDebitCreditAdviceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDebitCreditAdviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDebitCreditAdviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDebitCreditAdviceResponseMultiError) AllErrors() []error { return m }

// GetDebitCreditAdviceResponseValidationError is the validation error returned
// by GetDebitCreditAdviceResponse.Validate if the designated constraints
// aren't met.
type GetDebitCreditAdviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDebitCreditAdviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDebitCreditAdviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDebitCreditAdviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDebitCreditAdviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDebitCreditAdviceResponseValidationError) ErrorName() string {
	return "GetDebitCreditAdviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDebitCreditAdviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDebitCreditAdviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDebitCreditAdviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDebitCreditAdviceResponseValidationError{}

// Validate checks the field values on GetDebitCreditAdviceByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDebitCreditAdviceByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDebitCreditAdviceByPkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDebitCreditAdviceByPkRequestMultiError, or nil if none found.
func (m *GetDebitCreditAdviceByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDebitCreditAdviceByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDebitCreditAdviceByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDebitCreditAdviceByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDebitCreditAdviceByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDebitCreditAdviceByPkRequestMultiError(errors)
	}

	return nil
}

// GetDebitCreditAdviceByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetDebitCreditAdviceByPkRequest.ValidateAll()
// if the designated constraints aren't met.
type GetDebitCreditAdviceByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDebitCreditAdviceByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDebitCreditAdviceByPkRequestMultiError) AllErrors() []error { return m }

// GetDebitCreditAdviceByPkRequestValidationError is the validation error
// returned by GetDebitCreditAdviceByPkRequest.Validate if the designated
// constraints aren't met.
type GetDebitCreditAdviceByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDebitCreditAdviceByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDebitCreditAdviceByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDebitCreditAdviceByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDebitCreditAdviceByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDebitCreditAdviceByPkRequestValidationError) ErrorName() string {
	return "GetDebitCreditAdviceByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDebitCreditAdviceByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDebitCreditAdviceByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDebitCreditAdviceByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDebitCreditAdviceByPkRequestValidationError{}

// Validate checks the field values on GetDebitCreditAdviceByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDebitCreditAdviceByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDebitCreditAdviceByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDebitCreditAdviceByPkResponseMultiError, or nil if none found.
func (m *GetDebitCreditAdviceByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDebitCreditAdviceByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDebitCreditAdvice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDebitCreditAdviceByPkResponseValidationError{
					field:  "DebitCreditAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDebitCreditAdviceByPkResponseValidationError{
					field:  "DebitCreditAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebitCreditAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDebitCreditAdviceByPkResponseValidationError{
				field:  "DebitCreditAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDebitCreditAdviceByPkResponseMultiError(errors)
	}

	return nil
}

// GetDebitCreditAdviceByPkResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetDebitCreditAdviceByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDebitCreditAdviceByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDebitCreditAdviceByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDebitCreditAdviceByPkResponseMultiError) AllErrors() []error { return m }

// GetDebitCreditAdviceByPkResponseValidationError is the validation error
// returned by GetDebitCreditAdviceByPkResponse.Validate if the designated
// constraints aren't met.
type GetDebitCreditAdviceByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDebitCreditAdviceByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDebitCreditAdviceByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDebitCreditAdviceByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDebitCreditAdviceByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDebitCreditAdviceByPkResponseValidationError) ErrorName() string {
	return "GetDebitCreditAdviceByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDebitCreditAdviceByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDebitCreditAdviceByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDebitCreditAdviceByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDebitCreditAdviceByPkResponseValidationError{}

// Validate checks the field values on GetDebitCreditAdvicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDebitCreditAdvicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDebitCreditAdvicesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDebitCreditAdvicesResponseMultiError, or nil if none found.
func (m *GetDebitCreditAdvicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDebitCreditAdvicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDebitCreditAdvices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDebitCreditAdvicesResponseValidationError{
						field:  fmt.Sprintf("DebitCreditAdvices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDebitCreditAdvicesResponseValidationError{
						field:  fmt.Sprintf("DebitCreditAdvices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDebitCreditAdvicesResponseValidationError{
					field:  fmt.Sprintf("DebitCreditAdvices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetDebitCreditAdvicesResponseMultiError(errors)
	}

	return nil
}

// GetDebitCreditAdvicesResponseMultiError is an error wrapping multiple
// validation errors returned by GetDebitCreditAdvicesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDebitCreditAdvicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDebitCreditAdvicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDebitCreditAdvicesResponseMultiError) AllErrors() []error { return m }

// GetDebitCreditAdvicesResponseValidationError is the validation error
// returned by GetDebitCreditAdvicesResponse.Validate if the designated
// constraints aren't met.
type GetDebitCreditAdvicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDebitCreditAdvicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDebitCreditAdvicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDebitCreditAdvicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDebitCreditAdvicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDebitCreditAdvicesResponseValidationError) ErrorName() string {
	return "GetDebitCreditAdvicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDebitCreditAdvicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDebitCreditAdvicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDebitCreditAdvicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDebitCreditAdvicesResponseValidationError{}

// Validate checks the field values on GetDebitCreditAdvicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDebitCreditAdvicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDebitCreditAdvicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDebitCreditAdvicesRequestMultiError, or nil if none found.
func (m *GetDebitCreditAdvicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDebitCreditAdvicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetDebitCreditAdvicesRequestMultiError(errors)
	}

	return nil
}

// GetDebitCreditAdvicesRequestMultiError is an error wrapping multiple
// validation errors returned by GetDebitCreditAdvicesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDebitCreditAdvicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDebitCreditAdvicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDebitCreditAdvicesRequestMultiError) AllErrors() []error { return m }

// GetDebitCreditAdvicesRequestValidationError is the validation error returned
// by GetDebitCreditAdvicesRequest.Validate if the designated constraints
// aren't met.
type GetDebitCreditAdvicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDebitCreditAdvicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDebitCreditAdvicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDebitCreditAdvicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDebitCreditAdvicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDebitCreditAdvicesRequestValidationError) ErrorName() string {
	return "GetDebitCreditAdvicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDebitCreditAdvicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDebitCreditAdvicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDebitCreditAdvicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDebitCreditAdvicesRequestValidationError{}

// Validate checks the field values on UpdateDebitCreditAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDebitCreditAdviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDebitCreditAdviceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDebitCreditAdviceRequestMultiError, or nil if none found.
func (m *UpdateDebitCreditAdviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDebitCreditAdviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DebitCreditIndicatorCode

	// no validation rules for TotalAmount

	// no validation rules for TaCodeListVersion

	// no validation rules for TaCurrencyCode

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateDebitCreditAdviceRequestMultiError(errors)
	}

	return nil
}

// UpdateDebitCreditAdviceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDebitCreditAdviceRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateDebitCreditAdviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDebitCreditAdviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDebitCreditAdviceRequestMultiError) AllErrors() []error { return m }

// UpdateDebitCreditAdviceRequestValidationError is the validation error
// returned by UpdateDebitCreditAdviceRequest.Validate if the designated
// constraints aren't met.
type UpdateDebitCreditAdviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDebitCreditAdviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDebitCreditAdviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDebitCreditAdviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDebitCreditAdviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDebitCreditAdviceRequestValidationError) ErrorName() string {
	return "UpdateDebitCreditAdviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDebitCreditAdviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDebitCreditAdviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDebitCreditAdviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDebitCreditAdviceRequestValidationError{}

// Validate checks the field values on UpdateDebitCreditAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDebitCreditAdviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDebitCreditAdviceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDebitCreditAdviceResponseMultiError, or nil if none found.
func (m *UpdateDebitCreditAdviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDebitCreditAdviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDebitCreditAdviceResponseMultiError(errors)
	}

	return nil
}

// UpdateDebitCreditAdviceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateDebitCreditAdviceResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateDebitCreditAdviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDebitCreditAdviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDebitCreditAdviceResponseMultiError) AllErrors() []error { return m }

// UpdateDebitCreditAdviceResponseValidationError is the validation error
// returned by UpdateDebitCreditAdviceResponse.Validate if the designated
// constraints aren't met.
type UpdateDebitCreditAdviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDebitCreditAdviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDebitCreditAdviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDebitCreditAdviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDebitCreditAdviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDebitCreditAdviceResponseValidationError) ErrorName() string {
	return "UpdateDebitCreditAdviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDebitCreditAdviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDebitCreditAdviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDebitCreditAdviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDebitCreditAdviceResponseValidationError{}

// Validate checks the field values on DebitCreditAdviceLineItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DebitCreditAdviceLineItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebitCreditAdviceLineItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebitCreditAdviceLineItemMultiError, or nil if none found.
func (m *DebitCreditAdviceLineItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DebitCreditAdviceLineItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDebitCreditAdviceLineItemD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DebitCreditAdviceLineItemValidationError{
					field:  "DebitCreditAdviceLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DebitCreditAdviceLineItemValidationError{
					field:  "DebitCreditAdviceLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebitCreditAdviceLineItemD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebitCreditAdviceLineItemValidationError{
				field:  "DebitCreditAdviceLineItemD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DebitCreditAdviceLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DebitCreditAdviceLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebitCreditAdviceLineItemValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DebitCreditAdviceLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DebitCreditAdviceLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebitCreditAdviceLineItemValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DebitCreditAdviceLineItemMultiError(errors)
	}

	return nil
}

// DebitCreditAdviceLineItemMultiError is an error wrapping multiple validation
// errors returned by DebitCreditAdviceLineItem.ValidateAll() if the
// designated constraints aren't met.
type DebitCreditAdviceLineItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebitCreditAdviceLineItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebitCreditAdviceLineItemMultiError) AllErrors() []error { return m }

// DebitCreditAdviceLineItemValidationError is the validation error returned by
// DebitCreditAdviceLineItem.Validate if the designated constraints aren't met.
type DebitCreditAdviceLineItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitCreditAdviceLineItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitCreditAdviceLineItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitCreditAdviceLineItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitCreditAdviceLineItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitCreditAdviceLineItemValidationError) ErrorName() string {
	return "DebitCreditAdviceLineItemValidationError"
}

// Error satisfies the builtin error interface
func (e DebitCreditAdviceLineItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitCreditAdviceLineItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitCreditAdviceLineItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitCreditAdviceLineItemValidationError{}

// Validate checks the field values on DebitCreditAdviceLineItemD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DebitCreditAdviceLineItemD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebitCreditAdviceLineItemD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebitCreditAdviceLineItemDMultiError, or nil if none found.
func (m *DebitCreditAdviceLineItemD) ValidateAll() error {
	return m.validate(true)
}

func (m *DebitCreditAdviceLineItemD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for AdjustmentAmount

	// no validation rules for AaCodeListVersion

	// no validation rules for AaCurrencyCode

	// no validation rules for DebitCreditIndicatorCode

	// no validation rules for FinancialAdjustmentReasonCode

	// no validation rules for LineItemNumber

	// no validation rules for ParentLineItemNumber

	// no validation rules for DebitCreditAdviceId

	if len(errors) > 0 {
		return DebitCreditAdviceLineItemDMultiError(errors)
	}

	return nil
}

// DebitCreditAdviceLineItemDMultiError is an error wrapping multiple
// validation errors returned by DebitCreditAdviceLineItemD.ValidateAll() if
// the designated constraints aren't met.
type DebitCreditAdviceLineItemDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebitCreditAdviceLineItemDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebitCreditAdviceLineItemDMultiError) AllErrors() []error { return m }

// DebitCreditAdviceLineItemDValidationError is the validation error returned
// by DebitCreditAdviceLineItemD.Validate if the designated constraints aren't met.
type DebitCreditAdviceLineItemDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitCreditAdviceLineItemDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitCreditAdviceLineItemDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitCreditAdviceLineItemDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitCreditAdviceLineItemDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitCreditAdviceLineItemDValidationError) ErrorName() string {
	return "DebitCreditAdviceLineItemDValidationError"
}

// Error satisfies the builtin error interface
func (e DebitCreditAdviceLineItemDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitCreditAdviceLineItemD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitCreditAdviceLineItemDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitCreditAdviceLineItemDValidationError{}

// Validate checks the field values on CreateDebitCreditAdviceLineItemRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDebitCreditAdviceLineItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDebitCreditAdviceLineItemRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateDebitCreditAdviceLineItemRequestMultiError, or nil if none found.
func (m *CreateDebitCreditAdviceLineItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDebitCreditAdviceLineItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdjustmentAmount

	// no validation rules for AaCodeListVersion

	// no validation rules for AaCurrencyCode

	// no validation rules for DebitCreditIndicatorCode

	// no validation rules for FinancialAdjustmentReasonCode

	// no validation rules for LineItemNumber

	// no validation rules for ParentLineItemNumber

	// no validation rules for DebitCreditAdviceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDebitCreditAdviceLineItemRequestMultiError(errors)
	}

	return nil
}

// CreateDebitCreditAdviceLineItemRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateDebitCreditAdviceLineItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDebitCreditAdviceLineItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDebitCreditAdviceLineItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDebitCreditAdviceLineItemRequestMultiError) AllErrors() []error { return m }

// CreateDebitCreditAdviceLineItemRequestValidationError is the validation
// error returned by CreateDebitCreditAdviceLineItemRequest.Validate if the
// designated constraints aren't met.
type CreateDebitCreditAdviceLineItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDebitCreditAdviceLineItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDebitCreditAdviceLineItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDebitCreditAdviceLineItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDebitCreditAdviceLineItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDebitCreditAdviceLineItemRequestValidationError) ErrorName() string {
	return "CreateDebitCreditAdviceLineItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDebitCreditAdviceLineItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDebitCreditAdviceLineItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDebitCreditAdviceLineItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDebitCreditAdviceLineItemRequestValidationError{}

// Validate checks the field values on CreateDebitCreditAdviceLineItemResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDebitCreditAdviceLineItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDebitCreditAdviceLineItemResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateDebitCreditAdviceLineItemResponseMultiError, or nil if none found.
func (m *CreateDebitCreditAdviceLineItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDebitCreditAdviceLineItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDebitCreditAdviceLineItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDebitCreditAdviceLineItemResponseValidationError{
					field:  "DebitCreditAdviceLineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDebitCreditAdviceLineItemResponseValidationError{
					field:  "DebitCreditAdviceLineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebitCreditAdviceLineItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDebitCreditAdviceLineItemResponseValidationError{
				field:  "DebitCreditAdviceLineItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDebitCreditAdviceLineItemResponseMultiError(errors)
	}

	return nil
}

// CreateDebitCreditAdviceLineItemResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateDebitCreditAdviceLineItemResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDebitCreditAdviceLineItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDebitCreditAdviceLineItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDebitCreditAdviceLineItemResponseMultiError) AllErrors() []error { return m }

// CreateDebitCreditAdviceLineItemResponseValidationError is the validation
// error returned by CreateDebitCreditAdviceLineItemResponse.Validate if the
// designated constraints aren't met.
type CreateDebitCreditAdviceLineItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDebitCreditAdviceLineItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDebitCreditAdviceLineItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDebitCreditAdviceLineItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDebitCreditAdviceLineItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDebitCreditAdviceLineItemResponseValidationError) ErrorName() string {
	return "CreateDebitCreditAdviceLineItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDebitCreditAdviceLineItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDebitCreditAdviceLineItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDebitCreditAdviceLineItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDebitCreditAdviceLineItemResponseValidationError{}

// Validate checks the field values on GetDebitCreditAdviceLineItemsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetDebitCreditAdviceLineItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDebitCreditAdviceLineItemsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDebitCreditAdviceLineItemsRequestMultiError, or nil if none found.
func (m *GetDebitCreditAdviceLineItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDebitCreditAdviceLineItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDebitCreditAdviceLineItemsRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDebitCreditAdviceLineItemsRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDebitCreditAdviceLineItemsRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDebitCreditAdviceLineItemsRequestMultiError(errors)
	}

	return nil
}

// GetDebitCreditAdviceLineItemsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetDebitCreditAdviceLineItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDebitCreditAdviceLineItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDebitCreditAdviceLineItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDebitCreditAdviceLineItemsRequestMultiError) AllErrors() []error { return m }

// GetDebitCreditAdviceLineItemsRequestValidationError is the validation error
// returned by GetDebitCreditAdviceLineItemsRequest.Validate if the designated
// constraints aren't met.
type GetDebitCreditAdviceLineItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDebitCreditAdviceLineItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDebitCreditAdviceLineItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDebitCreditAdviceLineItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDebitCreditAdviceLineItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDebitCreditAdviceLineItemsRequestValidationError) ErrorName() string {
	return "GetDebitCreditAdviceLineItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDebitCreditAdviceLineItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDebitCreditAdviceLineItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDebitCreditAdviceLineItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDebitCreditAdviceLineItemsRequestValidationError{}

// Validate checks the field values on GetDebitCreditAdviceLineItemsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetDebitCreditAdviceLineItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDebitCreditAdviceLineItemsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDebitCreditAdviceLineItemsResponseMultiError, or nil if none found.
func (m *GetDebitCreditAdviceLineItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDebitCreditAdviceLineItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDebitCreditAdviceLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDebitCreditAdviceLineItemsResponseValidationError{
						field:  fmt.Sprintf("DebitCreditAdviceLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDebitCreditAdviceLineItemsResponseValidationError{
						field:  fmt.Sprintf("DebitCreditAdviceLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDebitCreditAdviceLineItemsResponseValidationError{
					field:  fmt.Sprintf("DebitCreditAdviceLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDebitCreditAdviceLineItemsResponseMultiError(errors)
	}

	return nil
}

// GetDebitCreditAdviceLineItemsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetDebitCreditAdviceLineItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDebitCreditAdviceLineItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDebitCreditAdviceLineItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDebitCreditAdviceLineItemsResponseMultiError) AllErrors() []error { return m }

// GetDebitCreditAdviceLineItemsResponseValidationError is the validation error
// returned by GetDebitCreditAdviceLineItemsResponse.Validate if the
// designated constraints aren't met.
type GetDebitCreditAdviceLineItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDebitCreditAdviceLineItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDebitCreditAdviceLineItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDebitCreditAdviceLineItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDebitCreditAdviceLineItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDebitCreditAdviceLineItemsResponseValidationError) ErrorName() string {
	return "GetDebitCreditAdviceLineItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDebitCreditAdviceLineItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDebitCreditAdviceLineItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDebitCreditAdviceLineItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDebitCreditAdviceLineItemsResponseValidationError{}

// Validate checks the field values on DebitCreditAdviceLineItems with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DebitCreditAdviceLineItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebitCreditAdviceLineItems with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebitCreditAdviceLineItemsMultiError, or nil if none found.
func (m *DebitCreditAdviceLineItems) ValidateAll() error {
	return m.validate(true)
}

func (m *DebitCreditAdviceLineItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDebitCreditAdviceLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DebitCreditAdviceLineItemsValidationError{
						field:  fmt.Sprintf("DebitCreditAdviceLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DebitCreditAdviceLineItemsValidationError{
						field:  fmt.Sprintf("DebitCreditAdviceLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DebitCreditAdviceLineItemsValidationError{
					field:  fmt.Sprintf("DebitCreditAdviceLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DebitCreditAdviceLineItemsMultiError(errors)
	}

	return nil
}

// DebitCreditAdviceLineItemsMultiError is an error wrapping multiple
// validation errors returned by DebitCreditAdviceLineItems.ValidateAll() if
// the designated constraints aren't met.
type DebitCreditAdviceLineItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebitCreditAdviceLineItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebitCreditAdviceLineItemsMultiError) AllErrors() []error { return m }

// DebitCreditAdviceLineItemsValidationError is the validation error returned
// by DebitCreditAdviceLineItems.Validate if the designated constraints aren't met.
type DebitCreditAdviceLineItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitCreditAdviceLineItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitCreditAdviceLineItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitCreditAdviceLineItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitCreditAdviceLineItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitCreditAdviceLineItemsValidationError) ErrorName() string {
	return "DebitCreditAdviceLineItemsValidationError"
}

// Error satisfies the builtin error interface
func (e DebitCreditAdviceLineItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitCreditAdviceLineItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitCreditAdviceLineItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitCreditAdviceLineItemsValidationError{}

// Validate checks the field values on DebitCreditAdviceLineItemDetail with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DebitCreditAdviceLineItemDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebitCreditAdviceLineItemDetail with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DebitCreditAdviceLineItemDetailMultiError, or nil if none found.
func (m *DebitCreditAdviceLineItemDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *DebitCreditAdviceLineItemDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AlignedPrice

	// no validation rules for ApCodeListVersion

	// no validation rules for ApCurrencyCode

	// no validation rules for InvoicedPrice

	// no validation rules for IpCodeListVersion

	// no validation rules for IpCurrencyCode

	// no validation rules for Quantity

	// no validation rules for QMeasurementUnitCode

	// no validation rules for QCodeListVersion

	// no validation rules for DebitCreditAdviceId

	// no validation rules for DebitCreditAdviceLineItemId

	if len(errors) > 0 {
		return DebitCreditAdviceLineItemDetailMultiError(errors)
	}

	return nil
}

// DebitCreditAdviceLineItemDetailMultiError is an error wrapping multiple
// validation errors returned by DebitCreditAdviceLineItemDetail.ValidateAll()
// if the designated constraints aren't met.
type DebitCreditAdviceLineItemDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebitCreditAdviceLineItemDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebitCreditAdviceLineItemDetailMultiError) AllErrors() []error { return m }

// DebitCreditAdviceLineItemDetailValidationError is the validation error
// returned by DebitCreditAdviceLineItemDetail.Validate if the designated
// constraints aren't met.
type DebitCreditAdviceLineItemDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitCreditAdviceLineItemDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitCreditAdviceLineItemDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitCreditAdviceLineItemDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitCreditAdviceLineItemDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitCreditAdviceLineItemDetailValidationError) ErrorName() string {
	return "DebitCreditAdviceLineItemDetailValidationError"
}

// Error satisfies the builtin error interface
func (e DebitCreditAdviceLineItemDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitCreditAdviceLineItemDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitCreditAdviceLineItemDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitCreditAdviceLineItemDetailValidationError{}

// Validate checks the field values on
// CreateDebitCreditAdviceLineItemDetailRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDebitCreditAdviceLineItemDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDebitCreditAdviceLineItemDetailRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateDebitCreditAdviceLineItemDetailRequestMultiError, or nil if none found.
func (m *CreateDebitCreditAdviceLineItemDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDebitCreditAdviceLineItemDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AlignedPrice

	// no validation rules for ApCodeListVersion

	// no validation rules for ApCurrencyCode

	// no validation rules for InvoicedPrice

	// no validation rules for IpCodeListVersion

	// no validation rules for IpCurrencyCode

	// no validation rules for Quantity

	// no validation rules for QMeasurementUnitCode

	// no validation rules for QCodeListVersion

	// no validation rules for DebitCreditAdviceId

	// no validation rules for DebitCreditAdviceLineItemId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDebitCreditAdviceLineItemDetailRequestMultiError(errors)
	}

	return nil
}

// CreateDebitCreditAdviceLineItemDetailRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateDebitCreditAdviceLineItemDetailRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateDebitCreditAdviceLineItemDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDebitCreditAdviceLineItemDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDebitCreditAdviceLineItemDetailRequestMultiError) AllErrors() []error { return m }

// CreateDebitCreditAdviceLineItemDetailRequestValidationError is the
// validation error returned by
// CreateDebitCreditAdviceLineItemDetailRequest.Validate if the designated
// constraints aren't met.
type CreateDebitCreditAdviceLineItemDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDebitCreditAdviceLineItemDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDebitCreditAdviceLineItemDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDebitCreditAdviceLineItemDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDebitCreditAdviceLineItemDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDebitCreditAdviceLineItemDetailRequestValidationError) ErrorName() string {
	return "CreateDebitCreditAdviceLineItemDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDebitCreditAdviceLineItemDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDebitCreditAdviceLineItemDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDebitCreditAdviceLineItemDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDebitCreditAdviceLineItemDetailRequestValidationError{}

// Validate checks the field values on
// CreateDebitCreditAdviceLineItemDetailResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDebitCreditAdviceLineItemDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDebitCreditAdviceLineItemDetailResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateDebitCreditAdviceLineItemDetailResponseMultiError, or nil if none found.
func (m *CreateDebitCreditAdviceLineItemDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDebitCreditAdviceLineItemDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDebitCreditAdviceLineItemDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDebitCreditAdviceLineItemDetailResponseValidationError{
					field:  "DebitCreditAdviceLineItemDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDebitCreditAdviceLineItemDetailResponseValidationError{
					field:  "DebitCreditAdviceLineItemDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebitCreditAdviceLineItemDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDebitCreditAdviceLineItemDetailResponseValidationError{
				field:  "DebitCreditAdviceLineItemDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDebitCreditAdviceLineItemDetailResponseMultiError(errors)
	}

	return nil
}

// CreateDebitCreditAdviceLineItemDetailResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateDebitCreditAdviceLineItemDetailResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateDebitCreditAdviceLineItemDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDebitCreditAdviceLineItemDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDebitCreditAdviceLineItemDetailResponseMultiError) AllErrors() []error { return m }

// CreateDebitCreditAdviceLineItemDetailResponseValidationError is the
// validation error returned by
// CreateDebitCreditAdviceLineItemDetailResponse.Validate if the designated
// constraints aren't met.
type CreateDebitCreditAdviceLineItemDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDebitCreditAdviceLineItemDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDebitCreditAdviceLineItemDetailResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateDebitCreditAdviceLineItemDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDebitCreditAdviceLineItemDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDebitCreditAdviceLineItemDetailResponseValidationError) ErrorName() string {
	return "CreateDebitCreditAdviceLineItemDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDebitCreditAdviceLineItemDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDebitCreditAdviceLineItemDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDebitCreditAdviceLineItemDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDebitCreditAdviceLineItemDetailResponseValidationError{}
