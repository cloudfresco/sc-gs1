// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: logistics/v1/despatchadvice.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-gs1/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DespatchAdvice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceD *DespatchAdviceD `protobuf:"bytes,1,opt,name=despatch_advice_d,json=despatchAdviceD,proto3" json:"despatch_advice_d,omitempty"`
	CrUpdUser       *v1.CrUpdUser    `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime       *v1.CrUpdTime    `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *DespatchAdvice) Reset() {
	*x = DespatchAdvice{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdvice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdvice) ProtoMessage() {}

func (x *DespatchAdvice) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdvice.ProtoReflect.Descriptor instead.
func (*DespatchAdvice) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{0}
}

func (x *DespatchAdvice) GetDespatchAdviceD() *DespatchAdviceD {
	if x != nil {
		return x.DespatchAdviceD
	}
	return nil
}

func (x *DespatchAdvice) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *DespatchAdvice) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type DespatchAdviceD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                        []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                          string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	DeliveryTypeCode             string  `protobuf:"bytes,4,opt,name=delivery_type_code,json=deliveryTypeCode,proto3" json:"delivery_type_code,omitempty"`
	RackIdAtPickUpLocation       string  `protobuf:"bytes,5,opt,name=rack_id_at_pick_up_location,json=rackIdAtPickUpLocation,proto3" json:"rack_id_at_pick_up_location,omitempty"`
	TotalDepositAmount           float64 `protobuf:"fixed64,6,opt,name=total_deposit_amount,json=totalDepositAmount,proto3" json:"total_deposit_amount,omitempty"`
	TdaCodeListVersion           string  `protobuf:"bytes,7,opt,name=tda_code_list_version,json=tdaCodeListVersion,proto3" json:"tda_code_list_version,omitempty"`
	TdaCurrencyCode              string  `protobuf:"bytes,8,opt,name=tda_currency_code,json=tdaCurrencyCode,proto3" json:"tda_currency_code,omitempty"`
	TotalNumberOfLines           uint32  `protobuf:"varint,9,opt,name=total_number_of_lines,json=totalNumberOfLines,proto3" json:"total_number_of_lines,omitempty"`
	BlanketOrder                 uint32  `protobuf:"varint,10,opt,name=blanket_order,json=blanketOrder,proto3" json:"blanket_order,omitempty"`
	Buyer                        uint32  `protobuf:"varint,11,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Carrier                      uint32  `protobuf:"varint,12,opt,name=carrier,proto3" json:"carrier,omitempty"`
	Contract                     uint32  `protobuf:"varint,13,opt,name=contract,proto3" json:"contract,omitempty"`
	CustomerDocumentReference    uint32  `protobuf:"varint,14,opt,name=customer_document_reference,json=customerDocumentReference,proto3" json:"customer_document_reference,omitempty"`
	DeclarantsCustomsIdentity    uint32  `protobuf:"varint,15,opt,name=declarants_customs_identity,json=declarantsCustomsIdentity,proto3" json:"declarants_customs_identity,omitempty"`
	DeliveryNote                 uint32  `protobuf:"varint,16,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	DeliverySchedule             uint32  `protobuf:"varint,17,opt,name=delivery_schedule,json=deliverySchedule,proto3" json:"delivery_schedule,omitempty"`
	DespatchAdviceIdentification uint32  `protobuf:"varint,18,opt,name=despatch_advice_identification,json=despatchAdviceIdentification,proto3" json:"despatch_advice_identification,omitempty"`
	FreightForwarder             uint32  `protobuf:"varint,19,opt,name=freight_forwarder,json=freightForwarder,proto3" json:"freight_forwarder,omitempty"`
	InventoryLocation            uint32  `protobuf:"varint,20,opt,name=inventory_location,json=inventoryLocation,proto3" json:"inventory_location,omitempty"`
	Invoice                      uint32  `protobuf:"varint,21,opt,name=invoice,proto3" json:"invoice,omitempty"`
	Invoicee                     uint32  `protobuf:"varint,22,opt,name=invoicee,proto3" json:"invoicee,omitempty"`
	LogisticServiceProvider      uint32  `protobuf:"varint,23,opt,name=logistic_service_provider,json=logisticServiceProvider,proto3" json:"logistic_service_provider,omitempty"`
	OrderResponse                uint32  `protobuf:"varint,24,opt,name=order_response,json=orderResponse,proto3" json:"order_response,omitempty"`
	PickUpLocation               uint32  `protobuf:"varint,25,opt,name=pick_up_location,json=pickUpLocation,proto3" json:"pick_up_location,omitempty"`
	ProductCertification         uint32  `protobuf:"varint,26,opt,name=product_certification,json=productCertification,proto3" json:"product_certification,omitempty"`
	PromotionalDeal              uint32  `protobuf:"varint,27,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseConditions           uint32  `protobuf:"varint,28,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	PurchaseOrder                uint32  `protobuf:"varint,29,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	Receiver                     uint32  `protobuf:"varint,30,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReturnsInstruction           uint32  `protobuf:"varint,31,opt,name=returns_instruction,json=returnsInstruction,proto3" json:"returns_instruction,omitempty"`
	Seller                       uint32  `protobuf:"varint,32,opt,name=seller,proto3" json:"seller,omitempty"`
	ShipFrom                     uint32  `protobuf:"varint,33,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	Shipper                      uint32  `protobuf:"varint,34,opt,name=shipper,proto3" json:"shipper,omitempty"`
	ShipTo                       uint32  `protobuf:"varint,35,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	Specification                uint32  `protobuf:"varint,36,opt,name=specification,proto3" json:"specification,omitempty"`
	TransportInstruction         uint32  `protobuf:"varint,37,opt,name=transport_instruction,json=transportInstruction,proto3" json:"transport_instruction,omitempty"`
	UltimateConsignee            uint32  `protobuf:"varint,38,opt,name=ultimate_consignee,json=ultimateConsignee,proto3" json:"ultimate_consignee,omitempty"`
}

func (x *DespatchAdviceD) Reset() {
	*x = DespatchAdviceD{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceD) ProtoMessage() {}

func (x *DespatchAdviceD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceD.ProtoReflect.Descriptor instead.
func (*DespatchAdviceD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{1}
}

func (x *DespatchAdviceD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DespatchAdviceD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DespatchAdviceD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DespatchAdviceD) GetDeliveryTypeCode() string {
	if x != nil {
		return x.DeliveryTypeCode
	}
	return ""
}

func (x *DespatchAdviceD) GetRackIdAtPickUpLocation() string {
	if x != nil {
		return x.RackIdAtPickUpLocation
	}
	return ""
}

func (x *DespatchAdviceD) GetTotalDepositAmount() float64 {
	if x != nil {
		return x.TotalDepositAmount
	}
	return 0
}

func (x *DespatchAdviceD) GetTdaCodeListVersion() string {
	if x != nil {
		return x.TdaCodeListVersion
	}
	return ""
}

func (x *DespatchAdviceD) GetTdaCurrencyCode() string {
	if x != nil {
		return x.TdaCurrencyCode
	}
	return ""
}

func (x *DespatchAdviceD) GetTotalNumberOfLines() uint32 {
	if x != nil {
		return x.TotalNumberOfLines
	}
	return 0
}

func (x *DespatchAdviceD) GetBlanketOrder() uint32 {
	if x != nil {
		return x.BlanketOrder
	}
	return 0
}

func (x *DespatchAdviceD) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *DespatchAdviceD) GetCarrier() uint32 {
	if x != nil {
		return x.Carrier
	}
	return 0
}

func (x *DespatchAdviceD) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *DespatchAdviceD) GetCustomerDocumentReference() uint32 {
	if x != nil {
		return x.CustomerDocumentReference
	}
	return 0
}

func (x *DespatchAdviceD) GetDeclarantsCustomsIdentity() uint32 {
	if x != nil {
		return x.DeclarantsCustomsIdentity
	}
	return 0
}

func (x *DespatchAdviceD) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *DespatchAdviceD) GetDeliverySchedule() uint32 {
	if x != nil {
		return x.DeliverySchedule
	}
	return 0
}

func (x *DespatchAdviceD) GetDespatchAdviceIdentification() uint32 {
	if x != nil {
		return x.DespatchAdviceIdentification
	}
	return 0
}

func (x *DespatchAdviceD) GetFreightForwarder() uint32 {
	if x != nil {
		return x.FreightForwarder
	}
	return 0
}

func (x *DespatchAdviceD) GetInventoryLocation() uint32 {
	if x != nil {
		return x.InventoryLocation
	}
	return 0
}

func (x *DespatchAdviceD) GetInvoice() uint32 {
	if x != nil {
		return x.Invoice
	}
	return 0
}

func (x *DespatchAdviceD) GetInvoicee() uint32 {
	if x != nil {
		return x.Invoicee
	}
	return 0
}

func (x *DespatchAdviceD) GetLogisticServiceProvider() uint32 {
	if x != nil {
		return x.LogisticServiceProvider
	}
	return 0
}

func (x *DespatchAdviceD) GetOrderResponse() uint32 {
	if x != nil {
		return x.OrderResponse
	}
	return 0
}

func (x *DespatchAdviceD) GetPickUpLocation() uint32 {
	if x != nil {
		return x.PickUpLocation
	}
	return 0
}

func (x *DespatchAdviceD) GetProductCertification() uint32 {
	if x != nil {
		return x.ProductCertification
	}
	return 0
}

func (x *DespatchAdviceD) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *DespatchAdviceD) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *DespatchAdviceD) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *DespatchAdviceD) GetReceiver() uint32 {
	if x != nil {
		return x.Receiver
	}
	return 0
}

func (x *DespatchAdviceD) GetReturnsInstruction() uint32 {
	if x != nil {
		return x.ReturnsInstruction
	}
	return 0
}

func (x *DespatchAdviceD) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *DespatchAdviceD) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *DespatchAdviceD) GetShipper() uint32 {
	if x != nil {
		return x.Shipper
	}
	return 0
}

func (x *DespatchAdviceD) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *DespatchAdviceD) GetSpecification() uint32 {
	if x != nil {
		return x.Specification
	}
	return 0
}

func (x *DespatchAdviceD) GetTransportInstruction() uint32 {
	if x != nil {
		return x.TransportInstruction
	}
	return 0
}

func (x *DespatchAdviceD) GetUltimateConsignee() uint32 {
	if x != nil {
		return x.UltimateConsignee
	}
	return 0
}

type CreateDespatchAdviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryTypeCode             string  `protobuf:"bytes,1,opt,name=delivery_type_code,json=deliveryTypeCode,proto3" json:"delivery_type_code,omitempty"`
	RackIdAtPickUpLocation       string  `protobuf:"bytes,2,opt,name=rack_id_at_pick_up_location,json=rackIdAtPickUpLocation,proto3" json:"rack_id_at_pick_up_location,omitempty"`
	TotalDepositAmount           float64 `protobuf:"fixed64,3,opt,name=total_deposit_amount,json=totalDepositAmount,proto3" json:"total_deposit_amount,omitempty"`
	TdaCodeListVersion           string  `protobuf:"bytes,4,opt,name=tda_code_list_version,json=tdaCodeListVersion,proto3" json:"tda_code_list_version,omitempty"`
	TdaCurrencyCode              string  `protobuf:"bytes,5,opt,name=tda_currency_code,json=tdaCurrencyCode,proto3" json:"tda_currency_code,omitempty"`
	TotalNumberOfLines           uint32  `protobuf:"varint,6,opt,name=total_number_of_lines,json=totalNumberOfLines,proto3" json:"total_number_of_lines,omitempty"`
	BlanketOrder                 uint32  `protobuf:"varint,7,opt,name=blanket_order,json=blanketOrder,proto3" json:"blanket_order,omitempty"`
	Buyer                        uint32  `protobuf:"varint,8,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Carrier                      uint32  `protobuf:"varint,9,opt,name=carrier,proto3" json:"carrier,omitempty"`
	Contract                     uint32  `protobuf:"varint,10,opt,name=contract,proto3" json:"contract,omitempty"`
	CustomerDocumentReference    uint32  `protobuf:"varint,11,opt,name=customer_document_reference,json=customerDocumentReference,proto3" json:"customer_document_reference,omitempty"`
	DeclarantsCustomsIdentity    uint32  `protobuf:"varint,12,opt,name=declarants_customs_identity,json=declarantsCustomsIdentity,proto3" json:"declarants_customs_identity,omitempty"`
	DeliveryNote                 uint32  `protobuf:"varint,13,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	DeliverySchedule             uint32  `protobuf:"varint,14,opt,name=delivery_schedule,json=deliverySchedule,proto3" json:"delivery_schedule,omitempty"`
	DespatchAdviceIdentification uint32  `protobuf:"varint,15,opt,name=despatch_advice_identification,json=despatchAdviceIdentification,proto3" json:"despatch_advice_identification,omitempty"`
	FreightForwarder             uint32  `protobuf:"varint,16,opt,name=freight_forwarder,json=freightForwarder,proto3" json:"freight_forwarder,omitempty"`
	InventoryLocation            uint32  `protobuf:"varint,17,opt,name=inventory_location,json=inventoryLocation,proto3" json:"inventory_location,omitempty"`
	Invoice                      uint32  `protobuf:"varint,18,opt,name=invoice,proto3" json:"invoice,omitempty"`
	Invoicee                     uint32  `protobuf:"varint,19,opt,name=invoicee,proto3" json:"invoicee,omitempty"`
	LogisticServiceProvider      uint32  `protobuf:"varint,20,opt,name=logistic_service_provider,json=logisticServiceProvider,proto3" json:"logistic_service_provider,omitempty"`
	OrderResponse                uint32  `protobuf:"varint,21,opt,name=order_response,json=orderResponse,proto3" json:"order_response,omitempty"`
	PickUpLocation               uint32  `protobuf:"varint,22,opt,name=pick_up_location,json=pickUpLocation,proto3" json:"pick_up_location,omitempty"`
	ProductCertification         uint32  `protobuf:"varint,23,opt,name=product_certification,json=productCertification,proto3" json:"product_certification,omitempty"`
	PromotionalDeal              uint32  `protobuf:"varint,24,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseConditions           uint32  `protobuf:"varint,25,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	PurchaseOrder                uint32  `protobuf:"varint,26,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	Receiver                     uint32  `protobuf:"varint,27,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReturnsInstruction           uint32  `protobuf:"varint,28,opt,name=returns_instruction,json=returnsInstruction,proto3" json:"returns_instruction,omitempty"`
	Seller                       uint32  `protobuf:"varint,29,opt,name=seller,proto3" json:"seller,omitempty"`
	ShipFrom                     uint32  `protobuf:"varint,30,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	Shipper                      uint32  `protobuf:"varint,31,opt,name=shipper,proto3" json:"shipper,omitempty"`
	ShipTo                       uint32  `protobuf:"varint,32,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	Specification                uint32  `protobuf:"varint,33,opt,name=specification,proto3" json:"specification,omitempty"`
	TransportInstruction         uint32  `protobuf:"varint,34,opt,name=transport_instruction,json=transportInstruction,proto3" json:"transport_instruction,omitempty"`
	UltimateConsignee            uint32  `protobuf:"varint,35,opt,name=ultimate_consignee,json=ultimateConsignee,proto3" json:"ultimate_consignee,omitempty"`
	UserId                       string  `protobuf:"bytes,36,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string  `protobuf:"bytes,37,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string  `protobuf:"bytes,38,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDespatchAdviceRequest) Reset() {
	*x = CreateDespatchAdviceRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceRequest) ProtoMessage() {}

func (x *CreateDespatchAdviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDespatchAdviceRequest) GetDeliveryTypeCode() string {
	if x != nil {
		return x.DeliveryTypeCode
	}
	return ""
}

func (x *CreateDespatchAdviceRequest) GetRackIdAtPickUpLocation() string {
	if x != nil {
		return x.RackIdAtPickUpLocation
	}
	return ""
}

func (x *CreateDespatchAdviceRequest) GetTotalDepositAmount() float64 {
	if x != nil {
		return x.TotalDepositAmount
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetTdaCodeListVersion() string {
	if x != nil {
		return x.TdaCodeListVersion
	}
	return ""
}

func (x *CreateDespatchAdviceRequest) GetTdaCurrencyCode() string {
	if x != nil {
		return x.TdaCurrencyCode
	}
	return ""
}

func (x *CreateDespatchAdviceRequest) GetTotalNumberOfLines() uint32 {
	if x != nil {
		return x.TotalNumberOfLines
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetBlanketOrder() uint32 {
	if x != nil {
		return x.BlanketOrder
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetCarrier() uint32 {
	if x != nil {
		return x.Carrier
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetCustomerDocumentReference() uint32 {
	if x != nil {
		return x.CustomerDocumentReference
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetDeclarantsCustomsIdentity() uint32 {
	if x != nil {
		return x.DeclarantsCustomsIdentity
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetDeliverySchedule() uint32 {
	if x != nil {
		return x.DeliverySchedule
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetDespatchAdviceIdentification() uint32 {
	if x != nil {
		return x.DespatchAdviceIdentification
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetFreightForwarder() uint32 {
	if x != nil {
		return x.FreightForwarder
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetInventoryLocation() uint32 {
	if x != nil {
		return x.InventoryLocation
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetInvoice() uint32 {
	if x != nil {
		return x.Invoice
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetInvoicee() uint32 {
	if x != nil {
		return x.Invoicee
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetLogisticServiceProvider() uint32 {
	if x != nil {
		return x.LogisticServiceProvider
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetOrderResponse() uint32 {
	if x != nil {
		return x.OrderResponse
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetPickUpLocation() uint32 {
	if x != nil {
		return x.PickUpLocation
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetProductCertification() uint32 {
	if x != nil {
		return x.ProductCertification
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetReceiver() uint32 {
	if x != nil {
		return x.Receiver
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetReturnsInstruction() uint32 {
	if x != nil {
		return x.ReturnsInstruction
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetShipper() uint32 {
	if x != nil {
		return x.Shipper
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetSpecification() uint32 {
	if x != nil {
		return x.Specification
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetTransportInstruction() uint32 {
	if x != nil {
		return x.TransportInstruction
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetUltimateConsignee() uint32 {
	if x != nil {
		return x.UltimateConsignee
	}
	return 0
}

func (x *CreateDespatchAdviceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchAdviceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchAdviceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDespatchAdviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdvice *DespatchAdvice `protobuf:"bytes,1,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
}

func (x *CreateDespatchAdviceResponse) Reset() {
	*x = CreateDespatchAdviceResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceResponse) ProtoMessage() {}

func (x *CreateDespatchAdviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDespatchAdviceResponse) GetDespatchAdvice() *DespatchAdvice {
	if x != nil {
		return x.DespatchAdvice
	}
	return nil
}

type GetDespatchAdviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetDespatchAdviceRequest) Reset() {
	*x = GetDespatchAdviceRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchAdviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchAdviceRequest) ProtoMessage() {}

func (x *GetDespatchAdviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchAdviceRequest.ProtoReflect.Descriptor instead.
func (*GetDespatchAdviceRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{4}
}

func (x *GetDespatchAdviceRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetDespatchAdviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdvice *DespatchAdvice `protobuf:"bytes,1,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
}

func (x *GetDespatchAdviceResponse) Reset() {
	*x = GetDespatchAdviceResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchAdviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchAdviceResponse) ProtoMessage() {}

func (x *GetDespatchAdviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchAdviceResponse.ProtoReflect.Descriptor instead.
func (*GetDespatchAdviceResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{5}
}

func (x *GetDespatchAdviceResponse) GetDespatchAdvice() *DespatchAdvice {
	if x != nil {
		return x.DespatchAdvice
	}
	return nil
}

type GetDespatchAdviceByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetDespatchAdviceByPkRequest) Reset() {
	*x = GetDespatchAdviceByPkRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchAdviceByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchAdviceByPkRequest) ProtoMessage() {}

func (x *GetDespatchAdviceByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchAdviceByPkRequest.ProtoReflect.Descriptor instead.
func (*GetDespatchAdviceByPkRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{6}
}

func (x *GetDespatchAdviceByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetDespatchAdviceByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdvice *DespatchAdvice `protobuf:"bytes,1,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
}

func (x *GetDespatchAdviceByPkResponse) Reset() {
	*x = GetDespatchAdviceByPkResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchAdviceByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchAdviceByPkResponse) ProtoMessage() {}

func (x *GetDespatchAdviceByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchAdviceByPkResponse.ProtoReflect.Descriptor instead.
func (*GetDespatchAdviceByPkResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{7}
}

func (x *GetDespatchAdviceByPkResponse) GetDespatchAdvice() *DespatchAdvice {
	if x != nil {
		return x.DespatchAdvice
	}
	return nil
}

type GetDespatchAdvicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdvices []*DespatchAdvice `protobuf:"bytes,1,rep,name=despatch_advices,json=despatchAdvices,proto3" json:"despatch_advices,omitempty"`
	NextCursor      string            `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetDespatchAdvicesResponse) Reset() {
	*x = GetDespatchAdvicesResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchAdvicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchAdvicesResponse) ProtoMessage() {}

func (x *GetDespatchAdvicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchAdvicesResponse.ProtoReflect.Descriptor instead.
func (*GetDespatchAdvicesResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{8}
}

func (x *GetDespatchAdvicesResponse) GetDespatchAdvices() []*DespatchAdvice {
	if x != nil {
		return x.DespatchAdvices
	}
	return nil
}

func (x *GetDespatchAdvicesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetDespatchAdvicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetDespatchAdvicesRequest) Reset() {
	*x = GetDespatchAdvicesRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchAdvicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchAdvicesRequest) ProtoMessage() {}

func (x *GetDespatchAdvicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchAdvicesRequest.ProtoReflect.Descriptor instead.
func (*GetDespatchAdvicesRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{9}
}

func (x *GetDespatchAdvicesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetDespatchAdvicesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetDespatchAdvicesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetDespatchAdvicesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateDespatchAdviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryTypeCode       string  `protobuf:"bytes,1,opt,name=delivery_type_code,json=deliveryTypeCode,proto3" json:"delivery_type_code,omitempty"`
	RackIdAtPickUpLocation string  `protobuf:"bytes,2,opt,name=rack_id_at_pick_up_location,json=rackIdAtPickUpLocation,proto3" json:"rack_id_at_pick_up_location,omitempty"`
	TotalDepositAmount     float64 `protobuf:"fixed64,3,opt,name=total_deposit_amount,json=totalDepositAmount,proto3" json:"total_deposit_amount,omitempty"`
	TdaCodeListVersion     string  `protobuf:"bytes,4,opt,name=tda_code_list_version,json=tdaCodeListVersion,proto3" json:"tda_code_list_version,omitempty"`
	TdaCurrencyCode        string  `protobuf:"bytes,5,opt,name=tda_currency_code,json=tdaCurrencyCode,proto3" json:"tda_currency_code,omitempty"`
	TotalNumberOfLines     uint32  `protobuf:"varint,6,opt,name=total_number_of_lines,json=totalNumberOfLines,proto3" json:"total_number_of_lines,omitempty"`
	Id                     string  `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	UserId                 string  `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string  `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string  `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateDespatchAdviceRequest) Reset() {
	*x = UpdateDespatchAdviceRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDespatchAdviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDespatchAdviceRequest) ProtoMessage() {}

func (x *UpdateDespatchAdviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDespatchAdviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDespatchAdviceRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDespatchAdviceRequest) GetDeliveryTypeCode() string {
	if x != nil {
		return x.DeliveryTypeCode
	}
	return ""
}

func (x *UpdateDespatchAdviceRequest) GetRackIdAtPickUpLocation() string {
	if x != nil {
		return x.RackIdAtPickUpLocation
	}
	return ""
}

func (x *UpdateDespatchAdviceRequest) GetTotalDepositAmount() float64 {
	if x != nil {
		return x.TotalDepositAmount
	}
	return 0
}

func (x *UpdateDespatchAdviceRequest) GetTdaCodeListVersion() string {
	if x != nil {
		return x.TdaCodeListVersion
	}
	return ""
}

func (x *UpdateDespatchAdviceRequest) GetTdaCurrencyCode() string {
	if x != nil {
		return x.TdaCurrencyCode
	}
	return ""
}

func (x *UpdateDespatchAdviceRequest) GetTotalNumberOfLines() uint32 {
	if x != nil {
		return x.TotalNumberOfLines
	}
	return 0
}

func (x *UpdateDespatchAdviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDespatchAdviceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateDespatchAdviceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateDespatchAdviceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateDespatchAdviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDespatchAdviceResponse) Reset() {
	*x = UpdateDespatchAdviceResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDespatchAdviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDespatchAdviceResponse) ProtoMessage() {}

func (x *UpdateDespatchAdviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDespatchAdviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateDespatchAdviceResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{11}
}

type DespatchAdviceLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceLineItemD *DespatchAdviceLineItemD `protobuf:"bytes,1,opt,name=despatch_advice_line_item_d,json=despatchAdviceLineItemD,proto3" json:"despatch_advice_line_item_d,omitempty"`
	DespatchAdviceLineItemT *DespatchAdviceLineItemT `protobuf:"bytes,2,opt,name=despatch_advice_line_item_t,json=despatchAdviceLineItemT,proto3" json:"despatch_advice_line_item_t,omitempty"`
	CrUpdUser               *v1.CrUpdUser            `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime               *v1.CrUpdTime            `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *DespatchAdviceLineItem) Reset() {
	*x = DespatchAdviceLineItem{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceLineItem) ProtoMessage() {}

func (x *DespatchAdviceLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceLineItem.ProtoReflect.Descriptor instead.
func (*DespatchAdviceLineItem) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{12}
}

func (x *DespatchAdviceLineItem) GetDespatchAdviceLineItemD() *DespatchAdviceLineItemD {
	if x != nil {
		return x.DespatchAdviceLineItemD
	}
	return nil
}

func (x *DespatchAdviceLineItem) GetDespatchAdviceLineItemT() *DespatchAdviceLineItemT {
	if x != nil {
		return x.DespatchAdviceLineItemT
	}
	return nil
}

func (x *DespatchAdviceLineItem) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *DespatchAdviceLineItem) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type DespatchAdviceLineItemD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                       []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                         string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ActualProcessedQuantity     float64 `protobuf:"fixed64,4,opt,name=actual_processed_quantity,json=actualProcessedQuantity,proto3" json:"actual_processed_quantity,omitempty"`
	MeasurementUnitCode         string  `protobuf:"bytes,5,opt,name=measurement_unit_code,json=measurementUnitCode,proto3" json:"measurement_unit_code,omitempty"`
	CodeListVersion             string  `protobuf:"bytes,6,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	CountryOfLastProcessing     string  `protobuf:"bytes,7,opt,name=country_of_last_processing,json=countryOfLastProcessing,proto3" json:"country_of_last_processing,omitempty"`
	CountryOfOrigin             string  `protobuf:"bytes,8,opt,name=country_of_origin,json=countryOfOrigin,proto3" json:"country_of_origin,omitempty"`
	DespatchedQuantity          float64 `protobuf:"fixed64,9,opt,name=despatched_quantity,json=despatchedQuantity,proto3" json:"despatched_quantity,omitempty"`
	DqMeasurementUnitCode       string  `protobuf:"bytes,10,opt,name=dq_measurement_unit_code,json=dqMeasurementUnitCode,proto3" json:"dq_measurement_unit_code,omitempty"`
	DqCodeListVersion           string  `protobuf:"bytes,11,opt,name=dq_code_list_version,json=dqCodeListVersion,proto3" json:"dq_code_list_version,omitempty"`
	DutyFeeTaxLiability         string  `protobuf:"bytes,12,opt,name=duty_fee_tax_liability,json=dutyFeeTaxLiability,proto3" json:"duty_fee_tax_liability,omitempty"`
	Extension                   string  `protobuf:"bytes,13,opt,name=extension,proto3" json:"extension,omitempty"`
	FreeGoodsQuantity           float64 `protobuf:"fixed64,14,opt,name=free_goods_quantity,json=freeGoodsQuantity,proto3" json:"free_goods_quantity,omitempty"`
	FgqMeasurementUnitCode      string  `protobuf:"bytes,15,opt,name=fgq_measurement_unit_code,json=fgqMeasurementUnitCode,proto3" json:"fgq_measurement_unit_code,omitempty"`
	FgqCodeListVersion          string  `protobuf:"bytes,16,opt,name=fgq_code_list_version,json=fgqCodeListVersion,proto3" json:"fgq_code_list_version,omitempty"`
	HandlingInstructionCode     string  `protobuf:"bytes,17,opt,name=handling_instruction_code,json=handlingInstructionCode,proto3" json:"handling_instruction_code,omitempty"`
	HasItemBeenScannedAtPos     string  `protobuf:"bytes,18,opt,name=has_item_been_scanned_at_pos,json=hasItemBeenScannedAtPos,proto3" json:"has_item_been_scanned_at_pos,omitempty"`
	InventoryStatusType         string  `protobuf:"bytes,19,opt,name=inventory_status_type,json=inventoryStatusType,proto3" json:"inventory_status_type,omitempty"`
	LineItemNumber              uint32  `protobuf:"varint,20,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ParentLineItemNumber        uint32  `protobuf:"varint,21,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	RequestedQuantity           float64 `protobuf:"fixed64,22,opt,name=requested_quantity,json=requestedQuantity,proto3" json:"requested_quantity,omitempty"`
	RqMeasurementUnitCode       string  `protobuf:"bytes,23,opt,name=rq_measurement_unit_code,json=rqMeasurementUnitCode,proto3" json:"rq_measurement_unit_code,omitempty"`
	RqCodeListVersion           string  `protobuf:"bytes,24,opt,name=rq_code_list_version,json=rqCodeListVersion,proto3" json:"rq_code_list_version,omitempty"`
	Contract                    uint32  `protobuf:"varint,25,opt,name=contract,proto3" json:"contract,omitempty"`
	CouponClearingHouse         uint32  `protobuf:"varint,26,opt,name=coupon_clearing_house,json=couponClearingHouse,proto3" json:"coupon_clearing_house,omitempty"`
	Customer                    uint32  `protobuf:"varint,27,opt,name=customer,proto3" json:"customer,omitempty"`
	CustomerDocumentReference   uint32  `protobuf:"varint,28,opt,name=customer_document_reference,json=customerDocumentReference,proto3" json:"customer_document_reference,omitempty"`
	CustomerReference           uint32  `protobuf:"varint,29,opt,name=customer_reference,json=customerReference,proto3" json:"customer_reference,omitempty"`
	DeliveryNote                uint32  `protobuf:"varint,30,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	ItemOwner                   uint32  `protobuf:"varint,31,opt,name=item_owner,json=itemOwner,proto3" json:"item_owner,omitempty"`
	OriginalSupplier            uint32  `protobuf:"varint,32,opt,name=original_supplier,json=originalSupplier,proto3" json:"original_supplier,omitempty"`
	ProductCertification        uint32  `protobuf:"varint,33,opt,name=product_certification,json=productCertification,proto3" json:"product_certification,omitempty"`
	PromotionalDeal             uint32  `protobuf:"varint,34,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseConditions          uint32  `protobuf:"varint,35,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	PurchaseOrder               uint32  `protobuf:"varint,36,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	ReferencedConsignment       uint32  `protobuf:"varint,37,opt,name=referenced_consignment,json=referencedConsignment,proto3" json:"referenced_consignment,omitempty"`
	RequestedItemIdentification uint32  `protobuf:"varint,38,opt,name=requested_item_identification,json=requestedItemIdentification,proto3" json:"requested_item_identification,omitempty"`
	Specification               uint32  `protobuf:"varint,39,opt,name=specification,proto3" json:"specification,omitempty"`
	DespatchAdviceId            uint32  `protobuf:"varint,40,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
}

func (x *DespatchAdviceLineItemD) Reset() {
	*x = DespatchAdviceLineItemD{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceLineItemD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceLineItemD) ProtoMessage() {}

func (x *DespatchAdviceLineItemD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceLineItemD.ProtoReflect.Descriptor instead.
func (*DespatchAdviceLineItemD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{13}
}

func (x *DespatchAdviceLineItemD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DespatchAdviceLineItemD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetActualProcessedQuantity() float64 {
	if x != nil {
		return x.ActualProcessedQuantity
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetMeasurementUnitCode() string {
	if x != nil {
		return x.MeasurementUnitCode
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetCountryOfLastProcessing() string {
	if x != nil {
		return x.CountryOfLastProcessing
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetCountryOfOrigin() string {
	if x != nil {
		return x.CountryOfOrigin
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetDespatchedQuantity() float64 {
	if x != nil {
		return x.DespatchedQuantity
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetDqMeasurementUnitCode() string {
	if x != nil {
		return x.DqMeasurementUnitCode
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetDqCodeListVersion() string {
	if x != nil {
		return x.DqCodeListVersion
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetDutyFeeTaxLiability() string {
	if x != nil {
		return x.DutyFeeTaxLiability
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetFreeGoodsQuantity() float64 {
	if x != nil {
		return x.FreeGoodsQuantity
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetFgqMeasurementUnitCode() string {
	if x != nil {
		return x.FgqMeasurementUnitCode
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetFgqCodeListVersion() string {
	if x != nil {
		return x.FgqCodeListVersion
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetHandlingInstructionCode() string {
	if x != nil {
		return x.HandlingInstructionCode
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetHasItemBeenScannedAtPos() string {
	if x != nil {
		return x.HasItemBeenScannedAtPos
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetInventoryStatusType() string {
	if x != nil {
		return x.InventoryStatusType
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetRequestedQuantity() float64 {
	if x != nil {
		return x.RequestedQuantity
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetRqMeasurementUnitCode() string {
	if x != nil {
		return x.RqMeasurementUnitCode
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetRqCodeListVersion() string {
	if x != nil {
		return x.RqCodeListVersion
	}
	return ""
}

func (x *DespatchAdviceLineItemD) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetCouponClearingHouse() uint32 {
	if x != nil {
		return x.CouponClearingHouse
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetCustomer() uint32 {
	if x != nil {
		return x.Customer
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetCustomerDocumentReference() uint32 {
	if x != nil {
		return x.CustomerDocumentReference
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetCustomerReference() uint32 {
	if x != nil {
		return x.CustomerReference
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetItemOwner() uint32 {
	if x != nil {
		return x.ItemOwner
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetOriginalSupplier() uint32 {
	if x != nil {
		return x.OriginalSupplier
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetProductCertification() uint32 {
	if x != nil {
		return x.ProductCertification
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetReferencedConsignment() uint32 {
	if x != nil {
		return x.ReferencedConsignment
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetRequestedItemIdentification() uint32 {
	if x != nil {
		return x.RequestedItemIdentification
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetSpecification() uint32 {
	if x != nil {
		return x.Specification
	}
	return 0
}

func (x *DespatchAdviceLineItemD) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

type DespatchAdviceLineItemT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstInFirstOutDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=first_in_first_out_date_time,json=firstInFirstOutDateTime,proto3" json:"first_in_first_out_date_time,omitempty"`
	PickUpDateTime          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=pick_up_date_time,json=pickUpDateTime,proto3" json:"pick_up_date_time,omitempty"`
}

func (x *DespatchAdviceLineItemT) Reset() {
	*x = DespatchAdviceLineItemT{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceLineItemT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceLineItemT) ProtoMessage() {}

func (x *DespatchAdviceLineItemT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceLineItemT.ProtoReflect.Descriptor instead.
func (*DespatchAdviceLineItemT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{14}
}

func (x *DespatchAdviceLineItemT) GetFirstInFirstOutDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstInFirstOutDateTime
	}
	return nil
}

func (x *DespatchAdviceLineItemT) GetPickUpDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PickUpDateTime
	}
	return nil
}

type CreateDespatchAdviceLineItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualProcessedQuantity     float64 `protobuf:"fixed64,1,opt,name=actual_processed_quantity,json=actualProcessedQuantity,proto3" json:"actual_processed_quantity,omitempty"`
	MeasurementUnitCode         string  `protobuf:"bytes,2,opt,name=measurement_unit_code,json=measurementUnitCode,proto3" json:"measurement_unit_code,omitempty"`
	CodeListVersion             string  `protobuf:"bytes,3,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	CountryOfLastProcessing     string  `protobuf:"bytes,4,opt,name=country_of_last_processing,json=countryOfLastProcessing,proto3" json:"country_of_last_processing,omitempty"`
	CountryOfOrigin             string  `protobuf:"bytes,5,opt,name=country_of_origin,json=countryOfOrigin,proto3" json:"country_of_origin,omitempty"`
	DespatchedQuantity          float64 `protobuf:"fixed64,6,opt,name=despatched_quantity,json=despatchedQuantity,proto3" json:"despatched_quantity,omitempty"`
	DqMeasurementUnitCode       string  `protobuf:"bytes,7,opt,name=dq_measurement_unit_code,json=dqMeasurementUnitCode,proto3" json:"dq_measurement_unit_code,omitempty"`
	DqCodeListVersion           string  `protobuf:"bytes,8,opt,name=dq_code_list_version,json=dqCodeListVersion,proto3" json:"dq_code_list_version,omitempty"`
	DutyFeeTaxLiability         string  `protobuf:"bytes,9,opt,name=duty_fee_tax_liability,json=dutyFeeTaxLiability,proto3" json:"duty_fee_tax_liability,omitempty"`
	Extension                   string  `protobuf:"bytes,10,opt,name=extension,proto3" json:"extension,omitempty"`
	FirstInFirstOutDateTime     string  `protobuf:"bytes,11,opt,name=first_in_first_out_date_time,json=firstInFirstOutDateTime,proto3" json:"first_in_first_out_date_time,omitempty"`
	FreeGoodsQuantity           float64 `protobuf:"fixed64,12,opt,name=free_goods_quantity,json=freeGoodsQuantity,proto3" json:"free_goods_quantity,omitempty"`
	FgqMeasurementUnitCode      string  `protobuf:"bytes,13,opt,name=fgq_measurement_unit_code,json=fgqMeasurementUnitCode,proto3" json:"fgq_measurement_unit_code,omitempty"`
	FgqCodeListVersion          string  `protobuf:"bytes,14,opt,name=fgq_code_list_version,json=fgqCodeListVersion,proto3" json:"fgq_code_list_version,omitempty"`
	HandlingInstructionCode     string  `protobuf:"bytes,15,opt,name=handling_instruction_code,json=handlingInstructionCode,proto3" json:"handling_instruction_code,omitempty"`
	HasItemBeenScannedAtPos     string  `protobuf:"bytes,16,opt,name=has_item_been_scanned_at_pos,json=hasItemBeenScannedAtPos,proto3" json:"has_item_been_scanned_at_pos,omitempty"`
	InventoryStatusType         string  `protobuf:"bytes,17,opt,name=inventory_status_type,json=inventoryStatusType,proto3" json:"inventory_status_type,omitempty"`
	LineItemNumber              uint32  `protobuf:"varint,18,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ParentLineItemNumber        uint32  `protobuf:"varint,19,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	PickUpDateTime              string  `protobuf:"bytes,20,opt,name=pick_up_date_time,json=pickUpDateTime,proto3" json:"pick_up_date_time,omitempty"`
	RequestedQuantity           float64 `protobuf:"fixed64,21,opt,name=requested_quantity,json=requestedQuantity,proto3" json:"requested_quantity,omitempty"`
	RqMeasurementUnitCode       string  `protobuf:"bytes,22,opt,name=rq_measurement_unit_code,json=rqMeasurementUnitCode,proto3" json:"rq_measurement_unit_code,omitempty"`
	RqCodeListVersion           string  `protobuf:"bytes,23,opt,name=rq_code_list_version,json=rqCodeListVersion,proto3" json:"rq_code_list_version,omitempty"`
	Contract                    uint32  `protobuf:"varint,24,opt,name=contract,proto3" json:"contract,omitempty"`
	CouponClearingHouse         uint32  `protobuf:"varint,25,opt,name=coupon_clearing_house,json=couponClearingHouse,proto3" json:"coupon_clearing_house,omitempty"`
	Customer                    uint32  `protobuf:"varint,26,opt,name=customer,proto3" json:"customer,omitempty"`
	CustomerDocumentReference   uint32  `protobuf:"varint,27,opt,name=customer_document_reference,json=customerDocumentReference,proto3" json:"customer_document_reference,omitempty"`
	CustomerReference           uint32  `protobuf:"varint,28,opt,name=customer_reference,json=customerReference,proto3" json:"customer_reference,omitempty"`
	DeliveryNote                uint32  `protobuf:"varint,29,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	ItemOwner                   uint32  `protobuf:"varint,30,opt,name=item_owner,json=itemOwner,proto3" json:"item_owner,omitempty"`
	OriginalSupplier            uint32  `protobuf:"varint,31,opt,name=original_supplier,json=originalSupplier,proto3" json:"original_supplier,omitempty"`
	ProductCertification        uint32  `protobuf:"varint,32,opt,name=product_certification,json=productCertification,proto3" json:"product_certification,omitempty"`
	PromotionalDeal             uint32  `protobuf:"varint,33,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseConditions          uint32  `protobuf:"varint,34,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	PurchaseOrder               uint32  `protobuf:"varint,35,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	ReferencedConsignment       uint32  `protobuf:"varint,36,opt,name=referenced_consignment,json=referencedConsignment,proto3" json:"referenced_consignment,omitempty"`
	RequestedItemIdentification uint32  `protobuf:"varint,37,opt,name=requested_item_identification,json=requestedItemIdentification,proto3" json:"requested_item_identification,omitempty"`
	Specification               uint32  `protobuf:"varint,38,opt,name=specification,proto3" json:"specification,omitempty"`
	DespatchAdviceId            uint32  `protobuf:"varint,39,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
	UserId                      string  `protobuf:"bytes,40,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                   string  `protobuf:"bytes,41,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                   string  `protobuf:"bytes,42,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDespatchAdviceLineItemRequest) Reset() {
	*x = CreateDespatchAdviceLineItemRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceLineItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceLineItemRequest) ProtoMessage() {}

func (x *CreateDespatchAdviceLineItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceLineItemRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceLineItemRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{15}
}

func (x *CreateDespatchAdviceLineItemRequest) GetActualProcessedQuantity() float64 {
	if x != nil {
		return x.ActualProcessedQuantity
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetMeasurementUnitCode() string {
	if x != nil {
		return x.MeasurementUnitCode
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetCountryOfLastProcessing() string {
	if x != nil {
		return x.CountryOfLastProcessing
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetCountryOfOrigin() string {
	if x != nil {
		return x.CountryOfOrigin
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetDespatchedQuantity() float64 {
	if x != nil {
		return x.DespatchedQuantity
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetDqMeasurementUnitCode() string {
	if x != nil {
		return x.DqMeasurementUnitCode
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetDqCodeListVersion() string {
	if x != nil {
		return x.DqCodeListVersion
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetDutyFeeTaxLiability() string {
	if x != nil {
		return x.DutyFeeTaxLiability
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetFirstInFirstOutDateTime() string {
	if x != nil {
		return x.FirstInFirstOutDateTime
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetFreeGoodsQuantity() float64 {
	if x != nil {
		return x.FreeGoodsQuantity
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetFgqMeasurementUnitCode() string {
	if x != nil {
		return x.FgqMeasurementUnitCode
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetFgqCodeListVersion() string {
	if x != nil {
		return x.FgqCodeListVersion
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetHandlingInstructionCode() string {
	if x != nil {
		return x.HandlingInstructionCode
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetHasItemBeenScannedAtPos() string {
	if x != nil {
		return x.HasItemBeenScannedAtPos
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetInventoryStatusType() string {
	if x != nil {
		return x.InventoryStatusType
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetPickUpDateTime() string {
	if x != nil {
		return x.PickUpDateTime
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetRequestedQuantity() float64 {
	if x != nil {
		return x.RequestedQuantity
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetRqMeasurementUnitCode() string {
	if x != nil {
		return x.RqMeasurementUnitCode
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetRqCodeListVersion() string {
	if x != nil {
		return x.RqCodeListVersion
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetCouponClearingHouse() uint32 {
	if x != nil {
		return x.CouponClearingHouse
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetCustomer() uint32 {
	if x != nil {
		return x.Customer
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetCustomerDocumentReference() uint32 {
	if x != nil {
		return x.CustomerDocumentReference
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetCustomerReference() uint32 {
	if x != nil {
		return x.CustomerReference
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetItemOwner() uint32 {
	if x != nil {
		return x.ItemOwner
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetOriginalSupplier() uint32 {
	if x != nil {
		return x.OriginalSupplier
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetProductCertification() uint32 {
	if x != nil {
		return x.ProductCertification
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetReferencedConsignment() uint32 {
	if x != nil {
		return x.ReferencedConsignment
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetRequestedItemIdentification() uint32 {
	if x != nil {
		return x.RequestedItemIdentification
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetSpecification() uint32 {
	if x != nil {
		return x.Specification
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

func (x *CreateDespatchAdviceLineItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchAdviceLineItemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDespatchAdviceLineItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceLineItem *DespatchAdviceLineItem `protobuf:"bytes,1,opt,name=despatch_advice_line_item,json=despatchAdviceLineItem,proto3" json:"despatch_advice_line_item,omitempty"`
}

func (x *CreateDespatchAdviceLineItemResponse) Reset() {
	*x = CreateDespatchAdviceLineItemResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceLineItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceLineItemResponse) ProtoMessage() {}

func (x *CreateDespatchAdviceLineItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceLineItemResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceLineItemResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{16}
}

func (x *CreateDespatchAdviceLineItemResponse) GetDespatchAdviceLineItem() *DespatchAdviceLineItem {
	if x != nil {
		return x.DespatchAdviceLineItem
	}
	return nil
}

type GetDespatchAdviceLineItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetDespatchAdviceLineItemsRequest) Reset() {
	*x = GetDespatchAdviceLineItemsRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchAdviceLineItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchAdviceLineItemsRequest) ProtoMessage() {}

func (x *GetDespatchAdviceLineItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchAdviceLineItemsRequest.ProtoReflect.Descriptor instead.
func (*GetDespatchAdviceLineItemsRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{17}
}

func (x *GetDespatchAdviceLineItemsRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetDespatchAdviceLineItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceLineItems []*DespatchAdviceLineItem `protobuf:"bytes,1,rep,name=despatch_advice_line_items,json=despatchAdviceLineItems,proto3" json:"despatch_advice_line_items,omitempty"`
}

func (x *GetDespatchAdviceLineItemsResponse) Reset() {
	*x = GetDespatchAdviceLineItemsResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchAdviceLineItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchAdviceLineItemsResponse) ProtoMessage() {}

func (x *GetDespatchAdviceLineItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchAdviceLineItemsResponse.ProtoReflect.Descriptor instead.
func (*GetDespatchAdviceLineItemsResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{18}
}

func (x *GetDespatchAdviceLineItemsResponse) GetDespatchAdviceLineItems() []*DespatchAdviceLineItem {
	if x != nil {
		return x.DespatchAdviceLineItems
	}
	return nil
}

type DespatchAdviceItemTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalTradeItemIdentification         string `protobuf:"bytes,1,opt,name=additional_trade_item_identification,json=additionalTradeItemIdentification,proto3" json:"additional_trade_item_identification,omitempty"`
	AdditionalTradeItemIdentificationTypeCode string `protobuf:"bytes,2,opt,name=additional_trade_item_identification_type_code,json=additionalTradeItemIdentificationTypeCode,proto3" json:"additional_trade_item_identification_type_code,omitempty"`
	CodeListVersion                           string `protobuf:"bytes,3,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	Gtin                                      uint32 `protobuf:"varint,4,opt,name=gtin,proto3" json:"gtin,omitempty"`
	TradeItemIdentification                   uint32 `protobuf:"varint,5,opt,name=trade_item_identification,json=tradeItemIdentification,proto3" json:"trade_item_identification,omitempty"`
	DespatchAdviceId                          uint32 `protobuf:"varint,6,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
	DespatchAdviceLineItemId                  uint32 `protobuf:"varint,7,opt,name=despatch_advice_line_item_id,json=despatchAdviceLineItemId,proto3" json:"despatch_advice_line_item_id,omitempty"`
}

func (x *DespatchAdviceItemTotal) Reset() {
	*x = DespatchAdviceItemTotal{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceItemTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceItemTotal) ProtoMessage() {}

func (x *DespatchAdviceItemTotal) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceItemTotal.ProtoReflect.Descriptor instead.
func (*DespatchAdviceItemTotal) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{19}
}

func (x *DespatchAdviceItemTotal) GetAdditionalTradeItemIdentification() string {
	if x != nil {
		return x.AdditionalTradeItemIdentification
	}
	return ""
}

func (x *DespatchAdviceItemTotal) GetAdditionalTradeItemIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalTradeItemIdentificationTypeCode
	}
	return ""
}

func (x *DespatchAdviceItemTotal) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *DespatchAdviceItemTotal) GetGtin() uint32 {
	if x != nil {
		return x.Gtin
	}
	return 0
}

func (x *DespatchAdviceItemTotal) GetTradeItemIdentification() uint32 {
	if x != nil {
		return x.TradeItemIdentification
	}
	return 0
}

func (x *DespatchAdviceItemTotal) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

func (x *DespatchAdviceItemTotal) GetDespatchAdviceLineItemId() uint32 {
	if x != nil {
		return x.DespatchAdviceLineItemId
	}
	return 0
}

type CreateDespatchAdviceItemTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalTradeItemIdentification         string `protobuf:"bytes,1,opt,name=additional_trade_item_identification,json=additionalTradeItemIdentification,proto3" json:"additional_trade_item_identification,omitempty"`
	AdditionalTradeItemIdentificationTypeCode string `protobuf:"bytes,2,opt,name=additional_trade_item_identification_type_code,json=additionalTradeItemIdentificationTypeCode,proto3" json:"additional_trade_item_identification_type_code,omitempty"`
	CodeListVersion                           string `protobuf:"bytes,3,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	Gtin                                      uint32 `protobuf:"varint,4,opt,name=gtin,proto3" json:"gtin,omitempty"`
	TradeItemIdentification                   uint32 `protobuf:"varint,5,opt,name=trade_item_identification,json=tradeItemIdentification,proto3" json:"trade_item_identification,omitempty"`
	DespatchAdviceId                          uint32 `protobuf:"varint,6,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
	DespatchAdviceLineItemId                  uint32 `protobuf:"varint,7,opt,name=despatch_advice_line_item_id,json=despatchAdviceLineItemId,proto3" json:"despatch_advice_line_item_id,omitempty"`
	UserId                                    string `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                 string `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                 string `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDespatchAdviceItemTotalRequest) Reset() {
	*x = CreateDespatchAdviceItemTotalRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceItemTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceItemTotalRequest) ProtoMessage() {}

func (x *CreateDespatchAdviceItemTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceItemTotalRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceItemTotalRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{20}
}

func (x *CreateDespatchAdviceItemTotalRequest) GetAdditionalTradeItemIdentification() string {
	if x != nil {
		return x.AdditionalTradeItemIdentification
	}
	return ""
}

func (x *CreateDespatchAdviceItemTotalRequest) GetAdditionalTradeItemIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalTradeItemIdentificationTypeCode
	}
	return ""
}

func (x *CreateDespatchAdviceItemTotalRequest) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *CreateDespatchAdviceItemTotalRequest) GetGtin() uint32 {
	if x != nil {
		return x.Gtin
	}
	return 0
}

func (x *CreateDespatchAdviceItemTotalRequest) GetTradeItemIdentification() uint32 {
	if x != nil {
		return x.TradeItemIdentification
	}
	return 0
}

func (x *CreateDespatchAdviceItemTotalRequest) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

func (x *CreateDespatchAdviceItemTotalRequest) GetDespatchAdviceLineItemId() uint32 {
	if x != nil {
		return x.DespatchAdviceLineItemId
	}
	return 0
}

func (x *CreateDespatchAdviceItemTotalRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchAdviceItemTotalRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchAdviceItemTotalRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDespatchAdviceItemTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceItemTotal *DespatchAdviceItemTotal `protobuf:"bytes,1,opt,name=despatch_advice_item_total,json=despatchAdviceItemTotal,proto3" json:"despatch_advice_item_total,omitempty"`
}

func (x *CreateDespatchAdviceItemTotalResponse) Reset() {
	*x = CreateDespatchAdviceItemTotalResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceItemTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceItemTotalResponse) ProtoMessage() {}

func (x *CreateDespatchAdviceItemTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceItemTotalResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceItemTotalResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{21}
}

func (x *CreateDespatchAdviceItemTotalResponse) GetDespatchAdviceItemTotal() *DespatchAdviceItemTotal {
	if x != nil {
		return x.DespatchAdviceItemTotal
	}
	return nil
}

type DespatchAdviceLogisticUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceLogisticUnitD *DespatchAdviceLogisticUnitD `protobuf:"bytes,1,opt,name=despatch_advice_logistic_unit_d,json=despatchAdviceLogisticUnitD,proto3" json:"despatch_advice_logistic_unit_d,omitempty"`
	DespatchAdviceLogisticUnitT *DespatchAdviceLogisticUnitT `protobuf:"bytes,2,opt,name=despatch_advice_logistic_unit_t,json=despatchAdviceLogisticUnitT,proto3" json:"despatch_advice_logistic_unit_t,omitempty"`
}

func (x *DespatchAdviceLogisticUnit) Reset() {
	*x = DespatchAdviceLogisticUnit{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceLogisticUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceLogisticUnit) ProtoMessage() {}

func (x *DespatchAdviceLogisticUnit) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceLogisticUnit.ProtoReflect.Descriptor instead.
func (*DespatchAdviceLogisticUnit) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{22}
}

func (x *DespatchAdviceLogisticUnit) GetDespatchAdviceLogisticUnitD() *DespatchAdviceLogisticUnitD {
	if x != nil {
		return x.DespatchAdviceLogisticUnitD
	}
	return nil
}

func (x *DespatchAdviceLogisticUnit) GetDespatchAdviceLogisticUnitT() *DespatchAdviceLogisticUnitT {
	if x != nil {
		return x.DespatchAdviceLogisticUnitT
	}
	return nil
}

type DespatchAdviceLogisticUnitD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalLogisiticUnitIdentification        string `protobuf:"bytes,1,opt,name=additional_logisitic_unit_identification,json=additionalLogisiticUnitIdentification,proto3" json:"additional_logisitic_unit_identification,omitempty"`
	AdditionalLogisticUnitIdentificationTypeCode string `protobuf:"bytes,2,opt,name=additional_logistic_unit_identification_type_code,json=additionalLogisticUnitIdentificationTypeCode,proto3" json:"additional_logistic_unit_identification_type_code,omitempty"`
	CodeListVersion                              string `protobuf:"bytes,3,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	Sscc                                         string `protobuf:"bytes,4,opt,name=sscc,proto3" json:"sscc,omitempty"`
	UltimateConsignee                            uint32 `protobuf:"varint,5,opt,name=ultimate_consignee,json=ultimateConsignee,proto3" json:"ultimate_consignee,omitempty"`
	DespatchAdviceId                             uint32 `protobuf:"varint,6,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
}

func (x *DespatchAdviceLogisticUnitD) Reset() {
	*x = DespatchAdviceLogisticUnitD{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceLogisticUnitD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceLogisticUnitD) ProtoMessage() {}

func (x *DespatchAdviceLogisticUnitD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceLogisticUnitD.ProtoReflect.Descriptor instead.
func (*DespatchAdviceLogisticUnitD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{23}
}

func (x *DespatchAdviceLogisticUnitD) GetAdditionalLogisiticUnitIdentification() string {
	if x != nil {
		return x.AdditionalLogisiticUnitIdentification
	}
	return ""
}

func (x *DespatchAdviceLogisticUnitD) GetAdditionalLogisticUnitIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalLogisticUnitIdentificationTypeCode
	}
	return ""
}

func (x *DespatchAdviceLogisticUnitD) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *DespatchAdviceLogisticUnitD) GetSscc() string {
	if x != nil {
		return x.Sscc
	}
	return ""
}

func (x *DespatchAdviceLogisticUnitD) GetUltimateConsignee() uint32 {
	if x != nil {
		return x.UltimateConsignee
	}
	return 0
}

func (x *DespatchAdviceLogisticUnitD) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

type DespatchAdviceLogisticUnitT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimatedDeliveryDateTimeAtUltimateConsignee *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=estimated_delivery_date_time_at_ultimate_consignee,json=estimatedDeliveryDateTimeAtUltimateConsignee,proto3" json:"estimated_delivery_date_time_at_ultimate_consignee,omitempty"`
}

func (x *DespatchAdviceLogisticUnitT) Reset() {
	*x = DespatchAdviceLogisticUnitT{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceLogisticUnitT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceLogisticUnitT) ProtoMessage() {}

func (x *DespatchAdviceLogisticUnitT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceLogisticUnitT.ProtoReflect.Descriptor instead.
func (*DespatchAdviceLogisticUnitT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{24}
}

func (x *DespatchAdviceLogisticUnitT) GetEstimatedDeliveryDateTimeAtUltimateConsignee() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedDeliveryDateTimeAtUltimateConsignee
	}
	return nil
}

type CreateDespatchAdviceLogisticUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimatedDeliveryDateTimeAtUltimateConsignee string `protobuf:"bytes,1,opt,name=estimated_delivery_date_time_at_ultimate_consignee,json=estimatedDeliveryDateTimeAtUltimateConsignee,proto3" json:"estimated_delivery_date_time_at_ultimate_consignee,omitempty"`
	AdditionalLogisiticUnitIdentification        string `protobuf:"bytes,2,opt,name=additional_logisitic_unit_identification,json=additionalLogisiticUnitIdentification,proto3" json:"additional_logisitic_unit_identification,omitempty"`
	AdditionalLogisticUnitIdentificationTypeCode string `protobuf:"bytes,3,opt,name=additional_logistic_unit_identification_type_code,json=additionalLogisticUnitIdentificationTypeCode,proto3" json:"additional_logistic_unit_identification_type_code,omitempty"`
	CodeListVersion                              string `protobuf:"bytes,4,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	Sscc                                         string `protobuf:"bytes,5,opt,name=sscc,proto3" json:"sscc,omitempty"`
	UltimateConsignee                            uint32 `protobuf:"varint,6,opt,name=ultimate_consignee,json=ultimateConsignee,proto3" json:"ultimate_consignee,omitempty"`
	DespatchAdviceId                             uint32 `protobuf:"varint,7,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
	UserId                                       string `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                    string `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                    string `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDespatchAdviceLogisticUnitRequest) Reset() {
	*x = CreateDespatchAdviceLogisticUnitRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceLogisticUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceLogisticUnitRequest) ProtoMessage() {}

func (x *CreateDespatchAdviceLogisticUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceLogisticUnitRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceLogisticUnitRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{25}
}

func (x *CreateDespatchAdviceLogisticUnitRequest) GetEstimatedDeliveryDateTimeAtUltimateConsignee() string {
	if x != nil {
		return x.EstimatedDeliveryDateTimeAtUltimateConsignee
	}
	return ""
}

func (x *CreateDespatchAdviceLogisticUnitRequest) GetAdditionalLogisiticUnitIdentification() string {
	if x != nil {
		return x.AdditionalLogisiticUnitIdentification
	}
	return ""
}

func (x *CreateDespatchAdviceLogisticUnitRequest) GetAdditionalLogisticUnitIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalLogisticUnitIdentificationTypeCode
	}
	return ""
}

func (x *CreateDespatchAdviceLogisticUnitRequest) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *CreateDespatchAdviceLogisticUnitRequest) GetSscc() string {
	if x != nil {
		return x.Sscc
	}
	return ""
}

func (x *CreateDespatchAdviceLogisticUnitRequest) GetUltimateConsignee() uint32 {
	if x != nil {
		return x.UltimateConsignee
	}
	return 0
}

func (x *CreateDespatchAdviceLogisticUnitRequest) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

func (x *CreateDespatchAdviceLogisticUnitRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchAdviceLogisticUnitRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchAdviceLogisticUnitRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDespatchAdviceLogisticUnitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceLogisticUnit *DespatchAdviceLogisticUnit `protobuf:"bytes,1,opt,name=despatch_advice_logistic_unit,json=despatchAdviceLogisticUnit,proto3" json:"despatch_advice_logistic_unit,omitempty"`
}

func (x *CreateDespatchAdviceLogisticUnitResponse) Reset() {
	*x = CreateDespatchAdviceLogisticUnitResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceLogisticUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceLogisticUnitResponse) ProtoMessage() {}

func (x *CreateDespatchAdviceLogisticUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceLogisticUnitResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceLogisticUnitResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{26}
}

func (x *CreateDespatchAdviceLogisticUnitResponse) GetDespatchAdviceLogisticUnit() *DespatchAdviceLogisticUnit {
	if x != nil {
		return x.DespatchAdviceLogisticUnit
	}
	return nil
}

type DespatchAdviceQuantityVariance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceQuantityVarianceD *DespatchAdviceQuantityVarianceD `protobuf:"bytes,1,opt,name=despatch_advice_quantity_variance_d,json=despatchAdviceQuantityVarianceD,proto3" json:"despatch_advice_quantity_variance_d,omitempty"`
	DespatchAdviceQuantityVarianceT *DespatchAdviceQuantityVarianceT `protobuf:"bytes,2,opt,name=despatch_advice_quantity_variance_t,json=despatchAdviceQuantityVarianceT,proto3" json:"despatch_advice_quantity_variance_t,omitempty"`
}

func (x *DespatchAdviceQuantityVariance) Reset() {
	*x = DespatchAdviceQuantityVariance{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceQuantityVariance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceQuantityVariance) ProtoMessage() {}

func (x *DespatchAdviceQuantityVariance) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceQuantityVariance.ProtoReflect.Descriptor instead.
func (*DespatchAdviceQuantityVariance) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{27}
}

func (x *DespatchAdviceQuantityVariance) GetDespatchAdviceQuantityVarianceD() *DespatchAdviceQuantityVarianceD {
	if x != nil {
		return x.DespatchAdviceQuantityVarianceD
	}
	return nil
}

func (x *DespatchAdviceQuantityVariance) GetDespatchAdviceQuantityVarianceT() *DespatchAdviceQuantityVarianceT {
	if x != nil {
		return x.DespatchAdviceQuantityVarianceT
	}
	return nil
}

type DespatchAdviceQuantityVarianceD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemainingQuantityStatusCode string  `protobuf:"bytes,1,opt,name=remaining_quantity_status_code,json=remainingQuantityStatusCode,proto3" json:"remaining_quantity_status_code,omitempty"`
	VarianceQuantity            float64 `protobuf:"fixed64,2,opt,name=variance_quantity,json=varianceQuantity,proto3" json:"variance_quantity,omitempty"`
	VqMeasurementUnitCode       string  `protobuf:"bytes,3,opt,name=vq_measurement_unit_code,json=vqMeasurementUnitCode,proto3" json:"vq_measurement_unit_code,omitempty"`
	VqCodeListVersion           string  `protobuf:"bytes,4,opt,name=vq_code_list_version,json=vqCodeListVersion,proto3" json:"vq_code_list_version,omitempty"`
	VarianceReasonCode          string  `protobuf:"bytes,5,opt,name=variance_reason_code,json=varianceReasonCode,proto3" json:"variance_reason_code,omitempty"`
	DespatchAdviceId            uint32  `protobuf:"varint,6,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
}

func (x *DespatchAdviceQuantityVarianceD) Reset() {
	*x = DespatchAdviceQuantityVarianceD{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceQuantityVarianceD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceQuantityVarianceD) ProtoMessage() {}

func (x *DespatchAdviceQuantityVarianceD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceQuantityVarianceD.ProtoReflect.Descriptor instead.
func (*DespatchAdviceQuantityVarianceD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{28}
}

func (x *DespatchAdviceQuantityVarianceD) GetRemainingQuantityStatusCode() string {
	if x != nil {
		return x.RemainingQuantityStatusCode
	}
	return ""
}

func (x *DespatchAdviceQuantityVarianceD) GetVarianceQuantity() float64 {
	if x != nil {
		return x.VarianceQuantity
	}
	return 0
}

func (x *DespatchAdviceQuantityVarianceD) GetVqMeasurementUnitCode() string {
	if x != nil {
		return x.VqMeasurementUnitCode
	}
	return ""
}

func (x *DespatchAdviceQuantityVarianceD) GetVqCodeListVersion() string {
	if x != nil {
		return x.VqCodeListVersion
	}
	return ""
}

func (x *DespatchAdviceQuantityVarianceD) GetVarianceReasonCode() string {
	if x != nil {
		return x.VarianceReasonCode
	}
	return ""
}

func (x *DespatchAdviceQuantityVarianceD) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

type DespatchAdviceQuantityVarianceT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryDateVariance *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=delivery_date_variance,json=deliveryDateVariance,proto3" json:"delivery_date_variance,omitempty"`
}

func (x *DespatchAdviceQuantityVarianceT) Reset() {
	*x = DespatchAdviceQuantityVarianceT{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceQuantityVarianceT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceQuantityVarianceT) ProtoMessage() {}

func (x *DespatchAdviceQuantityVarianceT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceQuantityVarianceT.ProtoReflect.Descriptor instead.
func (*DespatchAdviceQuantityVarianceT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{29}
}

func (x *DespatchAdviceQuantityVarianceT) GetDeliveryDateVariance() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveryDateVariance
	}
	return nil
}

type CreateDespatchAdviceQuantityVarianceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryDateVariance        string  `protobuf:"bytes,1,opt,name=delivery_date_variance,json=deliveryDateVariance,proto3" json:"delivery_date_variance,omitempty"`
	RemainingQuantityStatusCode string  `protobuf:"bytes,2,opt,name=remaining_quantity_status_code,json=remainingQuantityStatusCode,proto3" json:"remaining_quantity_status_code,omitempty"`
	VarianceQuantity            float64 `protobuf:"fixed64,3,opt,name=variance_quantity,json=varianceQuantity,proto3" json:"variance_quantity,omitempty"`
	VqMeasurementUnitCode       string  `protobuf:"bytes,4,opt,name=vq_measurement_unit_code,json=vqMeasurementUnitCode,proto3" json:"vq_measurement_unit_code,omitempty"`
	VqCodeListVersion           string  `protobuf:"bytes,5,opt,name=vq_code_list_version,json=vqCodeListVersion,proto3" json:"vq_code_list_version,omitempty"`
	VarianceReasonCode          string  `protobuf:"bytes,6,opt,name=variance_reason_code,json=varianceReasonCode,proto3" json:"variance_reason_code,omitempty"`
	DespatchAdviceId            uint32  `protobuf:"varint,7,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
	UserId                      string  `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                   string  `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                   string  `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) Reset() {
	*x = CreateDespatchAdviceQuantityVarianceRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceQuantityVarianceRequest) ProtoMessage() {}

func (x *CreateDespatchAdviceQuantityVarianceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceQuantityVarianceRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceQuantityVarianceRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{30}
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) GetDeliveryDateVariance() string {
	if x != nil {
		return x.DeliveryDateVariance
	}
	return ""
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) GetRemainingQuantityStatusCode() string {
	if x != nil {
		return x.RemainingQuantityStatusCode
	}
	return ""
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) GetVarianceQuantity() float64 {
	if x != nil {
		return x.VarianceQuantity
	}
	return 0
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) GetVqMeasurementUnitCode() string {
	if x != nil {
		return x.VqMeasurementUnitCode
	}
	return ""
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) GetVqCodeListVersion() string {
	if x != nil {
		return x.VqCodeListVersion
	}
	return ""
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) GetVarianceReasonCode() string {
	if x != nil {
		return x.VarianceReasonCode
	}
	return ""
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchAdviceQuantityVarianceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDespatchAdviceQuantityVarianceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceQuantityVariance *DespatchAdviceQuantityVariance `protobuf:"bytes,1,opt,name=despatch_advice_quantity_variance,json=despatchAdviceQuantityVariance,proto3" json:"despatch_advice_quantity_variance,omitempty"`
}

func (x *CreateDespatchAdviceQuantityVarianceResponse) Reset() {
	*x = CreateDespatchAdviceQuantityVarianceResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceQuantityVarianceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceQuantityVarianceResponse) ProtoMessage() {}

func (x *CreateDespatchAdviceQuantityVarianceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceQuantityVarianceResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceQuantityVarianceResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{31}
}

func (x *CreateDespatchAdviceQuantityVarianceResponse) GetDespatchAdviceQuantityVariance() *DespatchAdviceQuantityVariance {
	if x != nil {
		return x.DespatchAdviceQuantityVariance
	}
	return nil
}

type DespatchAdviceTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementType  string `protobuf:"bytes,1,opt,name=measurement_type,json=measurementType,proto3" json:"measurement_type,omitempty"`
	MeasurementValue string `protobuf:"bytes,2,opt,name=measurement_value,json=measurementValue,proto3" json:"measurement_value,omitempty"`
	PackageTotal     uint32 `protobuf:"varint,3,opt,name=package_total,json=packageTotal,proto3" json:"package_total,omitempty"`
	DespatchAdviceId uint32 `protobuf:"varint,4,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
}

func (x *DespatchAdviceTotal) Reset() {
	*x = DespatchAdviceTotal{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceTotal) ProtoMessage() {}

func (x *DespatchAdviceTotal) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceTotal.ProtoReflect.Descriptor instead.
func (*DespatchAdviceTotal) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{32}
}

func (x *DespatchAdviceTotal) GetMeasurementType() string {
	if x != nil {
		return x.MeasurementType
	}
	return ""
}

func (x *DespatchAdviceTotal) GetMeasurementValue() string {
	if x != nil {
		return x.MeasurementValue
	}
	return ""
}

func (x *DespatchAdviceTotal) GetPackageTotal() uint32 {
	if x != nil {
		return x.PackageTotal
	}
	return 0
}

func (x *DespatchAdviceTotal) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

type CreateDespatchAdviceTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementType  string `protobuf:"bytes,1,opt,name=measurement_type,json=measurementType,proto3" json:"measurement_type,omitempty"`
	MeasurementValue string `protobuf:"bytes,2,opt,name=measurement_value,json=measurementValue,proto3" json:"measurement_value,omitempty"`
	PackageTotal     uint32 `protobuf:"varint,3,opt,name=package_total,json=packageTotal,proto3" json:"package_total,omitempty"`
	DespatchAdviceId uint32 `protobuf:"varint,4,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
	UserId           string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail        string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId        string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDespatchAdviceTotalRequest) Reset() {
	*x = CreateDespatchAdviceTotalRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceTotalRequest) ProtoMessage() {}

func (x *CreateDespatchAdviceTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceTotalRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceTotalRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{33}
}

func (x *CreateDespatchAdviceTotalRequest) GetMeasurementType() string {
	if x != nil {
		return x.MeasurementType
	}
	return ""
}

func (x *CreateDespatchAdviceTotalRequest) GetMeasurementValue() string {
	if x != nil {
		return x.MeasurementValue
	}
	return ""
}

func (x *CreateDespatchAdviceTotalRequest) GetPackageTotal() uint32 {
	if x != nil {
		return x.PackageTotal
	}
	return 0
}

func (x *CreateDespatchAdviceTotalRequest) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

func (x *CreateDespatchAdviceTotalRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchAdviceTotalRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchAdviceTotalRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDespatchAdviceTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceTotal *DespatchAdviceTotal `protobuf:"bytes,1,opt,name=despatch_advice_total,json=despatchAdviceTotal,proto3" json:"despatch_advice_total,omitempty"`
}

func (x *CreateDespatchAdviceTotalResponse) Reset() {
	*x = CreateDespatchAdviceTotalResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceTotalResponse) ProtoMessage() {}

func (x *CreateDespatchAdviceTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceTotalResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceTotalResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{34}
}

func (x *CreateDespatchAdviceTotalResponse) GetDespatchAdviceTotal() *DespatchAdviceTotal {
	if x != nil {
		return x.DespatchAdviceTotal
	}
	return nil
}

type DespatchAdviceTransportInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId                                     uint32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	TransportMeansId                            uint32 `protobuf:"varint,2,opt,name=transport_means_id,json=transportMeansId,proto3" json:"transport_means_id,omitempty"`
	TransportMeansName                          string `protobuf:"bytes,3,opt,name=transport_means_name,json=transportMeansName,proto3" json:"transport_means_name,omitempty"`
	TransportMeansType                          string `protobuf:"bytes,4,opt,name=transport_means_type,json=transportMeansType,proto3" json:"transport_means_type,omitempty"`
	TransportModeCode                           string `protobuf:"bytes,5,opt,name=transport_mode_code,json=transportModeCode,proto3" json:"transport_mode_code,omitempty"`
	BillOfLadingNumber                          uint32 `protobuf:"varint,6,opt,name=bill_of_lading_number,json=billOfLadingNumber,proto3" json:"bill_of_lading_number,omitempty"`
	AdditionalConsignmentIdentification         string `protobuf:"bytes,7,opt,name=additional_consignment_identification,json=additionalConsignmentIdentification,proto3" json:"additional_consignment_identification,omitempty"`
	AdditionalConsignmentIdentificationTypeCode string `protobuf:"bytes,8,opt,name=additional_consignment_identification_type_code,json=additionalConsignmentIdentificationTypeCode,proto3" json:"additional_consignment_identification_type_code,omitempty"`
	CodeListVersion                             string `protobuf:"bytes,9,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	Ginc                                        string `protobuf:"bytes,10,opt,name=ginc,proto3" json:"ginc,omitempty"`
	Driver                                      uint32 `protobuf:"varint,11,opt,name=driver,proto3" json:"driver,omitempty"`
	DriverId                                    uint32 `protobuf:"varint,12,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	Receiver                                    uint32 `protobuf:"varint,13,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverId                                  uint32 `protobuf:"varint,14,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	AdditionalShipmentIdentification            string `protobuf:"bytes,15,opt,name=additional_shipment_identification,json=additionalShipmentIdentification,proto3" json:"additional_shipment_identification,omitempty"`
	AdditionalShipmentIdentificationTypeCode    string `protobuf:"bytes,16,opt,name=additional_shipment_identification_type_code,json=additionalShipmentIdentificationTypeCode,proto3" json:"additional_shipment_identification_type_code,omitempty"`
	Gsin                                        string `protobuf:"bytes,17,opt,name=gsin,proto3" json:"gsin,omitempty"`
	DespatchAdviceId                            uint32 `protobuf:"varint,18,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
}

func (x *DespatchAdviceTransportInformation) Reset() {
	*x = DespatchAdviceTransportInformation{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchAdviceTransportInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchAdviceTransportInformation) ProtoMessage() {}

func (x *DespatchAdviceTransportInformation) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchAdviceTransportInformation.ProtoReflect.Descriptor instead.
func (*DespatchAdviceTransportInformation) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{35}
}

func (x *DespatchAdviceTransportInformation) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *DespatchAdviceTransportInformation) GetTransportMeansId() uint32 {
	if x != nil {
		return x.TransportMeansId
	}
	return 0
}

func (x *DespatchAdviceTransportInformation) GetTransportMeansName() string {
	if x != nil {
		return x.TransportMeansName
	}
	return ""
}

func (x *DespatchAdviceTransportInformation) GetTransportMeansType() string {
	if x != nil {
		return x.TransportMeansType
	}
	return ""
}

func (x *DespatchAdviceTransportInformation) GetTransportModeCode() string {
	if x != nil {
		return x.TransportModeCode
	}
	return ""
}

func (x *DespatchAdviceTransportInformation) GetBillOfLadingNumber() uint32 {
	if x != nil {
		return x.BillOfLadingNumber
	}
	return 0
}

func (x *DespatchAdviceTransportInformation) GetAdditionalConsignmentIdentification() string {
	if x != nil {
		return x.AdditionalConsignmentIdentification
	}
	return ""
}

func (x *DespatchAdviceTransportInformation) GetAdditionalConsignmentIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalConsignmentIdentificationTypeCode
	}
	return ""
}

func (x *DespatchAdviceTransportInformation) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *DespatchAdviceTransportInformation) GetGinc() string {
	if x != nil {
		return x.Ginc
	}
	return ""
}

func (x *DespatchAdviceTransportInformation) GetDriver() uint32 {
	if x != nil {
		return x.Driver
	}
	return 0
}

func (x *DespatchAdviceTransportInformation) GetDriverId() uint32 {
	if x != nil {
		return x.DriverId
	}
	return 0
}

func (x *DespatchAdviceTransportInformation) GetReceiver() uint32 {
	if x != nil {
		return x.Receiver
	}
	return 0
}

func (x *DespatchAdviceTransportInformation) GetReceiverId() uint32 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (x *DespatchAdviceTransportInformation) GetAdditionalShipmentIdentification() string {
	if x != nil {
		return x.AdditionalShipmentIdentification
	}
	return ""
}

func (x *DespatchAdviceTransportInformation) GetAdditionalShipmentIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalShipmentIdentificationTypeCode
	}
	return ""
}

func (x *DespatchAdviceTransportInformation) GetGsin() string {
	if x != nil {
		return x.Gsin
	}
	return ""
}

func (x *DespatchAdviceTransportInformation) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

type CreateDespatchAdviceTransportInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId                                     uint32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	TransportMeansId                            uint32 `protobuf:"varint,2,opt,name=transport_means_id,json=transportMeansId,proto3" json:"transport_means_id,omitempty"`
	TransportMeansName                          string `protobuf:"bytes,3,opt,name=transport_means_name,json=transportMeansName,proto3" json:"transport_means_name,omitempty"`
	TransportMeansType                          string `protobuf:"bytes,4,opt,name=transport_means_type,json=transportMeansType,proto3" json:"transport_means_type,omitempty"`
	TransportModeCode                           string `protobuf:"bytes,5,opt,name=transport_mode_code,json=transportModeCode,proto3" json:"transport_mode_code,omitempty"`
	BillOfLadingNumber                          uint32 `protobuf:"varint,6,opt,name=bill_of_lading_number,json=billOfLadingNumber,proto3" json:"bill_of_lading_number,omitempty"`
	AdditionalConsignmentIdentification         string `protobuf:"bytes,7,opt,name=additional_consignment_identification,json=additionalConsignmentIdentification,proto3" json:"additional_consignment_identification,omitempty"`
	AdditionalConsignmentIdentificationTypeCode string `protobuf:"bytes,8,opt,name=additional_consignment_identification_type_code,json=additionalConsignmentIdentificationTypeCode,proto3" json:"additional_consignment_identification_type_code,omitempty"`
	CodeListVersion                             string `protobuf:"bytes,9,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	Ginc                                        string `protobuf:"bytes,10,opt,name=ginc,proto3" json:"ginc,omitempty"`
	Driver                                      uint32 `protobuf:"varint,11,opt,name=driver,proto3" json:"driver,omitempty"`
	DriverId                                    uint32 `protobuf:"varint,12,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	Receiver                                    uint32 `protobuf:"varint,13,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverId                                  uint32 `protobuf:"varint,14,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	AdditionalShipmentIdentification            string `protobuf:"bytes,15,opt,name=additional_shipment_identification,json=additionalShipmentIdentification,proto3" json:"additional_shipment_identification,omitempty"`
	AdditionalShipmentIdentificationTypeCode    string `protobuf:"bytes,16,opt,name=additional_shipment_identification_type_code,json=additionalShipmentIdentificationTypeCode,proto3" json:"additional_shipment_identification_type_code,omitempty"`
	Gsin                                        string `protobuf:"bytes,17,opt,name=gsin,proto3" json:"gsin,omitempty"`
	DespatchAdviceId                            uint32 `protobuf:"varint,18,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
	UserId                                      string `protobuf:"bytes,19,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                   string `protobuf:"bytes,20,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                   string `protobuf:"bytes,21,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDespatchAdviceTransportInformationRequest) Reset() {
	*x = CreateDespatchAdviceTransportInformationRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceTransportInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceTransportInformationRequest) ProtoMessage() {}

func (x *CreateDespatchAdviceTransportInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceTransportInformationRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceTransportInformationRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{36}
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetTransportMeansId() uint32 {
	if x != nil {
		return x.TransportMeansId
	}
	return 0
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetTransportMeansName() string {
	if x != nil {
		return x.TransportMeansName
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetTransportMeansType() string {
	if x != nil {
		return x.TransportMeansType
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetTransportModeCode() string {
	if x != nil {
		return x.TransportModeCode
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetBillOfLadingNumber() uint32 {
	if x != nil {
		return x.BillOfLadingNumber
	}
	return 0
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetAdditionalConsignmentIdentification() string {
	if x != nil {
		return x.AdditionalConsignmentIdentification
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetAdditionalConsignmentIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalConsignmentIdentificationTypeCode
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetGinc() string {
	if x != nil {
		return x.Ginc
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetDriver() uint32 {
	if x != nil {
		return x.Driver
	}
	return 0
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetDriverId() uint32 {
	if x != nil {
		return x.DriverId
	}
	return 0
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetReceiver() uint32 {
	if x != nil {
		return x.Receiver
	}
	return 0
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetReceiverId() uint32 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetAdditionalShipmentIdentification() string {
	if x != nil {
		return x.AdditionalShipmentIdentification
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetAdditionalShipmentIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalShipmentIdentificationTypeCode
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetGsin() string {
	if x != nil {
		return x.Gsin
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchAdviceTransportInformationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDespatchAdviceTransportInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceTransportInformation *DespatchAdviceTransportInformation `protobuf:"bytes,1,opt,name=despatch_advice_transport_information,json=despatchAdviceTransportInformation,proto3" json:"despatch_advice_transport_information,omitempty"`
}

func (x *CreateDespatchAdviceTransportInformationResponse) Reset() {
	*x = CreateDespatchAdviceTransportInformationResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchAdviceTransportInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchAdviceTransportInformationResponse) ProtoMessage() {}

func (x *CreateDespatchAdviceTransportInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchAdviceTransportInformationResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchAdviceTransportInformationResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{37}
}

func (x *CreateDespatchAdviceTransportInformationResponse) GetDespatchAdviceTransportInformation() *DespatchAdviceTransportInformation {
	if x != nil {
		return x.DespatchAdviceTransportInformation
	}
	return nil
}

type DespatchInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchInformationD *DespatchInformationD `protobuf:"bytes,1,opt,name=despatch_information_d,json=despatchInformationD,proto3" json:"despatch_information_d,omitempty"`
	DespatchInformationT *DespatchInformationT `protobuf:"bytes,2,opt,name=despatch_information_t,json=despatchInformationT,proto3" json:"despatch_information_t,omitempty"`
}

func (x *DespatchInformation) Reset() {
	*x = DespatchInformation{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchInformation) ProtoMessage() {}

func (x *DespatchInformation) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchInformation.ProtoReflect.Descriptor instead.
func (*DespatchInformation) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{38}
}

func (x *DespatchInformation) GetDespatchInformationD() *DespatchInformationD {
	if x != nil {
		return x.DespatchInformationD
	}
	return nil
}

func (x *DespatchInformation) GetDespatchInformationT() *DespatchInformationT {
	if x != nil {
		return x.DespatchInformationT
	}
	return nil
}

type DespatchInformationD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceId uint32 `protobuf:"varint,1,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
}

func (x *DespatchInformationD) Reset() {
	*x = DespatchInformationD{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchInformationD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchInformationD) ProtoMessage() {}

func (x *DespatchInformationD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchInformationD.ProtoReflect.Descriptor instead.
func (*DespatchInformationD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{39}
}

func (x *DespatchInformationD) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

type DespatchInformationT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualShipDateTime                           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=actual_ship_date_time,json=actualShipDateTime,proto3" json:"actual_ship_date_time,omitempty"`
	DespatchDateTime                             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=despatch_date_time,json=despatchDateTime,proto3" json:"despatch_date_time,omitempty"`
	EstimatedDeliveryDateTime                    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=estimated_delivery_date_time,json=estimatedDeliveryDateTime,proto3" json:"estimated_delivery_date_time,omitempty"`
	EstimatedDeliveryDateTimeAtUltimateConsignee *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=estimated_delivery_date_time_at_ultimate_consignee,json=estimatedDeliveryDateTimeAtUltimateConsignee,proto3" json:"estimated_delivery_date_time_at_ultimate_consignee,omitempty"`
	LoadingDateTime                              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=loading_date_time,json=loadingDateTime,proto3" json:"loading_date_time,omitempty"`
	PickUpDateTime                               *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=pick_up_date_time,json=pickUpDateTime,proto3" json:"pick_up_date_time,omitempty"`
	ReleaseDateTimeOfSupplier                    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=release_date_time_of_supplier,json=releaseDateTimeOfSupplier,proto3" json:"release_date_time_of_supplier,omitempty"`
	EstimatedDeliveryPeriodBegin                 *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=estimated_delivery_period_begin,json=estimatedDeliveryPeriodBegin,proto3" json:"estimated_delivery_period_begin,omitempty"`
	EstimatedDeliveryPeriodEnd                   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=estimated_delivery_period_end,json=estimatedDeliveryPeriodEnd,proto3" json:"estimated_delivery_period_end,omitempty"`
}

func (x *DespatchInformationT) Reset() {
	*x = DespatchInformationT{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchInformationT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchInformationT) ProtoMessage() {}

func (x *DespatchInformationT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchInformationT.ProtoReflect.Descriptor instead.
func (*DespatchInformationT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{40}
}

func (x *DespatchInformationT) GetActualShipDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualShipDateTime
	}
	return nil
}

func (x *DespatchInformationT) GetDespatchDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DespatchDateTime
	}
	return nil
}

func (x *DespatchInformationT) GetEstimatedDeliveryDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedDeliveryDateTime
	}
	return nil
}

func (x *DespatchInformationT) GetEstimatedDeliveryDateTimeAtUltimateConsignee() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedDeliveryDateTimeAtUltimateConsignee
	}
	return nil
}

func (x *DespatchInformationT) GetLoadingDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LoadingDateTime
	}
	return nil
}

func (x *DespatchInformationT) GetPickUpDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PickUpDateTime
	}
	return nil
}

func (x *DespatchInformationT) GetReleaseDateTimeOfSupplier() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDateTimeOfSupplier
	}
	return nil
}

func (x *DespatchInformationT) GetEstimatedDeliveryPeriodBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedDeliveryPeriodBegin
	}
	return nil
}

func (x *DespatchInformationT) GetEstimatedDeliveryPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedDeliveryPeriodEnd
	}
	return nil
}

type CreateDespatchInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualShipDateTime                           string `protobuf:"bytes,1,opt,name=actual_ship_date_time,json=actualShipDateTime,proto3" json:"actual_ship_date_time,omitempty"`
	DespatchDateTime                             string `protobuf:"bytes,2,opt,name=despatch_date_time,json=despatchDateTime,proto3" json:"despatch_date_time,omitempty"`
	EstimatedDeliveryDateTime                    string `protobuf:"bytes,3,opt,name=estimated_delivery_date_time,json=estimatedDeliveryDateTime,proto3" json:"estimated_delivery_date_time,omitempty"`
	EstimatedDeliveryDateTimeAtUltimateConsignee string `protobuf:"bytes,4,opt,name=estimated_delivery_date_time_at_ultimate_consignee,json=estimatedDeliveryDateTimeAtUltimateConsignee,proto3" json:"estimated_delivery_date_time_at_ultimate_consignee,omitempty"`
	LoadingDateTime                              string `protobuf:"bytes,5,opt,name=loading_date_time,json=loadingDateTime,proto3" json:"loading_date_time,omitempty"`
	PickUpDateTime                               string `protobuf:"bytes,6,opt,name=pick_up_date_time,json=pickUpDateTime,proto3" json:"pick_up_date_time,omitempty"`
	ReleaseDateTimeOfSupplier                    string `protobuf:"bytes,7,opt,name=release_date_time_of_supplier,json=releaseDateTimeOfSupplier,proto3" json:"release_date_time_of_supplier,omitempty"`
	EstimatedDeliveryPeriodBegin                 string `protobuf:"bytes,8,opt,name=estimated_delivery_period_begin,json=estimatedDeliveryPeriodBegin,proto3" json:"estimated_delivery_period_begin,omitempty"`
	EstimatedDeliveryPeriodEnd                   string `protobuf:"bytes,9,opt,name=estimated_delivery_period_end,json=estimatedDeliveryPeriodEnd,proto3" json:"estimated_delivery_period_end,omitempty"`
	DespatchAdviceId                             uint32 `protobuf:"varint,10,opt,name=despatch_advice_id,json=despatchAdviceId,proto3" json:"despatch_advice_id,omitempty"`
	UserId                                       string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                    string `protobuf:"bytes,12,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                    string `protobuf:"bytes,13,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDespatchInformationRequest) Reset() {
	*x = CreateDespatchInformationRequest{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchInformationRequest) ProtoMessage() {}

func (x *CreateDespatchInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchInformationRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchInformationRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{41}
}

func (x *CreateDespatchInformationRequest) GetActualShipDateTime() string {
	if x != nil {
		return x.ActualShipDateTime
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetDespatchDateTime() string {
	if x != nil {
		return x.DespatchDateTime
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetEstimatedDeliveryDateTime() string {
	if x != nil {
		return x.EstimatedDeliveryDateTime
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetEstimatedDeliveryDateTimeAtUltimateConsignee() string {
	if x != nil {
		return x.EstimatedDeliveryDateTimeAtUltimateConsignee
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetLoadingDateTime() string {
	if x != nil {
		return x.LoadingDateTime
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetPickUpDateTime() string {
	if x != nil {
		return x.PickUpDateTime
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetReleaseDateTimeOfSupplier() string {
	if x != nil {
		return x.ReleaseDateTimeOfSupplier
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetEstimatedDeliveryPeriodBegin() string {
	if x != nil {
		return x.EstimatedDeliveryPeriodBegin
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetEstimatedDeliveryPeriodEnd() string {
	if x != nil {
		return x.EstimatedDeliveryPeriodEnd
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetDespatchAdviceId() uint32 {
	if x != nil {
		return x.DespatchAdviceId
	}
	return 0
}

func (x *CreateDespatchInformationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchInformationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDespatchInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchInformation *DespatchInformation `protobuf:"bytes,1,opt,name=despatch_information,json=despatchInformation,proto3" json:"despatch_information,omitempty"`
}

func (x *CreateDespatchInformationResponse) Reset() {
	*x = CreateDespatchInformationResponse{}
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchInformationResponse) ProtoMessage() {}

func (x *CreateDespatchInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatchadvice_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchInformationResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchInformationResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatchadvice_proto_rawDescGZIP(), []int{42}
}

func (x *CreateDespatchInformationResponse) GetDespatchInformation() *DespatchInformation {
	if x != nil {
		return x.DespatchInformation
	}
	return nil
}

var File_logistics_v1_despatchadvice_proto protoreflect.FileDescriptor

var file_logistics_v1_despatchadvice_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x11, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x0c, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11,
	0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x53, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3b, 0x0a, 0x1b, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x69,
	0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x41, 0x74, 0x50, 0x69,
	0x63, 0x6b, 0x55, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x74, 0x64, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x64, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x64, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x64,
	0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x1e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x55, 0x70,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61,
	0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x68, 0x69, 0x70, 0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x22,
	0xc2, 0x0c, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a,
	0x1b, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x5f, 0x75, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x41, 0x74, 0x50, 0x69, 0x63, 0x6b,
	0x55, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15,
	0x74, 0x64, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x64, 0x61,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x64, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x64, 0x61, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x3e, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x1b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x73,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x44, 0x0a, 0x1e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x62, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x64, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79,
	0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb3, 0x03,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1b, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75,
	0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x41, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x64,
	0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x64, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x64, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x64, 0x61, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x63,
	0x0a, 0x1b, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x52, 0x17, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x12, 0x63, 0x0a, 0x1b, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x52,
	0x17, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xdf, 0x0e, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2f,
	0x0a, 0x13, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x37, 0x0a, 0x18, 0x64, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x64, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x71, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x75, 0x74,
	0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x75, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x54, 0x61, 0x78, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x72, 0x65, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x19,
	0x66, 0x67, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x66, 0x67, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x67, 0x71, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x67, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1c, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x68, 0x61,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x65, 0x65, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x41, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x71, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x71, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12,
	0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x12, 0x59, 0x0a, 0x1c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x11, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xf3, 0x0f, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x64,
	0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x71, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16,
	0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x75,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x1c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x72, 0x65,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39,
	0x0a, 0x19, 0x66, 0x67, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x66, 0x67, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x67, 0x71,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x67, 0x71, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1c, 0x68, 0x61, 0x73, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x68, 0x61, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x65, 0x65, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x41, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x11,
	0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x71, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x71, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x72, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x15,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x24, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x16, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x22, 0x5b, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x87, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x17, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb7, 0x03, 0x0a, 0x17,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x24, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x2e, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x29, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x9b, 0x04, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x24, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x61, 0x0a, 0x2e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x29, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x74,
	0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1c,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x1a, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x17, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xfe, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x6f, 0x0a, 0x1f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55,
	0x6e, 0x69, 0x74, 0x44, 0x52, 0x1b, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x44, 0x12, 0x6f, 0x0a, 0x1f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x52, 0x1b, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x22, 0xfc, 0x02, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69,
	0x74, 0x44, 0x12, 0x57, 0x0a, 0x28, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x69, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x69, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x31, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2c, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x63, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x73, 0x63, 0x63, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0xa4, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x12, 0x84, 0x01, 0x0a, 0x32, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x2c, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x22, 0xc9, 0x04, 0x0a, 0x27, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x32, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x2c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x55, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x57,
	0x0a, 0x28, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x25, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x31, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x2c, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x73, 0x63, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x63, 0x63,
	0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x1d, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x1a, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x9a,
	0x02, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x7b, 0x0a, 0x23, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x52, 0x1f, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x12, 0x7b,
	0x0a, 0x23, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x52, 0x1f, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x22, 0xdd, 0x02, 0x0a, 0x1f,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x12,
	0x43, 0x0a, 0x1e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x71,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x71, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x1f, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x12, 0x50,
	0x0a, 0x16, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xf6, 0x03, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x71, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x71, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x76, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x2c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x21, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x1e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7a, 0x0a,
	0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x13, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x90, 0x07, 0x0a, 0x22, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x69,
	0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x52, 0x0a, 0x25, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x23, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x2f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2b, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x69, 0x6e, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x69, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x22,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x2c, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x28, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x73,
	0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x73, 0x69, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xf4, 0x07, 0x0a,
	0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x69,
	0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x52, 0x0a, 0x25, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x23, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x2f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2b, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x69, 0x6e, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x69, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x22,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x2c, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x28, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x73,
	0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x73, 0x69, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x30, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x25, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9,
	0x01, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x52, 0x14, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x12, 0x58, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x52, 0x14, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x22, 0x44, 0x0a, 0x14, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xc2, 0x06, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x12, 0x4d, 0x0a, 0x15, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x1c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x32, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x2c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x41, 0x74, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x11, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x1d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x1f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x5d, 0x0a, 0x1d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0xd6, 0x05, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x32,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x5f,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x41, 0x74, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x69, 0x63, 0x6b, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x1d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x1f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x79,
	0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xa6, 0x0d, 0x0a, 0x15, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x26, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x2a, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x31, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x35, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x24, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x39, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d,
	0x67, 0x73, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logistics_v1_despatchadvice_proto_rawDescOnce sync.Once
	file_logistics_v1_despatchadvice_proto_rawDescData = file_logistics_v1_despatchadvice_proto_rawDesc
)

func file_logistics_v1_despatchadvice_proto_rawDescGZIP() []byte {
	file_logistics_v1_despatchadvice_proto_rawDescOnce.Do(func() {
		file_logistics_v1_despatchadvice_proto_rawDescData = protoimpl.X.CompressGZIP(file_logistics_v1_despatchadvice_proto_rawDescData)
	})
	return file_logistics_v1_despatchadvice_proto_rawDescData
}

var file_logistics_v1_despatchadvice_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_logistics_v1_despatchadvice_proto_goTypes = []any{
	(*DespatchAdvice)(nil),                                   // 0: logistics.v1.DespatchAdvice
	(*DespatchAdviceD)(nil),                                  // 1: logistics.v1.DespatchAdviceD
	(*CreateDespatchAdviceRequest)(nil),                      // 2: logistics.v1.CreateDespatchAdviceRequest
	(*CreateDespatchAdviceResponse)(nil),                     // 3: logistics.v1.CreateDespatchAdviceResponse
	(*GetDespatchAdviceRequest)(nil),                         // 4: logistics.v1.GetDespatchAdviceRequest
	(*GetDespatchAdviceResponse)(nil),                        // 5: logistics.v1.GetDespatchAdviceResponse
	(*GetDespatchAdviceByPkRequest)(nil),                     // 6: logistics.v1.GetDespatchAdviceByPkRequest
	(*GetDespatchAdviceByPkResponse)(nil),                    // 7: logistics.v1.GetDespatchAdviceByPkResponse
	(*GetDespatchAdvicesResponse)(nil),                       // 8: logistics.v1.GetDespatchAdvicesResponse
	(*GetDespatchAdvicesRequest)(nil),                        // 9: logistics.v1.GetDespatchAdvicesRequest
	(*UpdateDespatchAdviceRequest)(nil),                      // 10: logistics.v1.UpdateDespatchAdviceRequest
	(*UpdateDespatchAdviceResponse)(nil),                     // 11: logistics.v1.UpdateDespatchAdviceResponse
	(*DespatchAdviceLineItem)(nil),                           // 12: logistics.v1.DespatchAdviceLineItem
	(*DespatchAdviceLineItemD)(nil),                          // 13: logistics.v1.DespatchAdviceLineItemD
	(*DespatchAdviceLineItemT)(nil),                          // 14: logistics.v1.DespatchAdviceLineItemT
	(*CreateDespatchAdviceLineItemRequest)(nil),              // 15: logistics.v1.CreateDespatchAdviceLineItemRequest
	(*CreateDespatchAdviceLineItemResponse)(nil),             // 16: logistics.v1.CreateDespatchAdviceLineItemResponse
	(*GetDespatchAdviceLineItemsRequest)(nil),                // 17: logistics.v1.GetDespatchAdviceLineItemsRequest
	(*GetDespatchAdviceLineItemsResponse)(nil),               // 18: logistics.v1.GetDespatchAdviceLineItemsResponse
	(*DespatchAdviceItemTotal)(nil),                          // 19: logistics.v1.DespatchAdviceItemTotal
	(*CreateDespatchAdviceItemTotalRequest)(nil),             // 20: logistics.v1.CreateDespatchAdviceItemTotalRequest
	(*CreateDespatchAdviceItemTotalResponse)(nil),            // 21: logistics.v1.CreateDespatchAdviceItemTotalResponse
	(*DespatchAdviceLogisticUnit)(nil),                       // 22: logistics.v1.DespatchAdviceLogisticUnit
	(*DespatchAdviceLogisticUnitD)(nil),                      // 23: logistics.v1.DespatchAdviceLogisticUnitD
	(*DespatchAdviceLogisticUnitT)(nil),                      // 24: logistics.v1.DespatchAdviceLogisticUnitT
	(*CreateDespatchAdviceLogisticUnitRequest)(nil),          // 25: logistics.v1.CreateDespatchAdviceLogisticUnitRequest
	(*CreateDespatchAdviceLogisticUnitResponse)(nil),         // 26: logistics.v1.CreateDespatchAdviceLogisticUnitResponse
	(*DespatchAdviceQuantityVariance)(nil),                   // 27: logistics.v1.DespatchAdviceQuantityVariance
	(*DespatchAdviceQuantityVarianceD)(nil),                  // 28: logistics.v1.DespatchAdviceQuantityVarianceD
	(*DespatchAdviceQuantityVarianceT)(nil),                  // 29: logistics.v1.DespatchAdviceQuantityVarianceT
	(*CreateDespatchAdviceQuantityVarianceRequest)(nil),      // 30: logistics.v1.CreateDespatchAdviceQuantityVarianceRequest
	(*CreateDespatchAdviceQuantityVarianceResponse)(nil),     // 31: logistics.v1.CreateDespatchAdviceQuantityVarianceResponse
	(*DespatchAdviceTotal)(nil),                              // 32: logistics.v1.DespatchAdviceTotal
	(*CreateDespatchAdviceTotalRequest)(nil),                 // 33: logistics.v1.CreateDespatchAdviceTotalRequest
	(*CreateDespatchAdviceTotalResponse)(nil),                // 34: logistics.v1.CreateDespatchAdviceTotalResponse
	(*DespatchAdviceTransportInformation)(nil),               // 35: logistics.v1.DespatchAdviceTransportInformation
	(*CreateDespatchAdviceTransportInformationRequest)(nil),  // 36: logistics.v1.CreateDespatchAdviceTransportInformationRequest
	(*CreateDespatchAdviceTransportInformationResponse)(nil), // 37: logistics.v1.CreateDespatchAdviceTransportInformationResponse
	(*DespatchInformation)(nil),                              // 38: logistics.v1.DespatchInformation
	(*DespatchInformationD)(nil),                             // 39: logistics.v1.DespatchInformationD
	(*DespatchInformationT)(nil),                             // 40: logistics.v1.DespatchInformationT
	(*CreateDespatchInformationRequest)(nil),                 // 41: logistics.v1.CreateDespatchInformationRequest
	(*CreateDespatchInformationResponse)(nil),                // 42: logistics.v1.CreateDespatchInformationResponse
	(*v1.CrUpdUser)(nil),                                     // 43: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                     // 44: common.v1.CrUpdTime
	(*v1.GetRequest)(nil),                                    // 45: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                                // 46: common.v1.GetByIdRequest
	(*timestamppb.Timestamp)(nil),                            // 47: google.protobuf.Timestamp
}
var file_logistics_v1_despatchadvice_proto_depIdxs = []int32{
	1,  // 0: logistics.v1.DespatchAdvice.despatch_advice_d:type_name -> logistics.v1.DespatchAdviceD
	43, // 1: logistics.v1.DespatchAdvice.cr_upd_user:type_name -> common.v1.CrUpdUser
	44, // 2: logistics.v1.DespatchAdvice.cr_upd_time:type_name -> common.v1.CrUpdTime
	0,  // 3: logistics.v1.CreateDespatchAdviceResponse.despatch_advice:type_name -> logistics.v1.DespatchAdvice
	45, // 4: logistics.v1.GetDespatchAdviceRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 5: logistics.v1.GetDespatchAdviceResponse.despatch_advice:type_name -> logistics.v1.DespatchAdvice
	46, // 6: logistics.v1.GetDespatchAdviceByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 7: logistics.v1.GetDespatchAdviceByPkResponse.despatch_advice:type_name -> logistics.v1.DespatchAdvice
	0,  // 8: logistics.v1.GetDespatchAdvicesResponse.despatch_advices:type_name -> logistics.v1.DespatchAdvice
	13, // 9: logistics.v1.DespatchAdviceLineItem.despatch_advice_line_item_d:type_name -> logistics.v1.DespatchAdviceLineItemD
	14, // 10: logistics.v1.DespatchAdviceLineItem.despatch_advice_line_item_t:type_name -> logistics.v1.DespatchAdviceLineItemT
	43, // 11: logistics.v1.DespatchAdviceLineItem.cr_upd_user:type_name -> common.v1.CrUpdUser
	44, // 12: logistics.v1.DespatchAdviceLineItem.cr_upd_time:type_name -> common.v1.CrUpdTime
	47, // 13: logistics.v1.DespatchAdviceLineItemT.first_in_first_out_date_time:type_name -> google.protobuf.Timestamp
	47, // 14: logistics.v1.DespatchAdviceLineItemT.pick_up_date_time:type_name -> google.protobuf.Timestamp
	12, // 15: logistics.v1.CreateDespatchAdviceLineItemResponse.despatch_advice_line_item:type_name -> logistics.v1.DespatchAdviceLineItem
	45, // 16: logistics.v1.GetDespatchAdviceLineItemsRequest.get_request:type_name -> common.v1.GetRequest
	12, // 17: logistics.v1.GetDespatchAdviceLineItemsResponse.despatch_advice_line_items:type_name -> logistics.v1.DespatchAdviceLineItem
	19, // 18: logistics.v1.CreateDespatchAdviceItemTotalResponse.despatch_advice_item_total:type_name -> logistics.v1.DespatchAdviceItemTotal
	23, // 19: logistics.v1.DespatchAdviceLogisticUnit.despatch_advice_logistic_unit_d:type_name -> logistics.v1.DespatchAdviceLogisticUnitD
	24, // 20: logistics.v1.DespatchAdviceLogisticUnit.despatch_advice_logistic_unit_t:type_name -> logistics.v1.DespatchAdviceLogisticUnitT
	47, // 21: logistics.v1.DespatchAdviceLogisticUnitT.estimated_delivery_date_time_at_ultimate_consignee:type_name -> google.protobuf.Timestamp
	22, // 22: logistics.v1.CreateDespatchAdviceLogisticUnitResponse.despatch_advice_logistic_unit:type_name -> logistics.v1.DespatchAdviceLogisticUnit
	28, // 23: logistics.v1.DespatchAdviceQuantityVariance.despatch_advice_quantity_variance_d:type_name -> logistics.v1.DespatchAdviceQuantityVarianceD
	29, // 24: logistics.v1.DespatchAdviceQuantityVariance.despatch_advice_quantity_variance_t:type_name -> logistics.v1.DespatchAdviceQuantityVarianceT
	47, // 25: logistics.v1.DespatchAdviceQuantityVarianceT.delivery_date_variance:type_name -> google.protobuf.Timestamp
	27, // 26: logistics.v1.CreateDespatchAdviceQuantityVarianceResponse.despatch_advice_quantity_variance:type_name -> logistics.v1.DespatchAdviceQuantityVariance
	32, // 27: logistics.v1.CreateDespatchAdviceTotalResponse.despatch_advice_total:type_name -> logistics.v1.DespatchAdviceTotal
	35, // 28: logistics.v1.CreateDespatchAdviceTransportInformationResponse.despatch_advice_transport_information:type_name -> logistics.v1.DespatchAdviceTransportInformation
	39, // 29: logistics.v1.DespatchInformation.despatch_information_d:type_name -> logistics.v1.DespatchInformationD
	40, // 30: logistics.v1.DespatchInformation.despatch_information_t:type_name -> logistics.v1.DespatchInformationT
	47, // 31: logistics.v1.DespatchInformationT.actual_ship_date_time:type_name -> google.protobuf.Timestamp
	47, // 32: logistics.v1.DespatchInformationT.despatch_date_time:type_name -> google.protobuf.Timestamp
	47, // 33: logistics.v1.DespatchInformationT.estimated_delivery_date_time:type_name -> google.protobuf.Timestamp
	47, // 34: logistics.v1.DespatchInformationT.estimated_delivery_date_time_at_ultimate_consignee:type_name -> google.protobuf.Timestamp
	47, // 35: logistics.v1.DespatchInformationT.loading_date_time:type_name -> google.protobuf.Timestamp
	47, // 36: logistics.v1.DespatchInformationT.pick_up_date_time:type_name -> google.protobuf.Timestamp
	47, // 37: logistics.v1.DespatchInformationT.release_date_time_of_supplier:type_name -> google.protobuf.Timestamp
	47, // 38: logistics.v1.DespatchInformationT.estimated_delivery_period_begin:type_name -> google.protobuf.Timestamp
	47, // 39: logistics.v1.DespatchInformationT.estimated_delivery_period_end:type_name -> google.protobuf.Timestamp
	38, // 40: logistics.v1.CreateDespatchInformationResponse.despatch_information:type_name -> logistics.v1.DespatchInformation
	2,  // 41: logistics.v1.DespatchAdviceService.CreateDespatchAdvice:input_type -> logistics.v1.CreateDespatchAdviceRequest
	9,  // 42: logistics.v1.DespatchAdviceService.GetDespatchAdvices:input_type -> logistics.v1.GetDespatchAdvicesRequest
	4,  // 43: logistics.v1.DespatchAdviceService.GetDespatchAdvice:input_type -> logistics.v1.GetDespatchAdviceRequest
	6,  // 44: logistics.v1.DespatchAdviceService.GetDespatchAdviceByPk:input_type -> logistics.v1.GetDespatchAdviceByPkRequest
	10, // 45: logistics.v1.DespatchAdviceService.UpdateDespatchAdvice:input_type -> logistics.v1.UpdateDespatchAdviceRequest
	15, // 46: logistics.v1.DespatchAdviceService.CreateDespatchAdviceLineItem:input_type -> logistics.v1.CreateDespatchAdviceLineItemRequest
	17, // 47: logistics.v1.DespatchAdviceService.GetDespatchAdviceLineItems:input_type -> logistics.v1.GetDespatchAdviceLineItemsRequest
	20, // 48: logistics.v1.DespatchAdviceService.CreateDespatchAdviceItemTotal:input_type -> logistics.v1.CreateDespatchAdviceItemTotalRequest
	25, // 49: logistics.v1.DespatchAdviceService.CreateDespatchAdviceLogisticUnit:input_type -> logistics.v1.CreateDespatchAdviceLogisticUnitRequest
	30, // 50: logistics.v1.DespatchAdviceService.CreateDespatchAdviceQuantityVariance:input_type -> logistics.v1.CreateDespatchAdviceQuantityVarianceRequest
	33, // 51: logistics.v1.DespatchAdviceService.CreateDespatchAdviceTotal:input_type -> logistics.v1.CreateDespatchAdviceTotalRequest
	36, // 52: logistics.v1.DespatchAdviceService.CreateDespatchAdviceTransportInformation:input_type -> logistics.v1.CreateDespatchAdviceTransportInformationRequest
	41, // 53: logistics.v1.DespatchAdviceService.CreateDespatchInformation:input_type -> logistics.v1.CreateDespatchInformationRequest
	3,  // 54: logistics.v1.DespatchAdviceService.CreateDespatchAdvice:output_type -> logistics.v1.CreateDespatchAdviceResponse
	8,  // 55: logistics.v1.DespatchAdviceService.GetDespatchAdvices:output_type -> logistics.v1.GetDespatchAdvicesResponse
	5,  // 56: logistics.v1.DespatchAdviceService.GetDespatchAdvice:output_type -> logistics.v1.GetDespatchAdviceResponse
	7,  // 57: logistics.v1.DespatchAdviceService.GetDespatchAdviceByPk:output_type -> logistics.v1.GetDespatchAdviceByPkResponse
	11, // 58: logistics.v1.DespatchAdviceService.UpdateDespatchAdvice:output_type -> logistics.v1.UpdateDespatchAdviceResponse
	16, // 59: logistics.v1.DespatchAdviceService.CreateDespatchAdviceLineItem:output_type -> logistics.v1.CreateDespatchAdviceLineItemResponse
	18, // 60: logistics.v1.DespatchAdviceService.GetDespatchAdviceLineItems:output_type -> logistics.v1.GetDespatchAdviceLineItemsResponse
	21, // 61: logistics.v1.DespatchAdviceService.CreateDespatchAdviceItemTotal:output_type -> logistics.v1.CreateDespatchAdviceItemTotalResponse
	26, // 62: logistics.v1.DespatchAdviceService.CreateDespatchAdviceLogisticUnit:output_type -> logistics.v1.CreateDespatchAdviceLogisticUnitResponse
	31, // 63: logistics.v1.DespatchAdviceService.CreateDespatchAdviceQuantityVariance:output_type -> logistics.v1.CreateDespatchAdviceQuantityVarianceResponse
	34, // 64: logistics.v1.DespatchAdviceService.CreateDespatchAdviceTotal:output_type -> logistics.v1.CreateDespatchAdviceTotalResponse
	37, // 65: logistics.v1.DespatchAdviceService.CreateDespatchAdviceTransportInformation:output_type -> logistics.v1.CreateDespatchAdviceTransportInformationResponse
	42, // 66: logistics.v1.DespatchAdviceService.CreateDespatchInformation:output_type -> logistics.v1.CreateDespatchInformationResponse
	54, // [54:67] is the sub-list for method output_type
	41, // [41:54] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_logistics_v1_despatchadvice_proto_init() }
func file_logistics_v1_despatchadvice_proto_init() {
	if File_logistics_v1_despatchadvice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logistics_v1_despatchadvice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logistics_v1_despatchadvice_proto_goTypes,
		DependencyIndexes: file_logistics_v1_despatchadvice_proto_depIdxs,
		MessageInfos:      file_logistics_v1_despatchadvice_proto_msgTypes,
	}.Build()
	File_logistics_v1_despatchadvice_proto = out.File
	file_logistics_v1_despatchadvice_proto_rawDesc = nil
	file_logistics_v1_despatchadvice_proto_goTypes = nil
	file_logistics_v1_despatchadvice_proto_depIdxs = nil
}
