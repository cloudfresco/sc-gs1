// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logistics/v1/despatchadvice.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DespatchAdvice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DespatchAdvice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdvice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DespatchAdviceMultiError,
// or nil if none found.
func (m *DespatchAdvice) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdvice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceValidationError{
					field:  "DespatchAdviceD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceValidationError{
					field:  "DespatchAdviceD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceValidationError{
				field:  "DespatchAdviceD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchAdviceMultiError(errors)
	}

	return nil
}

// DespatchAdviceMultiError is an error wrapping multiple validation errors
// returned by DespatchAdvice.ValidateAll() if the designated constraints
// aren't met.
type DespatchAdviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceMultiError) AllErrors() []error { return m }

// DespatchAdviceValidationError is the validation error returned by
// DespatchAdvice.Validate if the designated constraints aren't met.
type DespatchAdviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceValidationError) ErrorName() string { return "DespatchAdviceValidationError" }

// Error satisfies the builtin error interface
func (e DespatchAdviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdvice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceValidationError{}

// Validate checks the field values on DespatchAdviceD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchAdviceDMultiError, or nil if none found.
func (m *DespatchAdviceD) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for DeliveryTypeCode

	// no validation rules for RackIdAtPickUpLocation

	// no validation rules for TotalDepositAmount

	// no validation rules for TdaCodeListVersion

	// no validation rules for TdaCurrencyCode

	// no validation rules for TotalNumberOfLines

	// no validation rules for BlanketOrder

	// no validation rules for Buyer

	// no validation rules for Carrier

	// no validation rules for Contract

	// no validation rules for CustomerDocumentReference

	// no validation rules for DeclarantsCustomsIdentity

	// no validation rules for DeliveryNote

	// no validation rules for DeliverySchedule

	// no validation rules for DespatchAdviceIdentification

	// no validation rules for FreightForwarder

	// no validation rules for InventoryLocation

	// no validation rules for Invoice

	// no validation rules for Invoicee

	// no validation rules for LogisticServiceProvider

	// no validation rules for OrderResponse

	// no validation rules for PickUpLocation

	// no validation rules for ProductCertification

	// no validation rules for PromotionalDeal

	// no validation rules for PurchaseConditions

	// no validation rules for PurchaseOrder

	// no validation rules for Receiver

	// no validation rules for ReturnsInstruction

	// no validation rules for Seller

	// no validation rules for ShipFrom

	// no validation rules for Shipper

	// no validation rules for ShipTo

	// no validation rules for Specification

	// no validation rules for TransportInstruction

	// no validation rules for UltimateConsignee

	if len(errors) > 0 {
		return DespatchAdviceDMultiError(errors)
	}

	return nil
}

// DespatchAdviceDMultiError is an error wrapping multiple validation errors
// returned by DespatchAdviceD.ValidateAll() if the designated constraints
// aren't met.
type DespatchAdviceDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceDMultiError) AllErrors() []error { return m }

// DespatchAdviceDValidationError is the validation error returned by
// DespatchAdviceD.Validate if the designated constraints aren't met.
type DespatchAdviceDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceDValidationError) ErrorName() string { return "DespatchAdviceDValidationError" }

// Error satisfies the builtin error interface
func (e DespatchAdviceDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceDValidationError{}

// Validate checks the field values on CreateDespatchAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDespatchAdviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDespatchAdviceRequestMultiError, or nil if none found.
func (m *CreateDespatchAdviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeliveryTypeCode

	// no validation rules for RackIdAtPickUpLocation

	// no validation rules for TotalDepositAmount

	// no validation rules for TdaCodeListVersion

	// no validation rules for TdaCurrencyCode

	// no validation rules for TotalNumberOfLines

	// no validation rules for BlanketOrder

	// no validation rules for Buyer

	// no validation rules for Carrier

	// no validation rules for Contract

	// no validation rules for CustomerDocumentReference

	// no validation rules for DeclarantsCustomsIdentity

	// no validation rules for DeliveryNote

	// no validation rules for DeliverySchedule

	// no validation rules for DespatchAdviceIdentification

	// no validation rules for FreightForwarder

	// no validation rules for InventoryLocation

	// no validation rules for Invoice

	// no validation rules for Invoicee

	// no validation rules for LogisticServiceProvider

	// no validation rules for OrderResponse

	// no validation rules for PickUpLocation

	// no validation rules for ProductCertification

	// no validation rules for PromotionalDeal

	// no validation rules for PurchaseConditions

	// no validation rules for PurchaseOrder

	// no validation rules for Receiver

	// no validation rules for ReturnsInstruction

	// no validation rules for Seller

	// no validation rules for ShipFrom

	// no validation rules for Shipper

	// no validation rules for ShipTo

	// no validation rules for Specification

	// no validation rules for TransportInstruction

	// no validation rules for UltimateConsignee

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDespatchAdviceRequestMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDespatchAdviceRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateDespatchAdviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceRequestMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceRequestValidationError is the validation error returned
// by CreateDespatchAdviceRequest.Validate if the designated constraints
// aren't met.
type CreateDespatchAdviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceRequestValidationError) ErrorName() string {
	return "CreateDespatchAdviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceRequestValidationError{}

// Validate checks the field values on CreateDespatchAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDespatchAdviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDespatchAdviceResponseMultiError, or nil if none found.
func (m *CreateDespatchAdviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdvice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDespatchAdviceResponseValidationError{
					field:  "DespatchAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDespatchAdviceResponseValidationError{
					field:  "DespatchAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDespatchAdviceResponseValidationError{
				field:  "DespatchAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDespatchAdviceResponseMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateDespatchAdviceResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateDespatchAdviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceResponseMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceResponseValidationError is the validation error returned
// by CreateDespatchAdviceResponse.Validate if the designated constraints
// aren't met.
type CreateDespatchAdviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceResponseValidationError) ErrorName() string {
	return "CreateDespatchAdviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceResponseValidationError{}

// Validate checks the field values on GetDespatchAdviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchAdviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchAdviceRequestMultiError, or nil if none found.
func (m *GetDespatchAdviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchAdviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDespatchAdviceRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDespatchAdviceRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDespatchAdviceRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDespatchAdviceRequestMultiError(errors)
	}

	return nil
}

// GetDespatchAdviceRequestMultiError is an error wrapping multiple validation
// errors returned by GetDespatchAdviceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDespatchAdviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchAdviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchAdviceRequestMultiError) AllErrors() []error { return m }

// GetDespatchAdviceRequestValidationError is the validation error returned by
// GetDespatchAdviceRequest.Validate if the designated constraints aren't met.
type GetDespatchAdviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchAdviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchAdviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchAdviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchAdviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchAdviceRequestValidationError) ErrorName() string {
	return "GetDespatchAdviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchAdviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchAdviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchAdviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchAdviceRequestValidationError{}

// Validate checks the field values on GetDespatchAdviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchAdviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchAdviceResponseMultiError, or nil if none found.
func (m *GetDespatchAdviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchAdviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdvice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDespatchAdviceResponseValidationError{
					field:  "DespatchAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDespatchAdviceResponseValidationError{
					field:  "DespatchAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDespatchAdviceResponseValidationError{
				field:  "DespatchAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDespatchAdviceResponseMultiError(errors)
	}

	return nil
}

// GetDespatchAdviceResponseMultiError is an error wrapping multiple validation
// errors returned by GetDespatchAdviceResponse.ValidateAll() if the
// designated constraints aren't met.
type GetDespatchAdviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchAdviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchAdviceResponseMultiError) AllErrors() []error { return m }

// GetDespatchAdviceResponseValidationError is the validation error returned by
// GetDespatchAdviceResponse.Validate if the designated constraints aren't met.
type GetDespatchAdviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchAdviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchAdviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchAdviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchAdviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchAdviceResponseValidationError) ErrorName() string {
	return "GetDespatchAdviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchAdviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchAdviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchAdviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchAdviceResponseValidationError{}

// Validate checks the field values on GetDespatchAdviceByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchAdviceByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchAdviceByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchAdviceByPkRequestMultiError, or nil if none found.
func (m *GetDespatchAdviceByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchAdviceByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDespatchAdviceByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDespatchAdviceByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDespatchAdviceByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDespatchAdviceByPkRequestMultiError(errors)
	}

	return nil
}

// GetDespatchAdviceByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetDespatchAdviceByPkRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDespatchAdviceByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchAdviceByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchAdviceByPkRequestMultiError) AllErrors() []error { return m }

// GetDespatchAdviceByPkRequestValidationError is the validation error returned
// by GetDespatchAdviceByPkRequest.Validate if the designated constraints
// aren't met.
type GetDespatchAdviceByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchAdviceByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchAdviceByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchAdviceByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchAdviceByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchAdviceByPkRequestValidationError) ErrorName() string {
	return "GetDespatchAdviceByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchAdviceByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchAdviceByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchAdviceByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchAdviceByPkRequestValidationError{}

// Validate checks the field values on GetDespatchAdviceByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchAdviceByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchAdviceByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDespatchAdviceByPkResponseMultiError, or nil if none found.
func (m *GetDespatchAdviceByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchAdviceByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdvice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDespatchAdviceByPkResponseValidationError{
					field:  "DespatchAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDespatchAdviceByPkResponseValidationError{
					field:  "DespatchAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDespatchAdviceByPkResponseValidationError{
				field:  "DespatchAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDespatchAdviceByPkResponseMultiError(errors)
	}

	return nil
}

// GetDespatchAdviceByPkResponseMultiError is an error wrapping multiple
// validation errors returned by GetDespatchAdviceByPkResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDespatchAdviceByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchAdviceByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchAdviceByPkResponseMultiError) AllErrors() []error { return m }

// GetDespatchAdviceByPkResponseValidationError is the validation error
// returned by GetDespatchAdviceByPkResponse.Validate if the designated
// constraints aren't met.
type GetDespatchAdviceByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchAdviceByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchAdviceByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchAdviceByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchAdviceByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchAdviceByPkResponseValidationError) ErrorName() string {
	return "GetDespatchAdviceByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchAdviceByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchAdviceByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchAdviceByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchAdviceByPkResponseValidationError{}

// Validate checks the field values on GetDespatchAdvicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchAdvicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchAdvicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchAdvicesResponseMultiError, or nil if none found.
func (m *GetDespatchAdvicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchAdvicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDespatchAdvices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDespatchAdvicesResponseValidationError{
						field:  fmt.Sprintf("DespatchAdvices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDespatchAdvicesResponseValidationError{
						field:  fmt.Sprintf("DespatchAdvices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDespatchAdvicesResponseValidationError{
					field:  fmt.Sprintf("DespatchAdvices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetDespatchAdvicesResponseMultiError(errors)
	}

	return nil
}

// GetDespatchAdvicesResponseMultiError is an error wrapping multiple
// validation errors returned by GetDespatchAdvicesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDespatchAdvicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchAdvicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchAdvicesResponseMultiError) AllErrors() []error { return m }

// GetDespatchAdvicesResponseValidationError is the validation error returned
// by GetDespatchAdvicesResponse.Validate if the designated constraints aren't met.
type GetDespatchAdvicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchAdvicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchAdvicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchAdvicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchAdvicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchAdvicesResponseValidationError) ErrorName() string {
	return "GetDespatchAdvicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchAdvicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchAdvicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchAdvicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchAdvicesResponseValidationError{}

// Validate checks the field values on GetDespatchAdvicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchAdvicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchAdvicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchAdvicesRequestMultiError, or nil if none found.
func (m *GetDespatchAdvicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchAdvicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetDespatchAdvicesRequestMultiError(errors)
	}

	return nil
}

// GetDespatchAdvicesRequestMultiError is an error wrapping multiple validation
// errors returned by GetDespatchAdvicesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetDespatchAdvicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchAdvicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchAdvicesRequestMultiError) AllErrors() []error { return m }

// GetDespatchAdvicesRequestValidationError is the validation error returned by
// GetDespatchAdvicesRequest.Validate if the designated constraints aren't met.
type GetDespatchAdvicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchAdvicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchAdvicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchAdvicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchAdvicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchAdvicesRequestValidationError) ErrorName() string {
	return "GetDespatchAdvicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchAdvicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchAdvicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchAdvicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchAdvicesRequestValidationError{}

// Validate checks the field values on UpdateDespatchAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDespatchAdviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDespatchAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDespatchAdviceRequestMultiError, or nil if none found.
func (m *UpdateDespatchAdviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDespatchAdviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeliveryTypeCode

	// no validation rules for RackIdAtPickUpLocation

	// no validation rules for TotalDepositAmount

	// no validation rules for TdaCodeListVersion

	// no validation rules for TdaCurrencyCode

	// no validation rules for TotalNumberOfLines

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateDespatchAdviceRequestMultiError(errors)
	}

	return nil
}

// UpdateDespatchAdviceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDespatchAdviceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateDespatchAdviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDespatchAdviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDespatchAdviceRequestMultiError) AllErrors() []error { return m }

// UpdateDespatchAdviceRequestValidationError is the validation error returned
// by UpdateDespatchAdviceRequest.Validate if the designated constraints
// aren't met.
type UpdateDespatchAdviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDespatchAdviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDespatchAdviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDespatchAdviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDespatchAdviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDespatchAdviceRequestValidationError) ErrorName() string {
	return "UpdateDespatchAdviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDespatchAdviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDespatchAdviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDespatchAdviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDespatchAdviceRequestValidationError{}

// Validate checks the field values on UpdateDespatchAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDespatchAdviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDespatchAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDespatchAdviceResponseMultiError, or nil if none found.
func (m *UpdateDespatchAdviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDespatchAdviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDespatchAdviceResponseMultiError(errors)
	}

	return nil
}

// UpdateDespatchAdviceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateDespatchAdviceResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateDespatchAdviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDespatchAdviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDespatchAdviceResponseMultiError) AllErrors() []error { return m }

// UpdateDespatchAdviceResponseValidationError is the validation error returned
// by UpdateDespatchAdviceResponse.Validate if the designated constraints
// aren't met.
type UpdateDespatchAdviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDespatchAdviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDespatchAdviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDespatchAdviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDespatchAdviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDespatchAdviceResponseValidationError) ErrorName() string {
	return "UpdateDespatchAdviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDespatchAdviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDespatchAdviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDespatchAdviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDespatchAdviceResponseValidationError{}

// Validate checks the field values on DespatchAdviceLineItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceLineItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceLineItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchAdviceLineItemMultiError, or nil if none found.
func (m *DespatchAdviceLineItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceLineItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceLineItemD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceLineItemValidationError{
					field:  "DespatchAdviceLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceLineItemValidationError{
					field:  "DespatchAdviceLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceLineItemD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceLineItemValidationError{
				field:  "DespatchAdviceLineItemD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDespatchAdviceLineItemT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceLineItemValidationError{
					field:  "DespatchAdviceLineItemT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceLineItemValidationError{
					field:  "DespatchAdviceLineItemT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceLineItemT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceLineItemValidationError{
				field:  "DespatchAdviceLineItemT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceLineItemValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceLineItemValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchAdviceLineItemMultiError(errors)
	}

	return nil
}

// DespatchAdviceLineItemMultiError is an error wrapping multiple validation
// errors returned by DespatchAdviceLineItem.ValidateAll() if the designated
// constraints aren't met.
type DespatchAdviceLineItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceLineItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceLineItemMultiError) AllErrors() []error { return m }

// DespatchAdviceLineItemValidationError is the validation error returned by
// DespatchAdviceLineItem.Validate if the designated constraints aren't met.
type DespatchAdviceLineItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceLineItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceLineItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceLineItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceLineItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceLineItemValidationError) ErrorName() string {
	return "DespatchAdviceLineItemValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceLineItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceLineItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceLineItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceLineItemValidationError{}

// Validate checks the field values on DespatchAdviceLineItemD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceLineItemD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceLineItemD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchAdviceLineItemDMultiError, or nil if none found.
func (m *DespatchAdviceLineItemD) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceLineItemD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ActualProcessedQuantity

	// no validation rules for MeasurementUnitCode

	// no validation rules for CodeListVersion

	// no validation rules for CountryOfLastProcessing

	// no validation rules for CountryOfOrigin

	// no validation rules for DespatchedQuantity

	// no validation rules for DqMeasurementUnitCode

	// no validation rules for DqCodeListVersion

	// no validation rules for DutyFeeTaxLiability

	// no validation rules for Extension

	// no validation rules for FreeGoodsQuantity

	// no validation rules for FgqMeasurementUnitCode

	// no validation rules for FgqCodeListVersion

	// no validation rules for HandlingInstructionCode

	// no validation rules for HasItemBeenScannedAtPos

	// no validation rules for InventoryStatusType

	// no validation rules for LineItemNumber

	// no validation rules for ParentLineItemNumber

	// no validation rules for RequestedQuantity

	// no validation rules for RqMeasurementUnitCode

	// no validation rules for RqCodeListVersion

	// no validation rules for Contract

	// no validation rules for CouponClearingHouse

	// no validation rules for Customer

	// no validation rules for CustomerDocumentReference

	// no validation rules for CustomerReference

	// no validation rules for DeliveryNote

	// no validation rules for ItemOwner

	// no validation rules for OriginalSupplier

	// no validation rules for ProductCertification

	// no validation rules for PromotionalDeal

	// no validation rules for PurchaseConditions

	// no validation rules for PurchaseOrder

	// no validation rules for ReferencedConsignment

	// no validation rules for RequestedItemIdentification

	// no validation rules for Specification

	// no validation rules for DespatchAdviceId

	if len(errors) > 0 {
		return DespatchAdviceLineItemDMultiError(errors)
	}

	return nil
}

// DespatchAdviceLineItemDMultiError is an error wrapping multiple validation
// errors returned by DespatchAdviceLineItemD.ValidateAll() if the designated
// constraints aren't met.
type DespatchAdviceLineItemDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceLineItemDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceLineItemDMultiError) AllErrors() []error { return m }

// DespatchAdviceLineItemDValidationError is the validation error returned by
// DespatchAdviceLineItemD.Validate if the designated constraints aren't met.
type DespatchAdviceLineItemDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceLineItemDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceLineItemDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceLineItemDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceLineItemDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceLineItemDValidationError) ErrorName() string {
	return "DespatchAdviceLineItemDValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceLineItemDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceLineItemD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceLineItemDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceLineItemDValidationError{}

// Validate checks the field values on DespatchAdviceLineItemT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceLineItemT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceLineItemT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchAdviceLineItemTMultiError, or nil if none found.
func (m *DespatchAdviceLineItemT) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceLineItemT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFirstInFirstOutDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceLineItemTValidationError{
					field:  "FirstInFirstOutDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceLineItemTValidationError{
					field:  "FirstInFirstOutDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstInFirstOutDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceLineItemTValidationError{
				field:  "FirstInFirstOutDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPickUpDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceLineItemTValidationError{
					field:  "PickUpDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceLineItemTValidationError{
					field:  "PickUpDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickUpDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceLineItemTValidationError{
				field:  "PickUpDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchAdviceLineItemTMultiError(errors)
	}

	return nil
}

// DespatchAdviceLineItemTMultiError is an error wrapping multiple validation
// errors returned by DespatchAdviceLineItemT.ValidateAll() if the designated
// constraints aren't met.
type DespatchAdviceLineItemTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceLineItemTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceLineItemTMultiError) AllErrors() []error { return m }

// DespatchAdviceLineItemTValidationError is the validation error returned by
// DespatchAdviceLineItemT.Validate if the designated constraints aren't met.
type DespatchAdviceLineItemTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceLineItemTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceLineItemTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceLineItemTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceLineItemTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceLineItemTValidationError) ErrorName() string {
	return "DespatchAdviceLineItemTValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceLineItemTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceLineItemT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceLineItemTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceLineItemTValidationError{}

// Validate checks the field values on CreateDespatchAdviceLineItemRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateDespatchAdviceLineItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchAdviceLineItemRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDespatchAdviceLineItemRequestMultiError, or nil if none found.
func (m *CreateDespatchAdviceLineItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceLineItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActualProcessedQuantity

	// no validation rules for MeasurementUnitCode

	// no validation rules for CodeListVersion

	// no validation rules for CountryOfLastProcessing

	// no validation rules for CountryOfOrigin

	// no validation rules for DespatchedQuantity

	// no validation rules for DqMeasurementUnitCode

	// no validation rules for DqCodeListVersion

	// no validation rules for DutyFeeTaxLiability

	// no validation rules for Extension

	// no validation rules for FirstInFirstOutDateTime

	// no validation rules for FreeGoodsQuantity

	// no validation rules for FgqMeasurementUnitCode

	// no validation rules for FgqCodeListVersion

	// no validation rules for HandlingInstructionCode

	// no validation rules for HasItemBeenScannedAtPos

	// no validation rules for InventoryStatusType

	// no validation rules for LineItemNumber

	// no validation rules for ParentLineItemNumber

	// no validation rules for PickUpDateTime

	// no validation rules for RequestedQuantity

	// no validation rules for RqMeasurementUnitCode

	// no validation rules for RqCodeListVersion

	// no validation rules for Contract

	// no validation rules for CouponClearingHouse

	// no validation rules for Customer

	// no validation rules for CustomerDocumentReference

	// no validation rules for CustomerReference

	// no validation rules for DeliveryNote

	// no validation rules for ItemOwner

	// no validation rules for OriginalSupplier

	// no validation rules for ProductCertification

	// no validation rules for PromotionalDeal

	// no validation rules for PurchaseConditions

	// no validation rules for PurchaseOrder

	// no validation rules for ReferencedConsignment

	// no validation rules for RequestedItemIdentification

	// no validation rules for Specification

	// no validation rules for DespatchAdviceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDespatchAdviceLineItemRequestMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceLineItemRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateDespatchAdviceLineItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchAdviceLineItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceLineItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceLineItemRequestMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceLineItemRequestValidationError is the validation error
// returned by CreateDespatchAdviceLineItemRequest.Validate if the designated
// constraints aren't met.
type CreateDespatchAdviceLineItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceLineItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceLineItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceLineItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceLineItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceLineItemRequestValidationError) ErrorName() string {
	return "CreateDespatchAdviceLineItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceLineItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceLineItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceLineItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceLineItemRequestValidationError{}

// Validate checks the field values on CreateDespatchAdviceLineItemResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDespatchAdviceLineItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchAdviceLineItemResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDespatchAdviceLineItemResponseMultiError, or nil if none found.
func (m *CreateDespatchAdviceLineItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceLineItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceLineItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDespatchAdviceLineItemResponseValidationError{
					field:  "DespatchAdviceLineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDespatchAdviceLineItemResponseValidationError{
					field:  "DespatchAdviceLineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceLineItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDespatchAdviceLineItemResponseValidationError{
				field:  "DespatchAdviceLineItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDespatchAdviceLineItemResponseMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceLineItemResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateDespatchAdviceLineItemResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchAdviceLineItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceLineItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceLineItemResponseMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceLineItemResponseValidationError is the validation error
// returned by CreateDespatchAdviceLineItemResponse.Validate if the designated
// constraints aren't met.
type CreateDespatchAdviceLineItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceLineItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceLineItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceLineItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceLineItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceLineItemResponseValidationError) ErrorName() string {
	return "CreateDespatchAdviceLineItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceLineItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceLineItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceLineItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceLineItemResponseValidationError{}

// Validate checks the field values on GetDespatchAdviceLineItemsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDespatchAdviceLineItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchAdviceLineItemsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDespatchAdviceLineItemsRequestMultiError, or nil if none found.
func (m *GetDespatchAdviceLineItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchAdviceLineItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDespatchAdviceLineItemsRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDespatchAdviceLineItemsRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDespatchAdviceLineItemsRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDespatchAdviceLineItemsRequestMultiError(errors)
	}

	return nil
}

// GetDespatchAdviceLineItemsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetDespatchAdviceLineItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDespatchAdviceLineItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchAdviceLineItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchAdviceLineItemsRequestMultiError) AllErrors() []error { return m }

// GetDespatchAdviceLineItemsRequestValidationError is the validation error
// returned by GetDespatchAdviceLineItemsRequest.Validate if the designated
// constraints aren't met.
type GetDespatchAdviceLineItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchAdviceLineItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchAdviceLineItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchAdviceLineItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchAdviceLineItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchAdviceLineItemsRequestValidationError) ErrorName() string {
	return "GetDespatchAdviceLineItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchAdviceLineItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchAdviceLineItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchAdviceLineItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchAdviceLineItemsRequestValidationError{}

// Validate checks the field values on GetDespatchAdviceLineItemsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDespatchAdviceLineItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchAdviceLineItemsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDespatchAdviceLineItemsResponseMultiError, or nil if none found.
func (m *GetDespatchAdviceLineItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchAdviceLineItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDespatchAdviceLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDespatchAdviceLineItemsResponseValidationError{
						field:  fmt.Sprintf("DespatchAdviceLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDespatchAdviceLineItemsResponseValidationError{
						field:  fmt.Sprintf("DespatchAdviceLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDespatchAdviceLineItemsResponseValidationError{
					field:  fmt.Sprintf("DespatchAdviceLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDespatchAdviceLineItemsResponseMultiError(errors)
	}

	return nil
}

// GetDespatchAdviceLineItemsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetDespatchAdviceLineItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDespatchAdviceLineItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchAdviceLineItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchAdviceLineItemsResponseMultiError) AllErrors() []error { return m }

// GetDespatchAdviceLineItemsResponseValidationError is the validation error
// returned by GetDespatchAdviceLineItemsResponse.Validate if the designated
// constraints aren't met.
type GetDespatchAdviceLineItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchAdviceLineItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchAdviceLineItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchAdviceLineItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchAdviceLineItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchAdviceLineItemsResponseValidationError) ErrorName() string {
	return "GetDespatchAdviceLineItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchAdviceLineItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchAdviceLineItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchAdviceLineItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchAdviceLineItemsResponseValidationError{}

// Validate checks the field values on DespatchAdviceItemTotal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceItemTotal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceItemTotal with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchAdviceItemTotalMultiError, or nil if none found.
func (m *DespatchAdviceItemTotal) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceItemTotal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdditionalTradeItemIdentification

	// no validation rules for AdditionalTradeItemIdentificationTypeCode

	// no validation rules for CodeListVersion

	// no validation rules for Gtin

	// no validation rules for TradeItemIdentification

	// no validation rules for DespatchAdviceId

	// no validation rules for DespatchAdviceLineItemId

	if len(errors) > 0 {
		return DespatchAdviceItemTotalMultiError(errors)
	}

	return nil
}

// DespatchAdviceItemTotalMultiError is an error wrapping multiple validation
// errors returned by DespatchAdviceItemTotal.ValidateAll() if the designated
// constraints aren't met.
type DespatchAdviceItemTotalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceItemTotalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceItemTotalMultiError) AllErrors() []error { return m }

// DespatchAdviceItemTotalValidationError is the validation error returned by
// DespatchAdviceItemTotal.Validate if the designated constraints aren't met.
type DespatchAdviceItemTotalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceItemTotalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceItemTotalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceItemTotalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceItemTotalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceItemTotalValidationError) ErrorName() string {
	return "DespatchAdviceItemTotalValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceItemTotalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceItemTotal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceItemTotalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceItemTotalValidationError{}

// Validate checks the field values on CreateDespatchAdviceItemTotalRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDespatchAdviceItemTotalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchAdviceItemTotalRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDespatchAdviceItemTotalRequestMultiError, or nil if none found.
func (m *CreateDespatchAdviceItemTotalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceItemTotalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdditionalTradeItemIdentification

	// no validation rules for AdditionalTradeItemIdentificationTypeCode

	// no validation rules for CodeListVersion

	// no validation rules for Gtin

	// no validation rules for TradeItemIdentification

	// no validation rules for DespatchAdviceId

	// no validation rules for DespatchAdviceLineItemId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDespatchAdviceItemTotalRequestMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceItemTotalRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateDespatchAdviceItemTotalRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchAdviceItemTotalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceItemTotalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceItemTotalRequestMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceItemTotalRequestValidationError is the validation error
// returned by CreateDespatchAdviceItemTotalRequest.Validate if the designated
// constraints aren't met.
type CreateDespatchAdviceItemTotalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceItemTotalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceItemTotalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceItemTotalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceItemTotalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceItemTotalRequestValidationError) ErrorName() string {
	return "CreateDespatchAdviceItemTotalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceItemTotalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceItemTotalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceItemTotalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceItemTotalRequestValidationError{}

// Validate checks the field values on CreateDespatchAdviceItemTotalResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDespatchAdviceItemTotalResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchAdviceItemTotalResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDespatchAdviceItemTotalResponseMultiError, or nil if none found.
func (m *CreateDespatchAdviceItemTotalResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceItemTotalResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceItemTotal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDespatchAdviceItemTotalResponseValidationError{
					field:  "DespatchAdviceItemTotal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDespatchAdviceItemTotalResponseValidationError{
					field:  "DespatchAdviceItemTotal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceItemTotal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDespatchAdviceItemTotalResponseValidationError{
				field:  "DespatchAdviceItemTotal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDespatchAdviceItemTotalResponseMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceItemTotalResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateDespatchAdviceItemTotalResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchAdviceItemTotalResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceItemTotalResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceItemTotalResponseMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceItemTotalResponseValidationError is the validation error
// returned by CreateDespatchAdviceItemTotalResponse.Validate if the
// designated constraints aren't met.
type CreateDespatchAdviceItemTotalResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceItemTotalResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceItemTotalResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceItemTotalResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceItemTotalResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceItemTotalResponseValidationError) ErrorName() string {
	return "CreateDespatchAdviceItemTotalResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceItemTotalResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceItemTotalResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceItemTotalResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceItemTotalResponseValidationError{}

// Validate checks the field values on DespatchAdviceLogisticUnit with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceLogisticUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceLogisticUnit with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchAdviceLogisticUnitMultiError, or nil if none found.
func (m *DespatchAdviceLogisticUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceLogisticUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceLogisticUnitD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceLogisticUnitValidationError{
					field:  "DespatchAdviceLogisticUnitD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceLogisticUnitValidationError{
					field:  "DespatchAdviceLogisticUnitD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceLogisticUnitD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceLogisticUnitValidationError{
				field:  "DespatchAdviceLogisticUnitD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDespatchAdviceLogisticUnitT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceLogisticUnitValidationError{
					field:  "DespatchAdviceLogisticUnitT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceLogisticUnitValidationError{
					field:  "DespatchAdviceLogisticUnitT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceLogisticUnitT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceLogisticUnitValidationError{
				field:  "DespatchAdviceLogisticUnitT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchAdviceLogisticUnitMultiError(errors)
	}

	return nil
}

// DespatchAdviceLogisticUnitMultiError is an error wrapping multiple
// validation errors returned by DespatchAdviceLogisticUnit.ValidateAll() if
// the designated constraints aren't met.
type DespatchAdviceLogisticUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceLogisticUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceLogisticUnitMultiError) AllErrors() []error { return m }

// DespatchAdviceLogisticUnitValidationError is the validation error returned
// by DespatchAdviceLogisticUnit.Validate if the designated constraints aren't met.
type DespatchAdviceLogisticUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceLogisticUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceLogisticUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceLogisticUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceLogisticUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceLogisticUnitValidationError) ErrorName() string {
	return "DespatchAdviceLogisticUnitValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceLogisticUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceLogisticUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceLogisticUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceLogisticUnitValidationError{}

// Validate checks the field values on DespatchAdviceLogisticUnitD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceLogisticUnitD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceLogisticUnitD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchAdviceLogisticUnitDMultiError, or nil if none found.
func (m *DespatchAdviceLogisticUnitD) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceLogisticUnitD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdditionalLogisiticUnitIdentification

	// no validation rules for AdditionalLogisticUnitIdentificationTypeCode

	// no validation rules for CodeListVersion

	// no validation rules for Sscc

	// no validation rules for UltimateConsignee

	// no validation rules for DespatchAdviceId

	if len(errors) > 0 {
		return DespatchAdviceLogisticUnitDMultiError(errors)
	}

	return nil
}

// DespatchAdviceLogisticUnitDMultiError is an error wrapping multiple
// validation errors returned by DespatchAdviceLogisticUnitD.ValidateAll() if
// the designated constraints aren't met.
type DespatchAdviceLogisticUnitDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceLogisticUnitDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceLogisticUnitDMultiError) AllErrors() []error { return m }

// DespatchAdviceLogisticUnitDValidationError is the validation error returned
// by DespatchAdviceLogisticUnitD.Validate if the designated constraints
// aren't met.
type DespatchAdviceLogisticUnitDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceLogisticUnitDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceLogisticUnitDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceLogisticUnitDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceLogisticUnitDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceLogisticUnitDValidationError) ErrorName() string {
	return "DespatchAdviceLogisticUnitDValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceLogisticUnitDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceLogisticUnitD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceLogisticUnitDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceLogisticUnitDValidationError{}

// Validate checks the field values on DespatchAdviceLogisticUnitT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceLogisticUnitT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceLogisticUnitT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchAdviceLogisticUnitTMultiError, or nil if none found.
func (m *DespatchAdviceLogisticUnitT) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceLogisticUnitT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimatedDeliveryDateTimeAtUltimateConsignee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceLogisticUnitTValidationError{
					field:  "EstimatedDeliveryDateTimeAtUltimateConsignee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceLogisticUnitTValidationError{
					field:  "EstimatedDeliveryDateTimeAtUltimateConsignee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimatedDeliveryDateTimeAtUltimateConsignee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceLogisticUnitTValidationError{
				field:  "EstimatedDeliveryDateTimeAtUltimateConsignee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchAdviceLogisticUnitTMultiError(errors)
	}

	return nil
}

// DespatchAdviceLogisticUnitTMultiError is an error wrapping multiple
// validation errors returned by DespatchAdviceLogisticUnitT.ValidateAll() if
// the designated constraints aren't met.
type DespatchAdviceLogisticUnitTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceLogisticUnitTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceLogisticUnitTMultiError) AllErrors() []error { return m }

// DespatchAdviceLogisticUnitTValidationError is the validation error returned
// by DespatchAdviceLogisticUnitT.Validate if the designated constraints
// aren't met.
type DespatchAdviceLogisticUnitTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceLogisticUnitTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceLogisticUnitTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceLogisticUnitTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceLogisticUnitTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceLogisticUnitTValidationError) ErrorName() string {
	return "DespatchAdviceLogisticUnitTValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceLogisticUnitTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceLogisticUnitT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceLogisticUnitTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceLogisticUnitTValidationError{}

// Validate checks the field values on CreateDespatchAdviceLogisticUnitRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDespatchAdviceLogisticUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDespatchAdviceLogisticUnitRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateDespatchAdviceLogisticUnitRequestMultiError, or nil if none found.
func (m *CreateDespatchAdviceLogisticUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceLogisticUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimatedDeliveryDateTimeAtUltimateConsignee

	// no validation rules for AdditionalLogisiticUnitIdentification

	// no validation rules for AdditionalLogisticUnitIdentificationTypeCode

	// no validation rules for CodeListVersion

	// no validation rules for Sscc

	// no validation rules for UltimateConsignee

	// no validation rules for DespatchAdviceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDespatchAdviceLogisticUnitRequestMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceLogisticUnitRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateDespatchAdviceLogisticUnitRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchAdviceLogisticUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceLogisticUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceLogisticUnitRequestMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceLogisticUnitRequestValidationError is the validation
// error returned by CreateDespatchAdviceLogisticUnitRequest.Validate if the
// designated constraints aren't met.
type CreateDespatchAdviceLogisticUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceLogisticUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceLogisticUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceLogisticUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceLogisticUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceLogisticUnitRequestValidationError) ErrorName() string {
	return "CreateDespatchAdviceLogisticUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceLogisticUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceLogisticUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceLogisticUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceLogisticUnitRequestValidationError{}

// Validate checks the field values on CreateDespatchAdviceLogisticUnitResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDespatchAdviceLogisticUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDespatchAdviceLogisticUnitResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateDespatchAdviceLogisticUnitResponseMultiError, or nil if none found.
func (m *CreateDespatchAdviceLogisticUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceLogisticUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceLogisticUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDespatchAdviceLogisticUnitResponseValidationError{
					field:  "DespatchAdviceLogisticUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDespatchAdviceLogisticUnitResponseValidationError{
					field:  "DespatchAdviceLogisticUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceLogisticUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDespatchAdviceLogisticUnitResponseValidationError{
				field:  "DespatchAdviceLogisticUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDespatchAdviceLogisticUnitResponseMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceLogisticUnitResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateDespatchAdviceLogisticUnitResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchAdviceLogisticUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceLogisticUnitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceLogisticUnitResponseMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceLogisticUnitResponseValidationError is the validation
// error returned by CreateDespatchAdviceLogisticUnitResponse.Validate if the
// designated constraints aren't met.
type CreateDespatchAdviceLogisticUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceLogisticUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceLogisticUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceLogisticUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceLogisticUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceLogisticUnitResponseValidationError) ErrorName() string {
	return "CreateDespatchAdviceLogisticUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceLogisticUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceLogisticUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceLogisticUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceLogisticUnitResponseValidationError{}

// Validate checks the field values on DespatchAdviceQuantityVariance with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceQuantityVariance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceQuantityVariance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DespatchAdviceQuantityVarianceMultiError, or nil if none found.
func (m *DespatchAdviceQuantityVariance) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceQuantityVariance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceQuantityVarianceD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceQuantityVarianceValidationError{
					field:  "DespatchAdviceQuantityVarianceD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceQuantityVarianceValidationError{
					field:  "DespatchAdviceQuantityVarianceD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceQuantityVarianceD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceQuantityVarianceValidationError{
				field:  "DespatchAdviceQuantityVarianceD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDespatchAdviceQuantityVarianceT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceQuantityVarianceValidationError{
					field:  "DespatchAdviceQuantityVarianceT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceQuantityVarianceValidationError{
					field:  "DespatchAdviceQuantityVarianceT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceQuantityVarianceT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceQuantityVarianceValidationError{
				field:  "DespatchAdviceQuantityVarianceT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchAdviceQuantityVarianceMultiError(errors)
	}

	return nil
}

// DespatchAdviceQuantityVarianceMultiError is an error wrapping multiple
// validation errors returned by DespatchAdviceQuantityVariance.ValidateAll()
// if the designated constraints aren't met.
type DespatchAdviceQuantityVarianceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceQuantityVarianceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceQuantityVarianceMultiError) AllErrors() []error { return m }

// DespatchAdviceQuantityVarianceValidationError is the validation error
// returned by DespatchAdviceQuantityVariance.Validate if the designated
// constraints aren't met.
type DespatchAdviceQuantityVarianceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceQuantityVarianceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceQuantityVarianceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceQuantityVarianceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceQuantityVarianceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceQuantityVarianceValidationError) ErrorName() string {
	return "DespatchAdviceQuantityVarianceValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceQuantityVarianceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceQuantityVariance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceQuantityVarianceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceQuantityVarianceValidationError{}

// Validate checks the field values on DespatchAdviceQuantityVarianceD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceQuantityVarianceD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceQuantityVarianceD with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DespatchAdviceQuantityVarianceDMultiError, or nil if none found.
func (m *DespatchAdviceQuantityVarianceD) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceQuantityVarianceD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemainingQuantityStatusCode

	// no validation rules for VarianceQuantity

	// no validation rules for VqMeasurementUnitCode

	// no validation rules for VqCodeListVersion

	// no validation rules for VarianceReasonCode

	// no validation rules for DespatchAdviceId

	if len(errors) > 0 {
		return DespatchAdviceQuantityVarianceDMultiError(errors)
	}

	return nil
}

// DespatchAdviceQuantityVarianceDMultiError is an error wrapping multiple
// validation errors returned by DespatchAdviceQuantityVarianceD.ValidateAll()
// if the designated constraints aren't met.
type DespatchAdviceQuantityVarianceDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceQuantityVarianceDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceQuantityVarianceDMultiError) AllErrors() []error { return m }

// DespatchAdviceQuantityVarianceDValidationError is the validation error
// returned by DespatchAdviceQuantityVarianceD.Validate if the designated
// constraints aren't met.
type DespatchAdviceQuantityVarianceDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceQuantityVarianceDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceQuantityVarianceDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceQuantityVarianceDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceQuantityVarianceDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceQuantityVarianceDValidationError) ErrorName() string {
	return "DespatchAdviceQuantityVarianceDValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceQuantityVarianceDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceQuantityVarianceD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceQuantityVarianceDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceQuantityVarianceDValidationError{}

// Validate checks the field values on DespatchAdviceQuantityVarianceT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceQuantityVarianceT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceQuantityVarianceT with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DespatchAdviceQuantityVarianceTMultiError, or nil if none found.
func (m *DespatchAdviceQuantityVarianceT) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceQuantityVarianceT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeliveryDateVariance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchAdviceQuantityVarianceTValidationError{
					field:  "DeliveryDateVariance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchAdviceQuantityVarianceTValidationError{
					field:  "DeliveryDateVariance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryDateVariance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchAdviceQuantityVarianceTValidationError{
				field:  "DeliveryDateVariance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchAdviceQuantityVarianceTMultiError(errors)
	}

	return nil
}

// DespatchAdviceQuantityVarianceTMultiError is an error wrapping multiple
// validation errors returned by DespatchAdviceQuantityVarianceT.ValidateAll()
// if the designated constraints aren't met.
type DespatchAdviceQuantityVarianceTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceQuantityVarianceTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceQuantityVarianceTMultiError) AllErrors() []error { return m }

// DespatchAdviceQuantityVarianceTValidationError is the validation error
// returned by DespatchAdviceQuantityVarianceT.Validate if the designated
// constraints aren't met.
type DespatchAdviceQuantityVarianceTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceQuantityVarianceTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceQuantityVarianceTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceQuantityVarianceTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceQuantityVarianceTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceQuantityVarianceTValidationError) ErrorName() string {
	return "DespatchAdviceQuantityVarianceTValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceQuantityVarianceTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceQuantityVarianceT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceQuantityVarianceTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceQuantityVarianceTValidationError{}

// Validate checks the field values on
// CreateDespatchAdviceQuantityVarianceRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDespatchAdviceQuantityVarianceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDespatchAdviceQuantityVarianceRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateDespatchAdviceQuantityVarianceRequestMultiError, or nil if none found.
func (m *CreateDespatchAdviceQuantityVarianceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceQuantityVarianceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeliveryDateVariance

	// no validation rules for RemainingQuantityStatusCode

	// no validation rules for VarianceQuantity

	// no validation rules for VqMeasurementUnitCode

	// no validation rules for VqCodeListVersion

	// no validation rules for VarianceReasonCode

	// no validation rules for DespatchAdviceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDespatchAdviceQuantityVarianceRequestMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceQuantityVarianceRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateDespatchAdviceQuantityVarianceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchAdviceQuantityVarianceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceQuantityVarianceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceQuantityVarianceRequestMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceQuantityVarianceRequestValidationError is the validation
// error returned by CreateDespatchAdviceQuantityVarianceRequest.Validate if
// the designated constraints aren't met.
type CreateDespatchAdviceQuantityVarianceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceQuantityVarianceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceQuantityVarianceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceQuantityVarianceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceQuantityVarianceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceQuantityVarianceRequestValidationError) ErrorName() string {
	return "CreateDespatchAdviceQuantityVarianceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceQuantityVarianceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceQuantityVarianceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceQuantityVarianceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceQuantityVarianceRequestValidationError{}

// Validate checks the field values on
// CreateDespatchAdviceQuantityVarianceResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDespatchAdviceQuantityVarianceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDespatchAdviceQuantityVarianceResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateDespatchAdviceQuantityVarianceResponseMultiError, or nil if none found.
func (m *CreateDespatchAdviceQuantityVarianceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceQuantityVarianceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceQuantityVariance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDespatchAdviceQuantityVarianceResponseValidationError{
					field:  "DespatchAdviceQuantityVariance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDespatchAdviceQuantityVarianceResponseValidationError{
					field:  "DespatchAdviceQuantityVariance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceQuantityVariance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDespatchAdviceQuantityVarianceResponseValidationError{
				field:  "DespatchAdviceQuantityVariance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDespatchAdviceQuantityVarianceResponseMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceQuantityVarianceResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateDespatchAdviceQuantityVarianceResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateDespatchAdviceQuantityVarianceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceQuantityVarianceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceQuantityVarianceResponseMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceQuantityVarianceResponseValidationError is the
// validation error returned by
// CreateDespatchAdviceQuantityVarianceResponse.Validate if the designated
// constraints aren't met.
type CreateDespatchAdviceQuantityVarianceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceQuantityVarianceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceQuantityVarianceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceQuantityVarianceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceQuantityVarianceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceQuantityVarianceResponseValidationError) ErrorName() string {
	return "CreateDespatchAdviceQuantityVarianceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceQuantityVarianceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceQuantityVarianceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceQuantityVarianceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceQuantityVarianceResponseValidationError{}

// Validate checks the field values on DespatchAdviceTotal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchAdviceTotal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceTotal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchAdviceTotalMultiError, or nil if none found.
func (m *DespatchAdviceTotal) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceTotal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeasurementType

	// no validation rules for MeasurementValue

	// no validation rules for PackageTotal

	// no validation rules for DespatchAdviceId

	if len(errors) > 0 {
		return DespatchAdviceTotalMultiError(errors)
	}

	return nil
}

// DespatchAdviceTotalMultiError is an error wrapping multiple validation
// errors returned by DespatchAdviceTotal.ValidateAll() if the designated
// constraints aren't met.
type DespatchAdviceTotalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceTotalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceTotalMultiError) AllErrors() []error { return m }

// DespatchAdviceTotalValidationError is the validation error returned by
// DespatchAdviceTotal.Validate if the designated constraints aren't met.
type DespatchAdviceTotalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceTotalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceTotalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceTotalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceTotalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceTotalValidationError) ErrorName() string {
	return "DespatchAdviceTotalValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceTotalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceTotal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceTotalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceTotalValidationError{}

// Validate checks the field values on CreateDespatchAdviceTotalRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateDespatchAdviceTotalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchAdviceTotalRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDespatchAdviceTotalRequestMultiError, or nil if none found.
func (m *CreateDespatchAdviceTotalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceTotalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeasurementType

	// no validation rules for MeasurementValue

	// no validation rules for PackageTotal

	// no validation rules for DespatchAdviceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDespatchAdviceTotalRequestMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceTotalRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateDespatchAdviceTotalRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchAdviceTotalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceTotalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceTotalRequestMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceTotalRequestValidationError is the validation error
// returned by CreateDespatchAdviceTotalRequest.Validate if the designated
// constraints aren't met.
type CreateDespatchAdviceTotalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceTotalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceTotalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceTotalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceTotalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceTotalRequestValidationError) ErrorName() string {
	return "CreateDespatchAdviceTotalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceTotalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceTotalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceTotalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceTotalRequestValidationError{}

// Validate checks the field values on CreateDespatchAdviceTotalResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateDespatchAdviceTotalResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchAdviceTotalResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDespatchAdviceTotalResponseMultiError, or nil if none found.
func (m *CreateDespatchAdviceTotalResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceTotalResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceTotal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDespatchAdviceTotalResponseValidationError{
					field:  "DespatchAdviceTotal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDespatchAdviceTotalResponseValidationError{
					field:  "DespatchAdviceTotal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceTotal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDespatchAdviceTotalResponseValidationError{
				field:  "DespatchAdviceTotal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDespatchAdviceTotalResponseMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceTotalResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateDespatchAdviceTotalResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchAdviceTotalResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceTotalResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceTotalResponseMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceTotalResponseValidationError is the validation error
// returned by CreateDespatchAdviceTotalResponse.Validate if the designated
// constraints aren't met.
type CreateDespatchAdviceTotalResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceTotalResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchAdviceTotalResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchAdviceTotalResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceTotalResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceTotalResponseValidationError) ErrorName() string {
	return "CreateDespatchAdviceTotalResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceTotalResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceTotalResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceTotalResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceTotalResponseValidationError{}

// Validate checks the field values on DespatchAdviceTransportInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DespatchAdviceTransportInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchAdviceTransportInformation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DespatchAdviceTransportInformationMultiError, or nil if none found.
func (m *DespatchAdviceTransportInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchAdviceTransportInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RouteId

	// no validation rules for TransportMeansId

	// no validation rules for TransportMeansName

	// no validation rules for TransportMeansType

	// no validation rules for TransportModeCode

	// no validation rules for BillOfLadingNumber

	// no validation rules for AdditionalConsignmentIdentification

	// no validation rules for AdditionalConsignmentIdentificationTypeCode

	// no validation rules for CodeListVersion

	// no validation rules for Ginc

	// no validation rules for Driver

	// no validation rules for DriverId

	// no validation rules for Receiver

	// no validation rules for ReceiverId

	// no validation rules for AdditionalShipmentIdentification

	// no validation rules for AdditionalShipmentIdentificationTypeCode

	// no validation rules for Gsin

	// no validation rules for DespatchAdviceId

	if len(errors) > 0 {
		return DespatchAdviceTransportInformationMultiError(errors)
	}

	return nil
}

// DespatchAdviceTransportInformationMultiError is an error wrapping multiple
// validation errors returned by
// DespatchAdviceTransportInformation.ValidateAll() if the designated
// constraints aren't met.
type DespatchAdviceTransportInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchAdviceTransportInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchAdviceTransportInformationMultiError) AllErrors() []error { return m }

// DespatchAdviceTransportInformationValidationError is the validation error
// returned by DespatchAdviceTransportInformation.Validate if the designated
// constraints aren't met.
type DespatchAdviceTransportInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchAdviceTransportInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchAdviceTransportInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchAdviceTransportInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchAdviceTransportInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchAdviceTransportInformationValidationError) ErrorName() string {
	return "DespatchAdviceTransportInformationValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchAdviceTransportInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchAdviceTransportInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchAdviceTransportInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchAdviceTransportInformationValidationError{}

// Validate checks the field values on
// CreateDespatchAdviceTransportInformationRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDespatchAdviceTransportInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDespatchAdviceTransportInformationRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateDespatchAdviceTransportInformationRequestMultiError, or nil if none found.
func (m *CreateDespatchAdviceTransportInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceTransportInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RouteId

	// no validation rules for TransportMeansId

	// no validation rules for TransportMeansName

	// no validation rules for TransportMeansType

	// no validation rules for TransportModeCode

	// no validation rules for BillOfLadingNumber

	// no validation rules for AdditionalConsignmentIdentification

	// no validation rules for AdditionalConsignmentIdentificationTypeCode

	// no validation rules for CodeListVersion

	// no validation rules for Ginc

	// no validation rules for Driver

	// no validation rules for DriverId

	// no validation rules for Receiver

	// no validation rules for ReceiverId

	// no validation rules for AdditionalShipmentIdentification

	// no validation rules for AdditionalShipmentIdentificationTypeCode

	// no validation rules for Gsin

	// no validation rules for DespatchAdviceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDespatchAdviceTransportInformationRequestMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceTransportInformationRequestMultiError is an error
// wrapping multiple validation errors returned by
// CreateDespatchAdviceTransportInformationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateDespatchAdviceTransportInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceTransportInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceTransportInformationRequestMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceTransportInformationRequestValidationError is the
// validation error returned by
// CreateDespatchAdviceTransportInformationRequest.Validate if the designated
// constraints aren't met.
type CreateDespatchAdviceTransportInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceTransportInformationRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateDespatchAdviceTransportInformationRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateDespatchAdviceTransportInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchAdviceTransportInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceTransportInformationRequestValidationError) ErrorName() string {
	return "CreateDespatchAdviceTransportInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceTransportInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceTransportInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceTransportInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceTransportInformationRequestValidationError{}

// Validate checks the field values on
// CreateDespatchAdviceTransportInformationResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDespatchAdviceTransportInformationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDespatchAdviceTransportInformationResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateDespatchAdviceTransportInformationResponseMultiError, or nil if none found.
func (m *CreateDespatchAdviceTransportInformationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchAdviceTransportInformationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceTransportInformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDespatchAdviceTransportInformationResponseValidationError{
					field:  "DespatchAdviceTransportInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDespatchAdviceTransportInformationResponseValidationError{
					field:  "DespatchAdviceTransportInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceTransportInformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDespatchAdviceTransportInformationResponseValidationError{
				field:  "DespatchAdviceTransportInformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDespatchAdviceTransportInformationResponseMultiError(errors)
	}

	return nil
}

// CreateDespatchAdviceTransportInformationResponseMultiError is an error
// wrapping multiple validation errors returned by
// CreateDespatchAdviceTransportInformationResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateDespatchAdviceTransportInformationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchAdviceTransportInformationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchAdviceTransportInformationResponseMultiError) AllErrors() []error { return m }

// CreateDespatchAdviceTransportInformationResponseValidationError is the
// validation error returned by
// CreateDespatchAdviceTransportInformationResponse.Validate if the designated
// constraints aren't met.
type CreateDespatchAdviceTransportInformationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchAdviceTransportInformationResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateDespatchAdviceTransportInformationResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateDespatchAdviceTransportInformationResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateDespatchAdviceTransportInformationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchAdviceTransportInformationResponseValidationError) ErrorName() string {
	return "CreateDespatchAdviceTransportInformationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchAdviceTransportInformationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchAdviceTransportInformationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchAdviceTransportInformationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchAdviceTransportInformationResponseValidationError{}

// Validate checks the field values on DespatchInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchInformationMultiError, or nil if none found.
func (m *DespatchInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchInformationD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationValidationError{
					field:  "DespatchInformationD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationValidationError{
					field:  "DespatchInformationD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchInformationD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationValidationError{
				field:  "DespatchInformationD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDespatchInformationT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationValidationError{
					field:  "DespatchInformationT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationValidationError{
					field:  "DespatchInformationT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchInformationT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationValidationError{
				field:  "DespatchInformationT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchInformationMultiError(errors)
	}

	return nil
}

// DespatchInformationMultiError is an error wrapping multiple validation
// errors returned by DespatchInformation.ValidateAll() if the designated
// constraints aren't met.
type DespatchInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchInformationMultiError) AllErrors() []error { return m }

// DespatchInformationValidationError is the validation error returned by
// DespatchInformation.Validate if the designated constraints aren't met.
type DespatchInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchInformationValidationError) ErrorName() string {
	return "DespatchInformationValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchInformationValidationError{}

// Validate checks the field values on DespatchInformationD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchInformationD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchInformationD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchInformationDMultiError, or nil if none found.
func (m *DespatchInformationD) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchInformationD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DespatchAdviceId

	if len(errors) > 0 {
		return DespatchInformationDMultiError(errors)
	}

	return nil
}

// DespatchInformationDMultiError is an error wrapping multiple validation
// errors returned by DespatchInformationD.ValidateAll() if the designated
// constraints aren't met.
type DespatchInformationDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchInformationDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchInformationDMultiError) AllErrors() []error { return m }

// DespatchInformationDValidationError is the validation error returned by
// DespatchInformationD.Validate if the designated constraints aren't met.
type DespatchInformationDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchInformationDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchInformationDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchInformationDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchInformationDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchInformationDValidationError) ErrorName() string {
	return "DespatchInformationDValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchInformationDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchInformationD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchInformationDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchInformationDValidationError{}

// Validate checks the field values on DespatchInformationT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DespatchInformationT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchInformationT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchInformationTMultiError, or nil if none found.
func (m *DespatchInformationT) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchInformationT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActualShipDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "ActualShipDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "ActualShipDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActualShipDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationTValidationError{
				field:  "ActualShipDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDespatchDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "DespatchDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "DespatchDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationTValidationError{
				field:  "DespatchDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEstimatedDeliveryDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "EstimatedDeliveryDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "EstimatedDeliveryDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimatedDeliveryDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationTValidationError{
				field:  "EstimatedDeliveryDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEstimatedDeliveryDateTimeAtUltimateConsignee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "EstimatedDeliveryDateTimeAtUltimateConsignee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "EstimatedDeliveryDateTimeAtUltimateConsignee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimatedDeliveryDateTimeAtUltimateConsignee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationTValidationError{
				field:  "EstimatedDeliveryDateTimeAtUltimateConsignee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLoadingDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "LoadingDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "LoadingDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoadingDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationTValidationError{
				field:  "LoadingDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPickUpDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "PickUpDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "PickUpDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickUpDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationTValidationError{
				field:  "PickUpDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReleaseDateTimeOfSupplier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "ReleaseDateTimeOfSupplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "ReleaseDateTimeOfSupplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReleaseDateTimeOfSupplier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationTValidationError{
				field:  "ReleaseDateTimeOfSupplier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEstimatedDeliveryPeriodBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "EstimatedDeliveryPeriodBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "EstimatedDeliveryPeriodBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimatedDeliveryPeriodBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationTValidationError{
				field:  "EstimatedDeliveryPeriodBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEstimatedDeliveryPeriodEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "EstimatedDeliveryPeriodEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchInformationTValidationError{
					field:  "EstimatedDeliveryPeriodEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimatedDeliveryPeriodEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchInformationTValidationError{
				field:  "EstimatedDeliveryPeriodEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchInformationTMultiError(errors)
	}

	return nil
}

// DespatchInformationTMultiError is an error wrapping multiple validation
// errors returned by DespatchInformationT.ValidateAll() if the designated
// constraints aren't met.
type DespatchInformationTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchInformationTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchInformationTMultiError) AllErrors() []error { return m }

// DespatchInformationTValidationError is the validation error returned by
// DespatchInformationT.Validate if the designated constraints aren't met.
type DespatchInformationTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchInformationTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchInformationTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchInformationTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchInformationTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchInformationTValidationError) ErrorName() string {
	return "DespatchInformationTValidationError"
}

// Error satisfies the builtin error interface
func (e DespatchInformationTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchInformationT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchInformationTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchInformationTValidationError{}

// Validate checks the field values on CreateDespatchInformationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateDespatchInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchInformationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDespatchInformationRequestMultiError, or nil if none found.
func (m *CreateDespatchInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActualShipDateTime

	// no validation rules for DespatchDateTime

	// no validation rules for EstimatedDeliveryDateTime

	// no validation rules for EstimatedDeliveryDateTimeAtUltimateConsignee

	// no validation rules for LoadingDateTime

	// no validation rules for PickUpDateTime

	// no validation rules for ReleaseDateTimeOfSupplier

	// no validation rules for EstimatedDeliveryPeriodBegin

	// no validation rules for EstimatedDeliveryPeriodEnd

	// no validation rules for DespatchAdviceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDespatchInformationRequestMultiError(errors)
	}

	return nil
}

// CreateDespatchInformationRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateDespatchInformationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchInformationRequestMultiError) AllErrors() []error { return m }

// CreateDespatchInformationRequestValidationError is the validation error
// returned by CreateDespatchInformationRequest.Validate if the designated
// constraints aren't met.
type CreateDespatchInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchInformationRequestValidationError) ErrorName() string {
	return "CreateDespatchInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchInformationRequestValidationError{}

// Validate checks the field values on CreateDespatchInformationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateDespatchInformationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchInformationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDespatchInformationResponseMultiError, or nil if none found.
func (m *CreateDespatchInformationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchInformationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchInformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDespatchInformationResponseValidationError{
					field:  "DespatchInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDespatchInformationResponseValidationError{
					field:  "DespatchInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchInformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDespatchInformationResponseValidationError{
				field:  "DespatchInformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDespatchInformationResponseMultiError(errors)
	}

	return nil
}

// CreateDespatchInformationResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateDespatchInformationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDespatchInformationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchInformationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchInformationResponseMultiError) AllErrors() []error { return m }

// CreateDespatchInformationResponseValidationError is the validation error
// returned by CreateDespatchInformationResponse.Validate if the designated
// constraints aren't met.
type CreateDespatchInformationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchInformationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchInformationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchInformationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchInformationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchInformationResponseValidationError) ErrorName() string {
	return "CreateDespatchInformationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchInformationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchInformationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchInformationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchInformationResponseValidationError{}
