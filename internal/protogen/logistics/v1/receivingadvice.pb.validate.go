// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logistics/v1/receivingadvice.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReceivingAdvice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReceivingAdvice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivingAdvice with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceivingAdviceMultiError, or nil if none found.
func (m *ReceivingAdvice) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivingAdvice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceivingAdviceD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceValidationError{
					field:  "ReceivingAdviceD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceValidationError{
					field:  "ReceivingAdviceD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivingAdviceD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceValidationError{
				field:  "ReceivingAdviceD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceivingAdviceT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceValidationError{
					field:  "ReceivingAdviceT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceValidationError{
					field:  "ReceivingAdviceT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivingAdviceT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceValidationError{
				field:  "ReceivingAdviceT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReceivingAdviceMultiError(errors)
	}

	return nil
}

// ReceivingAdviceMultiError is an error wrapping multiple validation errors
// returned by ReceivingAdvice.ValidateAll() if the designated constraints
// aren't met.
type ReceivingAdviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivingAdviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivingAdviceMultiError) AllErrors() []error { return m }

// ReceivingAdviceValidationError is the validation error returned by
// ReceivingAdvice.Validate if the designated constraints aren't met.
type ReceivingAdviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivingAdviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivingAdviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivingAdviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivingAdviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivingAdviceValidationError) ErrorName() string { return "ReceivingAdviceValidationError" }

// Error satisfies the builtin error interface
func (e ReceivingAdviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivingAdvice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivingAdviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivingAdviceValidationError{}

// Validate checks the field values on ReceivingAdviceD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReceivingAdviceD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivingAdviceD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceivingAdviceDMultiError, or nil if none found.
func (m *ReceivingAdviceD) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivingAdviceD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ReportingCode

	// no validation rules for TotalAcceptedAmount

	// no validation rules for TaaCodeListVersion

	// no validation rules for TaaCurrencyCode

	// no validation rules for TotalDepositAmount

	// no validation rules for TdaCodeListVersion

	// no validation rules for TdaCurrencyCode

	// no validation rules for TotalNumberOfLines

	// no validation rules for TotalOnHoldAmount

	// no validation rules for TohaCodeListVersion

	// no validation rules for TohaCurrencyCode

	// no validation rules for TotalRejectedAmount

	// no validation rules for TraCodeListVersion

	// no validation rules for TraCurrencyCode

	// no validation rules for ReceivingAdviceTransportInformation

	// no validation rules for BillOfLadingNumber

	// no validation rules for Buyer

	// no validation rules for Carrier

	// no validation rules for ConsignmentIdentification

	// no validation rules for DeliveryNote

	// no validation rules for DespatchAdvice

	// no validation rules for InventoryLocation

	// no validation rules for PurchaseOrder

	// no validation rules for Receiver

	// no validation rules for ReceivingAdviceIdentification

	// no validation rules for Seller

	// no validation rules for ShipFrom

	// no validation rules for ShipmentIdentification

	// no validation rules for Shipper

	// no validation rules for ShipTo

	if len(errors) > 0 {
		return ReceivingAdviceDMultiError(errors)
	}

	return nil
}

// ReceivingAdviceDMultiError is an error wrapping multiple validation errors
// returned by ReceivingAdviceD.ValidateAll() if the designated constraints
// aren't met.
type ReceivingAdviceDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivingAdviceDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivingAdviceDMultiError) AllErrors() []error { return m }

// ReceivingAdviceDValidationError is the validation error returned by
// ReceivingAdviceD.Validate if the designated constraints aren't met.
type ReceivingAdviceDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivingAdviceDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivingAdviceDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivingAdviceDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivingAdviceDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivingAdviceDValidationError) ErrorName() string { return "ReceivingAdviceDValidationError" }

// Error satisfies the builtin error interface
func (e ReceivingAdviceDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivingAdviceD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivingAdviceDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivingAdviceDValidationError{}

// Validate checks the field values on ReceivingAdviceT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReceivingAdviceT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivingAdviceT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceivingAdviceTMultiError, or nil if none found.
func (m *ReceivingAdviceT) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivingAdviceT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchAdviceDeliveryDateTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "DespatchAdviceDeliveryDateTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "DespatchAdviceDeliveryDateTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceDeliveryDateTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceTValidationError{
				field:  "DespatchAdviceDeliveryDateTimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDespatchAdviceDeliveryDateTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "DespatchAdviceDeliveryDateTimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "DespatchAdviceDeliveryDateTimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchAdviceDeliveryDateTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceTValidationError{
				field:  "DespatchAdviceDeliveryDateTimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentDateTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "PaymentDateTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "PaymentDateTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentDateTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceTValidationError{
				field:  "PaymentDateTimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentDateTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "PaymentDateTimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "PaymentDateTimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentDateTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceTValidationError{
				field:  "PaymentDateTimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceivingDateTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "ReceivingDateTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "ReceivingDateTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivingDateTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceTValidationError{
				field:  "ReceivingDateTimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceivingDateTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "ReceivingDateTimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceTValidationError{
					field:  "ReceivingDateTimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivingDateTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceTValidationError{
				field:  "ReceivingDateTimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReceivingAdviceTMultiError(errors)
	}

	return nil
}

// ReceivingAdviceTMultiError is an error wrapping multiple validation errors
// returned by ReceivingAdviceT.ValidateAll() if the designated constraints
// aren't met.
type ReceivingAdviceTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivingAdviceTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivingAdviceTMultiError) AllErrors() []error { return m }

// ReceivingAdviceTValidationError is the validation error returned by
// ReceivingAdviceT.Validate if the designated constraints aren't met.
type ReceivingAdviceTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivingAdviceTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivingAdviceTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivingAdviceTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivingAdviceTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivingAdviceTValidationError) ErrorName() string { return "ReceivingAdviceTValidationError" }

// Error satisfies the builtin error interface
func (e ReceivingAdviceTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivingAdviceT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivingAdviceTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivingAdviceTValidationError{}

// Validate checks the field values on CreateReceivingAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReceivingAdviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReceivingAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReceivingAdviceRequestMultiError, or nil if none found.
func (m *CreateReceivingAdviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReceivingAdviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DespatchAdviceDeliveryDateTimeBegin

	// no validation rules for DespatchAdviceDeliveryDateTimeEnd

	// no validation rules for PaymentDateTimeBegin

	// no validation rules for PaymentDateTimeEnd

	// no validation rules for ReceivingDateTimeBegin

	// no validation rules for ReceivingDateTimeEnd

	// no validation rules for ReportingCode

	// no validation rules for TotalAcceptedAmount

	// no validation rules for TaaCodeListVersion

	// no validation rules for TaaCurrencyCode

	// no validation rules for TotalDepositAmount

	// no validation rules for TdaCodeListVersion

	// no validation rules for TdaCurrencyCode

	// no validation rules for TotalNumberOfLines

	// no validation rules for TotalOnHoldAmount

	// no validation rules for TohaCodeListVersion

	// no validation rules for TohaCurrencyCode

	// no validation rules for TotalRejectedAmount

	// no validation rules for TraCodeListVersion

	// no validation rules for TraCurrencyCode

	// no validation rules for ReceivingAdviceTransportInformation

	// no validation rules for BillOfLadingNumber

	// no validation rules for Buyer

	// no validation rules for Carrier

	// no validation rules for ConsignmentIdentification

	// no validation rules for DeliveryNote

	// no validation rules for DespatchAdvice

	// no validation rules for InventoryLocation

	// no validation rules for PurchaseOrder

	// no validation rules for Receiver

	// no validation rules for ReceivingAdviceIdentification

	// no validation rules for Seller

	// no validation rules for ShipFrom

	// no validation rules for ShipmentIdentification

	// no validation rules for Shipper

	// no validation rules for ShipTo

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateReceivingAdviceRequestMultiError(errors)
	}

	return nil
}

// CreateReceivingAdviceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateReceivingAdviceRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateReceivingAdviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReceivingAdviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReceivingAdviceRequestMultiError) AllErrors() []error { return m }

// CreateReceivingAdviceRequestValidationError is the validation error returned
// by CreateReceivingAdviceRequest.Validate if the designated constraints
// aren't met.
type CreateReceivingAdviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReceivingAdviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReceivingAdviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReceivingAdviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReceivingAdviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReceivingAdviceRequestValidationError) ErrorName() string {
	return "CreateReceivingAdviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReceivingAdviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReceivingAdviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReceivingAdviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReceivingAdviceRequestValidationError{}

// Validate checks the field values on CreateReceivingAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReceivingAdviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReceivingAdviceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateReceivingAdviceResponseMultiError, or nil if none found.
func (m *CreateReceivingAdviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReceivingAdviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceivingAdvice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReceivingAdviceResponseValidationError{
					field:  "ReceivingAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReceivingAdviceResponseValidationError{
					field:  "ReceivingAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivingAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReceivingAdviceResponseValidationError{
				field:  "ReceivingAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReceivingAdviceResponseMultiError(errors)
	}

	return nil
}

// CreateReceivingAdviceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateReceivingAdviceResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateReceivingAdviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReceivingAdviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReceivingAdviceResponseMultiError) AllErrors() []error { return m }

// CreateReceivingAdviceResponseValidationError is the validation error
// returned by CreateReceivingAdviceResponse.Validate if the designated
// constraints aren't met.
type CreateReceivingAdviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReceivingAdviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReceivingAdviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReceivingAdviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReceivingAdviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReceivingAdviceResponseValidationError) ErrorName() string {
	return "CreateReceivingAdviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReceivingAdviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReceivingAdviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReceivingAdviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReceivingAdviceResponseValidationError{}

// Validate checks the field values on GetReceivingAdviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivingAdviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivingAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceivingAdviceRequestMultiError, or nil if none found.
func (m *GetReceivingAdviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivingAdviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivingAdviceRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivingAdviceRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivingAdviceRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceivingAdviceRequestMultiError(errors)
	}

	return nil
}

// GetReceivingAdviceRequestMultiError is an error wrapping multiple validation
// errors returned by GetReceivingAdviceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetReceivingAdviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivingAdviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivingAdviceRequestMultiError) AllErrors() []error { return m }

// GetReceivingAdviceRequestValidationError is the validation error returned by
// GetReceivingAdviceRequest.Validate if the designated constraints aren't met.
type GetReceivingAdviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingAdviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingAdviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingAdviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingAdviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingAdviceRequestValidationError) ErrorName() string {
	return "GetReceivingAdviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingAdviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingAdviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingAdviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingAdviceRequestValidationError{}

// Validate checks the field values on GetReceivingAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivingAdviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivingAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceivingAdviceResponseMultiError, or nil if none found.
func (m *GetReceivingAdviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivingAdviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceivingAdvice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivingAdviceResponseValidationError{
					field:  "ReceivingAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivingAdviceResponseValidationError{
					field:  "ReceivingAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivingAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivingAdviceResponseValidationError{
				field:  "ReceivingAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceivingAdviceResponseMultiError(errors)
	}

	return nil
}

// GetReceivingAdviceResponseMultiError is an error wrapping multiple
// validation errors returned by GetReceivingAdviceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetReceivingAdviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivingAdviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivingAdviceResponseMultiError) AllErrors() []error { return m }

// GetReceivingAdviceResponseValidationError is the validation error returned
// by GetReceivingAdviceResponse.Validate if the designated constraints aren't met.
type GetReceivingAdviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingAdviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingAdviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingAdviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingAdviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingAdviceResponseValidationError) ErrorName() string {
	return "GetReceivingAdviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingAdviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingAdviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingAdviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingAdviceResponseValidationError{}

// Validate checks the field values on GetReceivingAdviceByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivingAdviceByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivingAdviceByPkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetReceivingAdviceByPkRequestMultiError, or nil if none found.
func (m *GetReceivingAdviceByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivingAdviceByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivingAdviceByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivingAdviceByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivingAdviceByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceivingAdviceByPkRequestMultiError(errors)
	}

	return nil
}

// GetReceivingAdviceByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetReceivingAdviceByPkRequest.ValidateAll()
// if the designated constraints aren't met.
type GetReceivingAdviceByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivingAdviceByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivingAdviceByPkRequestMultiError) AllErrors() []error { return m }

// GetReceivingAdviceByPkRequestValidationError is the validation error
// returned by GetReceivingAdviceByPkRequest.Validate if the designated
// constraints aren't met.
type GetReceivingAdviceByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingAdviceByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingAdviceByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingAdviceByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingAdviceByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingAdviceByPkRequestValidationError) ErrorName() string {
	return "GetReceivingAdviceByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingAdviceByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingAdviceByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingAdviceByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingAdviceByPkRequestValidationError{}

// Validate checks the field values on GetReceivingAdviceByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivingAdviceByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivingAdviceByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetReceivingAdviceByPkResponseMultiError, or nil if none found.
func (m *GetReceivingAdviceByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivingAdviceByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceivingAdvice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivingAdviceByPkResponseValidationError{
					field:  "ReceivingAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivingAdviceByPkResponseValidationError{
					field:  "ReceivingAdvice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivingAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivingAdviceByPkResponseValidationError{
				field:  "ReceivingAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceivingAdviceByPkResponseMultiError(errors)
	}

	return nil
}

// GetReceivingAdviceByPkResponseMultiError is an error wrapping multiple
// validation errors returned by GetReceivingAdviceByPkResponse.ValidateAll()
// if the designated constraints aren't met.
type GetReceivingAdviceByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivingAdviceByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivingAdviceByPkResponseMultiError) AllErrors() []error { return m }

// GetReceivingAdviceByPkResponseValidationError is the validation error
// returned by GetReceivingAdviceByPkResponse.Validate if the designated
// constraints aren't met.
type GetReceivingAdviceByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingAdviceByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingAdviceByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingAdviceByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingAdviceByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingAdviceByPkResponseValidationError) ErrorName() string {
	return "GetReceivingAdviceByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingAdviceByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingAdviceByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingAdviceByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingAdviceByPkResponseValidationError{}

// Validate checks the field values on GetReceivingAdvicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivingAdvicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivingAdvicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceivingAdvicesResponseMultiError, or nil if none found.
func (m *GetReceivingAdvicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivingAdvicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReceivingAdvices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReceivingAdvicesResponseValidationError{
						field:  fmt.Sprintf("ReceivingAdvices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReceivingAdvicesResponseValidationError{
						field:  fmt.Sprintf("ReceivingAdvices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReceivingAdvicesResponseValidationError{
					field:  fmt.Sprintf("ReceivingAdvices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetReceivingAdvicesResponseMultiError(errors)
	}

	return nil
}

// GetReceivingAdvicesResponseMultiError is an error wrapping multiple
// validation errors returned by GetReceivingAdvicesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetReceivingAdvicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivingAdvicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivingAdvicesResponseMultiError) AllErrors() []error { return m }

// GetReceivingAdvicesResponseValidationError is the validation error returned
// by GetReceivingAdvicesResponse.Validate if the designated constraints
// aren't met.
type GetReceivingAdvicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingAdvicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingAdvicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingAdvicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingAdvicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingAdvicesResponseValidationError) ErrorName() string {
	return "GetReceivingAdvicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingAdvicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingAdvicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingAdvicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingAdvicesResponseValidationError{}

// Validate checks the field values on GetReceivingAdvicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivingAdvicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivingAdvicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceivingAdvicesRequestMultiError, or nil if none found.
func (m *GetReceivingAdvicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivingAdvicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetReceivingAdvicesRequestMultiError(errors)
	}

	return nil
}

// GetReceivingAdvicesRequestMultiError is an error wrapping multiple
// validation errors returned by GetReceivingAdvicesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetReceivingAdvicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivingAdvicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivingAdvicesRequestMultiError) AllErrors() []error { return m }

// GetReceivingAdvicesRequestValidationError is the validation error returned
// by GetReceivingAdvicesRequest.Validate if the designated constraints aren't met.
type GetReceivingAdvicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingAdvicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingAdvicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingAdvicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingAdvicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingAdvicesRequestValidationError) ErrorName() string {
	return "GetReceivingAdvicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingAdvicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingAdvicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingAdvicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingAdvicesRequestValidationError{}

// Validate checks the field values on UpdateReceivingAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReceivingAdviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReceivingAdviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReceivingAdviceRequestMultiError, or nil if none found.
func (m *UpdateReceivingAdviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReceivingAdviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReportingCode

	// no validation rules for TotalAcceptedAmount

	// no validation rules for TaaCodeListVersion

	// no validation rules for TaaCurrencyCode

	// no validation rules for TotalDepositAmount

	// no validation rules for TdaCodeListVersion

	// no validation rules for TdaCurrencyCode

	// no validation rules for TotalNumberOfLines

	// no validation rules for TotalOnHoldAmount

	// no validation rules for TohaCodeListVersion

	// no validation rules for TohaCurrencyCode

	// no validation rules for TotalRejectedAmount

	// no validation rules for TraCodeListVersion

	// no validation rules for TraCurrencyCode

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateReceivingAdviceRequestMultiError(errors)
	}

	return nil
}

// UpdateReceivingAdviceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateReceivingAdviceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateReceivingAdviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReceivingAdviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReceivingAdviceRequestMultiError) AllErrors() []error { return m }

// UpdateReceivingAdviceRequestValidationError is the validation error returned
// by UpdateReceivingAdviceRequest.Validate if the designated constraints
// aren't met.
type UpdateReceivingAdviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceivingAdviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceivingAdviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceivingAdviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceivingAdviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceivingAdviceRequestValidationError) ErrorName() string {
	return "UpdateReceivingAdviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceivingAdviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceivingAdviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceivingAdviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceivingAdviceRequestValidationError{}

// Validate checks the field values on UpdateReceivingAdviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReceivingAdviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReceivingAdviceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateReceivingAdviceResponseMultiError, or nil if none found.
func (m *UpdateReceivingAdviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReceivingAdviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateReceivingAdviceResponseMultiError(errors)
	}

	return nil
}

// UpdateReceivingAdviceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateReceivingAdviceResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateReceivingAdviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReceivingAdviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReceivingAdviceResponseMultiError) AllErrors() []error { return m }

// UpdateReceivingAdviceResponseValidationError is the validation error
// returned by UpdateReceivingAdviceResponse.Validate if the designated
// constraints aren't met.
type UpdateReceivingAdviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceivingAdviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceivingAdviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceivingAdviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceivingAdviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceivingAdviceResponseValidationError) ErrorName() string {
	return "UpdateReceivingAdviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceivingAdviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceivingAdviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceivingAdviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceivingAdviceResponseValidationError{}

// Validate checks the field values on ReceivingAdviceLineItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceivingAdviceLineItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivingAdviceLineItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceivingAdviceLineItemMultiError, or nil if none found.
func (m *ReceivingAdviceLineItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivingAdviceLineItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceivingAdviceLineItemD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemValidationError{
					field:  "ReceivingAdviceLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemValidationError{
					field:  "ReceivingAdviceLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivingAdviceLineItemD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceLineItemValidationError{
				field:  "ReceivingAdviceLineItemD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceivingAdviceLineItemT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemValidationError{
					field:  "ReceivingAdviceLineItemT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemValidationError{
					field:  "ReceivingAdviceLineItemT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivingAdviceLineItemT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceLineItemValidationError{
				field:  "ReceivingAdviceLineItemT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceLineItemValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceLineItemValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReceivingAdviceLineItemMultiError(errors)
	}

	return nil
}

// ReceivingAdviceLineItemMultiError is an error wrapping multiple validation
// errors returned by ReceivingAdviceLineItem.ValidateAll() if the designated
// constraints aren't met.
type ReceivingAdviceLineItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivingAdviceLineItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivingAdviceLineItemMultiError) AllErrors() []error { return m }

// ReceivingAdviceLineItemValidationError is the validation error returned by
// ReceivingAdviceLineItem.Validate if the designated constraints aren't met.
type ReceivingAdviceLineItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivingAdviceLineItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivingAdviceLineItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivingAdviceLineItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivingAdviceLineItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivingAdviceLineItemValidationError) ErrorName() string {
	return "ReceivingAdviceLineItemValidationError"
}

// Error satisfies the builtin error interface
func (e ReceivingAdviceLineItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivingAdviceLineItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivingAdviceLineItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivingAdviceLineItemValidationError{}

// Validate checks the field values on ReceivingAdviceLineItemD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceivingAdviceLineItemD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivingAdviceLineItemD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceivingAdviceLineItemDMultiError, or nil if none found.
func (m *ReceivingAdviceLineItemD) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivingAdviceLineItemD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for LineItemNumber

	// no validation rules for ParentLineItemNumber

	// no validation rules for QuantityAccepted

	// no validation rules for QaMeasurementUnitCode

	// no validation rules for QaCodeListVersion

	// no validation rules for QuantityDespatched

	// no validation rules for QdMeasurementUnitCode

	// no validation rules for QdCodeListVersion

	// no validation rules for QuantityReceived

	// no validation rules for QrMeasurementUnitCode

	// no validation rules for QrCodeListVersion

	// no validation rules for TransactionalTradeItem

	// no validation rules for EcomConsignmentIdentification

	// no validation rules for Contract

	// no validation rules for CustomerReference

	// no validation rules for DeliveryNote

	// no validation rules for DespatchAdvice

	// no validation rules for ProductCertification

	// no validation rules for PromotionalDeal

	// no validation rules for PurchaseConditions

	// no validation rules for PurchaseOrder

	// no validation rules for RequestedItemIdentification

	// no validation rules for Specification

	// no validation rules for ReceivingAdviceId

	if len(errors) > 0 {
		return ReceivingAdviceLineItemDMultiError(errors)
	}

	return nil
}

// ReceivingAdviceLineItemDMultiError is an error wrapping multiple validation
// errors returned by ReceivingAdviceLineItemD.ValidateAll() if the designated
// constraints aren't met.
type ReceivingAdviceLineItemDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivingAdviceLineItemDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivingAdviceLineItemDMultiError) AllErrors() []error { return m }

// ReceivingAdviceLineItemDValidationError is the validation error returned by
// ReceivingAdviceLineItemD.Validate if the designated constraints aren't met.
type ReceivingAdviceLineItemDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivingAdviceLineItemDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivingAdviceLineItemDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivingAdviceLineItemDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivingAdviceLineItemDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivingAdviceLineItemDValidationError) ErrorName() string {
	return "ReceivingAdviceLineItemDValidationError"
}

// Error satisfies the builtin error interface
func (e ReceivingAdviceLineItemDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivingAdviceLineItemD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivingAdviceLineItemDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivingAdviceLineItemDValidationError{}

// Validate checks the field values on ReceivingAdviceLineItemT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceivingAdviceLineItemT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivingAdviceLineItemT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceivingAdviceLineItemTMultiError, or nil if none found.
func (m *ReceivingAdviceLineItemT) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivingAdviceLineItemT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPickUpDateTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemTValidationError{
					field:  "PickUpDateTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemTValidationError{
					field:  "PickUpDateTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickUpDateTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceLineItemTValidationError{
				field:  "PickUpDateTimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPickUpDateTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemTValidationError{
					field:  "PickUpDateTimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivingAdviceLineItemTValidationError{
					field:  "PickUpDateTimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickUpDateTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivingAdviceLineItemTValidationError{
				field:  "PickUpDateTimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReceivingAdviceLineItemTMultiError(errors)
	}

	return nil
}

// ReceivingAdviceLineItemTMultiError is an error wrapping multiple validation
// errors returned by ReceivingAdviceLineItemT.ValidateAll() if the designated
// constraints aren't met.
type ReceivingAdviceLineItemTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivingAdviceLineItemTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivingAdviceLineItemTMultiError) AllErrors() []error { return m }

// ReceivingAdviceLineItemTValidationError is the validation error returned by
// ReceivingAdviceLineItemT.Validate if the designated constraints aren't met.
type ReceivingAdviceLineItemTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivingAdviceLineItemTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivingAdviceLineItemTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivingAdviceLineItemTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivingAdviceLineItemTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivingAdviceLineItemTValidationError) ErrorName() string {
	return "ReceivingAdviceLineItemTValidationError"
}

// Error satisfies the builtin error interface
func (e ReceivingAdviceLineItemTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivingAdviceLineItemT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivingAdviceLineItemTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivingAdviceLineItemTValidationError{}

// Validate checks the field values on CreateReceivingAdviceLineItemRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateReceivingAdviceLineItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReceivingAdviceLineItemRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateReceivingAdviceLineItemRequestMultiError, or nil if none found.
func (m *CreateReceivingAdviceLineItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReceivingAdviceLineItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LineItemNumber

	// no validation rules for ParentLineItemNumber

	// no validation rules for PickUpDateTimeBegin

	// no validation rules for PickUpDateTimeEnd

	// no validation rules for QuantityAccepted

	// no validation rules for QaMeasurementUnitCode

	// no validation rules for QaCodeListVersion

	// no validation rules for QuantityDespatched

	// no validation rules for QdMeasurementUnitCode

	// no validation rules for QdCodeListVersion

	// no validation rules for QuantityReceived

	// no validation rules for QrMeasurementUnitCode

	// no validation rules for QrCodeListVersion

	// no validation rules for TransactionalTradeItem

	// no validation rules for EcomConsignmentIdentification

	// no validation rules for Contract

	// no validation rules for CustomerReference

	// no validation rules for DeliveryNote

	// no validation rules for DespatchAdvice

	// no validation rules for ProductCertification

	// no validation rules for PromotionalDeal

	// no validation rules for PurchaseConditions

	// no validation rules for PurchaseOrder

	// no validation rules for RequestedItemIdentification

	// no validation rules for Specification

	// no validation rules for ReceivingAdviceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateReceivingAdviceLineItemRequestMultiError(errors)
	}

	return nil
}

// CreateReceivingAdviceLineItemRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateReceivingAdviceLineItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReceivingAdviceLineItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReceivingAdviceLineItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReceivingAdviceLineItemRequestMultiError) AllErrors() []error { return m }

// CreateReceivingAdviceLineItemRequestValidationError is the validation error
// returned by CreateReceivingAdviceLineItemRequest.Validate if the designated
// constraints aren't met.
type CreateReceivingAdviceLineItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReceivingAdviceLineItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReceivingAdviceLineItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReceivingAdviceLineItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReceivingAdviceLineItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReceivingAdviceLineItemRequestValidationError) ErrorName() string {
	return "CreateReceivingAdviceLineItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReceivingAdviceLineItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReceivingAdviceLineItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReceivingAdviceLineItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReceivingAdviceLineItemRequestValidationError{}

// Validate checks the field values on CreateReceivingAdviceLineItemResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateReceivingAdviceLineItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReceivingAdviceLineItemResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateReceivingAdviceLineItemResponseMultiError, or nil if none found.
func (m *CreateReceivingAdviceLineItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReceivingAdviceLineItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceivingAdviceLineItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReceivingAdviceLineItemResponseValidationError{
					field:  "ReceivingAdviceLineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReceivingAdviceLineItemResponseValidationError{
					field:  "ReceivingAdviceLineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivingAdviceLineItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReceivingAdviceLineItemResponseValidationError{
				field:  "ReceivingAdviceLineItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReceivingAdviceLineItemResponseMultiError(errors)
	}

	return nil
}

// CreateReceivingAdviceLineItemResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateReceivingAdviceLineItemResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReceivingAdviceLineItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReceivingAdviceLineItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReceivingAdviceLineItemResponseMultiError) AllErrors() []error { return m }

// CreateReceivingAdviceLineItemResponseValidationError is the validation error
// returned by CreateReceivingAdviceLineItemResponse.Validate if the
// designated constraints aren't met.
type CreateReceivingAdviceLineItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReceivingAdviceLineItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReceivingAdviceLineItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReceivingAdviceLineItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReceivingAdviceLineItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReceivingAdviceLineItemResponseValidationError) ErrorName() string {
	return "CreateReceivingAdviceLineItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReceivingAdviceLineItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReceivingAdviceLineItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReceivingAdviceLineItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReceivingAdviceLineItemResponseValidationError{}

// Validate checks the field values on GetReceivingAdviceLineItemsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetReceivingAdviceLineItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivingAdviceLineItemsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetReceivingAdviceLineItemsRequestMultiError, or nil if none found.
func (m *GetReceivingAdviceLineItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivingAdviceLineItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivingAdviceLineItemsRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivingAdviceLineItemsRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivingAdviceLineItemsRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceivingAdviceLineItemsRequestMultiError(errors)
	}

	return nil
}

// GetReceivingAdviceLineItemsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetReceivingAdviceLineItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetReceivingAdviceLineItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivingAdviceLineItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivingAdviceLineItemsRequestMultiError) AllErrors() []error { return m }

// GetReceivingAdviceLineItemsRequestValidationError is the validation error
// returned by GetReceivingAdviceLineItemsRequest.Validate if the designated
// constraints aren't met.
type GetReceivingAdviceLineItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingAdviceLineItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingAdviceLineItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingAdviceLineItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingAdviceLineItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingAdviceLineItemsRequestValidationError) ErrorName() string {
	return "GetReceivingAdviceLineItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingAdviceLineItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingAdviceLineItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingAdviceLineItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingAdviceLineItemsRequestValidationError{}

// Validate checks the field values on GetReceivingAdviceLineItemsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetReceivingAdviceLineItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivingAdviceLineItemsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetReceivingAdviceLineItemsResponseMultiError, or nil if none found.
func (m *GetReceivingAdviceLineItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivingAdviceLineItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReceivingAdviceLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReceivingAdviceLineItemsResponseValidationError{
						field:  fmt.Sprintf("ReceivingAdviceLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReceivingAdviceLineItemsResponseValidationError{
						field:  fmt.Sprintf("ReceivingAdviceLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReceivingAdviceLineItemsResponseValidationError{
					field:  fmt.Sprintf("ReceivingAdviceLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReceivingAdviceLineItemsResponseMultiError(errors)
	}

	return nil
}

// GetReceivingAdviceLineItemsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetReceivingAdviceLineItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetReceivingAdviceLineItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivingAdviceLineItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivingAdviceLineItemsResponseMultiError) AllErrors() []error { return m }

// GetReceivingAdviceLineItemsResponseValidationError is the validation error
// returned by GetReceivingAdviceLineItemsResponse.Validate if the designated
// constraints aren't met.
type GetReceivingAdviceLineItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingAdviceLineItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingAdviceLineItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingAdviceLineItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingAdviceLineItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingAdviceLineItemsResponseValidationError) ErrorName() string {
	return "GetReceivingAdviceLineItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingAdviceLineItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingAdviceLineItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingAdviceLineItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingAdviceLineItemsResponseValidationError{}
