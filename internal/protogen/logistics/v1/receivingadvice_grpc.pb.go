// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: logistics/v1/receivingadvice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReceivingAdviceService_CreateReceivingAdvice_FullMethodName         = "/logistics.v1.ReceivingAdviceService/CreateReceivingAdvice"
	ReceivingAdviceService_GetReceivingAdvices_FullMethodName           = "/logistics.v1.ReceivingAdviceService/GetReceivingAdvices"
	ReceivingAdviceService_GetReceivingAdvice_FullMethodName            = "/logistics.v1.ReceivingAdviceService/GetReceivingAdvice"
	ReceivingAdviceService_GetReceivingAdviceByPk_FullMethodName        = "/logistics.v1.ReceivingAdviceService/GetReceivingAdviceByPk"
	ReceivingAdviceService_UpdateReceivingAdvice_FullMethodName         = "/logistics.v1.ReceivingAdviceService/UpdateReceivingAdvice"
	ReceivingAdviceService_CreateReceivingAdviceLineItem_FullMethodName = "/logistics.v1.ReceivingAdviceService/CreateReceivingAdviceLineItem"
	ReceivingAdviceService_GetReceivingAdviceLineItems_FullMethodName   = "/logistics.v1.ReceivingAdviceService/GetReceivingAdviceLineItems"
)

// ReceivingAdviceServiceClient is the client API for ReceivingAdviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ReceivingAdviceService service definition.
type ReceivingAdviceServiceClient interface {
	CreateReceivingAdvice(ctx context.Context, in *CreateReceivingAdviceRequest, opts ...grpc.CallOption) (*CreateReceivingAdviceResponse, error)
	GetReceivingAdvices(ctx context.Context, in *GetReceivingAdvicesRequest, opts ...grpc.CallOption) (*GetReceivingAdvicesResponse, error)
	GetReceivingAdvice(ctx context.Context, in *GetReceivingAdviceRequest, opts ...grpc.CallOption) (*GetReceivingAdviceResponse, error)
	GetReceivingAdviceByPk(ctx context.Context, in *GetReceivingAdviceByPkRequest, opts ...grpc.CallOption) (*GetReceivingAdviceByPkResponse, error)
	UpdateReceivingAdvice(ctx context.Context, in *UpdateReceivingAdviceRequest, opts ...grpc.CallOption) (*UpdateReceivingAdviceResponse, error)
	CreateReceivingAdviceLineItem(ctx context.Context, in *CreateReceivingAdviceLineItemRequest, opts ...grpc.CallOption) (*CreateReceivingAdviceLineItemResponse, error)
	GetReceivingAdviceLineItems(ctx context.Context, in *GetReceivingAdviceLineItemsRequest, opts ...grpc.CallOption) (*GetReceivingAdviceLineItemsResponse, error)
}

type receivingAdviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceivingAdviceServiceClient(cc grpc.ClientConnInterface) ReceivingAdviceServiceClient {
	return &receivingAdviceServiceClient{cc}
}

func (c *receivingAdviceServiceClient) CreateReceivingAdvice(ctx context.Context, in *CreateReceivingAdviceRequest, opts ...grpc.CallOption) (*CreateReceivingAdviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReceivingAdviceResponse)
	err := c.cc.Invoke(ctx, ReceivingAdviceService_CreateReceivingAdvice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivingAdviceServiceClient) GetReceivingAdvices(ctx context.Context, in *GetReceivingAdvicesRequest, opts ...grpc.CallOption) (*GetReceivingAdvicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceivingAdvicesResponse)
	err := c.cc.Invoke(ctx, ReceivingAdviceService_GetReceivingAdvices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivingAdviceServiceClient) GetReceivingAdvice(ctx context.Context, in *GetReceivingAdviceRequest, opts ...grpc.CallOption) (*GetReceivingAdviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceivingAdviceResponse)
	err := c.cc.Invoke(ctx, ReceivingAdviceService_GetReceivingAdvice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivingAdviceServiceClient) GetReceivingAdviceByPk(ctx context.Context, in *GetReceivingAdviceByPkRequest, opts ...grpc.CallOption) (*GetReceivingAdviceByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceivingAdviceByPkResponse)
	err := c.cc.Invoke(ctx, ReceivingAdviceService_GetReceivingAdviceByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivingAdviceServiceClient) UpdateReceivingAdvice(ctx context.Context, in *UpdateReceivingAdviceRequest, opts ...grpc.CallOption) (*UpdateReceivingAdviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReceivingAdviceResponse)
	err := c.cc.Invoke(ctx, ReceivingAdviceService_UpdateReceivingAdvice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivingAdviceServiceClient) CreateReceivingAdviceLineItem(ctx context.Context, in *CreateReceivingAdviceLineItemRequest, opts ...grpc.CallOption) (*CreateReceivingAdviceLineItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReceivingAdviceLineItemResponse)
	err := c.cc.Invoke(ctx, ReceivingAdviceService_CreateReceivingAdviceLineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivingAdviceServiceClient) GetReceivingAdviceLineItems(ctx context.Context, in *GetReceivingAdviceLineItemsRequest, opts ...grpc.CallOption) (*GetReceivingAdviceLineItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceivingAdviceLineItemsResponse)
	err := c.cc.Invoke(ctx, ReceivingAdviceService_GetReceivingAdviceLineItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceivingAdviceServiceServer is the server API for ReceivingAdviceService service.
// All implementations must embed UnimplementedReceivingAdviceServiceServer
// for forward compatibility.
//
// The ReceivingAdviceService service definition.
type ReceivingAdviceServiceServer interface {
	CreateReceivingAdvice(context.Context, *CreateReceivingAdviceRequest) (*CreateReceivingAdviceResponse, error)
	GetReceivingAdvices(context.Context, *GetReceivingAdvicesRequest) (*GetReceivingAdvicesResponse, error)
	GetReceivingAdvice(context.Context, *GetReceivingAdviceRequest) (*GetReceivingAdviceResponse, error)
	GetReceivingAdviceByPk(context.Context, *GetReceivingAdviceByPkRequest) (*GetReceivingAdviceByPkResponse, error)
	UpdateReceivingAdvice(context.Context, *UpdateReceivingAdviceRequest) (*UpdateReceivingAdviceResponse, error)
	CreateReceivingAdviceLineItem(context.Context, *CreateReceivingAdviceLineItemRequest) (*CreateReceivingAdviceLineItemResponse, error)
	GetReceivingAdviceLineItems(context.Context, *GetReceivingAdviceLineItemsRequest) (*GetReceivingAdviceLineItemsResponse, error)
	mustEmbedUnimplementedReceivingAdviceServiceServer()
}

// UnimplementedReceivingAdviceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceivingAdviceServiceServer struct{}

func (UnimplementedReceivingAdviceServiceServer) CreateReceivingAdvice(context.Context, *CreateReceivingAdviceRequest) (*CreateReceivingAdviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceivingAdvice not implemented")
}
func (UnimplementedReceivingAdviceServiceServer) GetReceivingAdvices(context.Context, *GetReceivingAdvicesRequest) (*GetReceivingAdvicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivingAdvices not implemented")
}
func (UnimplementedReceivingAdviceServiceServer) GetReceivingAdvice(context.Context, *GetReceivingAdviceRequest) (*GetReceivingAdviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivingAdvice not implemented")
}
func (UnimplementedReceivingAdviceServiceServer) GetReceivingAdviceByPk(context.Context, *GetReceivingAdviceByPkRequest) (*GetReceivingAdviceByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivingAdviceByPk not implemented")
}
func (UnimplementedReceivingAdviceServiceServer) UpdateReceivingAdvice(context.Context, *UpdateReceivingAdviceRequest) (*UpdateReceivingAdviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivingAdvice not implemented")
}
func (UnimplementedReceivingAdviceServiceServer) CreateReceivingAdviceLineItem(context.Context, *CreateReceivingAdviceLineItemRequest) (*CreateReceivingAdviceLineItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceivingAdviceLineItem not implemented")
}
func (UnimplementedReceivingAdviceServiceServer) GetReceivingAdviceLineItems(context.Context, *GetReceivingAdviceLineItemsRequest) (*GetReceivingAdviceLineItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivingAdviceLineItems not implemented")
}
func (UnimplementedReceivingAdviceServiceServer) mustEmbedUnimplementedReceivingAdviceServiceServer() {
}
func (UnimplementedReceivingAdviceServiceServer) testEmbeddedByValue() {}

// UnsafeReceivingAdviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceivingAdviceServiceServer will
// result in compilation errors.
type UnsafeReceivingAdviceServiceServer interface {
	mustEmbedUnimplementedReceivingAdviceServiceServer()
}

func RegisterReceivingAdviceServiceServer(s grpc.ServiceRegistrar, srv ReceivingAdviceServiceServer) {
	// If the following call pancis, it indicates UnimplementedReceivingAdviceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReceivingAdviceService_ServiceDesc, srv)
}

func _ReceivingAdviceService_CreateReceivingAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceivingAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingAdviceServiceServer).CreateReceivingAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingAdviceService_CreateReceivingAdvice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingAdviceServiceServer).CreateReceivingAdvice(ctx, req.(*CreateReceivingAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivingAdviceService_GetReceivingAdvices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivingAdvicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingAdviceServiceServer).GetReceivingAdvices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingAdviceService_GetReceivingAdvices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingAdviceServiceServer).GetReceivingAdvices(ctx, req.(*GetReceivingAdvicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivingAdviceService_GetReceivingAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivingAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingAdviceServiceServer).GetReceivingAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingAdviceService_GetReceivingAdvice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingAdviceServiceServer).GetReceivingAdvice(ctx, req.(*GetReceivingAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivingAdviceService_GetReceivingAdviceByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivingAdviceByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingAdviceServiceServer).GetReceivingAdviceByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingAdviceService_GetReceivingAdviceByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingAdviceServiceServer).GetReceivingAdviceByPk(ctx, req.(*GetReceivingAdviceByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivingAdviceService_UpdateReceivingAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceivingAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingAdviceServiceServer).UpdateReceivingAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingAdviceService_UpdateReceivingAdvice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingAdviceServiceServer).UpdateReceivingAdvice(ctx, req.(*UpdateReceivingAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivingAdviceService_CreateReceivingAdviceLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceivingAdviceLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingAdviceServiceServer).CreateReceivingAdviceLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingAdviceService_CreateReceivingAdviceLineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingAdviceServiceServer).CreateReceivingAdviceLineItem(ctx, req.(*CreateReceivingAdviceLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivingAdviceService_GetReceivingAdviceLineItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivingAdviceLineItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingAdviceServiceServer).GetReceivingAdviceLineItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingAdviceService_GetReceivingAdviceLineItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingAdviceServiceServer).GetReceivingAdviceLineItems(ctx, req.(*GetReceivingAdviceLineItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceivingAdviceService_ServiceDesc is the grpc.ServiceDesc for ReceivingAdviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceivingAdviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.v1.ReceivingAdviceService",
	HandlerType: (*ReceivingAdviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReceivingAdvice",
			Handler:    _ReceivingAdviceService_CreateReceivingAdvice_Handler,
		},
		{
			MethodName: "GetReceivingAdvices",
			Handler:    _ReceivingAdviceService_GetReceivingAdvices_Handler,
		},
		{
			MethodName: "GetReceivingAdvice",
			Handler:    _ReceivingAdviceService_GetReceivingAdvice_Handler,
		},
		{
			MethodName: "GetReceivingAdviceByPk",
			Handler:    _ReceivingAdviceService_GetReceivingAdviceByPk_Handler,
		},
		{
			MethodName: "UpdateReceivingAdvice",
			Handler:    _ReceivingAdviceService_UpdateReceivingAdvice_Handler,
		},
		{
			MethodName: "CreateReceivingAdviceLineItem",
			Handler:    _ReceivingAdviceService_CreateReceivingAdviceLineItem_Handler,
		},
		{
			MethodName: "GetReceivingAdviceLineItems",
			Handler:    _ReceivingAdviceService_GetReceivingAdviceLineItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistics/v1/receivingadvice.proto",
}
