// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: logistics/v1/receivingadvice.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-gs1/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReceivingAdvice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivingAdviceD *ReceivingAdviceD `protobuf:"bytes,1,opt,name=receiving_advice_d,json=receivingAdviceD,proto3" json:"receiving_advice_d,omitempty"`
	ReceivingAdviceT *ReceivingAdviceT `protobuf:"bytes,2,opt,name=receiving_advice_t,json=receivingAdviceT,proto3" json:"receiving_advice_t,omitempty"`
	CrUpdUser        *v1.CrUpdUser     `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime        *v1.CrUpdTime     `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *ReceivingAdvice) Reset() {
	*x = ReceivingAdvice{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivingAdvice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivingAdvice) ProtoMessage() {}

func (x *ReceivingAdvice) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivingAdvice.ProtoReflect.Descriptor instead.
func (*ReceivingAdvice) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{0}
}

func (x *ReceivingAdvice) GetReceivingAdviceD() *ReceivingAdviceD {
	if x != nil {
		return x.ReceivingAdviceD
	}
	return nil
}

func (x *ReceivingAdvice) GetReceivingAdviceT() *ReceivingAdviceT {
	if x != nil {
		return x.ReceivingAdviceT
	}
	return nil
}

func (x *ReceivingAdvice) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ReceivingAdvice) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ReceivingAdviceD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                               []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                 string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ReportingCode                       string  `protobuf:"bytes,4,opt,name=reporting_code,json=reportingCode,proto3" json:"reporting_code,omitempty"`
	TotalAcceptedAmount                 float64 `protobuf:"fixed64,5,opt,name=total_accepted_amount,json=totalAcceptedAmount,proto3" json:"total_accepted_amount,omitempty"`
	TaaCodeListVersion                  string  `protobuf:"bytes,6,opt,name=taa_code_list_version,json=taaCodeListVersion,proto3" json:"taa_code_list_version,omitempty"`
	TaaCurrencyCode                     string  `protobuf:"bytes,7,opt,name=taa_currency_code,json=taaCurrencyCode,proto3" json:"taa_currency_code,omitempty"`
	TotalDepositAmount                  float64 `protobuf:"fixed64,8,opt,name=total_deposit_amount,json=totalDepositAmount,proto3" json:"total_deposit_amount,omitempty"`
	TdaCodeListVersion                  string  `protobuf:"bytes,9,opt,name=tda_code_list_version,json=tdaCodeListVersion,proto3" json:"tda_code_list_version,omitempty"`
	TdaCurrencyCode                     string  `protobuf:"bytes,10,opt,name=tda_currency_code,json=tdaCurrencyCode,proto3" json:"tda_currency_code,omitempty"`
	TotalNumberOfLines                  uint32  `protobuf:"varint,11,opt,name=total_number_of_lines,json=totalNumberOfLines,proto3" json:"total_number_of_lines,omitempty"`
	TotalOnHoldAmount                   float64 `protobuf:"fixed64,12,opt,name=total_on_hold_amount,json=totalOnHoldAmount,proto3" json:"total_on_hold_amount,omitempty"`
	TohaCodeListVersion                 string  `protobuf:"bytes,13,opt,name=toha_code_list_version,json=tohaCodeListVersion,proto3" json:"toha_code_list_version,omitempty"`
	TohaCurrencyCode                    string  `protobuf:"bytes,14,opt,name=toha_currency_code,json=tohaCurrencyCode,proto3" json:"toha_currency_code,omitempty"`
	TotalRejectedAmount                 float64 `protobuf:"fixed64,15,opt,name=total_rejected_amount,json=totalRejectedAmount,proto3" json:"total_rejected_amount,omitempty"`
	TraCodeListVersion                  string  `protobuf:"bytes,16,opt,name=tra_code_list_version,json=traCodeListVersion,proto3" json:"tra_code_list_version,omitempty"`
	TraCurrencyCode                     string  `protobuf:"bytes,17,opt,name=tra_currency_code,json=traCurrencyCode,proto3" json:"tra_currency_code,omitempty"`
	ReceivingAdviceTransportInformation uint32  `protobuf:"varint,18,opt,name=receiving_advice_transport_information,json=receivingAdviceTransportInformation,proto3" json:"receiving_advice_transport_information,omitempty"`
	BillOfLadingNumber                  uint32  `protobuf:"varint,19,opt,name=bill_of_lading_number,json=billOfLadingNumber,proto3" json:"bill_of_lading_number,omitempty"`
	Buyer                               uint32  `protobuf:"varint,20,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Carrier                             uint32  `protobuf:"varint,21,opt,name=carrier,proto3" json:"carrier,omitempty"`
	ConsignmentIdentification           uint32  `protobuf:"varint,22,opt,name=consignment_identification,json=consignmentIdentification,proto3" json:"consignment_identification,omitempty"`
	DeliveryNote                        uint32  `protobuf:"varint,23,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	DespatchAdvice                      uint32  `protobuf:"varint,24,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
	InventoryLocation                   uint32  `protobuf:"varint,25,opt,name=inventory_location,json=inventoryLocation,proto3" json:"inventory_location,omitempty"`
	PurchaseOrder                       uint32  `protobuf:"varint,26,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	Receiver                            uint32  `protobuf:"varint,27,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceivingAdviceIdentification       uint32  `protobuf:"varint,28,opt,name=receiving_advice_identification,json=receivingAdviceIdentification,proto3" json:"receiving_advice_identification,omitempty"`
	Seller                              uint32  `protobuf:"varint,29,opt,name=seller,proto3" json:"seller,omitempty"`
	ShipFrom                            uint32  `protobuf:"varint,30,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	ShipmentIdentification              uint32  `protobuf:"varint,31,opt,name=shipment_identification,json=shipmentIdentification,proto3" json:"shipment_identification,omitempty"`
	Shipper                             uint32  `protobuf:"varint,32,opt,name=shipper,proto3" json:"shipper,omitempty"`
	ShipTo                              uint32  `protobuf:"varint,33,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
}

func (x *ReceivingAdviceD) Reset() {
	*x = ReceivingAdviceD{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivingAdviceD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivingAdviceD) ProtoMessage() {}

func (x *ReceivingAdviceD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivingAdviceD.ProtoReflect.Descriptor instead.
func (*ReceivingAdviceD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{1}
}

func (x *ReceivingAdviceD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReceivingAdviceD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ReceivingAdviceD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ReceivingAdviceD) GetReportingCode() string {
	if x != nil {
		return x.ReportingCode
	}
	return ""
}

func (x *ReceivingAdviceD) GetTotalAcceptedAmount() float64 {
	if x != nil {
		return x.TotalAcceptedAmount
	}
	return 0
}

func (x *ReceivingAdviceD) GetTaaCodeListVersion() string {
	if x != nil {
		return x.TaaCodeListVersion
	}
	return ""
}

func (x *ReceivingAdviceD) GetTaaCurrencyCode() string {
	if x != nil {
		return x.TaaCurrencyCode
	}
	return ""
}

func (x *ReceivingAdviceD) GetTotalDepositAmount() float64 {
	if x != nil {
		return x.TotalDepositAmount
	}
	return 0
}

func (x *ReceivingAdviceD) GetTdaCodeListVersion() string {
	if x != nil {
		return x.TdaCodeListVersion
	}
	return ""
}

func (x *ReceivingAdviceD) GetTdaCurrencyCode() string {
	if x != nil {
		return x.TdaCurrencyCode
	}
	return ""
}

func (x *ReceivingAdviceD) GetTotalNumberOfLines() uint32 {
	if x != nil {
		return x.TotalNumberOfLines
	}
	return 0
}

func (x *ReceivingAdviceD) GetTotalOnHoldAmount() float64 {
	if x != nil {
		return x.TotalOnHoldAmount
	}
	return 0
}

func (x *ReceivingAdviceD) GetTohaCodeListVersion() string {
	if x != nil {
		return x.TohaCodeListVersion
	}
	return ""
}

func (x *ReceivingAdviceD) GetTohaCurrencyCode() string {
	if x != nil {
		return x.TohaCurrencyCode
	}
	return ""
}

func (x *ReceivingAdviceD) GetTotalRejectedAmount() float64 {
	if x != nil {
		return x.TotalRejectedAmount
	}
	return 0
}

func (x *ReceivingAdviceD) GetTraCodeListVersion() string {
	if x != nil {
		return x.TraCodeListVersion
	}
	return ""
}

func (x *ReceivingAdviceD) GetTraCurrencyCode() string {
	if x != nil {
		return x.TraCurrencyCode
	}
	return ""
}

func (x *ReceivingAdviceD) GetReceivingAdviceTransportInformation() uint32 {
	if x != nil {
		return x.ReceivingAdviceTransportInformation
	}
	return 0
}

func (x *ReceivingAdviceD) GetBillOfLadingNumber() uint32 {
	if x != nil {
		return x.BillOfLadingNumber
	}
	return 0
}

func (x *ReceivingAdviceD) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *ReceivingAdviceD) GetCarrier() uint32 {
	if x != nil {
		return x.Carrier
	}
	return 0
}

func (x *ReceivingAdviceD) GetConsignmentIdentification() uint32 {
	if x != nil {
		return x.ConsignmentIdentification
	}
	return 0
}

func (x *ReceivingAdviceD) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *ReceivingAdviceD) GetDespatchAdvice() uint32 {
	if x != nil {
		return x.DespatchAdvice
	}
	return 0
}

func (x *ReceivingAdviceD) GetInventoryLocation() uint32 {
	if x != nil {
		return x.InventoryLocation
	}
	return 0
}

func (x *ReceivingAdviceD) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *ReceivingAdviceD) GetReceiver() uint32 {
	if x != nil {
		return x.Receiver
	}
	return 0
}

func (x *ReceivingAdviceD) GetReceivingAdviceIdentification() uint32 {
	if x != nil {
		return x.ReceivingAdviceIdentification
	}
	return 0
}

func (x *ReceivingAdviceD) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *ReceivingAdviceD) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *ReceivingAdviceD) GetShipmentIdentification() uint32 {
	if x != nil {
		return x.ShipmentIdentification
	}
	return 0
}

func (x *ReceivingAdviceD) GetShipper() uint32 {
	if x != nil {
		return x.Shipper
	}
	return 0
}

func (x *ReceivingAdviceD) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

type ReceivingAdviceT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceDeliveryDateTimeBegin *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=despatch_advice_delivery_date_time_begin,json=despatchAdviceDeliveryDateTimeBegin,proto3" json:"despatch_advice_delivery_date_time_begin,omitempty"`
	DespatchAdviceDeliveryDateTimeEnd   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=despatch_advice_delivery_date_time_end,json=despatchAdviceDeliveryDateTimeEnd,proto3" json:"despatch_advice_delivery_date_time_end,omitempty"`
	PaymentDateTimeBegin                *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=payment_date_time_begin,json=paymentDateTimeBegin,proto3" json:"payment_date_time_begin,omitempty"`
	PaymentDateTimeEnd                  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=payment_date_time_end,json=paymentDateTimeEnd,proto3" json:"payment_date_time_end,omitempty"`
	ReceivingDateTimeBegin              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=receiving_date_time_begin,json=receivingDateTimeBegin,proto3" json:"receiving_date_time_begin,omitempty"`
	ReceivingDateTimeEnd                *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=receiving_date_time_end,json=receivingDateTimeEnd,proto3" json:"receiving_date_time_end,omitempty"`
}

func (x *ReceivingAdviceT) Reset() {
	*x = ReceivingAdviceT{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivingAdviceT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivingAdviceT) ProtoMessage() {}

func (x *ReceivingAdviceT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivingAdviceT.ProtoReflect.Descriptor instead.
func (*ReceivingAdviceT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{2}
}

func (x *ReceivingAdviceT) GetDespatchAdviceDeliveryDateTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.DespatchAdviceDeliveryDateTimeBegin
	}
	return nil
}

func (x *ReceivingAdviceT) GetDespatchAdviceDeliveryDateTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.DespatchAdviceDeliveryDateTimeEnd
	}
	return nil
}

func (x *ReceivingAdviceT) GetPaymentDateTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDateTimeBegin
	}
	return nil
}

func (x *ReceivingAdviceT) GetPaymentDateTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDateTimeEnd
	}
	return nil
}

func (x *ReceivingAdviceT) GetReceivingDateTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivingDateTimeBegin
	}
	return nil
}

func (x *ReceivingAdviceT) GetReceivingDateTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivingDateTimeEnd
	}
	return nil
}

type CreateReceivingAdviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchAdviceDeliveryDateTimeBegin string  `protobuf:"bytes,1,opt,name=despatch_advice_delivery_date_time_begin,json=despatchAdviceDeliveryDateTimeBegin,proto3" json:"despatch_advice_delivery_date_time_begin,omitempty"`
	DespatchAdviceDeliveryDateTimeEnd   string  `protobuf:"bytes,2,opt,name=despatch_advice_delivery_date_time_end,json=despatchAdviceDeliveryDateTimeEnd,proto3" json:"despatch_advice_delivery_date_time_end,omitempty"`
	PaymentDateTimeBegin                string  `protobuf:"bytes,3,opt,name=payment_date_time_begin,json=paymentDateTimeBegin,proto3" json:"payment_date_time_begin,omitempty"`
	PaymentDateTimeEnd                  string  `protobuf:"bytes,4,opt,name=payment_date_time_end,json=paymentDateTimeEnd,proto3" json:"payment_date_time_end,omitempty"`
	ReceivingDateTimeBegin              string  `protobuf:"bytes,5,opt,name=receiving_date_time_begin,json=receivingDateTimeBegin,proto3" json:"receiving_date_time_begin,omitempty"`
	ReceivingDateTimeEnd                string  `protobuf:"bytes,6,opt,name=receiving_date_time_end,json=receivingDateTimeEnd,proto3" json:"receiving_date_time_end,omitempty"`
	ReportingCode                       string  `protobuf:"bytes,7,opt,name=reporting_code,json=reportingCode,proto3" json:"reporting_code,omitempty"`
	TotalAcceptedAmount                 float64 `protobuf:"fixed64,8,opt,name=total_accepted_amount,json=totalAcceptedAmount,proto3" json:"total_accepted_amount,omitempty"`
	TaaCodeListVersion                  string  `protobuf:"bytes,9,opt,name=taa_code_list_version,json=taaCodeListVersion,proto3" json:"taa_code_list_version,omitempty"`
	TaaCurrencyCode                     string  `protobuf:"bytes,10,opt,name=taa_currency_code,json=taaCurrencyCode,proto3" json:"taa_currency_code,omitempty"`
	TotalDepositAmount                  float64 `protobuf:"fixed64,11,opt,name=total_deposit_amount,json=totalDepositAmount,proto3" json:"total_deposit_amount,omitempty"`
	TdaCodeListVersion                  string  `protobuf:"bytes,12,opt,name=tda_code_list_version,json=tdaCodeListVersion,proto3" json:"tda_code_list_version,omitempty"`
	TdaCurrencyCode                     string  `protobuf:"bytes,13,opt,name=tda_currency_code,json=tdaCurrencyCode,proto3" json:"tda_currency_code,omitempty"`
	TotalNumberOfLines                  uint32  `protobuf:"varint,14,opt,name=total_number_of_lines,json=totalNumberOfLines,proto3" json:"total_number_of_lines,omitempty"`
	TotalOnHoldAmount                   float64 `protobuf:"fixed64,15,opt,name=total_on_hold_amount,json=totalOnHoldAmount,proto3" json:"total_on_hold_amount,omitempty"`
	TohaCodeListVersion                 string  `protobuf:"bytes,16,opt,name=toha_code_list_version,json=tohaCodeListVersion,proto3" json:"toha_code_list_version,omitempty"`
	TohaCurrencyCode                    string  `protobuf:"bytes,17,opt,name=toha_currency_code,json=tohaCurrencyCode,proto3" json:"toha_currency_code,omitempty"`
	TotalRejectedAmount                 float64 `protobuf:"fixed64,18,opt,name=total_rejected_amount,json=totalRejectedAmount,proto3" json:"total_rejected_amount,omitempty"`
	TraCodeListVersion                  string  `protobuf:"bytes,19,opt,name=tra_code_list_version,json=traCodeListVersion,proto3" json:"tra_code_list_version,omitempty"`
	TraCurrencyCode                     string  `protobuf:"bytes,20,opt,name=tra_currency_code,json=traCurrencyCode,proto3" json:"tra_currency_code,omitempty"`
	ReceivingAdviceTransportInformation uint32  `protobuf:"varint,21,opt,name=receiving_advice_transport_information,json=receivingAdviceTransportInformation,proto3" json:"receiving_advice_transport_information,omitempty"`
	BillOfLadingNumber                  uint32  `protobuf:"varint,22,opt,name=bill_of_lading_number,json=billOfLadingNumber,proto3" json:"bill_of_lading_number,omitempty"`
	Buyer                               uint32  `protobuf:"varint,23,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Carrier                             uint32  `protobuf:"varint,24,opt,name=carrier,proto3" json:"carrier,omitempty"`
	ConsignmentIdentification           uint32  `protobuf:"varint,25,opt,name=consignment_identification,json=consignmentIdentification,proto3" json:"consignment_identification,omitempty"`
	DeliveryNote                        uint32  `protobuf:"varint,26,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	DespatchAdvice                      uint32  `protobuf:"varint,27,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
	InventoryLocation                   uint32  `protobuf:"varint,28,opt,name=inventory_location,json=inventoryLocation,proto3" json:"inventory_location,omitempty"`
	PurchaseOrder                       uint32  `protobuf:"varint,29,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	Receiver                            uint32  `protobuf:"varint,30,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceivingAdviceIdentification       uint32  `protobuf:"varint,31,opt,name=receiving_advice_identification,json=receivingAdviceIdentification,proto3" json:"receiving_advice_identification,omitempty"`
	Seller                              uint32  `protobuf:"varint,32,opt,name=seller,proto3" json:"seller,omitempty"`
	ShipFrom                            uint32  `protobuf:"varint,33,opt,name=ship_from,json=shipFrom,proto3" json:"ship_from,omitempty"`
	ShipmentIdentification              uint32  `protobuf:"varint,34,opt,name=shipment_identification,json=shipmentIdentification,proto3" json:"shipment_identification,omitempty"`
	Shipper                             uint32  `protobuf:"varint,35,opt,name=shipper,proto3" json:"shipper,omitempty"`
	ShipTo                              uint32  `protobuf:"varint,36,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	UserId                              string  `protobuf:"bytes,37,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                           string  `protobuf:"bytes,38,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                           string  `protobuf:"bytes,39,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateReceivingAdviceRequest) Reset() {
	*x = CreateReceivingAdviceRequest{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReceivingAdviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReceivingAdviceRequest) ProtoMessage() {}

func (x *CreateReceivingAdviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReceivingAdviceRequest.ProtoReflect.Descriptor instead.
func (*CreateReceivingAdviceRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{3}
}

func (x *CreateReceivingAdviceRequest) GetDespatchAdviceDeliveryDateTimeBegin() string {
	if x != nil {
		return x.DespatchAdviceDeliveryDateTimeBegin
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetDespatchAdviceDeliveryDateTimeEnd() string {
	if x != nil {
		return x.DespatchAdviceDeliveryDateTimeEnd
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetPaymentDateTimeBegin() string {
	if x != nil {
		return x.PaymentDateTimeBegin
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetPaymentDateTimeEnd() string {
	if x != nil {
		return x.PaymentDateTimeEnd
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetReceivingDateTimeBegin() string {
	if x != nil {
		return x.ReceivingDateTimeBegin
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetReceivingDateTimeEnd() string {
	if x != nil {
		return x.ReceivingDateTimeEnd
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetReportingCode() string {
	if x != nil {
		return x.ReportingCode
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetTotalAcceptedAmount() float64 {
	if x != nil {
		return x.TotalAcceptedAmount
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetTaaCodeListVersion() string {
	if x != nil {
		return x.TaaCodeListVersion
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetTaaCurrencyCode() string {
	if x != nil {
		return x.TaaCurrencyCode
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetTotalDepositAmount() float64 {
	if x != nil {
		return x.TotalDepositAmount
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetTdaCodeListVersion() string {
	if x != nil {
		return x.TdaCodeListVersion
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetTdaCurrencyCode() string {
	if x != nil {
		return x.TdaCurrencyCode
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetTotalNumberOfLines() uint32 {
	if x != nil {
		return x.TotalNumberOfLines
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetTotalOnHoldAmount() float64 {
	if x != nil {
		return x.TotalOnHoldAmount
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetTohaCodeListVersion() string {
	if x != nil {
		return x.TohaCodeListVersion
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetTohaCurrencyCode() string {
	if x != nil {
		return x.TohaCurrencyCode
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetTotalRejectedAmount() float64 {
	if x != nil {
		return x.TotalRejectedAmount
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetTraCodeListVersion() string {
	if x != nil {
		return x.TraCodeListVersion
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetTraCurrencyCode() string {
	if x != nil {
		return x.TraCurrencyCode
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetReceivingAdviceTransportInformation() uint32 {
	if x != nil {
		return x.ReceivingAdviceTransportInformation
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetBillOfLadingNumber() uint32 {
	if x != nil {
		return x.BillOfLadingNumber
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetCarrier() uint32 {
	if x != nil {
		return x.Carrier
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetConsignmentIdentification() uint32 {
	if x != nil {
		return x.ConsignmentIdentification
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetDespatchAdvice() uint32 {
	if x != nil {
		return x.DespatchAdvice
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetInventoryLocation() uint32 {
	if x != nil {
		return x.InventoryLocation
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetReceiver() uint32 {
	if x != nil {
		return x.Receiver
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetReceivingAdviceIdentification() uint32 {
	if x != nil {
		return x.ReceivingAdviceIdentification
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetShipFrom() uint32 {
	if x != nil {
		return x.ShipFrom
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetShipmentIdentification() uint32 {
	if x != nil {
		return x.ShipmentIdentification
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetShipper() uint32 {
	if x != nil {
		return x.Shipper
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *CreateReceivingAdviceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateReceivingAdviceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateReceivingAdviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivingAdvice *ReceivingAdvice `protobuf:"bytes,1,opt,name=receiving_advice,json=receivingAdvice,proto3" json:"receiving_advice,omitempty"`
}

func (x *CreateReceivingAdviceResponse) Reset() {
	*x = CreateReceivingAdviceResponse{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReceivingAdviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReceivingAdviceResponse) ProtoMessage() {}

func (x *CreateReceivingAdviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReceivingAdviceResponse.ProtoReflect.Descriptor instead.
func (*CreateReceivingAdviceResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{4}
}

func (x *CreateReceivingAdviceResponse) GetReceivingAdvice() *ReceivingAdvice {
	if x != nil {
		return x.ReceivingAdvice
	}
	return nil
}

type GetReceivingAdviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetReceivingAdviceRequest) Reset() {
	*x = GetReceivingAdviceRequest{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceivingAdviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingAdviceRequest) ProtoMessage() {}

func (x *GetReceivingAdviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingAdviceRequest.ProtoReflect.Descriptor instead.
func (*GetReceivingAdviceRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{5}
}

func (x *GetReceivingAdviceRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetReceivingAdviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivingAdvice *ReceivingAdvice `protobuf:"bytes,1,opt,name=receiving_advice,json=receivingAdvice,proto3" json:"receiving_advice,omitempty"`
}

func (x *GetReceivingAdviceResponse) Reset() {
	*x = GetReceivingAdviceResponse{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceivingAdviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingAdviceResponse) ProtoMessage() {}

func (x *GetReceivingAdviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingAdviceResponse.ProtoReflect.Descriptor instead.
func (*GetReceivingAdviceResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{6}
}

func (x *GetReceivingAdviceResponse) GetReceivingAdvice() *ReceivingAdvice {
	if x != nil {
		return x.ReceivingAdvice
	}
	return nil
}

type GetReceivingAdviceByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetReceivingAdviceByPkRequest) Reset() {
	*x = GetReceivingAdviceByPkRequest{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceivingAdviceByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingAdviceByPkRequest) ProtoMessage() {}

func (x *GetReceivingAdviceByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingAdviceByPkRequest.ProtoReflect.Descriptor instead.
func (*GetReceivingAdviceByPkRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{7}
}

func (x *GetReceivingAdviceByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetReceivingAdviceByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivingAdvice *ReceivingAdvice `protobuf:"bytes,1,opt,name=receiving_advice,json=receivingAdvice,proto3" json:"receiving_advice,omitempty"`
}

func (x *GetReceivingAdviceByPkResponse) Reset() {
	*x = GetReceivingAdviceByPkResponse{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceivingAdviceByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingAdviceByPkResponse) ProtoMessage() {}

func (x *GetReceivingAdviceByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingAdviceByPkResponse.ProtoReflect.Descriptor instead.
func (*GetReceivingAdviceByPkResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{8}
}

func (x *GetReceivingAdviceByPkResponse) GetReceivingAdvice() *ReceivingAdvice {
	if x != nil {
		return x.ReceivingAdvice
	}
	return nil
}

type GetReceivingAdvicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivingAdvices []*ReceivingAdvice `protobuf:"bytes,1,rep,name=receiving_advices,json=receivingAdvices,proto3" json:"receiving_advices,omitempty"`
	NextCursor       string             `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetReceivingAdvicesResponse) Reset() {
	*x = GetReceivingAdvicesResponse{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceivingAdvicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingAdvicesResponse) ProtoMessage() {}

func (x *GetReceivingAdvicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingAdvicesResponse.ProtoReflect.Descriptor instead.
func (*GetReceivingAdvicesResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{9}
}

func (x *GetReceivingAdvicesResponse) GetReceivingAdvices() []*ReceivingAdvice {
	if x != nil {
		return x.ReceivingAdvices
	}
	return nil
}

func (x *GetReceivingAdvicesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetReceivingAdvicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetReceivingAdvicesRequest) Reset() {
	*x = GetReceivingAdvicesRequest{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceivingAdvicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingAdvicesRequest) ProtoMessage() {}

func (x *GetReceivingAdvicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingAdvicesRequest.ProtoReflect.Descriptor instead.
func (*GetReceivingAdvicesRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{10}
}

func (x *GetReceivingAdvicesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetReceivingAdvicesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetReceivingAdvicesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetReceivingAdvicesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateReceivingAdviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportingCode       string  `protobuf:"bytes,1,opt,name=reporting_code,json=reportingCode,proto3" json:"reporting_code,omitempty"`
	TotalAcceptedAmount float64 `protobuf:"fixed64,2,opt,name=total_accepted_amount,json=totalAcceptedAmount,proto3" json:"total_accepted_amount,omitempty"`
	TaaCodeListVersion  string  `protobuf:"bytes,3,opt,name=taa_code_list_version,json=taaCodeListVersion,proto3" json:"taa_code_list_version,omitempty"`
	TaaCurrencyCode     string  `protobuf:"bytes,4,opt,name=taa_currency_code,json=taaCurrencyCode,proto3" json:"taa_currency_code,omitempty"`
	TotalDepositAmount  float64 `protobuf:"fixed64,5,opt,name=total_deposit_amount,json=totalDepositAmount,proto3" json:"total_deposit_amount,omitempty"`
	TdaCodeListVersion  string  `protobuf:"bytes,6,opt,name=tda_code_list_version,json=tdaCodeListVersion,proto3" json:"tda_code_list_version,omitempty"`
	TdaCurrencyCode     string  `protobuf:"bytes,7,opt,name=tda_currency_code,json=tdaCurrencyCode,proto3" json:"tda_currency_code,omitempty"`
	TotalNumberOfLines  uint32  `protobuf:"varint,8,opt,name=total_number_of_lines,json=totalNumberOfLines,proto3" json:"total_number_of_lines,omitempty"`
	TotalOnHoldAmount   float64 `protobuf:"fixed64,9,opt,name=total_on_hold_amount,json=totalOnHoldAmount,proto3" json:"total_on_hold_amount,omitempty"`
	TohaCodeListVersion string  `protobuf:"bytes,10,opt,name=toha_code_list_version,json=tohaCodeListVersion,proto3" json:"toha_code_list_version,omitempty"`
	TohaCurrencyCode    string  `protobuf:"bytes,11,opt,name=toha_currency_code,json=tohaCurrencyCode,proto3" json:"toha_currency_code,omitempty"`
	TotalRejectedAmount float64 `protobuf:"fixed64,12,opt,name=total_rejected_amount,json=totalRejectedAmount,proto3" json:"total_rejected_amount,omitempty"`
	TraCodeListVersion  string  `protobuf:"bytes,13,opt,name=tra_code_list_version,json=traCodeListVersion,proto3" json:"tra_code_list_version,omitempty"`
	TraCurrencyCode     string  `protobuf:"bytes,14,opt,name=tra_currency_code,json=traCurrencyCode,proto3" json:"tra_currency_code,omitempty"`
	Id                  string  `protobuf:"bytes,15,opt,name=id,proto3" json:"id,omitempty"`
	UserId              string  `protobuf:"bytes,16,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail           string  `protobuf:"bytes,17,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId           string  `protobuf:"bytes,18,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateReceivingAdviceRequest) Reset() {
	*x = UpdateReceivingAdviceRequest{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReceivingAdviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceivingAdviceRequest) ProtoMessage() {}

func (x *UpdateReceivingAdviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceivingAdviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateReceivingAdviceRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateReceivingAdviceRequest) GetReportingCode() string {
	if x != nil {
		return x.ReportingCode
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetTotalAcceptedAmount() float64 {
	if x != nil {
		return x.TotalAcceptedAmount
	}
	return 0
}

func (x *UpdateReceivingAdviceRequest) GetTaaCodeListVersion() string {
	if x != nil {
		return x.TaaCodeListVersion
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetTaaCurrencyCode() string {
	if x != nil {
		return x.TaaCurrencyCode
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetTotalDepositAmount() float64 {
	if x != nil {
		return x.TotalDepositAmount
	}
	return 0
}

func (x *UpdateReceivingAdviceRequest) GetTdaCodeListVersion() string {
	if x != nil {
		return x.TdaCodeListVersion
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetTdaCurrencyCode() string {
	if x != nil {
		return x.TdaCurrencyCode
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetTotalNumberOfLines() uint32 {
	if x != nil {
		return x.TotalNumberOfLines
	}
	return 0
}

func (x *UpdateReceivingAdviceRequest) GetTotalOnHoldAmount() float64 {
	if x != nil {
		return x.TotalOnHoldAmount
	}
	return 0
}

func (x *UpdateReceivingAdviceRequest) GetTohaCodeListVersion() string {
	if x != nil {
		return x.TohaCodeListVersion
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetTohaCurrencyCode() string {
	if x != nil {
		return x.TohaCurrencyCode
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetTotalRejectedAmount() float64 {
	if x != nil {
		return x.TotalRejectedAmount
	}
	return 0
}

func (x *UpdateReceivingAdviceRequest) GetTraCodeListVersion() string {
	if x != nil {
		return x.TraCodeListVersion
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetTraCurrencyCode() string {
	if x != nil {
		return x.TraCurrencyCode
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateReceivingAdviceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateReceivingAdviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateReceivingAdviceResponse) Reset() {
	*x = UpdateReceivingAdviceResponse{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReceivingAdviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceivingAdviceResponse) ProtoMessage() {}

func (x *UpdateReceivingAdviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceivingAdviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateReceivingAdviceResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{12}
}

type ReceivingAdviceLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivingAdviceLineItemD *ReceivingAdviceLineItemD `protobuf:"bytes,1,opt,name=receiving_advice_line_item_d,json=receivingAdviceLineItemD,proto3" json:"receiving_advice_line_item_d,omitempty"`
	ReceivingAdviceLineItemT *ReceivingAdviceLineItemT `protobuf:"bytes,2,opt,name=receiving_advice_line_item_t,json=receivingAdviceLineItemT,proto3" json:"receiving_advice_line_item_t,omitempty"`
	CrUpdUser                *v1.CrUpdUser             `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                *v1.CrUpdTime             `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *ReceivingAdviceLineItem) Reset() {
	*x = ReceivingAdviceLineItem{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivingAdviceLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivingAdviceLineItem) ProtoMessage() {}

func (x *ReceivingAdviceLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivingAdviceLineItem.ProtoReflect.Descriptor instead.
func (*ReceivingAdviceLineItem) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{13}
}

func (x *ReceivingAdviceLineItem) GetReceivingAdviceLineItemD() *ReceivingAdviceLineItemD {
	if x != nil {
		return x.ReceivingAdviceLineItemD
	}
	return nil
}

func (x *ReceivingAdviceLineItem) GetReceivingAdviceLineItemT() *ReceivingAdviceLineItemT {
	if x != nil {
		return x.ReceivingAdviceLineItemT
	}
	return nil
}

func (x *ReceivingAdviceLineItem) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ReceivingAdviceLineItem) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ReceivingAdviceLineItemD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                         []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                           string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	LineItemNumber                uint32  `protobuf:"varint,4,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ParentLineItemNumber          uint32  `protobuf:"varint,5,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	QuantityAccepted              float64 `protobuf:"fixed64,6,opt,name=quantity_accepted,json=quantityAccepted,proto3" json:"quantity_accepted,omitempty"`
	QaMeasurementUnitCode         string  `protobuf:"bytes,7,opt,name=qa_measurement_unit_code,json=qaMeasurementUnitCode,proto3" json:"qa_measurement_unit_code,omitempty"`
	QaCodeListVersion             string  `protobuf:"bytes,8,opt,name=qa_code_list_version,json=qaCodeListVersion,proto3" json:"qa_code_list_version,omitempty"`
	QuantityDespatched            float64 `protobuf:"fixed64,9,opt,name=quantity_despatched,json=quantityDespatched,proto3" json:"quantity_despatched,omitempty"`
	QdMeasurementUnitCode         string  `protobuf:"bytes,10,opt,name=qd_measurement_unit_code,json=qdMeasurementUnitCode,proto3" json:"qd_measurement_unit_code,omitempty"`
	QdCodeListVersion             string  `protobuf:"bytes,11,opt,name=qd_code_list_version,json=qdCodeListVersion,proto3" json:"qd_code_list_version,omitempty"`
	QuantityReceived              float64 `protobuf:"fixed64,12,opt,name=quantity_received,json=quantityReceived,proto3" json:"quantity_received,omitempty"`
	QrMeasurementUnitCode         string  `protobuf:"bytes,13,opt,name=qr_measurement_unit_code,json=qrMeasurementUnitCode,proto3" json:"qr_measurement_unit_code,omitempty"`
	QrCodeListVersion             string  `protobuf:"bytes,14,opt,name=qr_code_list_version,json=qrCodeListVersion,proto3" json:"qr_code_list_version,omitempty"`
	TransactionalTradeItem        uint32  `protobuf:"varint,15,opt,name=transactional_trade_item,json=transactionalTradeItem,proto3" json:"transactional_trade_item,omitempty"`
	EcomConsignmentIdentification uint32  `protobuf:"varint,16,opt,name=ecom_consignment_identification,json=ecomConsignmentIdentification,proto3" json:"ecom_consignment_identification,omitempty"`
	Contract                      uint32  `protobuf:"varint,17,opt,name=contract,proto3" json:"contract,omitempty"`
	CustomerReference             uint32  `protobuf:"varint,18,opt,name=customer_reference,json=customerReference,proto3" json:"customer_reference,omitempty"`
	DeliveryNote                  uint32  `protobuf:"varint,19,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	DespatchAdvice                uint32  `protobuf:"varint,20,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
	ProductCertification          uint32  `protobuf:"varint,21,opt,name=product_certification,json=productCertification,proto3" json:"product_certification,omitempty"`
	PromotionalDeal               uint32  `protobuf:"varint,22,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseConditions            uint32  `protobuf:"varint,23,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	PurchaseOrder                 uint32  `protobuf:"varint,24,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	RequestedItemIdentification   uint32  `protobuf:"varint,25,opt,name=requested_item_identification,json=requestedItemIdentification,proto3" json:"requested_item_identification,omitempty"`
	Specification                 uint32  `protobuf:"varint,26,opt,name=specification,proto3" json:"specification,omitempty"`
	ReceivingAdviceId             uint32  `protobuf:"varint,27,opt,name=receiving_advice_id,json=receivingAdviceId,proto3" json:"receiving_advice_id,omitempty"`
}

func (x *ReceivingAdviceLineItemD) Reset() {
	*x = ReceivingAdviceLineItemD{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivingAdviceLineItemD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivingAdviceLineItemD) ProtoMessage() {}

func (x *ReceivingAdviceLineItemD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivingAdviceLineItemD.ProtoReflect.Descriptor instead.
func (*ReceivingAdviceLineItemD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{14}
}

func (x *ReceivingAdviceLineItemD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ReceivingAdviceLineItemD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ReceivingAdviceLineItemD) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetQuantityAccepted() float64 {
	if x != nil {
		return x.QuantityAccepted
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetQaMeasurementUnitCode() string {
	if x != nil {
		return x.QaMeasurementUnitCode
	}
	return ""
}

func (x *ReceivingAdviceLineItemD) GetQaCodeListVersion() string {
	if x != nil {
		return x.QaCodeListVersion
	}
	return ""
}

func (x *ReceivingAdviceLineItemD) GetQuantityDespatched() float64 {
	if x != nil {
		return x.QuantityDespatched
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetQdMeasurementUnitCode() string {
	if x != nil {
		return x.QdMeasurementUnitCode
	}
	return ""
}

func (x *ReceivingAdviceLineItemD) GetQdCodeListVersion() string {
	if x != nil {
		return x.QdCodeListVersion
	}
	return ""
}

func (x *ReceivingAdviceLineItemD) GetQuantityReceived() float64 {
	if x != nil {
		return x.QuantityReceived
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetQrMeasurementUnitCode() string {
	if x != nil {
		return x.QrMeasurementUnitCode
	}
	return ""
}

func (x *ReceivingAdviceLineItemD) GetQrCodeListVersion() string {
	if x != nil {
		return x.QrCodeListVersion
	}
	return ""
}

func (x *ReceivingAdviceLineItemD) GetTransactionalTradeItem() uint32 {
	if x != nil {
		return x.TransactionalTradeItem
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetEcomConsignmentIdentification() uint32 {
	if x != nil {
		return x.EcomConsignmentIdentification
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetCustomerReference() uint32 {
	if x != nil {
		return x.CustomerReference
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetDespatchAdvice() uint32 {
	if x != nil {
		return x.DespatchAdvice
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetProductCertification() uint32 {
	if x != nil {
		return x.ProductCertification
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetRequestedItemIdentification() uint32 {
	if x != nil {
		return x.RequestedItemIdentification
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetSpecification() uint32 {
	if x != nil {
		return x.Specification
	}
	return 0
}

func (x *ReceivingAdviceLineItemD) GetReceivingAdviceId() uint32 {
	if x != nil {
		return x.ReceivingAdviceId
	}
	return 0
}

type ReceivingAdviceLineItemT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PickUpDateTimeBegin *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=pick_up_date_time_begin,json=pickUpDateTimeBegin,proto3" json:"pick_up_date_time_begin,omitempty"`
	PickUpDateTimeEnd   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=pick_up_date_time_end,json=pickUpDateTimeEnd,proto3" json:"pick_up_date_time_end,omitempty"`
}

func (x *ReceivingAdviceLineItemT) Reset() {
	*x = ReceivingAdviceLineItemT{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivingAdviceLineItemT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivingAdviceLineItemT) ProtoMessage() {}

func (x *ReceivingAdviceLineItemT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivingAdviceLineItemT.ProtoReflect.Descriptor instead.
func (*ReceivingAdviceLineItemT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{15}
}

func (x *ReceivingAdviceLineItemT) GetPickUpDateTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.PickUpDateTimeBegin
	}
	return nil
}

func (x *ReceivingAdviceLineItemT) GetPickUpDateTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PickUpDateTimeEnd
	}
	return nil
}

type CreateReceivingAdviceLineItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineItemNumber                uint32  `protobuf:"varint,1,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ParentLineItemNumber          uint32  `protobuf:"varint,2,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	PickUpDateTimeBegin           string  `protobuf:"bytes,3,opt,name=pick_up_date_time_begin,json=pickUpDateTimeBegin,proto3" json:"pick_up_date_time_begin,omitempty"`
	PickUpDateTimeEnd             string  `protobuf:"bytes,4,opt,name=pick_up_date_time_end,json=pickUpDateTimeEnd,proto3" json:"pick_up_date_time_end,omitempty"`
	QuantityAccepted              float64 `protobuf:"fixed64,5,opt,name=quantity_accepted,json=quantityAccepted,proto3" json:"quantity_accepted,omitempty"`
	QaMeasurementUnitCode         string  `protobuf:"bytes,6,opt,name=qa_measurement_unit_code,json=qaMeasurementUnitCode,proto3" json:"qa_measurement_unit_code,omitempty"`
	QaCodeListVersion             string  `protobuf:"bytes,7,opt,name=qa_code_list_version,json=qaCodeListVersion,proto3" json:"qa_code_list_version,omitempty"`
	QuantityDespatched            float64 `protobuf:"fixed64,8,opt,name=quantity_despatched,json=quantityDespatched,proto3" json:"quantity_despatched,omitempty"`
	QdMeasurementUnitCode         string  `protobuf:"bytes,9,opt,name=qd_measurement_unit_code,json=qdMeasurementUnitCode,proto3" json:"qd_measurement_unit_code,omitempty"`
	QdCodeListVersion             string  `protobuf:"bytes,10,opt,name=qd_code_list_version,json=qdCodeListVersion,proto3" json:"qd_code_list_version,omitempty"`
	QuantityReceived              float64 `protobuf:"fixed64,11,opt,name=quantity_received,json=quantityReceived,proto3" json:"quantity_received,omitempty"`
	QrMeasurementUnitCode         string  `protobuf:"bytes,12,opt,name=qr_measurement_unit_code,json=qrMeasurementUnitCode,proto3" json:"qr_measurement_unit_code,omitempty"`
	QrCodeListVersion             string  `protobuf:"bytes,13,opt,name=qr_code_list_version,json=qrCodeListVersion,proto3" json:"qr_code_list_version,omitempty"`
	TransactionalTradeItem        uint32  `protobuf:"varint,14,opt,name=transactional_trade_item,json=transactionalTradeItem,proto3" json:"transactional_trade_item,omitempty"`
	EcomConsignmentIdentification uint32  `protobuf:"varint,15,opt,name=ecom_consignment_identification,json=ecomConsignmentIdentification,proto3" json:"ecom_consignment_identification,omitempty"`
	Contract                      uint32  `protobuf:"varint,16,opt,name=contract,proto3" json:"contract,omitempty"`
	CustomerReference             uint32  `protobuf:"varint,17,opt,name=customer_reference,json=customerReference,proto3" json:"customer_reference,omitempty"`
	DeliveryNote                  uint32  `protobuf:"varint,18,opt,name=delivery_note,json=deliveryNote,proto3" json:"delivery_note,omitempty"`
	DespatchAdvice                uint32  `protobuf:"varint,19,opt,name=despatch_advice,json=despatchAdvice,proto3" json:"despatch_advice,omitempty"`
	ProductCertification          uint32  `protobuf:"varint,20,opt,name=product_certification,json=productCertification,proto3" json:"product_certification,omitempty"`
	PromotionalDeal               uint32  `protobuf:"varint,21,opt,name=promotional_deal,json=promotionalDeal,proto3" json:"promotional_deal,omitempty"`
	PurchaseConditions            uint32  `protobuf:"varint,22,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	PurchaseOrder                 uint32  `protobuf:"varint,23,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	RequestedItemIdentification   uint32  `protobuf:"varint,24,opt,name=requested_item_identification,json=requestedItemIdentification,proto3" json:"requested_item_identification,omitempty"`
	Specification                 uint32  `protobuf:"varint,25,opt,name=specification,proto3" json:"specification,omitempty"`
	ReceivingAdviceId             uint32  `protobuf:"varint,26,opt,name=receiving_advice_id,json=receivingAdviceId,proto3" json:"receiving_advice_id,omitempty"`
	UserId                        string  `protobuf:"bytes,27,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                     string  `protobuf:"bytes,28,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                     string  `protobuf:"bytes,29,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateReceivingAdviceLineItemRequest) Reset() {
	*x = CreateReceivingAdviceLineItemRequest{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReceivingAdviceLineItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReceivingAdviceLineItemRequest) ProtoMessage() {}

func (x *CreateReceivingAdviceLineItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReceivingAdviceLineItemRequest.ProtoReflect.Descriptor instead.
func (*CreateReceivingAdviceLineItemRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{16}
}

func (x *CreateReceivingAdviceLineItemRequest) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetPickUpDateTimeBegin() string {
	if x != nil {
		return x.PickUpDateTimeBegin
	}
	return ""
}

func (x *CreateReceivingAdviceLineItemRequest) GetPickUpDateTimeEnd() string {
	if x != nil {
		return x.PickUpDateTimeEnd
	}
	return ""
}

func (x *CreateReceivingAdviceLineItemRequest) GetQuantityAccepted() float64 {
	if x != nil {
		return x.QuantityAccepted
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetQaMeasurementUnitCode() string {
	if x != nil {
		return x.QaMeasurementUnitCode
	}
	return ""
}

func (x *CreateReceivingAdviceLineItemRequest) GetQaCodeListVersion() string {
	if x != nil {
		return x.QaCodeListVersion
	}
	return ""
}

func (x *CreateReceivingAdviceLineItemRequest) GetQuantityDespatched() float64 {
	if x != nil {
		return x.QuantityDespatched
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetQdMeasurementUnitCode() string {
	if x != nil {
		return x.QdMeasurementUnitCode
	}
	return ""
}

func (x *CreateReceivingAdviceLineItemRequest) GetQdCodeListVersion() string {
	if x != nil {
		return x.QdCodeListVersion
	}
	return ""
}

func (x *CreateReceivingAdviceLineItemRequest) GetQuantityReceived() float64 {
	if x != nil {
		return x.QuantityReceived
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetQrMeasurementUnitCode() string {
	if x != nil {
		return x.QrMeasurementUnitCode
	}
	return ""
}

func (x *CreateReceivingAdviceLineItemRequest) GetQrCodeListVersion() string {
	if x != nil {
		return x.QrCodeListVersion
	}
	return ""
}

func (x *CreateReceivingAdviceLineItemRequest) GetTransactionalTradeItem() uint32 {
	if x != nil {
		return x.TransactionalTradeItem
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetEcomConsignmentIdentification() uint32 {
	if x != nil {
		return x.EcomConsignmentIdentification
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetContract() uint32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetCustomerReference() uint32 {
	if x != nil {
		return x.CustomerReference
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetDeliveryNote() uint32 {
	if x != nil {
		return x.DeliveryNote
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetDespatchAdvice() uint32 {
	if x != nil {
		return x.DespatchAdvice
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetProductCertification() uint32 {
	if x != nil {
		return x.ProductCertification
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetPromotionalDeal() uint32 {
	if x != nil {
		return x.PromotionalDeal
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetPurchaseOrder() uint32 {
	if x != nil {
		return x.PurchaseOrder
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetRequestedItemIdentification() uint32 {
	if x != nil {
		return x.RequestedItemIdentification
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetSpecification() uint32 {
	if x != nil {
		return x.Specification
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetReceivingAdviceId() uint32 {
	if x != nil {
		return x.ReceivingAdviceId
	}
	return 0
}

func (x *CreateReceivingAdviceLineItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateReceivingAdviceLineItemRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateReceivingAdviceLineItemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateReceivingAdviceLineItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivingAdviceLineItem *ReceivingAdviceLineItem `protobuf:"bytes,1,opt,name=receiving_advice_line_item,json=receivingAdviceLineItem,proto3" json:"receiving_advice_line_item,omitempty"`
}

func (x *CreateReceivingAdviceLineItemResponse) Reset() {
	*x = CreateReceivingAdviceLineItemResponse{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReceivingAdviceLineItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReceivingAdviceLineItemResponse) ProtoMessage() {}

func (x *CreateReceivingAdviceLineItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReceivingAdviceLineItemResponse.ProtoReflect.Descriptor instead.
func (*CreateReceivingAdviceLineItemResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{17}
}

func (x *CreateReceivingAdviceLineItemResponse) GetReceivingAdviceLineItem() *ReceivingAdviceLineItem {
	if x != nil {
		return x.ReceivingAdviceLineItem
	}
	return nil
}

type GetReceivingAdviceLineItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetReceivingAdviceLineItemsRequest) Reset() {
	*x = GetReceivingAdviceLineItemsRequest{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceivingAdviceLineItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingAdviceLineItemsRequest) ProtoMessage() {}

func (x *GetReceivingAdviceLineItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingAdviceLineItemsRequest.ProtoReflect.Descriptor instead.
func (*GetReceivingAdviceLineItemsRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{18}
}

func (x *GetReceivingAdviceLineItemsRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetReceivingAdviceLineItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivingAdviceLineItems []*ReceivingAdviceLineItem `protobuf:"bytes,1,rep,name=receiving_advice_line_items,json=receivingAdviceLineItems,proto3" json:"receiving_advice_line_items,omitempty"`
}

func (x *GetReceivingAdviceLineItemsResponse) Reset() {
	*x = GetReceivingAdviceLineItemsResponse{}
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceivingAdviceLineItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingAdviceLineItemsResponse) ProtoMessage() {}

func (x *GetReceivingAdviceLineItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receivingadvice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingAdviceLineItemsResponse.ProtoReflect.Descriptor instead.
func (*GetReceivingAdviceLineItemsResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receivingadvice_proto_rawDescGZIP(), []int{19}
}

func (x *GetReceivingAdviceLineItemsResponse) GetReceivingAdviceLineItems() []*ReceivingAdviceLineItem {
	if x != nil {
		return x.ReceivingAdviceLineItems
	}
	return nil
}

var File_logistics_v1_receivingadvice_proto protoreflect.FileDescriptor

var file_logistics_v1_receivingadvice_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x0f,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x12, 0x4c, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x0b, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x15, 0x74, 0x61, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x61, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x61, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x64, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x64, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x64, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x64, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x68, 0x61, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6f, 0x68, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x68,
	0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x68, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x72, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x26, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x15, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x37,
	0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x22, 0xc0, 0x04, 0x0a, 0x10, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x12,
	0x71, 0x0a, 0x28, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x23, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x6d, 0x0a, 0x26, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x21,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x51, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x4d, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x55, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x17, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x22, 0xc0, 0x0e,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x28, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x23, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x26, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x31, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x35, 0x0a,
	0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x15, 0x74, 0x61, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x61, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x61, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x15, 0x74, 0x64, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x64, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x64, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x64, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x68, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6f, 0x68, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x68, 0x61,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x68, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x72,
	0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x26, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x15, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62,
	0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x12, 0x3d, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x37, 0x0a,
	0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x69, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x66, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79,
	0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x6a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xaa, 0x06, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x61, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x64, 0x61,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x64, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x64, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x64, 0x61, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16,
	0x74, 0x6f, 0x68, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6f,
	0x68, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x68, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x6f, 0x68, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x17, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x66, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x66,
	0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x52, 0x18, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xea, 0x09, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x71, 0x61, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x71, 0x61, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x71, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x71, 0x64, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x71, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x71, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x71, 0x72, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x71, 0x72, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a, 0x1f,
	0x65, 0x63, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x65, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x2f, 0x0a,
	0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22,
	0xba, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x50, 0x0a, 0x17,
	0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x70, 0x69, 0x63, 0x6b, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c,
	0x0a, 0x15, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x70, 0x69, 0x63, 0x6b, 0x55,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x22, 0xfc, 0x0a, 0x0a,
	0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x17, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75,
	0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x15,
	0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x69, 0x63,
	0x6b, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x71,
	0x61, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x71,
	0x61, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x71, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x71, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x71, 0x64, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x71, 0x64, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x71, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x71, 0x72, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x71, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x46, 0x0a, 0x1f, 0x65, 0x63, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x65, 0x63, 0x6f, 0x6d,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65,
	0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x25,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x5c, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x18, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xd6, 0x06, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x70, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50,
	0x6b, 0x12, 0x2b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88,
	0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x32, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x30, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x67, 0x73, 0x31, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logistics_v1_receivingadvice_proto_rawDescOnce sync.Once
	file_logistics_v1_receivingadvice_proto_rawDescData = file_logistics_v1_receivingadvice_proto_rawDesc
)

func file_logistics_v1_receivingadvice_proto_rawDescGZIP() []byte {
	file_logistics_v1_receivingadvice_proto_rawDescOnce.Do(func() {
		file_logistics_v1_receivingadvice_proto_rawDescData = protoimpl.X.CompressGZIP(file_logistics_v1_receivingadvice_proto_rawDescData)
	})
	return file_logistics_v1_receivingadvice_proto_rawDescData
}

var file_logistics_v1_receivingadvice_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_logistics_v1_receivingadvice_proto_goTypes = []any{
	(*ReceivingAdvice)(nil),                       // 0: logistics.v1.ReceivingAdvice
	(*ReceivingAdviceD)(nil),                      // 1: logistics.v1.ReceivingAdviceD
	(*ReceivingAdviceT)(nil),                      // 2: logistics.v1.ReceivingAdviceT
	(*CreateReceivingAdviceRequest)(nil),          // 3: logistics.v1.CreateReceivingAdviceRequest
	(*CreateReceivingAdviceResponse)(nil),         // 4: logistics.v1.CreateReceivingAdviceResponse
	(*GetReceivingAdviceRequest)(nil),             // 5: logistics.v1.GetReceivingAdviceRequest
	(*GetReceivingAdviceResponse)(nil),            // 6: logistics.v1.GetReceivingAdviceResponse
	(*GetReceivingAdviceByPkRequest)(nil),         // 7: logistics.v1.GetReceivingAdviceByPkRequest
	(*GetReceivingAdviceByPkResponse)(nil),        // 8: logistics.v1.GetReceivingAdviceByPkResponse
	(*GetReceivingAdvicesResponse)(nil),           // 9: logistics.v1.GetReceivingAdvicesResponse
	(*GetReceivingAdvicesRequest)(nil),            // 10: logistics.v1.GetReceivingAdvicesRequest
	(*UpdateReceivingAdviceRequest)(nil),          // 11: logistics.v1.UpdateReceivingAdviceRequest
	(*UpdateReceivingAdviceResponse)(nil),         // 12: logistics.v1.UpdateReceivingAdviceResponse
	(*ReceivingAdviceLineItem)(nil),               // 13: logistics.v1.ReceivingAdviceLineItem
	(*ReceivingAdviceLineItemD)(nil),              // 14: logistics.v1.ReceivingAdviceLineItemD
	(*ReceivingAdviceLineItemT)(nil),              // 15: logistics.v1.ReceivingAdviceLineItemT
	(*CreateReceivingAdviceLineItemRequest)(nil),  // 16: logistics.v1.CreateReceivingAdviceLineItemRequest
	(*CreateReceivingAdviceLineItemResponse)(nil), // 17: logistics.v1.CreateReceivingAdviceLineItemResponse
	(*GetReceivingAdviceLineItemsRequest)(nil),    // 18: logistics.v1.GetReceivingAdviceLineItemsRequest
	(*GetReceivingAdviceLineItemsResponse)(nil),   // 19: logistics.v1.GetReceivingAdviceLineItemsResponse
	(*v1.CrUpdUser)(nil),                          // 20: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                          // 21: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),                 // 22: google.protobuf.Timestamp
	(*v1.GetRequest)(nil),                         // 23: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                     // 24: common.v1.GetByIdRequest
}
var file_logistics_v1_receivingadvice_proto_depIdxs = []int32{
	1,  // 0: logistics.v1.ReceivingAdvice.receiving_advice_d:type_name -> logistics.v1.ReceivingAdviceD
	2,  // 1: logistics.v1.ReceivingAdvice.receiving_advice_t:type_name -> logistics.v1.ReceivingAdviceT
	20, // 2: logistics.v1.ReceivingAdvice.cr_upd_user:type_name -> common.v1.CrUpdUser
	21, // 3: logistics.v1.ReceivingAdvice.cr_upd_time:type_name -> common.v1.CrUpdTime
	22, // 4: logistics.v1.ReceivingAdviceT.despatch_advice_delivery_date_time_begin:type_name -> google.protobuf.Timestamp
	22, // 5: logistics.v1.ReceivingAdviceT.despatch_advice_delivery_date_time_end:type_name -> google.protobuf.Timestamp
	22, // 6: logistics.v1.ReceivingAdviceT.payment_date_time_begin:type_name -> google.protobuf.Timestamp
	22, // 7: logistics.v1.ReceivingAdviceT.payment_date_time_end:type_name -> google.protobuf.Timestamp
	22, // 8: logistics.v1.ReceivingAdviceT.receiving_date_time_begin:type_name -> google.protobuf.Timestamp
	22, // 9: logistics.v1.ReceivingAdviceT.receiving_date_time_end:type_name -> google.protobuf.Timestamp
	0,  // 10: logistics.v1.CreateReceivingAdviceResponse.receiving_advice:type_name -> logistics.v1.ReceivingAdvice
	23, // 11: logistics.v1.GetReceivingAdviceRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 12: logistics.v1.GetReceivingAdviceResponse.receiving_advice:type_name -> logistics.v1.ReceivingAdvice
	24, // 13: logistics.v1.GetReceivingAdviceByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 14: logistics.v1.GetReceivingAdviceByPkResponse.receiving_advice:type_name -> logistics.v1.ReceivingAdvice
	0,  // 15: logistics.v1.GetReceivingAdvicesResponse.receiving_advices:type_name -> logistics.v1.ReceivingAdvice
	14, // 16: logistics.v1.ReceivingAdviceLineItem.receiving_advice_line_item_d:type_name -> logistics.v1.ReceivingAdviceLineItemD
	15, // 17: logistics.v1.ReceivingAdviceLineItem.receiving_advice_line_item_t:type_name -> logistics.v1.ReceivingAdviceLineItemT
	20, // 18: logistics.v1.ReceivingAdviceLineItem.cr_upd_user:type_name -> common.v1.CrUpdUser
	21, // 19: logistics.v1.ReceivingAdviceLineItem.cr_upd_time:type_name -> common.v1.CrUpdTime
	22, // 20: logistics.v1.ReceivingAdviceLineItemT.pick_up_date_time_begin:type_name -> google.protobuf.Timestamp
	22, // 21: logistics.v1.ReceivingAdviceLineItemT.pick_up_date_time_end:type_name -> google.protobuf.Timestamp
	13, // 22: logistics.v1.CreateReceivingAdviceLineItemResponse.receiving_advice_line_item:type_name -> logistics.v1.ReceivingAdviceLineItem
	23, // 23: logistics.v1.GetReceivingAdviceLineItemsRequest.get_request:type_name -> common.v1.GetRequest
	13, // 24: logistics.v1.GetReceivingAdviceLineItemsResponse.receiving_advice_line_items:type_name -> logistics.v1.ReceivingAdviceLineItem
	3,  // 25: logistics.v1.ReceivingAdviceService.CreateReceivingAdvice:input_type -> logistics.v1.CreateReceivingAdviceRequest
	10, // 26: logistics.v1.ReceivingAdviceService.GetReceivingAdvices:input_type -> logistics.v1.GetReceivingAdvicesRequest
	5,  // 27: logistics.v1.ReceivingAdviceService.GetReceivingAdvice:input_type -> logistics.v1.GetReceivingAdviceRequest
	7,  // 28: logistics.v1.ReceivingAdviceService.GetReceivingAdviceByPk:input_type -> logistics.v1.GetReceivingAdviceByPkRequest
	11, // 29: logistics.v1.ReceivingAdviceService.UpdateReceivingAdvice:input_type -> logistics.v1.UpdateReceivingAdviceRequest
	16, // 30: logistics.v1.ReceivingAdviceService.CreateReceivingAdviceLineItem:input_type -> logistics.v1.CreateReceivingAdviceLineItemRequest
	18, // 31: logistics.v1.ReceivingAdviceService.GetReceivingAdviceLineItems:input_type -> logistics.v1.GetReceivingAdviceLineItemsRequest
	4,  // 32: logistics.v1.ReceivingAdviceService.CreateReceivingAdvice:output_type -> logistics.v1.CreateReceivingAdviceResponse
	9,  // 33: logistics.v1.ReceivingAdviceService.GetReceivingAdvices:output_type -> logistics.v1.GetReceivingAdvicesResponse
	6,  // 34: logistics.v1.ReceivingAdviceService.GetReceivingAdvice:output_type -> logistics.v1.GetReceivingAdviceResponse
	8,  // 35: logistics.v1.ReceivingAdviceService.GetReceivingAdviceByPk:output_type -> logistics.v1.GetReceivingAdviceByPkResponse
	12, // 36: logistics.v1.ReceivingAdviceService.UpdateReceivingAdvice:output_type -> logistics.v1.UpdateReceivingAdviceResponse
	17, // 37: logistics.v1.ReceivingAdviceService.CreateReceivingAdviceLineItem:output_type -> logistics.v1.CreateReceivingAdviceLineItemResponse
	19, // 38: logistics.v1.ReceivingAdviceService.GetReceivingAdviceLineItems:output_type -> logistics.v1.GetReceivingAdviceLineItemsResponse
	32, // [32:39] is the sub-list for method output_type
	25, // [25:32] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_logistics_v1_receivingadvice_proto_init() }
func file_logistics_v1_receivingadvice_proto_init() {
	if File_logistics_v1_receivingadvice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logistics_v1_receivingadvice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logistics_v1_receivingadvice_proto_goTypes,
		DependencyIndexes: file_logistics_v1_receivingadvice_proto_depIdxs,
		MessageInfos:      file_logistics_v1_receivingadvice_proto_msgTypes,
	}.Build()
	File_logistics_v1_receivingadvice_proto = out.File
	file_logistics_v1_receivingadvice_proto_rawDesc = nil
	file_logistics_v1_receivingadvice_proto_goTypes = nil
	file_logistics_v1_receivingadvice_proto_depIdxs = nil
}
