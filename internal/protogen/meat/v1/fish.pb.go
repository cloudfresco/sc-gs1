// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: meat/v1/fish.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-gs1/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FishDespatchAdviceLineItemExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishDespatchAdviceLineItemExtensionD *FishDespatchAdviceLineItemExtensionD `protobuf:"bytes,1,opt,name=fish_despatch_advice_line_item_extension_d,json=fishDespatchAdviceLineItemExtensionD,proto3" json:"fish_despatch_advice_line_item_extension_d,omitempty"`
	FishDespatchAdviceLineItemExtensionT *FishDespatchAdviceLineItemExtensionT `protobuf:"bytes,2,opt,name=fish_despatch_advice_line_item_extension_t,json=fishDespatchAdviceLineItemExtensionT,proto3" json:"fish_despatch_advice_line_item_extension_t,omitempty"`
	CrUpdUser                            *v1.CrUpdUser                         `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                            *v1.CrUpdTime                         `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *FishDespatchAdviceLineItemExtension) Reset() {
	*x = FishDespatchAdviceLineItemExtension{}
	mi := &file_meat_v1_fish_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FishDespatchAdviceLineItemExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishDespatchAdviceLineItemExtension) ProtoMessage() {}

func (x *FishDespatchAdviceLineItemExtension) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishDespatchAdviceLineItemExtension.ProtoReflect.Descriptor instead.
func (*FishDespatchAdviceLineItemExtension) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{0}
}

func (x *FishDespatchAdviceLineItemExtension) GetFishDespatchAdviceLineItemExtensionD() *FishDespatchAdviceLineItemExtensionD {
	if x != nil {
		return x.FishDespatchAdviceLineItemExtensionD
	}
	return nil
}

func (x *FishDespatchAdviceLineItemExtension) GetFishDespatchAdviceLineItemExtensionT() *FishDespatchAdviceLineItemExtensionT {
	if x != nil {
		return x.FishDespatchAdviceLineItemExtensionT
	}
	return nil
}

func (x *FishDespatchAdviceLineItemExtension) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *FishDespatchAdviceLineItemExtension) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type FishDespatchAdviceLineItemExtensionD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                       []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                         string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	AquaticSpeciesCode          string `protobuf:"bytes,4,opt,name=aquatic_species_code,json=aquaticSpeciesCode,proto3" json:"aquatic_species_code,omitempty"`
	AquaticSpeciesName          string `protobuf:"bytes,5,opt,name=aquatic_species_name,json=aquaticSpeciesName,proto3" json:"aquatic_species_name,omitempty"`
	FishPresentationCode        string `protobuf:"bytes,6,opt,name=fish_presentation_code,json=fishPresentationCode,proto3" json:"fish_presentation_code,omitempty"`
	FpCodeListAgencyName        string `protobuf:"bytes,7,opt,name=fp_code_list_agency_name,json=fpCodeListAgencyName,proto3" json:"fp_code_list_agency_name,omitempty"`
	FpCodeListVersion           string `protobuf:"bytes,8,opt,name=fp_code_list_version,json=fpCodeListVersion,proto3" json:"fp_code_list_version,omitempty"`
	FpCodeListName              string `protobuf:"bytes,9,opt,name=fp_code_list_name,json=fpCodeListName,proto3" json:"fp_code_list_name,omitempty"`
	FishSizeCode                string `protobuf:"bytes,10,opt,name=fish_size_code,json=fishSizeCode,proto3" json:"fish_size_code,omitempty"`
	FsCodeListAgencyName        string `protobuf:"bytes,11,opt,name=fs_code_list_agency_name,json=fsCodeListAgencyName,proto3" json:"fs_code_list_agency_name,omitempty"`
	FsCodeListVersion           string `protobuf:"bytes,12,opt,name=fs_code_list_version,json=fsCodeListVersion,proto3" json:"fs_code_list_version,omitempty"`
	FsCodeListName              string `protobuf:"bytes,13,opt,name=fs_code_list_name,json=fsCodeListName,proto3" json:"fs_code_list_name,omitempty"`
	QualityGradeCode            string `protobuf:"bytes,14,opt,name=quality_grade_code,json=qualityGradeCode,proto3" json:"quality_grade_code,omitempty"`
	QgCodeListAgencyName        string `protobuf:"bytes,15,opt,name=qg_code_list_agency_name,json=qgCodeListAgencyName,proto3" json:"qg_code_list_agency_name,omitempty"`
	QgCodeListVersion           string `protobuf:"bytes,16,opt,name=qg_code_list_version,json=qgCodeListVersion,proto3" json:"qg_code_list_version,omitempty"`
	QgCodeListName              string `protobuf:"bytes,17,opt,name=qg_code_list_name,json=qgCodeListName,proto3" json:"qg_code_list_name,omitempty"`
	StorageStateCode            string `protobuf:"bytes,18,opt,name=storage_state_code,json=storageStateCode,proto3" json:"storage_state_code,omitempty"`
	AquaCultureProductionUnit   uint32 `protobuf:"varint,19,opt,name=aqua_culture_production_unit,json=aquaCultureProductionUnit,proto3" json:"aqua_culture_production_unit,omitempty"`
	FishingVessel               uint32 `protobuf:"varint,20,opt,name=fishing_vessel,json=fishingVessel,proto3" json:"fishing_vessel,omitempty"`
	PlaceOfSlaughter            uint32 `protobuf:"varint,21,opt,name=place_of_slaughter,json=placeOfSlaughter,proto3" json:"place_of_slaughter,omitempty"`
	PortOfLanding               uint32 `protobuf:"varint,22,opt,name=port_of_landing,json=portOfLanding,proto3" json:"port_of_landing,omitempty"`
	FishCatchOrProductionDateId uint32 `protobuf:"varint,23,opt,name=fish_catch_or_production_date_id,json=fishCatchOrProductionDateId,proto3" json:"fish_catch_or_production_date_id,omitempty"`
	FishCatchOrProductionId     uint32 `protobuf:"varint,24,opt,name=fish_catch_or_production_id,json=fishCatchOrProductionId,proto3" json:"fish_catch_or_production_id,omitempty"`
}

func (x *FishDespatchAdviceLineItemExtensionD) Reset() {
	*x = FishDespatchAdviceLineItemExtensionD{}
	mi := &file_meat_v1_fish_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FishDespatchAdviceLineItemExtensionD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishDespatchAdviceLineItemExtensionD) ProtoMessage() {}

func (x *FishDespatchAdviceLineItemExtensionD) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishDespatchAdviceLineItemExtensionD.ProtoReflect.Descriptor instead.
func (*FishDespatchAdviceLineItemExtensionD) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{1}
}

func (x *FishDespatchAdviceLineItemExtensionD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FishDespatchAdviceLineItemExtensionD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *FishDespatchAdviceLineItemExtensionD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetAquaticSpeciesCode() string {
	if x != nil {
		return x.AquaticSpeciesCode
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetAquaticSpeciesName() string {
	if x != nil {
		return x.AquaticSpeciesName
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFishPresentationCode() string {
	if x != nil {
		return x.FishPresentationCode
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFpCodeListAgencyName() string {
	if x != nil {
		return x.FpCodeListAgencyName
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFpCodeListVersion() string {
	if x != nil {
		return x.FpCodeListVersion
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFpCodeListName() string {
	if x != nil {
		return x.FpCodeListName
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFishSizeCode() string {
	if x != nil {
		return x.FishSizeCode
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFsCodeListAgencyName() string {
	if x != nil {
		return x.FsCodeListAgencyName
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFsCodeListVersion() string {
	if x != nil {
		return x.FsCodeListVersion
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFsCodeListName() string {
	if x != nil {
		return x.FsCodeListName
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetQualityGradeCode() string {
	if x != nil {
		return x.QualityGradeCode
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetQgCodeListAgencyName() string {
	if x != nil {
		return x.QgCodeListAgencyName
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetQgCodeListVersion() string {
	if x != nil {
		return x.QgCodeListVersion
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetQgCodeListName() string {
	if x != nil {
		return x.QgCodeListName
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetStorageStateCode() string {
	if x != nil {
		return x.StorageStateCode
	}
	return ""
}

func (x *FishDespatchAdviceLineItemExtensionD) GetAquaCultureProductionUnit() uint32 {
	if x != nil {
		return x.AquaCultureProductionUnit
	}
	return 0
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFishingVessel() uint32 {
	if x != nil {
		return x.FishingVessel
	}
	return 0
}

func (x *FishDespatchAdviceLineItemExtensionD) GetPlaceOfSlaughter() uint32 {
	if x != nil {
		return x.PlaceOfSlaughter
	}
	return 0
}

func (x *FishDespatchAdviceLineItemExtensionD) GetPortOfLanding() uint32 {
	if x != nil {
		return x.PortOfLanding
	}
	return 0
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFishCatchOrProductionDateId() uint32 {
	if x != nil {
		return x.FishCatchOrProductionDateId
	}
	return 0
}

func (x *FishDespatchAdviceLineItemExtensionD) GetFishCatchOrProductionId() uint32 {
	if x != nil {
		return x.FishCatchOrProductionId
	}
	return 0
}

type FishDespatchAdviceLineItemExtensionT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateOfLanding   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date_of_landing,json=dateOfLanding,proto3" json:"date_of_landing,omitempty"`
	DateOfSlaughter *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date_of_slaughter,json=dateOfSlaughter,proto3" json:"date_of_slaughter,omitempty"`
}

func (x *FishDespatchAdviceLineItemExtensionT) Reset() {
	*x = FishDespatchAdviceLineItemExtensionT{}
	mi := &file_meat_v1_fish_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FishDespatchAdviceLineItemExtensionT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishDespatchAdviceLineItemExtensionT) ProtoMessage() {}

func (x *FishDespatchAdviceLineItemExtensionT) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishDespatchAdviceLineItemExtensionT.ProtoReflect.Descriptor instead.
func (*FishDespatchAdviceLineItemExtensionT) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{2}
}

func (x *FishDespatchAdviceLineItemExtensionT) GetDateOfLanding() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfLanding
	}
	return nil
}

func (x *FishDespatchAdviceLineItemExtensionT) GetDateOfSlaughter() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfSlaughter
	}
	return nil
}

type CreateFishDespatchAdviceLineItemExtensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AquaticSpeciesCode          string `protobuf:"bytes,1,opt,name=aquatic_species_code,json=aquaticSpeciesCode,proto3" json:"aquatic_species_code,omitempty"`
	AquaticSpeciesName          string `protobuf:"bytes,2,opt,name=aquatic_species_name,json=aquaticSpeciesName,proto3" json:"aquatic_species_name,omitempty"`
	FishPresentationCode        string `protobuf:"bytes,3,opt,name=fish_presentation_code,json=fishPresentationCode,proto3" json:"fish_presentation_code,omitempty"`
	FpCodeListAgencyName        string `protobuf:"bytes,4,opt,name=fp_code_list_agency_name,json=fpCodeListAgencyName,proto3" json:"fp_code_list_agency_name,omitempty"`
	FpCodeListVersion           string `protobuf:"bytes,5,opt,name=fp_code_list_version,json=fpCodeListVersion,proto3" json:"fp_code_list_version,omitempty"`
	FpCodeListName              string `protobuf:"bytes,6,opt,name=fp_code_list_name,json=fpCodeListName,proto3" json:"fp_code_list_name,omitempty"`
	FishSizeCode                string `protobuf:"bytes,7,opt,name=fish_size_code,json=fishSizeCode,proto3" json:"fish_size_code,omitempty"`
	FsCodeListAgencyName        string `protobuf:"bytes,8,opt,name=fs_code_list_agency_name,json=fsCodeListAgencyName,proto3" json:"fs_code_list_agency_name,omitempty"`
	FsCodeListVersion           string `protobuf:"bytes,9,opt,name=fs_code_list_version,json=fsCodeListVersion,proto3" json:"fs_code_list_version,omitempty"`
	FsCodeListName              string `protobuf:"bytes,10,opt,name=fs_code_list_name,json=fsCodeListName,proto3" json:"fs_code_list_name,omitempty"`
	QualityGradeCode            string `protobuf:"bytes,11,opt,name=quality_grade_code,json=qualityGradeCode,proto3" json:"quality_grade_code,omitempty"`
	QgCodeListAgencyName        string `protobuf:"bytes,12,opt,name=qg_code_list_agency_name,json=qgCodeListAgencyName,proto3" json:"qg_code_list_agency_name,omitempty"`
	QgCodeListVersion           string `protobuf:"bytes,13,opt,name=qg_code_list_version,json=qgCodeListVersion,proto3" json:"qg_code_list_version,omitempty"`
	QgCodeListName              string `protobuf:"bytes,14,opt,name=qg_code_list_name,json=qgCodeListName,proto3" json:"qg_code_list_name,omitempty"`
	StorageStateCode            string `protobuf:"bytes,15,opt,name=storage_state_code,json=storageStateCode,proto3" json:"storage_state_code,omitempty"`
	AquaCultureProductionUnit   uint32 `protobuf:"varint,16,opt,name=aqua_culture_production_unit,json=aquaCultureProductionUnit,proto3" json:"aqua_culture_production_unit,omitempty"`
	DateOfLanding               string `protobuf:"bytes,17,opt,name=date_of_landing,json=dateOfLanding,proto3" json:"date_of_landing,omitempty"`
	DateOfSlaughter             string `protobuf:"bytes,18,opt,name=date_of_slaughter,json=dateOfSlaughter,proto3" json:"date_of_slaughter,omitempty"`
	FishingVessel               uint32 `protobuf:"varint,19,opt,name=fishing_vessel,json=fishingVessel,proto3" json:"fishing_vessel,omitempty"`
	PlaceOfSlaughter            uint32 `protobuf:"varint,20,opt,name=place_of_slaughter,json=placeOfSlaughter,proto3" json:"place_of_slaughter,omitempty"`
	PortOfLanding               uint32 `protobuf:"varint,21,opt,name=port_of_landing,json=portOfLanding,proto3" json:"port_of_landing,omitempty"`
	FishCatchOrProductionDateId uint32 `protobuf:"varint,22,opt,name=fish_catch_or_production_date_id,json=fishCatchOrProductionDateId,proto3" json:"fish_catch_or_production_date_id,omitempty"`
	FishCatchOrProductionId     uint32 `protobuf:"varint,23,opt,name=fish_catch_or_production_id,json=fishCatchOrProductionId,proto3" json:"fish_catch_or_production_id,omitempty"`
	UserId                      string `protobuf:"bytes,24,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                   string `protobuf:"bytes,25,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                   string `protobuf:"bytes,26,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) Reset() {
	*x = CreateFishDespatchAdviceLineItemExtensionRequest{}
	mi := &file_meat_v1_fish_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFishDespatchAdviceLineItemExtensionRequest) ProtoMessage() {}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFishDespatchAdviceLineItemExtensionRequest.ProtoReflect.Descriptor instead.
func (*CreateFishDespatchAdviceLineItemExtensionRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetAquaticSpeciesCode() string {
	if x != nil {
		return x.AquaticSpeciesCode
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetAquaticSpeciesName() string {
	if x != nil {
		return x.AquaticSpeciesName
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFishPresentationCode() string {
	if x != nil {
		return x.FishPresentationCode
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFpCodeListAgencyName() string {
	if x != nil {
		return x.FpCodeListAgencyName
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFpCodeListVersion() string {
	if x != nil {
		return x.FpCodeListVersion
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFpCodeListName() string {
	if x != nil {
		return x.FpCodeListName
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFishSizeCode() string {
	if x != nil {
		return x.FishSizeCode
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFsCodeListAgencyName() string {
	if x != nil {
		return x.FsCodeListAgencyName
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFsCodeListVersion() string {
	if x != nil {
		return x.FsCodeListVersion
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFsCodeListName() string {
	if x != nil {
		return x.FsCodeListName
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetQualityGradeCode() string {
	if x != nil {
		return x.QualityGradeCode
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetQgCodeListAgencyName() string {
	if x != nil {
		return x.QgCodeListAgencyName
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetQgCodeListVersion() string {
	if x != nil {
		return x.QgCodeListVersion
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetQgCodeListName() string {
	if x != nil {
		return x.QgCodeListName
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetStorageStateCode() string {
	if x != nil {
		return x.StorageStateCode
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetAquaCultureProductionUnit() uint32 {
	if x != nil {
		return x.AquaCultureProductionUnit
	}
	return 0
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetDateOfLanding() string {
	if x != nil {
		return x.DateOfLanding
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetDateOfSlaughter() string {
	if x != nil {
		return x.DateOfSlaughter
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFishingVessel() uint32 {
	if x != nil {
		return x.FishingVessel
	}
	return 0
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetPlaceOfSlaughter() uint32 {
	if x != nil {
		return x.PlaceOfSlaughter
	}
	return 0
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetPortOfLanding() uint32 {
	if x != nil {
		return x.PortOfLanding
	}
	return 0
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFishCatchOrProductionDateId() uint32 {
	if x != nil {
		return x.FishCatchOrProductionDateId
	}
	return 0
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetFishCatchOrProductionId() uint32 {
	if x != nil {
		return x.FishCatchOrProductionId
	}
	return 0
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateFishDespatchAdviceLineItemExtensionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateFishDespatchAdviceLineItemExtensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishDespatchAdviceLineItemExtension *FishDespatchAdviceLineItemExtension `protobuf:"bytes,1,opt,name=fish_despatch_advice_line_item_extension,json=fishDespatchAdviceLineItemExtension,proto3" json:"fish_despatch_advice_line_item_extension,omitempty"`
}

func (x *CreateFishDespatchAdviceLineItemExtensionResponse) Reset() {
	*x = CreateFishDespatchAdviceLineItemExtensionResponse{}
	mi := &file_meat_v1_fish_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFishDespatchAdviceLineItemExtensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFishDespatchAdviceLineItemExtensionResponse) ProtoMessage() {}

func (x *CreateFishDespatchAdviceLineItemExtensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFishDespatchAdviceLineItemExtensionResponse.ProtoReflect.Descriptor instead.
func (*CreateFishDespatchAdviceLineItemExtensionResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFishDespatchAdviceLineItemExtensionResponse) GetFishDespatchAdviceLineItemExtension() *FishDespatchAdviceLineItemExtension {
	if x != nil {
		return x.FishDespatchAdviceLineItemExtension
	}
	return nil
}

type FishCatchOrProduction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CatchArea                             string `protobuf:"bytes,2,opt,name=catch_area,json=catchArea,proto3" json:"catch_area,omitempty"`
	FishingGearTypeCode                   string `protobuf:"bytes,3,opt,name=fishing_gear_type_code,json=fishingGearTypeCode,proto3" json:"fishing_gear_type_code,omitempty"`
	ProductionMethodForFishAndSeafoodCode string `protobuf:"bytes,4,opt,name=production_method_for_fish_and_seafood_code,json=productionMethodForFishAndSeafoodCode,proto3" json:"production_method_for_fish_and_seafood_code,omitempty"`
}

func (x *FishCatchOrProduction) Reset() {
	*x = FishCatchOrProduction{}
	mi := &file_meat_v1_fish_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FishCatchOrProduction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishCatchOrProduction) ProtoMessage() {}

func (x *FishCatchOrProduction) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishCatchOrProduction.ProtoReflect.Descriptor instead.
func (*FishCatchOrProduction) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{5}
}

func (x *FishCatchOrProduction) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FishCatchOrProduction) GetCatchArea() string {
	if x != nil {
		return x.CatchArea
	}
	return ""
}

func (x *FishCatchOrProduction) GetFishingGearTypeCode() string {
	if x != nil {
		return x.FishingGearTypeCode
	}
	return ""
}

func (x *FishCatchOrProduction) GetProductionMethodForFishAndSeafoodCode() string {
	if x != nil {
		return x.ProductionMethodForFishAndSeafoodCode
	}
	return ""
}

type CreateFishCatchOrProductionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatchArea                             string `protobuf:"bytes,1,opt,name=catch_area,json=catchArea,proto3" json:"catch_area,omitempty"`
	FishingGearTypeCode                   string `protobuf:"bytes,2,opt,name=fishing_gear_type_code,json=fishingGearTypeCode,proto3" json:"fishing_gear_type_code,omitempty"`
	ProductionMethodForFishAndSeafoodCode string `protobuf:"bytes,3,opt,name=production_method_for_fish_and_seafood_code,json=productionMethodForFishAndSeafoodCode,proto3" json:"production_method_for_fish_and_seafood_code,omitempty"`
	UserId                                string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                             string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                             string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateFishCatchOrProductionRequest) Reset() {
	*x = CreateFishCatchOrProductionRequest{}
	mi := &file_meat_v1_fish_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFishCatchOrProductionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFishCatchOrProductionRequest) ProtoMessage() {}

func (x *CreateFishCatchOrProductionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFishCatchOrProductionRequest.ProtoReflect.Descriptor instead.
func (*CreateFishCatchOrProductionRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{6}
}

func (x *CreateFishCatchOrProductionRequest) GetCatchArea() string {
	if x != nil {
		return x.CatchArea
	}
	return ""
}

func (x *CreateFishCatchOrProductionRequest) GetFishingGearTypeCode() string {
	if x != nil {
		return x.FishingGearTypeCode
	}
	return ""
}

func (x *CreateFishCatchOrProductionRequest) GetProductionMethodForFishAndSeafoodCode() string {
	if x != nil {
		return x.ProductionMethodForFishAndSeafoodCode
	}
	return ""
}

func (x *CreateFishCatchOrProductionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateFishCatchOrProductionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateFishCatchOrProductionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateFishCatchOrProductionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishCatchOrProduction *FishCatchOrProduction `protobuf:"bytes,1,opt,name=fish_catch_or_production,json=fishCatchOrProduction,proto3" json:"fish_catch_or_production,omitempty"`
}

func (x *CreateFishCatchOrProductionResponse) Reset() {
	*x = CreateFishCatchOrProductionResponse{}
	mi := &file_meat_v1_fish_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFishCatchOrProductionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFishCatchOrProductionResponse) ProtoMessage() {}

func (x *CreateFishCatchOrProductionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFishCatchOrProductionResponse.ProtoReflect.Descriptor instead.
func (*CreateFishCatchOrProductionResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{7}
}

func (x *CreateFishCatchOrProductionResponse) GetFishCatchOrProduction() *FishCatchOrProduction {
	if x != nil {
		return x.FishCatchOrProduction
	}
	return nil
}

type FishCatchOrProductionDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishCatchOrProductionDateD *FishCatchOrProductionDateD `protobuf:"bytes,1,opt,name=fish_catch_or_production_date_d,json=fishCatchOrProductionDateD,proto3" json:"fish_catch_or_production_date_d,omitempty"`
	FishCatchOrProductionDateT *FishCatchOrProductionDateT `protobuf:"bytes,2,opt,name=fish_catch_or_production_date_t,json=fishCatchOrProductionDateT,proto3" json:"fish_catch_or_production_date_t,omitempty"`
}

func (x *FishCatchOrProductionDate) Reset() {
	*x = FishCatchOrProductionDate{}
	mi := &file_meat_v1_fish_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FishCatchOrProductionDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishCatchOrProductionDate) ProtoMessage() {}

func (x *FishCatchOrProductionDate) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishCatchOrProductionDate.ProtoReflect.Descriptor instead.
func (*FishCatchOrProductionDate) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{8}
}

func (x *FishCatchOrProductionDate) GetFishCatchOrProductionDateD() *FishCatchOrProductionDateD {
	if x != nil {
		return x.FishCatchOrProductionDateD
	}
	return nil
}

func (x *FishCatchOrProductionDate) GetFishCatchOrProductionDateT() *FishCatchOrProductionDateT {
	if x != nil {
		return x.FishCatchOrProductionDateT
	}
	return nil
}

type FishCatchOrProductionDateD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FishCatchOrProductionDateD) Reset() {
	*x = FishCatchOrProductionDateD{}
	mi := &file_meat_v1_fish_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FishCatchOrProductionDateD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishCatchOrProductionDateD) ProtoMessage() {}

func (x *FishCatchOrProductionDateD) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishCatchOrProductionDateD.ProtoReflect.Descriptor instead.
func (*FishCatchOrProductionDateD) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{9}
}

func (x *FishCatchOrProductionDateD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FishCatchOrProductionDateT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatchEndDate    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=catch_end_date,json=catchEndDate,proto3" json:"catch_end_date,omitempty"`
	CatchStartDate  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=catch_start_date,json=catchStartDate,proto3" json:"catch_start_date,omitempty"`
	FirstFreezeDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=first_freeze_date,json=firstFreezeDate,proto3" json:"first_freeze_date,omitempty"`
	CatchDateTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=catch_date_time,json=catchDateTime,proto3" json:"catch_date_time,omitempty"`
}

func (x *FishCatchOrProductionDateT) Reset() {
	*x = FishCatchOrProductionDateT{}
	mi := &file_meat_v1_fish_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FishCatchOrProductionDateT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishCatchOrProductionDateT) ProtoMessage() {}

func (x *FishCatchOrProductionDateT) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishCatchOrProductionDateT.ProtoReflect.Descriptor instead.
func (*FishCatchOrProductionDateT) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{10}
}

func (x *FishCatchOrProductionDateT) GetCatchEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CatchEndDate
	}
	return nil
}

func (x *FishCatchOrProductionDateT) GetCatchStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CatchStartDate
	}
	return nil
}

func (x *FishCatchOrProductionDateT) GetFirstFreezeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstFreezeDate
	}
	return nil
}

func (x *FishCatchOrProductionDateT) GetCatchDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CatchDateTime
	}
	return nil
}

type CreateFishCatchOrProductionDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatchEndDate    string `protobuf:"bytes,1,opt,name=catch_end_date,json=catchEndDate,proto3" json:"catch_end_date,omitempty"`
	CatchStartDate  string `protobuf:"bytes,2,opt,name=catch_start_date,json=catchStartDate,proto3" json:"catch_start_date,omitempty"`
	FirstFreezeDate string `protobuf:"bytes,3,opt,name=first_freeze_date,json=firstFreezeDate,proto3" json:"first_freeze_date,omitempty"`
	CatchDateTime   string `protobuf:"bytes,4,opt,name=catch_date_time,json=catchDateTime,proto3" json:"catch_date_time,omitempty"`
	UserId          string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail       string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId       string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateFishCatchOrProductionDateRequest) Reset() {
	*x = CreateFishCatchOrProductionDateRequest{}
	mi := &file_meat_v1_fish_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFishCatchOrProductionDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFishCatchOrProductionDateRequest) ProtoMessage() {}

func (x *CreateFishCatchOrProductionDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFishCatchOrProductionDateRequest.ProtoReflect.Descriptor instead.
func (*CreateFishCatchOrProductionDateRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{11}
}

func (x *CreateFishCatchOrProductionDateRequest) GetCatchEndDate() string {
	if x != nil {
		return x.CatchEndDate
	}
	return ""
}

func (x *CreateFishCatchOrProductionDateRequest) GetCatchStartDate() string {
	if x != nil {
		return x.CatchStartDate
	}
	return ""
}

func (x *CreateFishCatchOrProductionDateRequest) GetFirstFreezeDate() string {
	if x != nil {
		return x.FirstFreezeDate
	}
	return ""
}

func (x *CreateFishCatchOrProductionDateRequest) GetCatchDateTime() string {
	if x != nil {
		return x.CatchDateTime
	}
	return ""
}

func (x *CreateFishCatchOrProductionDateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateFishCatchOrProductionDateRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateFishCatchOrProductionDateRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateFishCatchOrProductionDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishCatchOrProductionDate *FishCatchOrProductionDate `protobuf:"bytes,1,opt,name=fish_catch_or_production_date,json=fishCatchOrProductionDate,proto3" json:"fish_catch_or_production_date,omitempty"`
}

func (x *CreateFishCatchOrProductionDateResponse) Reset() {
	*x = CreateFishCatchOrProductionDateResponse{}
	mi := &file_meat_v1_fish_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFishCatchOrProductionDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFishCatchOrProductionDateResponse) ProtoMessage() {}

func (x *CreateFishCatchOrProductionDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_fish_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFishCatchOrProductionDateResponse.ProtoReflect.Descriptor instead.
func (*CreateFishCatchOrProductionDateResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_fish_proto_rawDescGZIP(), []int{12}
}

func (x *CreateFishCatchOrProductionDateResponse) GetFishCatchOrProductionDate() *FishCatchOrProductionDate {
	if x != nil {
		return x.FishCatchOrProductionDate
	}
	return nil
}

var File_meat_v1_fish_proto protoreflect.FileDescriptor

var file_meat_v1_fish_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x65, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x03, 0x0a, 0x23, 0x46, 0x69, 0x73, 0x68, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x87,
	0x01, 0x0a, 0x2a, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x73, 0x68, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x52, 0x24, 0x66, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x87, 0x01, 0x0a, 0x2a, 0x66, 0x69, 0x73,
	0x68, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x52, 0x24, 0x66, 0x69,
	0x73, 0x68, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfa,
	0x08, 0x0a, 0x24, 0x46, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a,
	0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x71, 0x75, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x71, 0x75, 0x61, 0x74, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x71, 0x75, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x71, 0x75, 0x61, 0x74, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x73, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x66, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x66, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x66, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x11, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x71, 0x67, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x71, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x71, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x11, 0x71, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x71, 0x75, 0x61,
	0x5f, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x61, 0x71, 0x75, 0x61, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x61,
	0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x66, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x66, 0x4c,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x20, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x66, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x1b, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x66, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x24,
	0x46, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72,
	0x22, 0xf8, 0x09, 0x0a, 0x30, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x71, 0x75, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x71, 0x75, 0x61, 0x74, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x71, 0x75, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x71, 0x75, 0x61, 0x74, 0x69, 0x63, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x73,
	0x68, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x73, 0x68, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x18, 0x66, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x66, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x70, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x73,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x66, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x66, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x71,
	0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x71,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x71, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x71, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x71, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x71, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a,
	0x1c, 0x61, 0x71, 0x75, 0x61, 0x5f, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x71, 0x75, 0x61, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x4c,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x53, 0x6c,
	0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x66, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x45, 0x0a, 0x20, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x66, 0x69, 0x73, 0x68, 0x43,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x69, 0x73,
	0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x31,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x28, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x23, 0x66, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x73, 0x68,
	0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x33, 0x0a, 0x16, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x61, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66,
	0x69, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x6f, 0x72, 0x46,
	0x69, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x66, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xab, 0x02, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68,
	0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x69, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x47, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x2b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x61, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x25, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x61,
	0x66, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x7e, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x66, 0x69, 0x73, 0x68, 0x43, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xef, 0x01, 0x0a, 0x19, 0x46, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a,
	0x1f, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x44, 0x52, 0x1a, 0x66, 0x69, 0x73,
	0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x44, 0x12, 0x68, 0x0a, 0x1f, 0x66, 0x69, 0x73, 0x68, 0x5f,
	0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x43,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x52, 0x1a, 0x66, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x22, 0x2c, 0x0a, 0x1a, 0x46, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xb0, 0x02, 0x0a, 0x1a, 0x46, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x12, 0x40,
	0x0a, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x0f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x1d, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x19, 0x66, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x32, 0xb3, 0x03, 0x0a, 0x0b, 0x46,
	0x69, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x29, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x78, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x65,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68,
	0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e,
	0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x67, 0x73,
	0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_meat_v1_fish_proto_rawDescOnce sync.Once
	file_meat_v1_fish_proto_rawDescData = file_meat_v1_fish_proto_rawDesc
)

func file_meat_v1_fish_proto_rawDescGZIP() []byte {
	file_meat_v1_fish_proto_rawDescOnce.Do(func() {
		file_meat_v1_fish_proto_rawDescData = protoimpl.X.CompressGZIP(file_meat_v1_fish_proto_rawDescData)
	})
	return file_meat_v1_fish_proto_rawDescData
}

var file_meat_v1_fish_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_meat_v1_fish_proto_goTypes = []any{
	(*FishDespatchAdviceLineItemExtension)(nil),               // 0: meat.v1.FishDespatchAdviceLineItemExtension
	(*FishDespatchAdviceLineItemExtensionD)(nil),              // 1: meat.v1.FishDespatchAdviceLineItemExtensionD
	(*FishDespatchAdviceLineItemExtensionT)(nil),              // 2: meat.v1.FishDespatchAdviceLineItemExtensionT
	(*CreateFishDespatchAdviceLineItemExtensionRequest)(nil),  // 3: meat.v1.CreateFishDespatchAdviceLineItemExtensionRequest
	(*CreateFishDespatchAdviceLineItemExtensionResponse)(nil), // 4: meat.v1.CreateFishDespatchAdviceLineItemExtensionResponse
	(*FishCatchOrProduction)(nil),                             // 5: meat.v1.FishCatchOrProduction
	(*CreateFishCatchOrProductionRequest)(nil),                // 6: meat.v1.CreateFishCatchOrProductionRequest
	(*CreateFishCatchOrProductionResponse)(nil),               // 7: meat.v1.CreateFishCatchOrProductionResponse
	(*FishCatchOrProductionDate)(nil),                         // 8: meat.v1.FishCatchOrProductionDate
	(*FishCatchOrProductionDateD)(nil),                        // 9: meat.v1.FishCatchOrProductionDateD
	(*FishCatchOrProductionDateT)(nil),                        // 10: meat.v1.FishCatchOrProductionDateT
	(*CreateFishCatchOrProductionDateRequest)(nil),            // 11: meat.v1.CreateFishCatchOrProductionDateRequest
	(*CreateFishCatchOrProductionDateResponse)(nil),           // 12: meat.v1.CreateFishCatchOrProductionDateResponse
	(*v1.CrUpdUser)(nil),                                      // 13: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                      // 14: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),                             // 15: google.protobuf.Timestamp
}
var file_meat_v1_fish_proto_depIdxs = []int32{
	1,  // 0: meat.v1.FishDespatchAdviceLineItemExtension.fish_despatch_advice_line_item_extension_d:type_name -> meat.v1.FishDespatchAdviceLineItemExtensionD
	2,  // 1: meat.v1.FishDespatchAdviceLineItemExtension.fish_despatch_advice_line_item_extension_t:type_name -> meat.v1.FishDespatchAdviceLineItemExtensionT
	13, // 2: meat.v1.FishDespatchAdviceLineItemExtension.cr_upd_user:type_name -> common.v1.CrUpdUser
	14, // 3: meat.v1.FishDespatchAdviceLineItemExtension.cr_upd_time:type_name -> common.v1.CrUpdTime
	15, // 4: meat.v1.FishDespatchAdviceLineItemExtensionT.date_of_landing:type_name -> google.protobuf.Timestamp
	15, // 5: meat.v1.FishDespatchAdviceLineItemExtensionT.date_of_slaughter:type_name -> google.protobuf.Timestamp
	0,  // 6: meat.v1.CreateFishDespatchAdviceLineItemExtensionResponse.fish_despatch_advice_line_item_extension:type_name -> meat.v1.FishDespatchAdviceLineItemExtension
	5,  // 7: meat.v1.CreateFishCatchOrProductionResponse.fish_catch_or_production:type_name -> meat.v1.FishCatchOrProduction
	9,  // 8: meat.v1.FishCatchOrProductionDate.fish_catch_or_production_date_d:type_name -> meat.v1.FishCatchOrProductionDateD
	10, // 9: meat.v1.FishCatchOrProductionDate.fish_catch_or_production_date_t:type_name -> meat.v1.FishCatchOrProductionDateT
	15, // 10: meat.v1.FishCatchOrProductionDateT.catch_end_date:type_name -> google.protobuf.Timestamp
	15, // 11: meat.v1.FishCatchOrProductionDateT.catch_start_date:type_name -> google.protobuf.Timestamp
	15, // 12: meat.v1.FishCatchOrProductionDateT.first_freeze_date:type_name -> google.protobuf.Timestamp
	15, // 13: meat.v1.FishCatchOrProductionDateT.catch_date_time:type_name -> google.protobuf.Timestamp
	8,  // 14: meat.v1.CreateFishCatchOrProductionDateResponse.fish_catch_or_production_date:type_name -> meat.v1.FishCatchOrProductionDate
	3,  // 15: meat.v1.FishService.CreateFishDespatchAdviceLineItemExtension:input_type -> meat.v1.CreateFishDespatchAdviceLineItemExtensionRequest
	6,  // 16: meat.v1.FishService.CreateFishCatchOrProduction:input_type -> meat.v1.CreateFishCatchOrProductionRequest
	11, // 17: meat.v1.FishService.CreateFishCatchOrProductionDate:input_type -> meat.v1.CreateFishCatchOrProductionDateRequest
	4,  // 18: meat.v1.FishService.CreateFishDespatchAdviceLineItemExtension:output_type -> meat.v1.CreateFishDespatchAdviceLineItemExtensionResponse
	7,  // 19: meat.v1.FishService.CreateFishCatchOrProduction:output_type -> meat.v1.CreateFishCatchOrProductionResponse
	12, // 20: meat.v1.FishService.CreateFishCatchOrProductionDate:output_type -> meat.v1.CreateFishCatchOrProductionDateResponse
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_meat_v1_fish_proto_init() }
func file_meat_v1_fish_proto_init() {
	if File_meat_v1_fish_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meat_v1_fish_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meat_v1_fish_proto_goTypes,
		DependencyIndexes: file_meat_v1_fish_proto_depIdxs,
		MessageInfos:      file_meat_v1_fish_proto_msgTypes,
	}.Build()
	File_meat_v1_fish_proto = out.File
	file_meat_v1_fish_proto_rawDesc = nil
	file_meat_v1_fish_proto_goTypes = nil
	file_meat_v1_fish_proto_depIdxs = nil
}
