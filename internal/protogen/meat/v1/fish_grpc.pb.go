// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meat/v1/fish.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FishService_CreateFishDespatchAdviceLineItemExtension_FullMethodName = "/meat.v1.FishService/CreateFishDespatchAdviceLineItemExtension"
	FishService_CreateFishCatchOrProduction_FullMethodName               = "/meat.v1.FishService/CreateFishCatchOrProduction"
	FishService_CreateFishCatchOrProductionDate_FullMethodName           = "/meat.v1.FishService/CreateFishCatchOrProductionDate"
)

// FishServiceClient is the client API for FishService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The FishService service definition.
type FishServiceClient interface {
	CreateFishDespatchAdviceLineItemExtension(ctx context.Context, in *CreateFishDespatchAdviceLineItemExtensionRequest, opts ...grpc.CallOption) (*CreateFishDespatchAdviceLineItemExtensionResponse, error)
	CreateFishCatchOrProduction(ctx context.Context, in *CreateFishCatchOrProductionRequest, opts ...grpc.CallOption) (*CreateFishCatchOrProductionResponse, error)
	CreateFishCatchOrProductionDate(ctx context.Context, in *CreateFishCatchOrProductionDateRequest, opts ...grpc.CallOption) (*CreateFishCatchOrProductionDateResponse, error)
}

type fishServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFishServiceClient(cc grpc.ClientConnInterface) FishServiceClient {
	return &fishServiceClient{cc}
}

func (c *fishServiceClient) CreateFishDespatchAdviceLineItemExtension(ctx context.Context, in *CreateFishDespatchAdviceLineItemExtensionRequest, opts ...grpc.CallOption) (*CreateFishDespatchAdviceLineItemExtensionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFishDespatchAdviceLineItemExtensionResponse)
	err := c.cc.Invoke(ctx, FishService_CreateFishDespatchAdviceLineItemExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishServiceClient) CreateFishCatchOrProduction(ctx context.Context, in *CreateFishCatchOrProductionRequest, opts ...grpc.CallOption) (*CreateFishCatchOrProductionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFishCatchOrProductionResponse)
	err := c.cc.Invoke(ctx, FishService_CreateFishCatchOrProduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishServiceClient) CreateFishCatchOrProductionDate(ctx context.Context, in *CreateFishCatchOrProductionDateRequest, opts ...grpc.CallOption) (*CreateFishCatchOrProductionDateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFishCatchOrProductionDateResponse)
	err := c.cc.Invoke(ctx, FishService_CreateFishCatchOrProductionDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FishServiceServer is the server API for FishService service.
// All implementations must embed UnimplementedFishServiceServer
// for forward compatibility.
//
// The FishService service definition.
type FishServiceServer interface {
	CreateFishDespatchAdviceLineItemExtension(context.Context, *CreateFishDespatchAdviceLineItemExtensionRequest) (*CreateFishDespatchAdviceLineItemExtensionResponse, error)
	CreateFishCatchOrProduction(context.Context, *CreateFishCatchOrProductionRequest) (*CreateFishCatchOrProductionResponse, error)
	CreateFishCatchOrProductionDate(context.Context, *CreateFishCatchOrProductionDateRequest) (*CreateFishCatchOrProductionDateResponse, error)
	mustEmbedUnimplementedFishServiceServer()
}

// UnimplementedFishServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFishServiceServer struct{}

func (UnimplementedFishServiceServer) CreateFishDespatchAdviceLineItemExtension(context.Context, *CreateFishDespatchAdviceLineItemExtensionRequest) (*CreateFishDespatchAdviceLineItemExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFishDespatchAdviceLineItemExtension not implemented")
}
func (UnimplementedFishServiceServer) CreateFishCatchOrProduction(context.Context, *CreateFishCatchOrProductionRequest) (*CreateFishCatchOrProductionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFishCatchOrProduction not implemented")
}
func (UnimplementedFishServiceServer) CreateFishCatchOrProductionDate(context.Context, *CreateFishCatchOrProductionDateRequest) (*CreateFishCatchOrProductionDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFishCatchOrProductionDate not implemented")
}
func (UnimplementedFishServiceServer) mustEmbedUnimplementedFishServiceServer() {}
func (UnimplementedFishServiceServer) testEmbeddedByValue()                     {}

// UnsafeFishServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FishServiceServer will
// result in compilation errors.
type UnsafeFishServiceServer interface {
	mustEmbedUnimplementedFishServiceServer()
}

func RegisterFishServiceServer(s grpc.ServiceRegistrar, srv FishServiceServer) {
	// If the following call pancis, it indicates UnimplementedFishServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FishService_ServiceDesc, srv)
}

func _FishService_CreateFishDespatchAdviceLineItemExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFishDespatchAdviceLineItemExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServiceServer).CreateFishDespatchAdviceLineItemExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishService_CreateFishDespatchAdviceLineItemExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServiceServer).CreateFishDespatchAdviceLineItemExtension(ctx, req.(*CreateFishDespatchAdviceLineItemExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishService_CreateFishCatchOrProduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFishCatchOrProductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServiceServer).CreateFishCatchOrProduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishService_CreateFishCatchOrProduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServiceServer).CreateFishCatchOrProduction(ctx, req.(*CreateFishCatchOrProductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishService_CreateFishCatchOrProductionDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFishCatchOrProductionDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServiceServer).CreateFishCatchOrProductionDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishService_CreateFishCatchOrProductionDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServiceServer).CreateFishCatchOrProductionDate(ctx, req.(*CreateFishCatchOrProductionDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FishService_ServiceDesc is the grpc.ServiceDesc for FishService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FishService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meat.v1.FishService",
	HandlerType: (*FishServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFishDespatchAdviceLineItemExtension",
			Handler:    _FishService_CreateFishDespatchAdviceLineItemExtension_Handler,
		},
		{
			MethodName: "CreateFishCatchOrProduction",
			Handler:    _FishService_CreateFishCatchOrProduction_Handler,
		},
		{
			MethodName: "CreateFishCatchOrProductionDate",
			Handler:    _FishService_CreateFishCatchOrProductionDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meat/v1/fish.proto",
}
