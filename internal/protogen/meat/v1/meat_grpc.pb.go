// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meat/v1/meat.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeatService_CreateMeatAcidity_FullMethodName                         = "/meat.v1.MeatService/CreateMeatAcidity"
	MeatService_CreateMeatActivityHistory_FullMethodName                 = "/meat.v1.MeatService/CreateMeatActivityHistory"
	MeatService_CreateMeatBreedingDetail_FullMethodName                  = "/meat.v1.MeatService/CreateMeatBreedingDetail"
	MeatService_CreateMeatCuttingDetail_FullMethodName                   = "/meat.v1.MeatService/CreateMeatCuttingDetail"
	MeatService_CreateMeatDespatchAdviceLineItemExtension_FullMethodName = "/meat.v1.MeatService/CreateMeatDespatchAdviceLineItemExtension"
	MeatService_CreateMeatFatteningDetail_FullMethodName                 = "/meat.v1.MeatService/CreateMeatFatteningDetail"
	MeatService_CreateMeatMincingDetail_FullMethodName                   = "/meat.v1.MeatService/CreateMeatMincingDetail"
	MeatService_CreateMeatProcessingParty_FullMethodName                 = "/meat.v1.MeatService/CreateMeatProcessingParty"
	MeatService_CreateMeatSlaughteringDetail_FullMethodName              = "/meat.v1.MeatService/CreateMeatSlaughteringDetail"
	MeatService_CreateMeatTest_FullMethodName                            = "/meat.v1.MeatService/CreateMeatTest"
	MeatService_CreateMeatWorkItemIdentification_FullMethodName          = "/meat.v1.MeatService/CreateMeatWorkItemIdentification"
)

// MeatServiceClient is the client API for MeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The MeatService service definition.
type MeatServiceClient interface {
	CreateMeatAcidity(ctx context.Context, in *CreateMeatAcidityRequest, opts ...grpc.CallOption) (*CreateMeatAcidityResponse, error)
	CreateMeatActivityHistory(ctx context.Context, in *CreateMeatActivityHistoryRequest, opts ...grpc.CallOption) (*CreateMeatActivityHistoryResponse, error)
	CreateMeatBreedingDetail(ctx context.Context, in *CreateMeatBreedingDetailRequest, opts ...grpc.CallOption) (*CreateMeatBreedingDetailResponse, error)
	CreateMeatCuttingDetail(ctx context.Context, in *CreateMeatCuttingDetailRequest, opts ...grpc.CallOption) (*CreateMeatCuttingDetailResponse, error)
	CreateMeatDespatchAdviceLineItemExtension(ctx context.Context, in *CreateMeatDespatchAdviceLineItemExtensionRequest, opts ...grpc.CallOption) (*CreateMeatDespatchAdviceLineItemExtensionResponse, error)
	CreateMeatFatteningDetail(ctx context.Context, in *CreateMeatFatteningDetailRequest, opts ...grpc.CallOption) (*CreateMeatFatteningDetailResponse, error)
	CreateMeatMincingDetail(ctx context.Context, in *CreateMeatMincingDetailRequest, opts ...grpc.CallOption) (*CreateMeatMincingDetailResponse, error)
	CreateMeatProcessingParty(ctx context.Context, in *CreateMeatProcessingPartyRequest, opts ...grpc.CallOption) (*CreateMeatProcessingPartyResponse, error)
	CreateMeatSlaughteringDetail(ctx context.Context, in *CreateMeatSlaughteringDetailRequest, opts ...grpc.CallOption) (*CreateMeatSlaughteringDetailResponse, error)
	CreateMeatTest(ctx context.Context, in *CreateMeatTestRequest, opts ...grpc.CallOption) (*CreateMeatTestResponse, error)
	CreateMeatWorkItemIdentification(ctx context.Context, in *CreateMeatWorkItemIdentificationRequest, opts ...grpc.CallOption) (*CreateMeatWorkItemIdentificationResponse, error)
}

type meatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeatServiceClient(cc grpc.ClientConnInterface) MeatServiceClient {
	return &meatServiceClient{cc}
}

func (c *meatServiceClient) CreateMeatAcidity(ctx context.Context, in *CreateMeatAcidityRequest, opts ...grpc.CallOption) (*CreateMeatAcidityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatAcidityResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatAcidity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meatServiceClient) CreateMeatActivityHistory(ctx context.Context, in *CreateMeatActivityHistoryRequest, opts ...grpc.CallOption) (*CreateMeatActivityHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatActivityHistoryResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatActivityHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meatServiceClient) CreateMeatBreedingDetail(ctx context.Context, in *CreateMeatBreedingDetailRequest, opts ...grpc.CallOption) (*CreateMeatBreedingDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatBreedingDetailResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatBreedingDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meatServiceClient) CreateMeatCuttingDetail(ctx context.Context, in *CreateMeatCuttingDetailRequest, opts ...grpc.CallOption) (*CreateMeatCuttingDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatCuttingDetailResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatCuttingDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meatServiceClient) CreateMeatDespatchAdviceLineItemExtension(ctx context.Context, in *CreateMeatDespatchAdviceLineItemExtensionRequest, opts ...grpc.CallOption) (*CreateMeatDespatchAdviceLineItemExtensionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatDespatchAdviceLineItemExtensionResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatDespatchAdviceLineItemExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meatServiceClient) CreateMeatFatteningDetail(ctx context.Context, in *CreateMeatFatteningDetailRequest, opts ...grpc.CallOption) (*CreateMeatFatteningDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatFatteningDetailResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatFatteningDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meatServiceClient) CreateMeatMincingDetail(ctx context.Context, in *CreateMeatMincingDetailRequest, opts ...grpc.CallOption) (*CreateMeatMincingDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatMincingDetailResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatMincingDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meatServiceClient) CreateMeatProcessingParty(ctx context.Context, in *CreateMeatProcessingPartyRequest, opts ...grpc.CallOption) (*CreateMeatProcessingPartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatProcessingPartyResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatProcessingParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meatServiceClient) CreateMeatSlaughteringDetail(ctx context.Context, in *CreateMeatSlaughteringDetailRequest, opts ...grpc.CallOption) (*CreateMeatSlaughteringDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatSlaughteringDetailResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatSlaughteringDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meatServiceClient) CreateMeatTest(ctx context.Context, in *CreateMeatTestRequest, opts ...grpc.CallOption) (*CreateMeatTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatTestResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meatServiceClient) CreateMeatWorkItemIdentification(ctx context.Context, in *CreateMeatWorkItemIdentificationRequest, opts ...grpc.CallOption) (*CreateMeatWorkItemIdentificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeatWorkItemIdentificationResponse)
	err := c.cc.Invoke(ctx, MeatService_CreateMeatWorkItemIdentification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeatServiceServer is the server API for MeatService service.
// All implementations must embed UnimplementedMeatServiceServer
// for forward compatibility.
//
// The MeatService service definition.
type MeatServiceServer interface {
	CreateMeatAcidity(context.Context, *CreateMeatAcidityRequest) (*CreateMeatAcidityResponse, error)
	CreateMeatActivityHistory(context.Context, *CreateMeatActivityHistoryRequest) (*CreateMeatActivityHistoryResponse, error)
	CreateMeatBreedingDetail(context.Context, *CreateMeatBreedingDetailRequest) (*CreateMeatBreedingDetailResponse, error)
	CreateMeatCuttingDetail(context.Context, *CreateMeatCuttingDetailRequest) (*CreateMeatCuttingDetailResponse, error)
	CreateMeatDespatchAdviceLineItemExtension(context.Context, *CreateMeatDespatchAdviceLineItemExtensionRequest) (*CreateMeatDespatchAdviceLineItemExtensionResponse, error)
	CreateMeatFatteningDetail(context.Context, *CreateMeatFatteningDetailRequest) (*CreateMeatFatteningDetailResponse, error)
	CreateMeatMincingDetail(context.Context, *CreateMeatMincingDetailRequest) (*CreateMeatMincingDetailResponse, error)
	CreateMeatProcessingParty(context.Context, *CreateMeatProcessingPartyRequest) (*CreateMeatProcessingPartyResponse, error)
	CreateMeatSlaughteringDetail(context.Context, *CreateMeatSlaughteringDetailRequest) (*CreateMeatSlaughteringDetailResponse, error)
	CreateMeatTest(context.Context, *CreateMeatTestRequest) (*CreateMeatTestResponse, error)
	CreateMeatWorkItemIdentification(context.Context, *CreateMeatWorkItemIdentificationRequest) (*CreateMeatWorkItemIdentificationResponse, error)
	mustEmbedUnimplementedMeatServiceServer()
}

// UnimplementedMeatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeatServiceServer struct{}

func (UnimplementedMeatServiceServer) CreateMeatAcidity(context.Context, *CreateMeatAcidityRequest) (*CreateMeatAcidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatAcidity not implemented")
}
func (UnimplementedMeatServiceServer) CreateMeatActivityHistory(context.Context, *CreateMeatActivityHistoryRequest) (*CreateMeatActivityHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatActivityHistory not implemented")
}
func (UnimplementedMeatServiceServer) CreateMeatBreedingDetail(context.Context, *CreateMeatBreedingDetailRequest) (*CreateMeatBreedingDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatBreedingDetail not implemented")
}
func (UnimplementedMeatServiceServer) CreateMeatCuttingDetail(context.Context, *CreateMeatCuttingDetailRequest) (*CreateMeatCuttingDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatCuttingDetail not implemented")
}
func (UnimplementedMeatServiceServer) CreateMeatDespatchAdviceLineItemExtension(context.Context, *CreateMeatDespatchAdviceLineItemExtensionRequest) (*CreateMeatDespatchAdviceLineItemExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatDespatchAdviceLineItemExtension not implemented")
}
func (UnimplementedMeatServiceServer) CreateMeatFatteningDetail(context.Context, *CreateMeatFatteningDetailRequest) (*CreateMeatFatteningDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatFatteningDetail not implemented")
}
func (UnimplementedMeatServiceServer) CreateMeatMincingDetail(context.Context, *CreateMeatMincingDetailRequest) (*CreateMeatMincingDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatMincingDetail not implemented")
}
func (UnimplementedMeatServiceServer) CreateMeatProcessingParty(context.Context, *CreateMeatProcessingPartyRequest) (*CreateMeatProcessingPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatProcessingParty not implemented")
}
func (UnimplementedMeatServiceServer) CreateMeatSlaughteringDetail(context.Context, *CreateMeatSlaughteringDetailRequest) (*CreateMeatSlaughteringDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatSlaughteringDetail not implemented")
}
func (UnimplementedMeatServiceServer) CreateMeatTest(context.Context, *CreateMeatTestRequest) (*CreateMeatTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatTest not implemented")
}
func (UnimplementedMeatServiceServer) CreateMeatWorkItemIdentification(context.Context, *CreateMeatWorkItemIdentificationRequest) (*CreateMeatWorkItemIdentificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeatWorkItemIdentification not implemented")
}
func (UnimplementedMeatServiceServer) mustEmbedUnimplementedMeatServiceServer() {}
func (UnimplementedMeatServiceServer) testEmbeddedByValue()                     {}

// UnsafeMeatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeatServiceServer will
// result in compilation errors.
type UnsafeMeatServiceServer interface {
	mustEmbedUnimplementedMeatServiceServer()
}

func RegisterMeatServiceServer(s grpc.ServiceRegistrar, srv MeatServiceServer) {
	// If the following call pancis, it indicates UnimplementedMeatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeatService_ServiceDesc, srv)
}

func _MeatService_CreateMeatAcidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatAcidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatAcidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatAcidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatAcidity(ctx, req.(*CreateMeatAcidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeatService_CreateMeatActivityHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatActivityHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatActivityHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatActivityHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatActivityHistory(ctx, req.(*CreateMeatActivityHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeatService_CreateMeatBreedingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatBreedingDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatBreedingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatBreedingDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatBreedingDetail(ctx, req.(*CreateMeatBreedingDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeatService_CreateMeatCuttingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatCuttingDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatCuttingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatCuttingDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatCuttingDetail(ctx, req.(*CreateMeatCuttingDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeatService_CreateMeatDespatchAdviceLineItemExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatDespatchAdviceLineItemExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatDespatchAdviceLineItemExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatDespatchAdviceLineItemExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatDespatchAdviceLineItemExtension(ctx, req.(*CreateMeatDespatchAdviceLineItemExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeatService_CreateMeatFatteningDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatFatteningDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatFatteningDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatFatteningDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatFatteningDetail(ctx, req.(*CreateMeatFatteningDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeatService_CreateMeatMincingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatMincingDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatMincingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatMincingDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatMincingDetail(ctx, req.(*CreateMeatMincingDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeatService_CreateMeatProcessingParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatProcessingPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatProcessingParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatProcessingParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatProcessingParty(ctx, req.(*CreateMeatProcessingPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeatService_CreateMeatSlaughteringDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatSlaughteringDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatSlaughteringDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatSlaughteringDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatSlaughteringDetail(ctx, req.(*CreateMeatSlaughteringDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeatService_CreateMeatTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatTest(ctx, req.(*CreateMeatTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeatService_CreateMeatWorkItemIdentification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeatWorkItemIdentificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).CreateMeatWorkItemIdentification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_CreateMeatWorkItemIdentification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).CreateMeatWorkItemIdentification(ctx, req.(*CreateMeatWorkItemIdentificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeatService_ServiceDesc is the grpc.ServiceDesc for MeatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meat.v1.MeatService",
	HandlerType: (*MeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeatAcidity",
			Handler:    _MeatService_CreateMeatAcidity_Handler,
		},
		{
			MethodName: "CreateMeatActivityHistory",
			Handler:    _MeatService_CreateMeatActivityHistory_Handler,
		},
		{
			MethodName: "CreateMeatBreedingDetail",
			Handler:    _MeatService_CreateMeatBreedingDetail_Handler,
		},
		{
			MethodName: "CreateMeatCuttingDetail",
			Handler:    _MeatService_CreateMeatCuttingDetail_Handler,
		},
		{
			MethodName: "CreateMeatDespatchAdviceLineItemExtension",
			Handler:    _MeatService_CreateMeatDespatchAdviceLineItemExtension_Handler,
		},
		{
			MethodName: "CreateMeatFatteningDetail",
			Handler:    _MeatService_CreateMeatFatteningDetail_Handler,
		},
		{
			MethodName: "CreateMeatMincingDetail",
			Handler:    _MeatService_CreateMeatMincingDetail_Handler,
		},
		{
			MethodName: "CreateMeatProcessingParty",
			Handler:    _MeatService_CreateMeatProcessingParty_Handler,
		},
		{
			MethodName: "CreateMeatSlaughteringDetail",
			Handler:    _MeatService_CreateMeatSlaughteringDetail_Handler,
		},
		{
			MethodName: "CreateMeatTest",
			Handler:    _MeatService_CreateMeatTest_Handler,
		},
		{
			MethodName: "CreateMeatWorkItemIdentification",
			Handler:    _MeatService_CreateMeatWorkItemIdentification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meat/v1/meat.proto",
}
