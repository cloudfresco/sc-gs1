// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: meat/v1/meat.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-gs1/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeatAcidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                    []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                      string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	AcidityMeasurementTime   uint32  `protobuf:"varint,4,opt,name=acidity_measurement_time,json=acidityMeasurementTime,proto3" json:"acidity_measurement_time,omitempty"`
	AcidityOfMeat            float64 `protobuf:"fixed64,5,opt,name=acidity_of_meat,json=acidityOfMeat,proto3" json:"acidity_of_meat,omitempty"`
	MeatSlaughteringDetailId uint32  `protobuf:"varint,6,opt,name=meat_slaughtering_detail_id,json=meatSlaughteringDetailId,proto3" json:"meat_slaughtering_detail_id,omitempty"`
}

func (x *MeatAcidity) Reset() {
	*x = MeatAcidity{}
	mi := &file_meat_v1_meat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatAcidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatAcidity) ProtoMessage() {}

func (x *MeatAcidity) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatAcidity.ProtoReflect.Descriptor instead.
func (*MeatAcidity) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{0}
}

func (x *MeatAcidity) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatAcidity) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatAcidity) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatAcidity) GetAcidityMeasurementTime() uint32 {
	if x != nil {
		return x.AcidityMeasurementTime
	}
	return 0
}

func (x *MeatAcidity) GetAcidityOfMeat() float64 {
	if x != nil {
		return x.AcidityOfMeat
	}
	return 0
}

func (x *MeatAcidity) GetMeatSlaughteringDetailId() uint32 {
	if x != nil {
		return x.MeatSlaughteringDetailId
	}
	return 0
}

type CreateMeatAcidityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcidityMeasurementTime   uint32  `protobuf:"varint,1,opt,name=acidity_measurement_time,json=acidityMeasurementTime,proto3" json:"acidity_measurement_time,omitempty"`
	AcidityOfMeat            float64 `protobuf:"fixed64,2,opt,name=acidity_of_meat,json=acidityOfMeat,proto3" json:"acidity_of_meat,omitempty"`
	MeatSlaughteringDetailId uint32  `protobuf:"varint,3,opt,name=meat_slaughtering_detail_id,json=meatSlaughteringDetailId,proto3" json:"meat_slaughtering_detail_id,omitempty"`
	UserId                   string  `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                string  `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                string  `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatAcidityRequest) Reset() {
	*x = CreateMeatAcidityRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatAcidityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatAcidityRequest) ProtoMessage() {}

func (x *CreateMeatAcidityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatAcidityRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatAcidityRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMeatAcidityRequest) GetAcidityMeasurementTime() uint32 {
	if x != nil {
		return x.AcidityMeasurementTime
	}
	return 0
}

func (x *CreateMeatAcidityRequest) GetAcidityOfMeat() float64 {
	if x != nil {
		return x.AcidityOfMeat
	}
	return 0
}

func (x *CreateMeatAcidityRequest) GetMeatSlaughteringDetailId() uint32 {
	if x != nil {
		return x.MeatSlaughteringDetailId
	}
	return 0
}

func (x *CreateMeatAcidityRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatAcidityRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatAcidityRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatAcidityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatAcidity *MeatAcidity `protobuf:"bytes,1,opt,name=meat_acidity,json=meatAcidity,proto3" json:"meat_acidity,omitempty"`
}

func (x *CreateMeatAcidityResponse) Reset() {
	*x = CreateMeatAcidityResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatAcidityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatAcidityResponse) ProtoMessage() {}

func (x *CreateMeatAcidityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatAcidityResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatAcidityResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{2}
}

func (x *CreateMeatAcidityResponse) GetMeatAcidity() *MeatAcidity {
	if x != nil {
		return x.MeatAcidity
	}
	return nil
}

type MeatActivityHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatActivityHistoryD *MeatActivityHistoryD `protobuf:"bytes,1,opt,name=meat_activity_history_d,json=meatActivityHistoryD,proto3" json:"meat_activity_history_d,omitempty"`
	MeatActivityHistoryT *MeatActivityHistoryT `protobuf:"bytes,2,opt,name=meat_activity_history_t,json=meatActivityHistoryT,proto3" json:"meat_activity_history_t,omitempty"`
	CrUpdUser            *v1.CrUpdUser         `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime            *v1.CrUpdTime         `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *MeatActivityHistory) Reset() {
	*x = MeatActivityHistory{}
	mi := &file_meat_v1_meat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatActivityHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatActivityHistory) ProtoMessage() {}

func (x *MeatActivityHistory) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatActivityHistory.ProtoReflect.Descriptor instead.
func (*MeatActivityHistory) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{3}
}

func (x *MeatActivityHistory) GetMeatActivityHistoryD() *MeatActivityHistoryD {
	if x != nil {
		return x.MeatActivityHistoryD
	}
	return nil
}

func (x *MeatActivityHistory) GetMeatActivityHistoryT() *MeatActivityHistoryT {
	if x != nil {
		return x.MeatActivityHistoryT
	}
	return nil
}

func (x *MeatActivityHistory) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *MeatActivityHistory) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type MeatActivityHistoryD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                                 []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                   string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ActivitySubStepIdentification         uint32 `protobuf:"varint,4,opt,name=activity_sub_step_identification,json=activitySubStepIdentification,proto3" json:"activity_sub_step_identification,omitempty"`
	CountryOfActivityCode                 string `protobuf:"bytes,5,opt,name=country_of_activity_code,json=countryOfActivityCode,proto3" json:"country_of_activity_code,omitempty"`
	CurrentStepIdentification             uint32 `protobuf:"varint,6,opt,name=current_step_identification,json=currentStepIdentification,proto3" json:"current_step_identification,omitempty"`
	MeatProcessingActivityTypeCode        string `protobuf:"bytes,7,opt,name=meat_processing_activity_type_code,json=meatProcessingActivityTypeCode,proto3" json:"meat_processing_activity_type_code,omitempty"`
	MovementReasonCode                    string `protobuf:"bytes,8,opt,name=movement_reason_code,json=movementReasonCode,proto3" json:"movement_reason_code,omitempty"`
	NextStepIdentification                uint32 `protobuf:"varint,9,opt,name=next_step_identification,json=nextStepIdentification,proto3" json:"next_step_identification,omitempty"`
	MeatMincingDetailId                   uint32 `protobuf:"varint,10,opt,name=meat_mincing_detail_id,json=meatMincingDetailId,proto3" json:"meat_mincing_detail_id,omitempty"`
	MeatFatteningDetailId                 uint32 `protobuf:"varint,11,opt,name=meat_fattening_detail_id,json=meatFatteningDetailId,proto3" json:"meat_fattening_detail_id,omitempty"`
	MeatCuttingDetailId                   uint32 `protobuf:"varint,12,opt,name=meat_cutting_detail_id,json=meatCuttingDetailId,proto3" json:"meat_cutting_detail_id,omitempty"`
	MeatBreedingDetailId                  uint32 `protobuf:"varint,13,opt,name=meat_breeding_detail_id,json=meatBreedingDetailId,proto3" json:"meat_breeding_detail_id,omitempty"`
	MeatProcessingPartyId                 uint32 `protobuf:"varint,14,opt,name=meat_processing_party_id,json=meatProcessingPartyId,proto3" json:"meat_processing_party_id,omitempty"`
	MeatWorkItemIdentificationId          uint32 `protobuf:"varint,15,opt,name=meat_work_item_identification_id,json=meatWorkItemIdentificationId,proto3" json:"meat_work_item_identification_id,omitempty"`
	MeatSlaughteringDetailId              uint32 `protobuf:"varint,16,opt,name=meat_slaughtering_detail_id,json=meatSlaughteringDetailId,proto3" json:"meat_slaughtering_detail_id,omitempty"`
	MeatDespatchAdviceLineItemExtensionId uint32 `protobuf:"varint,17,opt,name=meat_despatch_advice_line_item_extension_id,json=meatDespatchAdviceLineItemExtensionId,proto3" json:"meat_despatch_advice_line_item_extension_id,omitempty"`
}

func (x *MeatActivityHistoryD) Reset() {
	*x = MeatActivityHistoryD{}
	mi := &file_meat_v1_meat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatActivityHistoryD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatActivityHistoryD) ProtoMessage() {}

func (x *MeatActivityHistoryD) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatActivityHistoryD.ProtoReflect.Descriptor instead.
func (*MeatActivityHistoryD) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{4}
}

func (x *MeatActivityHistoryD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatActivityHistoryD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatActivityHistoryD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatActivityHistoryD) GetActivitySubStepIdentification() uint32 {
	if x != nil {
		return x.ActivitySubStepIdentification
	}
	return 0
}

func (x *MeatActivityHistoryD) GetCountryOfActivityCode() string {
	if x != nil {
		return x.CountryOfActivityCode
	}
	return ""
}

func (x *MeatActivityHistoryD) GetCurrentStepIdentification() uint32 {
	if x != nil {
		return x.CurrentStepIdentification
	}
	return 0
}

func (x *MeatActivityHistoryD) GetMeatProcessingActivityTypeCode() string {
	if x != nil {
		return x.MeatProcessingActivityTypeCode
	}
	return ""
}

func (x *MeatActivityHistoryD) GetMovementReasonCode() string {
	if x != nil {
		return x.MovementReasonCode
	}
	return ""
}

func (x *MeatActivityHistoryD) GetNextStepIdentification() uint32 {
	if x != nil {
		return x.NextStepIdentification
	}
	return 0
}

func (x *MeatActivityHistoryD) GetMeatMincingDetailId() uint32 {
	if x != nil {
		return x.MeatMincingDetailId
	}
	return 0
}

func (x *MeatActivityHistoryD) GetMeatFatteningDetailId() uint32 {
	if x != nil {
		return x.MeatFatteningDetailId
	}
	return 0
}

func (x *MeatActivityHistoryD) GetMeatCuttingDetailId() uint32 {
	if x != nil {
		return x.MeatCuttingDetailId
	}
	return 0
}

func (x *MeatActivityHistoryD) GetMeatBreedingDetailId() uint32 {
	if x != nil {
		return x.MeatBreedingDetailId
	}
	return 0
}

func (x *MeatActivityHistoryD) GetMeatProcessingPartyId() uint32 {
	if x != nil {
		return x.MeatProcessingPartyId
	}
	return 0
}

func (x *MeatActivityHistoryD) GetMeatWorkItemIdentificationId() uint32 {
	if x != nil {
		return x.MeatWorkItemIdentificationId
	}
	return 0
}

func (x *MeatActivityHistoryD) GetMeatSlaughteringDetailId() uint32 {
	if x != nil {
		return x.MeatSlaughteringDetailId
	}
	return 0
}

func (x *MeatActivityHistoryD) GetMeatDespatchAdviceLineItemExtensionId() uint32 {
	if x != nil {
		return x.MeatDespatchAdviceLineItemExtensionId
	}
	return 0
}

type MeatActivityHistoryT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateOfArrival   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date_of_arrival,json=dateOfArrival,proto3" json:"date_of_arrival,omitempty"`
	DateOfDeparture *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date_of_departure,json=dateOfDeparture,proto3" json:"date_of_departure,omitempty"`
}

func (x *MeatActivityHistoryT) Reset() {
	*x = MeatActivityHistoryT{}
	mi := &file_meat_v1_meat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatActivityHistoryT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatActivityHistoryT) ProtoMessage() {}

func (x *MeatActivityHistoryT) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatActivityHistoryT.ProtoReflect.Descriptor instead.
func (*MeatActivityHistoryT) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{5}
}

func (x *MeatActivityHistoryT) GetDateOfArrival() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfArrival
	}
	return nil
}

func (x *MeatActivityHistoryT) GetDateOfDeparture() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfDeparture
	}
	return nil
}

type CreateMeatActivityHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivitySubStepIdentification         uint32 `protobuf:"varint,1,opt,name=activity_sub_step_identification,json=activitySubStepIdentification,proto3" json:"activity_sub_step_identification,omitempty"`
	CountryOfActivityCode                 string `protobuf:"bytes,2,opt,name=country_of_activity_code,json=countryOfActivityCode,proto3" json:"country_of_activity_code,omitempty"`
	CurrentStepIdentification             uint32 `protobuf:"varint,3,opt,name=current_step_identification,json=currentStepIdentification,proto3" json:"current_step_identification,omitempty"`
	DateOfArrival                         string `protobuf:"bytes,4,opt,name=date_of_arrival,json=dateOfArrival,proto3" json:"date_of_arrival,omitempty"`
	DateOfDeparture                       string `protobuf:"bytes,5,opt,name=date_of_departure,json=dateOfDeparture,proto3" json:"date_of_departure,omitempty"`
	MeatProcessingActivityTypeCode        string `protobuf:"bytes,6,opt,name=meat_processing_activity_type_code,json=meatProcessingActivityTypeCode,proto3" json:"meat_processing_activity_type_code,omitempty"`
	MovementReasonCode                    string `protobuf:"bytes,7,opt,name=movement_reason_code,json=movementReasonCode,proto3" json:"movement_reason_code,omitempty"`
	NextStepIdentification                uint32 `protobuf:"varint,8,opt,name=next_step_identification,json=nextStepIdentification,proto3" json:"next_step_identification,omitempty"`
	MeatMincingDetailId                   uint32 `protobuf:"varint,9,opt,name=meat_mincing_detail_id,json=meatMincingDetailId,proto3" json:"meat_mincing_detail_id,omitempty"`
	MeatFatteningDetailId                 uint32 `protobuf:"varint,10,opt,name=meat_fattening_detail_id,json=meatFatteningDetailId,proto3" json:"meat_fattening_detail_id,omitempty"`
	MeatCuttingDetailId                   uint32 `protobuf:"varint,11,opt,name=meat_cutting_detail_id,json=meatCuttingDetailId,proto3" json:"meat_cutting_detail_id,omitempty"`
	MeatBreedingDetailId                  uint32 `protobuf:"varint,12,opt,name=meat_breeding_detail_id,json=meatBreedingDetailId,proto3" json:"meat_breeding_detail_id,omitempty"`
	MeatProcessingPartyId                 uint32 `protobuf:"varint,13,opt,name=meat_processing_party_id,json=meatProcessingPartyId,proto3" json:"meat_processing_party_id,omitempty"`
	MeatWorkItemIdentificationId          uint32 `protobuf:"varint,14,opt,name=meat_work_item_identification_id,json=meatWorkItemIdentificationId,proto3" json:"meat_work_item_identification_id,omitempty"`
	MeatSlaughteringDetailId              uint32 `protobuf:"varint,15,opt,name=meat_slaughtering_detail_id,json=meatSlaughteringDetailId,proto3" json:"meat_slaughtering_detail_id,omitempty"`
	MeatDespatchAdviceLineItemExtensionId uint32 `protobuf:"varint,16,opt,name=meat_despatch_advice_line_item_extension_id,json=meatDespatchAdviceLineItemExtensionId,proto3" json:"meat_despatch_advice_line_item_extension_id,omitempty"`
	UserId                                string `protobuf:"bytes,17,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                             string `protobuf:"bytes,18,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                             string `protobuf:"bytes,19,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatActivityHistoryRequest) Reset() {
	*x = CreateMeatActivityHistoryRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatActivityHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatActivityHistoryRequest) ProtoMessage() {}

func (x *CreateMeatActivityHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatActivityHistoryRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatActivityHistoryRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{6}
}

func (x *CreateMeatActivityHistoryRequest) GetActivitySubStepIdentification() uint32 {
	if x != nil {
		return x.ActivitySubStepIdentification
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetCountryOfActivityCode() string {
	if x != nil {
		return x.CountryOfActivityCode
	}
	return ""
}

func (x *CreateMeatActivityHistoryRequest) GetCurrentStepIdentification() uint32 {
	if x != nil {
		return x.CurrentStepIdentification
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetDateOfArrival() string {
	if x != nil {
		return x.DateOfArrival
	}
	return ""
}

func (x *CreateMeatActivityHistoryRequest) GetDateOfDeparture() string {
	if x != nil {
		return x.DateOfDeparture
	}
	return ""
}

func (x *CreateMeatActivityHistoryRequest) GetMeatProcessingActivityTypeCode() string {
	if x != nil {
		return x.MeatProcessingActivityTypeCode
	}
	return ""
}

func (x *CreateMeatActivityHistoryRequest) GetMovementReasonCode() string {
	if x != nil {
		return x.MovementReasonCode
	}
	return ""
}

func (x *CreateMeatActivityHistoryRequest) GetNextStepIdentification() uint32 {
	if x != nil {
		return x.NextStepIdentification
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetMeatMincingDetailId() uint32 {
	if x != nil {
		return x.MeatMincingDetailId
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetMeatFatteningDetailId() uint32 {
	if x != nil {
		return x.MeatFatteningDetailId
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetMeatCuttingDetailId() uint32 {
	if x != nil {
		return x.MeatCuttingDetailId
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetMeatBreedingDetailId() uint32 {
	if x != nil {
		return x.MeatBreedingDetailId
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetMeatProcessingPartyId() uint32 {
	if x != nil {
		return x.MeatProcessingPartyId
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetMeatWorkItemIdentificationId() uint32 {
	if x != nil {
		return x.MeatWorkItemIdentificationId
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetMeatSlaughteringDetailId() uint32 {
	if x != nil {
		return x.MeatSlaughteringDetailId
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetMeatDespatchAdviceLineItemExtensionId() uint32 {
	if x != nil {
		return x.MeatDespatchAdviceLineItemExtensionId
	}
	return 0
}

func (x *CreateMeatActivityHistoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatActivityHistoryRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatActivityHistoryRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatActivityHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatActivityHistory *MeatActivityHistory `protobuf:"bytes,1,opt,name=meat_activity_history,json=meatActivityHistory,proto3" json:"meat_activity_history,omitempty"`
}

func (x *CreateMeatActivityHistoryResponse) Reset() {
	*x = CreateMeatActivityHistoryResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatActivityHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatActivityHistoryResponse) ProtoMessage() {}

func (x *CreateMeatActivityHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatActivityHistoryResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatActivityHistoryResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{7}
}

func (x *CreateMeatActivityHistoryResponse) GetMeatActivityHistory() *MeatActivityHistory {
	if x != nil {
		return x.MeatActivityHistory
	}
	return nil
}

type MeatBreedingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatBreedingDetailD *MeatBreedingDetailD `protobuf:"bytes,1,opt,name=meat_breeding_detail_d,json=meatBreedingDetailD,proto3" json:"meat_breeding_detail_d,omitempty"`
	MeatBreedingDetailT *MeatBreedingDetailT `protobuf:"bytes,2,opt,name=meat_breeding_detail_t,json=meatBreedingDetailT,proto3" json:"meat_breeding_detail_t,omitempty"`
	CrUpdUser           *v1.CrUpdUser        `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime           *v1.CrUpdTime        `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *MeatBreedingDetail) Reset() {
	*x = MeatBreedingDetail{}
	mi := &file_meat_v1_meat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatBreedingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatBreedingDetail) ProtoMessage() {}

func (x *MeatBreedingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatBreedingDetail.ProtoReflect.Descriptor instead.
func (*MeatBreedingDetail) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{8}
}

func (x *MeatBreedingDetail) GetMeatBreedingDetailD() *MeatBreedingDetailD {
	if x != nil {
		return x.MeatBreedingDetailD
	}
	return nil
}

func (x *MeatBreedingDetail) GetMeatBreedingDetailT() *MeatBreedingDetailT {
	if x != nil {
		return x.MeatBreedingDetailT
	}
	return nil
}

func (x *MeatBreedingDetail) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *MeatBreedingDetail) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type MeatBreedingDetailD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4               []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                 string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	AnimalTypeCode      string `protobuf:"bytes,4,opt,name=animal_type_code,json=animalTypeCode,proto3" json:"animal_type_code,omitempty"`
	BreedCode           string `protobuf:"bytes,5,opt,name=breed_code,json=breedCode,proto3" json:"breed_code,omitempty"`
	BreedOfFatherCode   string `protobuf:"bytes,6,opt,name=breed_of_father_code,json=breedOfFatherCode,proto3" json:"breed_of_father_code,omitempty"`
	BreedOfMotherCode   string `protobuf:"bytes,7,opt,name=breed_of_mother_code,json=breedOfMotherCode,proto3" json:"breed_of_mother_code,omitempty"`
	CrossBreedIndicator bool   `protobuf:"varint,8,opt,name=cross_breed_indicator,json=crossBreedIndicator,proto3" json:"cross_breed_indicator,omitempty"`
	FeedingSystemCode   string `protobuf:"bytes,9,opt,name=feeding_system_code,json=feedingSystemCode,proto3" json:"feeding_system_code,omitempty"`
	GenderCode          string `protobuf:"bytes,10,opt,name=gender_code,json=genderCode,proto3" json:"gender_code,omitempty"`
	HousingSystemCode   string `protobuf:"bytes,11,opt,name=housing_system_code,json=housingSystemCode,proto3" json:"housing_system_code,omitempty"`
	BreedingDNATest     uint32 `protobuf:"varint,12,opt,name=breeding_d_n_a_test,json=breedingDNATest,proto3" json:"breeding_d_n_a_test,omitempty"`
}

func (x *MeatBreedingDetailD) Reset() {
	*x = MeatBreedingDetailD{}
	mi := &file_meat_v1_meat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatBreedingDetailD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatBreedingDetailD) ProtoMessage() {}

func (x *MeatBreedingDetailD) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatBreedingDetailD.ProtoReflect.Descriptor instead.
func (*MeatBreedingDetailD) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{9}
}

func (x *MeatBreedingDetailD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatBreedingDetailD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatBreedingDetailD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatBreedingDetailD) GetAnimalTypeCode() string {
	if x != nil {
		return x.AnimalTypeCode
	}
	return ""
}

func (x *MeatBreedingDetailD) GetBreedCode() string {
	if x != nil {
		return x.BreedCode
	}
	return ""
}

func (x *MeatBreedingDetailD) GetBreedOfFatherCode() string {
	if x != nil {
		return x.BreedOfFatherCode
	}
	return ""
}

func (x *MeatBreedingDetailD) GetBreedOfMotherCode() string {
	if x != nil {
		return x.BreedOfMotherCode
	}
	return ""
}

func (x *MeatBreedingDetailD) GetCrossBreedIndicator() bool {
	if x != nil {
		return x.CrossBreedIndicator
	}
	return false
}

func (x *MeatBreedingDetailD) GetFeedingSystemCode() string {
	if x != nil {
		return x.FeedingSystemCode
	}
	return ""
}

func (x *MeatBreedingDetailD) GetGenderCode() string {
	if x != nil {
		return x.GenderCode
	}
	return ""
}

func (x *MeatBreedingDetailD) GetHousingSystemCode() string {
	if x != nil {
		return x.HousingSystemCode
	}
	return ""
}

func (x *MeatBreedingDetailD) GetBreedingDNATest() uint32 {
	if x != nil {
		return x.BreedingDNATest
	}
	return 0
}

type MeatBreedingDetailT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateOfBirth *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
}

func (x *MeatBreedingDetailT) Reset() {
	*x = MeatBreedingDetailT{}
	mi := &file_meat_v1_meat_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatBreedingDetailT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatBreedingDetailT) ProtoMessage() {}

func (x *MeatBreedingDetailT) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatBreedingDetailT.ProtoReflect.Descriptor instead.
func (*MeatBreedingDetailT) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{10}
}

func (x *MeatBreedingDetailT) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

type CreateMeatBreedingDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimalTypeCode      string `protobuf:"bytes,1,opt,name=animal_type_code,json=animalTypeCode,proto3" json:"animal_type_code,omitempty"`
	BreedCode           string `protobuf:"bytes,2,opt,name=breed_code,json=breedCode,proto3" json:"breed_code,omitempty"`
	BreedOfFatherCode   string `protobuf:"bytes,3,opt,name=breed_of_father_code,json=breedOfFatherCode,proto3" json:"breed_of_father_code,omitempty"`
	BreedOfMotherCode   string `protobuf:"bytes,4,opt,name=breed_of_mother_code,json=breedOfMotherCode,proto3" json:"breed_of_mother_code,omitempty"`
	CrossBreedIndicator bool   `protobuf:"varint,5,opt,name=cross_breed_indicator,json=crossBreedIndicator,proto3" json:"cross_breed_indicator,omitempty"`
	FeedingSystemCode   string `protobuf:"bytes,6,opt,name=feeding_system_code,json=feedingSystemCode,proto3" json:"feeding_system_code,omitempty"`
	GenderCode          string `protobuf:"bytes,7,opt,name=gender_code,json=genderCode,proto3" json:"gender_code,omitempty"`
	HousingSystemCode   string `protobuf:"bytes,8,opt,name=housing_system_code,json=housingSystemCode,proto3" json:"housing_system_code,omitempty"`
	BreedingDNATest     uint32 `protobuf:"varint,9,opt,name=breeding_d_n_a_test,json=breedingDNATest,proto3" json:"breeding_d_n_a_test,omitempty"`
	DateOfBirth         string `protobuf:"bytes,10,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	UserId              string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail           string `protobuf:"bytes,12,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId           string `protobuf:"bytes,13,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatBreedingDetailRequest) Reset() {
	*x = CreateMeatBreedingDetailRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatBreedingDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatBreedingDetailRequest) ProtoMessage() {}

func (x *CreateMeatBreedingDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatBreedingDetailRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatBreedingDetailRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{11}
}

func (x *CreateMeatBreedingDetailRequest) GetAnimalTypeCode() string {
	if x != nil {
		return x.AnimalTypeCode
	}
	return ""
}

func (x *CreateMeatBreedingDetailRequest) GetBreedCode() string {
	if x != nil {
		return x.BreedCode
	}
	return ""
}

func (x *CreateMeatBreedingDetailRequest) GetBreedOfFatherCode() string {
	if x != nil {
		return x.BreedOfFatherCode
	}
	return ""
}

func (x *CreateMeatBreedingDetailRequest) GetBreedOfMotherCode() string {
	if x != nil {
		return x.BreedOfMotherCode
	}
	return ""
}

func (x *CreateMeatBreedingDetailRequest) GetCrossBreedIndicator() bool {
	if x != nil {
		return x.CrossBreedIndicator
	}
	return false
}

func (x *CreateMeatBreedingDetailRequest) GetFeedingSystemCode() string {
	if x != nil {
		return x.FeedingSystemCode
	}
	return ""
}

func (x *CreateMeatBreedingDetailRequest) GetGenderCode() string {
	if x != nil {
		return x.GenderCode
	}
	return ""
}

func (x *CreateMeatBreedingDetailRequest) GetHousingSystemCode() string {
	if x != nil {
		return x.HousingSystemCode
	}
	return ""
}

func (x *CreateMeatBreedingDetailRequest) GetBreedingDNATest() uint32 {
	if x != nil {
		return x.BreedingDNATest
	}
	return 0
}

func (x *CreateMeatBreedingDetailRequest) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *CreateMeatBreedingDetailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatBreedingDetailRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatBreedingDetailRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatBreedingDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatBreedingDetail *MeatBreedingDetail `protobuf:"bytes,1,opt,name=meat_breeding_detail,json=meatBreedingDetail,proto3" json:"meat_breeding_detail,omitempty"`
}

func (x *CreateMeatBreedingDetailResponse) Reset() {
	*x = CreateMeatBreedingDetailResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatBreedingDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatBreedingDetailResponse) ProtoMessage() {}

func (x *CreateMeatBreedingDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatBreedingDetailResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatBreedingDetailResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{12}
}

func (x *CreateMeatBreedingDetailResponse) GetMeatBreedingDetail() *MeatBreedingDetail {
	if x != nil {
		return x.MeatBreedingDetail
	}
	return nil
}

type MeatCuttingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4           []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS             string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	MeatProfileCode string `protobuf:"bytes,4,opt,name=meat_profile_code,json=meatProfileCode,proto3" json:"meat_profile_code,omitempty"`
}

func (x *MeatCuttingDetail) Reset() {
	*x = MeatCuttingDetail{}
	mi := &file_meat_v1_meat_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatCuttingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatCuttingDetail) ProtoMessage() {}

func (x *MeatCuttingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatCuttingDetail.ProtoReflect.Descriptor instead.
func (*MeatCuttingDetail) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{13}
}

func (x *MeatCuttingDetail) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatCuttingDetail) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatCuttingDetail) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatCuttingDetail) GetMeatProfileCode() string {
	if x != nil {
		return x.MeatProfileCode
	}
	return ""
}

type CreateMeatCuttingDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatProfileCode string `protobuf:"bytes,1,opt,name=meat_profile_code,json=meatProfileCode,proto3" json:"meat_profile_code,omitempty"`
	UserId          string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail       string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId       string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatCuttingDetailRequest) Reset() {
	*x = CreateMeatCuttingDetailRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatCuttingDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatCuttingDetailRequest) ProtoMessage() {}

func (x *CreateMeatCuttingDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatCuttingDetailRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatCuttingDetailRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{14}
}

func (x *CreateMeatCuttingDetailRequest) GetMeatProfileCode() string {
	if x != nil {
		return x.MeatProfileCode
	}
	return ""
}

func (x *CreateMeatCuttingDetailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatCuttingDetailRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatCuttingDetailRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatCuttingDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatCuttingDetail *MeatCuttingDetail `protobuf:"bytes,1,opt,name=meat_cutting_detail,json=meatCuttingDetail,proto3" json:"meat_cutting_detail,omitempty"`
}

func (x *CreateMeatCuttingDetailResponse) Reset() {
	*x = CreateMeatCuttingDetailResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatCuttingDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatCuttingDetailResponse) ProtoMessage() {}

func (x *CreateMeatCuttingDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatCuttingDetailResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatCuttingDetailResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{15}
}

func (x *CreateMeatCuttingDetailResponse) GetMeatCuttingDetail() *MeatCuttingDetail {
	if x != nil {
		return x.MeatCuttingDetail
	}
	return nil
}

type MeatDespatchAdviceLineItemExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                  []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                    string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	AnimalIdentificationId uint32 `protobuf:"varint,4,opt,name=animal_identification_id,json=animalIdentificationId,proto3" json:"animal_identification_id,omitempty"`
	SlaughterNumberId      uint32 `protobuf:"varint,5,opt,name=slaughter_number_id,json=slaughterNumberId,proto3" json:"slaughter_number_id,omitempty"`
}

func (x *MeatDespatchAdviceLineItemExtension) Reset() {
	*x = MeatDespatchAdviceLineItemExtension{}
	mi := &file_meat_v1_meat_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatDespatchAdviceLineItemExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatDespatchAdviceLineItemExtension) ProtoMessage() {}

func (x *MeatDespatchAdviceLineItemExtension) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatDespatchAdviceLineItemExtension.ProtoReflect.Descriptor instead.
func (*MeatDespatchAdviceLineItemExtension) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{16}
}

func (x *MeatDespatchAdviceLineItemExtension) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatDespatchAdviceLineItemExtension) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatDespatchAdviceLineItemExtension) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatDespatchAdviceLineItemExtension) GetAnimalIdentificationId() uint32 {
	if x != nil {
		return x.AnimalIdentificationId
	}
	return 0
}

func (x *MeatDespatchAdviceLineItemExtension) GetSlaughterNumberId() uint32 {
	if x != nil {
		return x.SlaughterNumberId
	}
	return 0
}

type CreateMeatDespatchAdviceLineItemExtensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimalIdentificationId uint32 `protobuf:"varint,1,opt,name=animal_identification_id,json=animalIdentificationId,proto3" json:"animal_identification_id,omitempty"`
	SlaughterNumberId      uint32 `protobuf:"varint,2,opt,name=slaughter_number_id,json=slaughterNumberId,proto3" json:"slaughter_number_id,omitempty"`
	UserId                 string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatDespatchAdviceLineItemExtensionRequest) Reset() {
	*x = CreateMeatDespatchAdviceLineItemExtensionRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatDespatchAdviceLineItemExtensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatDespatchAdviceLineItemExtensionRequest) ProtoMessage() {}

func (x *CreateMeatDespatchAdviceLineItemExtensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatDespatchAdviceLineItemExtensionRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatDespatchAdviceLineItemExtensionRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{17}
}

func (x *CreateMeatDespatchAdviceLineItemExtensionRequest) GetAnimalIdentificationId() uint32 {
	if x != nil {
		return x.AnimalIdentificationId
	}
	return 0
}

func (x *CreateMeatDespatchAdviceLineItemExtensionRequest) GetSlaughterNumberId() uint32 {
	if x != nil {
		return x.SlaughterNumberId
	}
	return 0
}

func (x *CreateMeatDespatchAdviceLineItemExtensionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatDespatchAdviceLineItemExtensionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatDespatchAdviceLineItemExtensionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatDespatchAdviceLineItemExtensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatDespatchAdviceLineItemExtension *MeatDespatchAdviceLineItemExtension `protobuf:"bytes,1,opt,name=meat_despatch_advice_line_item_extension,json=meatDespatchAdviceLineItemExtension,proto3" json:"meat_despatch_advice_line_item_extension,omitempty"`
}

func (x *CreateMeatDespatchAdviceLineItemExtensionResponse) Reset() {
	*x = CreateMeatDespatchAdviceLineItemExtensionResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatDespatchAdviceLineItemExtensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatDespatchAdviceLineItemExtensionResponse) ProtoMessage() {}

func (x *CreateMeatDespatchAdviceLineItemExtensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatDespatchAdviceLineItemExtensionResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatDespatchAdviceLineItemExtensionResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{18}
}

func (x *CreateMeatDespatchAdviceLineItemExtensionResponse) GetMeatDespatchAdviceLineItemExtension() *MeatDespatchAdviceLineItemExtension {
	if x != nil {
		return x.MeatDespatchAdviceLineItemExtension
	}
	return nil
}

type MeatFatteningDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4             []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS               string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	FeedingSystemCode string `protobuf:"bytes,4,opt,name=feeding_system_code,json=feedingSystemCode,proto3" json:"feeding_system_code,omitempty"`
	HousingSystemCode string `protobuf:"bytes,5,opt,name=housing_system_code,json=housingSystemCode,proto3" json:"housing_system_code,omitempty"`
}

func (x *MeatFatteningDetail) Reset() {
	*x = MeatFatteningDetail{}
	mi := &file_meat_v1_meat_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatFatteningDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatFatteningDetail) ProtoMessage() {}

func (x *MeatFatteningDetail) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatFatteningDetail.ProtoReflect.Descriptor instead.
func (*MeatFatteningDetail) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{19}
}

func (x *MeatFatteningDetail) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatFatteningDetail) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatFatteningDetail) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatFatteningDetail) GetFeedingSystemCode() string {
	if x != nil {
		return x.FeedingSystemCode
	}
	return ""
}

func (x *MeatFatteningDetail) GetHousingSystemCode() string {
	if x != nil {
		return x.HousingSystemCode
	}
	return ""
}

type CreateMeatFatteningDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedingSystemCode string `protobuf:"bytes,1,opt,name=feeding_system_code,json=feedingSystemCode,proto3" json:"feeding_system_code,omitempty"`
	HousingSystemCode string `protobuf:"bytes,2,opt,name=housing_system_code,json=housingSystemCode,proto3" json:"housing_system_code,omitempty"`
	UserId            string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail         string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId         string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatFatteningDetailRequest) Reset() {
	*x = CreateMeatFatteningDetailRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatFatteningDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatFatteningDetailRequest) ProtoMessage() {}

func (x *CreateMeatFatteningDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatFatteningDetailRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatFatteningDetailRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{20}
}

func (x *CreateMeatFatteningDetailRequest) GetFeedingSystemCode() string {
	if x != nil {
		return x.FeedingSystemCode
	}
	return ""
}

func (x *CreateMeatFatteningDetailRequest) GetHousingSystemCode() string {
	if x != nil {
		return x.HousingSystemCode
	}
	return ""
}

func (x *CreateMeatFatteningDetailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatFatteningDetailRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatFatteningDetailRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatFatteningDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatFatteningDetail *MeatFatteningDetail `protobuf:"bytes,1,opt,name=meat_fattening_detail,json=meatFatteningDetail,proto3" json:"meat_fattening_detail,omitempty"`
}

func (x *CreateMeatFatteningDetailResponse) Reset() {
	*x = CreateMeatFatteningDetailResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatFatteningDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatFatteningDetailResponse) ProtoMessage() {}

func (x *CreateMeatFatteningDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatFatteningDetailResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatFatteningDetailResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{21}
}

func (x *CreateMeatFatteningDetailResponse) GetMeatFatteningDetail() *MeatFatteningDetail {
	if x != nil {
		return x.MeatFatteningDetail
	}
	return nil
}

type MeatMincingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4             []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS               string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	FatContentPercent float64 `protobuf:"fixed64,4,opt,name=fat_content_percent,json=fatContentPercent,proto3" json:"fat_content_percent,omitempty"`
	MincingTypeCode   string  `protobuf:"bytes,5,opt,name=mincing_type_code,json=mincingTypeCode,proto3" json:"mincing_type_code,omitempty"`
}

func (x *MeatMincingDetail) Reset() {
	*x = MeatMincingDetail{}
	mi := &file_meat_v1_meat_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatMincingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatMincingDetail) ProtoMessage() {}

func (x *MeatMincingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatMincingDetail.ProtoReflect.Descriptor instead.
func (*MeatMincingDetail) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{22}
}

func (x *MeatMincingDetail) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatMincingDetail) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatMincingDetail) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatMincingDetail) GetFatContentPercent() float64 {
	if x != nil {
		return x.FatContentPercent
	}
	return 0
}

func (x *MeatMincingDetail) GetMincingTypeCode() string {
	if x != nil {
		return x.MincingTypeCode
	}
	return ""
}

type CreateMeatMincingDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FatContentPercent float64 `protobuf:"fixed64,1,opt,name=fat_content_percent,json=fatContentPercent,proto3" json:"fat_content_percent,omitempty"`
	MincingTypeCode   string  `protobuf:"bytes,2,opt,name=mincing_type_code,json=mincingTypeCode,proto3" json:"mincing_type_code,omitempty"`
	UserId            string  `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail         string  `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId         string  `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatMincingDetailRequest) Reset() {
	*x = CreateMeatMincingDetailRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatMincingDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatMincingDetailRequest) ProtoMessage() {}

func (x *CreateMeatMincingDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatMincingDetailRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatMincingDetailRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{23}
}

func (x *CreateMeatMincingDetailRequest) GetFatContentPercent() float64 {
	if x != nil {
		return x.FatContentPercent
	}
	return 0
}

func (x *CreateMeatMincingDetailRequest) GetMincingTypeCode() string {
	if x != nil {
		return x.MincingTypeCode
	}
	return ""
}

func (x *CreateMeatMincingDetailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatMincingDetailRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatMincingDetailRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatMincingDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatMincingDetail *MeatMincingDetail `protobuf:"bytes,1,opt,name=meat_mincing_detail,json=meatMincingDetail,proto3" json:"meat_mincing_detail,omitempty"`
}

func (x *CreateMeatMincingDetailResponse) Reset() {
	*x = CreateMeatMincingDetailResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatMincingDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatMincingDetailResponse) ProtoMessage() {}

func (x *CreateMeatMincingDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatMincingDetailResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatMincingDetailResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{24}
}

func (x *CreateMeatMincingDetailResponse) GetMeatMincingDetail() *MeatMincingDetail {
	if x != nil {
		return x.MeatMincingDetail
	}
	return nil
}

type MeatProcessingParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                                     []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                       string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ApprovalNumber                            string `protobuf:"bytes,4,opt,name=approval_number,json=approvalNumber,proto3" json:"approval_number,omitempty"`
	MeatProcessingPartyIdentificationTypeCode string `protobuf:"bytes,5,opt,name=meat_processing_party_identification_type_code,json=meatProcessingPartyIdentificationTypeCode,proto3" json:"meat_processing_party_identification_type_code,omitempty"`
	MeatProcessingPartyTypeCode               string `protobuf:"bytes,6,opt,name=meat_processing_party_type_code,json=meatProcessingPartyTypeCode,proto3" json:"meat_processing_party_type_code,omitempty"`
	TransactionalPartyId                      uint32 `protobuf:"varint,7,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
}

func (x *MeatProcessingParty) Reset() {
	*x = MeatProcessingParty{}
	mi := &file_meat_v1_meat_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatProcessingParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatProcessingParty) ProtoMessage() {}

func (x *MeatProcessingParty) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatProcessingParty.ProtoReflect.Descriptor instead.
func (*MeatProcessingParty) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{25}
}

func (x *MeatProcessingParty) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatProcessingParty) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatProcessingParty) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatProcessingParty) GetApprovalNumber() string {
	if x != nil {
		return x.ApprovalNumber
	}
	return ""
}

func (x *MeatProcessingParty) GetMeatProcessingPartyIdentificationTypeCode() string {
	if x != nil {
		return x.MeatProcessingPartyIdentificationTypeCode
	}
	return ""
}

func (x *MeatProcessingParty) GetMeatProcessingPartyTypeCode() string {
	if x != nil {
		return x.MeatProcessingPartyTypeCode
	}
	return ""
}

func (x *MeatProcessingParty) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

type CreateMeatProcessingPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApprovalNumber                            string `protobuf:"bytes,1,opt,name=approval_number,json=approvalNumber,proto3" json:"approval_number,omitempty"`
	MeatProcessingPartyIdentificationTypeCode string `protobuf:"bytes,2,opt,name=meat_processing_party_identification_type_code,json=meatProcessingPartyIdentificationTypeCode,proto3" json:"meat_processing_party_identification_type_code,omitempty"`
	MeatProcessingPartyTypeCode               string `protobuf:"bytes,3,opt,name=meat_processing_party_type_code,json=meatProcessingPartyTypeCode,proto3" json:"meat_processing_party_type_code,omitempty"`
	TransactionalPartyId                      uint32 `protobuf:"varint,4,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
	UserId                                    string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                 string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                 string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatProcessingPartyRequest) Reset() {
	*x = CreateMeatProcessingPartyRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatProcessingPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatProcessingPartyRequest) ProtoMessage() {}

func (x *CreateMeatProcessingPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatProcessingPartyRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatProcessingPartyRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{26}
}

func (x *CreateMeatProcessingPartyRequest) GetApprovalNumber() string {
	if x != nil {
		return x.ApprovalNumber
	}
	return ""
}

func (x *CreateMeatProcessingPartyRequest) GetMeatProcessingPartyIdentificationTypeCode() string {
	if x != nil {
		return x.MeatProcessingPartyIdentificationTypeCode
	}
	return ""
}

func (x *CreateMeatProcessingPartyRequest) GetMeatProcessingPartyTypeCode() string {
	if x != nil {
		return x.MeatProcessingPartyTypeCode
	}
	return ""
}

func (x *CreateMeatProcessingPartyRequest) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

func (x *CreateMeatProcessingPartyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatProcessingPartyRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatProcessingPartyRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatProcessingPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatProcessingParty *MeatProcessingParty `protobuf:"bytes,1,opt,name=meat_processing_party,json=meatProcessingParty,proto3" json:"meat_processing_party,omitempty"`
}

func (x *CreateMeatProcessingPartyResponse) Reset() {
	*x = CreateMeatProcessingPartyResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatProcessingPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatProcessingPartyResponse) ProtoMessage() {}

func (x *CreateMeatProcessingPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatProcessingPartyResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatProcessingPartyResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{27}
}

func (x *CreateMeatProcessingPartyResponse) GetMeatProcessingParty() *MeatProcessingParty {
	if x != nil {
		return x.MeatProcessingParty
	}
	return nil
}

type MeatSlaughteringDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatSlaughteringDetailD *MeatSlaughteringDetailD `protobuf:"bytes,1,opt,name=meat_slaughtering_detail_d,json=meatSlaughteringDetailD,proto3" json:"meat_slaughtering_detail_d,omitempty"`
	MeatSlaughteringDetailT *MeatSlaughteringDetailT `protobuf:"bytes,2,opt,name=meat_slaughtering_detail_t,json=meatSlaughteringDetailT,proto3" json:"meat_slaughtering_detail_t,omitempty"`
	CrUpdUser               *v1.CrUpdUser            `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime               *v1.CrUpdTime            `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *MeatSlaughteringDetail) Reset() {
	*x = MeatSlaughteringDetail{}
	mi := &file_meat_v1_meat_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatSlaughteringDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatSlaughteringDetail) ProtoMessage() {}

func (x *MeatSlaughteringDetail) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatSlaughteringDetail.ProtoReflect.Descriptor instead.
func (*MeatSlaughteringDetail) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{28}
}

func (x *MeatSlaughteringDetail) GetMeatSlaughteringDetailD() *MeatSlaughteringDetailD {
	if x != nil {
		return x.MeatSlaughteringDetailD
	}
	return nil
}

func (x *MeatSlaughteringDetail) GetMeatSlaughteringDetailT() *MeatSlaughteringDetailT {
	if x != nil {
		return x.MeatSlaughteringDetailT
	}
	return nil
}

func (x *MeatSlaughteringDetail) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *MeatSlaughteringDetail) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type MeatSlaughteringDetailD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                  []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                    string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	AgeOfAnimal            uint32  `protobuf:"varint,4,opt,name=age_of_animal,json=ageOfAnimal,proto3" json:"age_of_animal,omitempty"`
	FatContentPercent      float64 `protobuf:"fixed64,5,opt,name=fat_content_percent,json=fatContentPercent,proto3" json:"fat_content_percent,omitempty"`
	FatCoverCode           string  `protobuf:"bytes,6,opt,name=fat_cover_code,json=fatCoverCode,proto3" json:"fat_cover_code,omitempty"`
	MeatCategoryCode       string  `protobuf:"bytes,7,opt,name=meat_category_code,json=meatCategoryCode,proto3" json:"meat_category_code,omitempty"`
	MeatColourCode         string  `protobuf:"bytes,8,opt,name=meat_colour_code,json=meatColourCode,proto3" json:"meat_colour_code,omitempty"`
	MeatConformationCode   string  `protobuf:"bytes,9,opt,name=meat_conformation_code,json=meatConformationCode,proto3" json:"meat_conformation_code,omitempty"`
	MeatProfileCode        string  `protobuf:"bytes,10,opt,name=meat_profile_code,json=meatProfileCode,proto3" json:"meat_profile_code,omitempty"`
	SlaughteringSystemCode string  `protobuf:"bytes,11,opt,name=slaughtering_system_code,json=slaughteringSystemCode,proto3" json:"slaughtering_system_code,omitempty"`
	SlaughteringWeight     float64 `protobuf:"fixed64,12,opt,name=slaughtering_weight,json=slaughteringWeight,proto3" json:"slaughtering_weight,omitempty"`
	SWCodeListVersion      string  `protobuf:"bytes,13,opt,name=s_w_code_list_version,json=sWCodeListVersion,proto3" json:"s_w_code_list_version,omitempty"`
	SWMeasurementUnitCode  string  `protobuf:"bytes,14,opt,name=s_w_measurement_unit_code,json=sWMeasurementUnitCode,proto3" json:"s_w_measurement_unit_code,omitempty"`
	BseTestId              uint32  `protobuf:"varint,15,opt,name=bse_test_id,json=bseTestId,proto3" json:"bse_test_id,omitempty"`
	SlaughteringDNATestId  uint32  `protobuf:"varint,16,opt,name=slaughtering_d_n_a_test_id,json=slaughteringDNATestId,proto3" json:"slaughtering_d_n_a_test_id,omitempty"`
}

func (x *MeatSlaughteringDetailD) Reset() {
	*x = MeatSlaughteringDetailD{}
	mi := &file_meat_v1_meat_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatSlaughteringDetailD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatSlaughteringDetailD) ProtoMessage() {}

func (x *MeatSlaughteringDetailD) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatSlaughteringDetailD.ProtoReflect.Descriptor instead.
func (*MeatSlaughteringDetailD) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{29}
}

func (x *MeatSlaughteringDetailD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatSlaughteringDetailD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatSlaughteringDetailD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatSlaughteringDetailD) GetAgeOfAnimal() uint32 {
	if x != nil {
		return x.AgeOfAnimal
	}
	return 0
}

func (x *MeatSlaughteringDetailD) GetFatContentPercent() float64 {
	if x != nil {
		return x.FatContentPercent
	}
	return 0
}

func (x *MeatSlaughteringDetailD) GetFatCoverCode() string {
	if x != nil {
		return x.FatCoverCode
	}
	return ""
}

func (x *MeatSlaughteringDetailD) GetMeatCategoryCode() string {
	if x != nil {
		return x.MeatCategoryCode
	}
	return ""
}

func (x *MeatSlaughteringDetailD) GetMeatColourCode() string {
	if x != nil {
		return x.MeatColourCode
	}
	return ""
}

func (x *MeatSlaughteringDetailD) GetMeatConformationCode() string {
	if x != nil {
		return x.MeatConformationCode
	}
	return ""
}

func (x *MeatSlaughteringDetailD) GetMeatProfileCode() string {
	if x != nil {
		return x.MeatProfileCode
	}
	return ""
}

func (x *MeatSlaughteringDetailD) GetSlaughteringSystemCode() string {
	if x != nil {
		return x.SlaughteringSystemCode
	}
	return ""
}

func (x *MeatSlaughteringDetailD) GetSlaughteringWeight() float64 {
	if x != nil {
		return x.SlaughteringWeight
	}
	return 0
}

func (x *MeatSlaughteringDetailD) GetSWCodeListVersion() string {
	if x != nil {
		return x.SWCodeListVersion
	}
	return ""
}

func (x *MeatSlaughteringDetailD) GetSWMeasurementUnitCode() string {
	if x != nil {
		return x.SWMeasurementUnitCode
	}
	return ""
}

func (x *MeatSlaughteringDetailD) GetBseTestId() uint32 {
	if x != nil {
		return x.BseTestId
	}
	return 0
}

func (x *MeatSlaughteringDetailD) GetSlaughteringDNATestId() uint32 {
	if x != nil {
		return x.SlaughteringDNATestId
	}
	return 0
}

type MeatSlaughteringDetailT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateOfSlaughtering    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date_of_slaughtering,json=dateOfSlaughtering,proto3" json:"date_of_slaughtering,omitempty"`
	OptimumMaturationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=optimum_maturation_date,json=optimumMaturationDate,proto3" json:"optimum_maturation_date,omitempty"`
}

func (x *MeatSlaughteringDetailT) Reset() {
	*x = MeatSlaughteringDetailT{}
	mi := &file_meat_v1_meat_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatSlaughteringDetailT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatSlaughteringDetailT) ProtoMessage() {}

func (x *MeatSlaughteringDetailT) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatSlaughteringDetailT.ProtoReflect.Descriptor instead.
func (*MeatSlaughteringDetailT) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{30}
}

func (x *MeatSlaughteringDetailT) GetDateOfSlaughtering() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfSlaughtering
	}
	return nil
}

func (x *MeatSlaughteringDetailT) GetOptimumMaturationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OptimumMaturationDate
	}
	return nil
}

type CreateMeatSlaughteringDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgeOfAnimal            uint32  `protobuf:"varint,1,opt,name=age_of_animal,json=ageOfAnimal,proto3" json:"age_of_animal,omitempty"`
	DateOfSlaughtering     string  `protobuf:"bytes,2,opt,name=date_of_slaughtering,json=dateOfSlaughtering,proto3" json:"date_of_slaughtering,omitempty"`
	FatContentPercent      float64 `protobuf:"fixed64,3,opt,name=fat_content_percent,json=fatContentPercent,proto3" json:"fat_content_percent,omitempty"`
	FatCoverCode           string  `protobuf:"bytes,4,opt,name=fat_cover_code,json=fatCoverCode,proto3" json:"fat_cover_code,omitempty"`
	MeatCategoryCode       string  `protobuf:"bytes,5,opt,name=meat_category_code,json=meatCategoryCode,proto3" json:"meat_category_code,omitempty"`
	MeatColourCode         string  `protobuf:"bytes,6,opt,name=meat_colour_code,json=meatColourCode,proto3" json:"meat_colour_code,omitempty"`
	MeatConformationCode   string  `protobuf:"bytes,7,opt,name=meat_conformation_code,json=meatConformationCode,proto3" json:"meat_conformation_code,omitempty"`
	MeatProfileCode        string  `protobuf:"bytes,8,opt,name=meat_profile_code,json=meatProfileCode,proto3" json:"meat_profile_code,omitempty"`
	OptimumMaturationDate  string  `protobuf:"bytes,9,opt,name=optimum_maturation_date,json=optimumMaturationDate,proto3" json:"optimum_maturation_date,omitempty"`
	SlaughteringSystemCode string  `protobuf:"bytes,10,opt,name=slaughtering_system_code,json=slaughteringSystemCode,proto3" json:"slaughtering_system_code,omitempty"`
	SlaughteringWeight     float64 `protobuf:"fixed64,11,opt,name=slaughtering_weight,json=slaughteringWeight,proto3" json:"slaughtering_weight,omitempty"`
	SWCodeListVersion      string  `protobuf:"bytes,12,opt,name=s_w_code_list_version,json=sWCodeListVersion,proto3" json:"s_w_code_list_version,omitempty"`
	SWMeasurementUnitCode  string  `protobuf:"bytes,13,opt,name=s_w_measurement_unit_code,json=sWMeasurementUnitCode,proto3" json:"s_w_measurement_unit_code,omitempty"`
	BseTestId              uint32  `protobuf:"varint,14,opt,name=bse_test_id,json=bseTestId,proto3" json:"bse_test_id,omitempty"`
	SlaughteringDNATestId  uint32  `protobuf:"varint,15,opt,name=slaughtering_d_n_a_test_id,json=slaughteringDNATestId,proto3" json:"slaughtering_d_n_a_test_id,omitempty"`
	UserId                 string  `protobuf:"bytes,16,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string  `protobuf:"bytes,17,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string  `protobuf:"bytes,18,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatSlaughteringDetailRequest) Reset() {
	*x = CreateMeatSlaughteringDetailRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatSlaughteringDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatSlaughteringDetailRequest) ProtoMessage() {}

func (x *CreateMeatSlaughteringDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatSlaughteringDetailRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatSlaughteringDetailRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{31}
}

func (x *CreateMeatSlaughteringDetailRequest) GetAgeOfAnimal() uint32 {
	if x != nil {
		return x.AgeOfAnimal
	}
	return 0
}

func (x *CreateMeatSlaughteringDetailRequest) GetDateOfSlaughtering() string {
	if x != nil {
		return x.DateOfSlaughtering
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetFatContentPercent() float64 {
	if x != nil {
		return x.FatContentPercent
	}
	return 0
}

func (x *CreateMeatSlaughteringDetailRequest) GetFatCoverCode() string {
	if x != nil {
		return x.FatCoverCode
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetMeatCategoryCode() string {
	if x != nil {
		return x.MeatCategoryCode
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetMeatColourCode() string {
	if x != nil {
		return x.MeatColourCode
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetMeatConformationCode() string {
	if x != nil {
		return x.MeatConformationCode
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetMeatProfileCode() string {
	if x != nil {
		return x.MeatProfileCode
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetOptimumMaturationDate() string {
	if x != nil {
		return x.OptimumMaturationDate
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetSlaughteringSystemCode() string {
	if x != nil {
		return x.SlaughteringSystemCode
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetSlaughteringWeight() float64 {
	if x != nil {
		return x.SlaughteringWeight
	}
	return 0
}

func (x *CreateMeatSlaughteringDetailRequest) GetSWCodeListVersion() string {
	if x != nil {
		return x.SWCodeListVersion
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetSWMeasurementUnitCode() string {
	if x != nil {
		return x.SWMeasurementUnitCode
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetBseTestId() uint32 {
	if x != nil {
		return x.BseTestId
	}
	return 0
}

func (x *CreateMeatSlaughteringDetailRequest) GetSlaughteringDNATestId() uint32 {
	if x != nil {
		return x.SlaughteringDNATestId
	}
	return 0
}

func (x *CreateMeatSlaughteringDetailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatSlaughteringDetailRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatSlaughteringDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatSlaughteringDetail *MeatSlaughteringDetail `protobuf:"bytes,1,opt,name=meat_slaughtering_detail,json=meatSlaughteringDetail,proto3" json:"meat_slaughtering_detail,omitempty"`
}

func (x *CreateMeatSlaughteringDetailResponse) Reset() {
	*x = CreateMeatSlaughteringDetailResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatSlaughteringDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatSlaughteringDetailResponse) ProtoMessage() {}

func (x *CreateMeatSlaughteringDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatSlaughteringDetailResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatSlaughteringDetailResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{32}
}

func (x *CreateMeatSlaughteringDetailResponse) GetMeatSlaughteringDetail() *MeatSlaughteringDetail {
	if x != nil {
		return x.MeatSlaughteringDetail
	}
	return nil
}

type MeatTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4      []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS        string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TestMethod string `protobuf:"bytes,4,opt,name=test_method,json=testMethod,proto3" json:"test_method,omitempty"`
	TestResult string `protobuf:"bytes,5,opt,name=test_result,json=testResult,proto3" json:"test_result,omitempty"`
}

func (x *MeatTest) Reset() {
	*x = MeatTest{}
	mi := &file_meat_v1_meat_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatTest) ProtoMessage() {}

func (x *MeatTest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatTest.ProtoReflect.Descriptor instead.
func (*MeatTest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{33}
}

func (x *MeatTest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatTest) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatTest) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatTest) GetTestMethod() string {
	if x != nil {
		return x.TestMethod
	}
	return ""
}

func (x *MeatTest) GetTestResult() string {
	if x != nil {
		return x.TestResult
	}
	return ""
}

type CreateMeatTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestMethod string `protobuf:"bytes,1,opt,name=test_method,json=testMethod,proto3" json:"test_method,omitempty"`
	TestResult string `protobuf:"bytes,2,opt,name=test_result,json=testResult,proto3" json:"test_result,omitempty"`
	UserId     string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail  string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatTestRequest) Reset() {
	*x = CreateMeatTestRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatTestRequest) ProtoMessage() {}

func (x *CreateMeatTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatTestRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatTestRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{34}
}

func (x *CreateMeatTestRequest) GetTestMethod() string {
	if x != nil {
		return x.TestMethod
	}
	return ""
}

func (x *CreateMeatTestRequest) GetTestResult() string {
	if x != nil {
		return x.TestResult
	}
	return ""
}

func (x *CreateMeatTestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatTestRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatTestRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatTest *MeatTest `protobuf:"bytes,1,opt,name=meat_test,json=meatTest,proto3" json:"meat_test,omitempty"`
}

func (x *CreateMeatTestResponse) Reset() {
	*x = CreateMeatTestResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatTestResponse) ProtoMessage() {}

func (x *CreateMeatTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatTestResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatTestResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{35}
}

func (x *CreateMeatTestResponse) GetMeatTest() *MeatTest {
	if x != nil {
		return x.MeatTest
	}
	return nil
}

type MeatWorkItemIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatWorkItemIdentificationD *MeatWorkItemIdentificationD `protobuf:"bytes,1,opt,name=meat_work_item_identification_d,json=meatWorkItemIdentificationD,proto3" json:"meat_work_item_identification_d,omitempty"`
	CrUpdUser                   *v1.CrUpdUser                `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                   *v1.CrUpdTime                `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *MeatWorkItemIdentification) Reset() {
	*x = MeatWorkItemIdentification{}
	mi := &file_meat_v1_meat_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatWorkItemIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatWorkItemIdentification) ProtoMessage() {}

func (x *MeatWorkItemIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatWorkItemIdentification.ProtoReflect.Descriptor instead.
func (*MeatWorkItemIdentification) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{36}
}

func (x *MeatWorkItemIdentification) GetMeatWorkItemIdentificationD() *MeatWorkItemIdentificationD {
	if x != nil {
		return x.MeatWorkItemIdentificationD
	}
	return nil
}

func (x *MeatWorkItemIdentification) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *MeatWorkItemIdentification) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type MeatWorkItemIdentificationD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                  []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                    string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	BatchNumber            string `protobuf:"bytes,4,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	LivestockMobIdentifier string `protobuf:"bytes,5,opt,name=livestock_mob_identifier,json=livestockMobIdentifier,proto3" json:"livestock_mob_identifier,omitempty"`
	MeatWorkItemTypeCode   string `protobuf:"bytes,6,opt,name=meat_work_item_type_code,json=meatWorkItemTypeCode,proto3" json:"meat_work_item_type_code,omitempty"`
	AnimalIdentificationId uint32 `protobuf:"varint,7,opt,name=animal_identification_id,json=animalIdentificationId,proto3" json:"animal_identification_id,omitempty"`
	ProductIdentification  uint32 `protobuf:"varint,8,opt,name=product_identification,json=productIdentification,proto3" json:"product_identification,omitempty"`
	SlaughterNumberId      uint32 `protobuf:"varint,9,opt,name=slaughter_number_id,json=slaughterNumberId,proto3" json:"slaughter_number_id,omitempty"`
}

func (x *MeatWorkItemIdentificationD) Reset() {
	*x = MeatWorkItemIdentificationD{}
	mi := &file_meat_v1_meat_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeatWorkItemIdentificationD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeatWorkItemIdentificationD) ProtoMessage() {}

func (x *MeatWorkItemIdentificationD) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeatWorkItemIdentificationD.ProtoReflect.Descriptor instead.
func (*MeatWorkItemIdentificationD) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{37}
}

func (x *MeatWorkItemIdentificationD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeatWorkItemIdentificationD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *MeatWorkItemIdentificationD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *MeatWorkItemIdentificationD) GetBatchNumber() string {
	if x != nil {
		return x.BatchNumber
	}
	return ""
}

func (x *MeatWorkItemIdentificationD) GetLivestockMobIdentifier() string {
	if x != nil {
		return x.LivestockMobIdentifier
	}
	return ""
}

func (x *MeatWorkItemIdentificationD) GetMeatWorkItemTypeCode() string {
	if x != nil {
		return x.MeatWorkItemTypeCode
	}
	return ""
}

func (x *MeatWorkItemIdentificationD) GetAnimalIdentificationId() uint32 {
	if x != nil {
		return x.AnimalIdentificationId
	}
	return 0
}

func (x *MeatWorkItemIdentificationD) GetProductIdentification() uint32 {
	if x != nil {
		return x.ProductIdentification
	}
	return 0
}

func (x *MeatWorkItemIdentificationD) GetSlaughterNumberId() uint32 {
	if x != nil {
		return x.SlaughterNumberId
	}
	return 0
}

type CreateMeatWorkItemIdentificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchNumber            string `protobuf:"bytes,1,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	LivestockMobIdentifier string `protobuf:"bytes,2,opt,name=livestock_mob_identifier,json=livestockMobIdentifier,proto3" json:"livestock_mob_identifier,omitempty"`
	MeatWorkItemTypeCode   string `protobuf:"bytes,3,opt,name=meat_work_item_type_code,json=meatWorkItemTypeCode,proto3" json:"meat_work_item_type_code,omitempty"`
	AnimalIdentificationId uint32 `protobuf:"varint,4,opt,name=animal_identification_id,json=animalIdentificationId,proto3" json:"animal_identification_id,omitempty"`
	ProductIdentification  uint32 `protobuf:"varint,5,opt,name=product_identification,json=productIdentification,proto3" json:"product_identification,omitempty"`
	SlaughterNumberId      uint32 `protobuf:"varint,6,opt,name=slaughter_number_id,json=slaughterNumberId,proto3" json:"slaughter_number_id,omitempty"`
	UserId                 string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateMeatWorkItemIdentificationRequest) Reset() {
	*x = CreateMeatWorkItemIdentificationRequest{}
	mi := &file_meat_v1_meat_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatWorkItemIdentificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatWorkItemIdentificationRequest) ProtoMessage() {}

func (x *CreateMeatWorkItemIdentificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatWorkItemIdentificationRequest.ProtoReflect.Descriptor instead.
func (*CreateMeatWorkItemIdentificationRequest) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{38}
}

func (x *CreateMeatWorkItemIdentificationRequest) GetBatchNumber() string {
	if x != nil {
		return x.BatchNumber
	}
	return ""
}

func (x *CreateMeatWorkItemIdentificationRequest) GetLivestockMobIdentifier() string {
	if x != nil {
		return x.LivestockMobIdentifier
	}
	return ""
}

func (x *CreateMeatWorkItemIdentificationRequest) GetMeatWorkItemTypeCode() string {
	if x != nil {
		return x.MeatWorkItemTypeCode
	}
	return ""
}

func (x *CreateMeatWorkItemIdentificationRequest) GetAnimalIdentificationId() uint32 {
	if x != nil {
		return x.AnimalIdentificationId
	}
	return 0
}

func (x *CreateMeatWorkItemIdentificationRequest) GetProductIdentification() uint32 {
	if x != nil {
		return x.ProductIdentification
	}
	return 0
}

func (x *CreateMeatWorkItemIdentificationRequest) GetSlaughterNumberId() uint32 {
	if x != nil {
		return x.SlaughterNumberId
	}
	return 0
}

func (x *CreateMeatWorkItemIdentificationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateMeatWorkItemIdentificationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateMeatWorkItemIdentificationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateMeatWorkItemIdentificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeatWorkItemIdentification *MeatWorkItemIdentification `protobuf:"bytes,1,opt,name=meat_work_item_identification,json=meatWorkItemIdentification,proto3" json:"meat_work_item_identification,omitempty"`
}

func (x *CreateMeatWorkItemIdentificationResponse) Reset() {
	*x = CreateMeatWorkItemIdentificationResponse{}
	mi := &file_meat_v1_meat_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMeatWorkItemIdentificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeatWorkItemIdentificationResponse) ProtoMessage() {}

func (x *CreateMeatWorkItemIdentificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meat_v1_meat_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeatWorkItemIdentificationResponse.ProtoReflect.Descriptor instead.
func (*CreateMeatWorkItemIdentificationResponse) Descriptor() ([]byte, []int) {
	return file_meat_v1_meat_proto_rawDescGZIP(), []int{39}
}

func (x *CreateMeatWorkItemIdentificationResponse) GetMeatWorkItemIdentification() *MeatWorkItemIdentification {
	if x != nil {
		return x.MeatWorkItemIdentification
	}
	return nil
}

var File_meat_v1_meat_proto protoreflect.FileDescriptor

var file_meat_v1_meat_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x65, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x74, 0x41,
	0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04,
	0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12,
	0x38, 0x0a, 0x18, 0x61, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x61, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x4d, 0x65, 0x61,
	0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64,
	0x22, 0x92, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x41,
	0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x18, 0x61, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x61, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x61, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x74, 0x12,
	0x3d, 0x0a, 0x1b, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x61, 0x74, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x63, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x0b,
	0x6d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x22, 0xad, 0x02, 0x0a, 0x13,
	0x4d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x17, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x12, 0x54, 0x0a, 0x17, 0x6d, 0x65, 0x61,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbf, 0x07, 0x0a, 0x14,
	0x4d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64,
	0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x47, 0x0a,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x75, 0x62, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4f, 0x66, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3e, 0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x22, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6d, 0x65, 0x61,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x74, 0x5f,
	0x6d, 0x69, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x74, 0x4d, 0x69, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x6d, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6d, 0x65, 0x61, 0x74, 0x46, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x75,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x74, 0x43, 0x75, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65,
	0x61, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x65, 0x61,
	0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x65,
	0x61, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x75, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61,
	0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x12, 0x5a, 0x0a, 0x2b, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x6d, 0x65, 0x61, 0x74, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa2, 0x01,
	0x0a, 0x14, 0x4d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xbd, 0x08, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4a, 0x0a,
	0x22, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6d, 0x65, 0x61, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e,
	0x65, 0x78, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x69,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x74, 0x4d, 0x69, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x65,
	0x61, 0x74, 0x5f, 0x66, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x65,
	0x61, 0x74, 0x46, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x74, 0x43, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x61, 0x74,
	0x5f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x74, 0x42,
	0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x6d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x65, 0x61, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12,
	0x5a, 0x0a, 0x2b, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x6d, 0x65, 0x61, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x75, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6d, 0x65, 0x61, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xa6, 0x02, 0x0a, 0x12, 0x4d, 0x65,
	0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x51, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74, 0x42,
	0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x52, 0x13,
	0x6d, 0x65, 0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x44, 0x12, 0x51, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x54, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x13, 0x4d, 0x65, 0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x53, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x72, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x65, 0x65,
	0x64, 0x4f, 0x66, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x65,
	0x65, 0x64, 0x4f, 0x66, 0x4d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x66, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x13, 0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x5f, 0x6e, 0x5f, 0x61, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x4e, 0x41, 0x54, 0x65, 0x73,
	0x74, 0x22, 0x55, 0x0a, 0x13, 0x4d, 0x65, 0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x22, 0xaa, 0x04, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x6f,
	0x66, 0x5f, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x46, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f,
	0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x4d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x5f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x72, 0x65,
	0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x66,
	0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x65, 0x65, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x6f, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x13,
	0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x5f, 0x6e, 0x5f, 0x61, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x72, 0x65, 0x65, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x4e, 0x41, 0x54, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x65, 0x61,
	0x74, 0x5f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x6d, 0x65, 0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x78, 0x0a, 0x11, 0x4d, 0x65, 0x61, 0x74,
	0x43, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61,
	0x74, 0x43, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x43, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x6d,
	0x65, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74, 0x43, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x74, 0x43, 0x75, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc8, 0x01, 0x0a, 0x23, 0x4d, 0x65, 0x61, 0x74,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x30, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61,
	0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x31, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x28, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x23, 0x6d, 0x65, 0x61, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x61, 0x74, 0x46, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x74, 0x46, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x65,
	0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x6f,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x75, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x46,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x66,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x61, 0x74, 0x46, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x74, 0x46, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x61,
	0x74, 0x4d, 0x69, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75,
	0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x61, 0x74, 0x4d, 0x69, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x4d, 0x69, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x13,
	0x6d, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74, 0x4d, 0x69, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x74, 0x4d, 0x69, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xd6, 0x02, 0x0a, 0x13, 0x4d, 0x65, 0x61,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x61, 0x0a, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x29, 0x6d, 0x65, 0x61, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x6d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x22, 0x81, 0x03, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x61, 0x0a, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x29, 0x6d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6d, 0x65, 0x61,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6d, 0x65,
	0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0xc2, 0x02, 0x0a,
	0x16, 0x4d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x5d, 0x0a, 0x1a, 0x6d, 0x65, 0x61, 0x74, 0x5f,
	0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x52, 0x17, 0x6d,
	0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x12, 0x5d, 0x0a, 0x1a, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x73,
	0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x52, 0x17, 0x6d, 0x65,
	0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xb8, 0x05, 0x0a, 0x17, 0x4d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x67, 0x65, 0x4f, 0x66, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65,
	0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x6c,
	0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x6c,
	0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x73, 0x5f, 0x77, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x57, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x5f, 0x77, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x57, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x1a, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x5f, 0x6e, 0x5f, 0x61, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x4e, 0x41, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a,
	0x17, 0x4d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x12, 0x4c, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x15, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xcc, 0x06, 0x0a, 0x23, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x4f, 0x66,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x53, 0x6c, 0x61, 0x75,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x61, 0x74, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x61, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x75, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x75, 0x6d, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6c,
	0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x73,
	0x5f, 0x77, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x57, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x19, 0x73, 0x5f, 0x77, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x73, 0x57, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x73, 0x65, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x73,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x1a, 0x73, 0x6c, 0x61, 0x75, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x5f, 0x6e, 0x5f, 0x61, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x6c, 0x61,
	0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x4e, 0x41, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x24, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x18, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x75, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x16, 0x6d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x85, 0x01,
	0x0a, 0x08, 0x4d, 0x65, 0x61, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x61, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x1a, 0x4d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6a, 0x0a, 0x1f, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x52, 0x1b, 0x6d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x03, 0x0a, 0x1b, 0x4d, 0x65,
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12,
	0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x6f, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x18, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6c, 0x61, 0x75,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb6, 0x03, 0x0a, 0x27, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6c,
	0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x92, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x1d, 0x6d, 0x65, 0x61, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x6d, 0x65, 0x61, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x91, 0x0a, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x21, 0x2e, 0x6d, 0x65,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74,
	0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x61, 0x74, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x72, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x29, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x28, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d,
	0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61,
	0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x61, 0x74, 0x43, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x27, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x43, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x65,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74,
	0x43, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x61, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x46, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x46, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x46, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x4d, 0x69, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x6d, 0x65, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x4d, 0x69,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x4d, 0x69, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7b, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x53, 0x6c,
	0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x2c, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x87, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x65, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x67, 0x73, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x65,
	0x61, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meat_v1_meat_proto_rawDescOnce sync.Once
	file_meat_v1_meat_proto_rawDescData = file_meat_v1_meat_proto_rawDesc
)

func file_meat_v1_meat_proto_rawDescGZIP() []byte {
	file_meat_v1_meat_proto_rawDescOnce.Do(func() {
		file_meat_v1_meat_proto_rawDescData = protoimpl.X.CompressGZIP(file_meat_v1_meat_proto_rawDescData)
	})
	return file_meat_v1_meat_proto_rawDescData
}

var file_meat_v1_meat_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_meat_v1_meat_proto_goTypes = []any{
	(*MeatAcidity)(nil),                                       // 0: meat.v1.MeatAcidity
	(*CreateMeatAcidityRequest)(nil),                          // 1: meat.v1.CreateMeatAcidityRequest
	(*CreateMeatAcidityResponse)(nil),                         // 2: meat.v1.CreateMeatAcidityResponse
	(*MeatActivityHistory)(nil),                               // 3: meat.v1.MeatActivityHistory
	(*MeatActivityHistoryD)(nil),                              // 4: meat.v1.MeatActivityHistoryD
	(*MeatActivityHistoryT)(nil),                              // 5: meat.v1.MeatActivityHistoryT
	(*CreateMeatActivityHistoryRequest)(nil),                  // 6: meat.v1.CreateMeatActivityHistoryRequest
	(*CreateMeatActivityHistoryResponse)(nil),                 // 7: meat.v1.CreateMeatActivityHistoryResponse
	(*MeatBreedingDetail)(nil),                                // 8: meat.v1.MeatBreedingDetail
	(*MeatBreedingDetailD)(nil),                               // 9: meat.v1.MeatBreedingDetailD
	(*MeatBreedingDetailT)(nil),                               // 10: meat.v1.MeatBreedingDetailT
	(*CreateMeatBreedingDetailRequest)(nil),                   // 11: meat.v1.CreateMeatBreedingDetailRequest
	(*CreateMeatBreedingDetailResponse)(nil),                  // 12: meat.v1.CreateMeatBreedingDetailResponse
	(*MeatCuttingDetail)(nil),                                 // 13: meat.v1.MeatCuttingDetail
	(*CreateMeatCuttingDetailRequest)(nil),                    // 14: meat.v1.CreateMeatCuttingDetailRequest
	(*CreateMeatCuttingDetailResponse)(nil),                   // 15: meat.v1.CreateMeatCuttingDetailResponse
	(*MeatDespatchAdviceLineItemExtension)(nil),               // 16: meat.v1.MeatDespatchAdviceLineItemExtension
	(*CreateMeatDespatchAdviceLineItemExtensionRequest)(nil),  // 17: meat.v1.CreateMeatDespatchAdviceLineItemExtensionRequest
	(*CreateMeatDespatchAdviceLineItemExtensionResponse)(nil), // 18: meat.v1.CreateMeatDespatchAdviceLineItemExtensionResponse
	(*MeatFatteningDetail)(nil),                               // 19: meat.v1.MeatFatteningDetail
	(*CreateMeatFatteningDetailRequest)(nil),                  // 20: meat.v1.CreateMeatFatteningDetailRequest
	(*CreateMeatFatteningDetailResponse)(nil),                 // 21: meat.v1.CreateMeatFatteningDetailResponse
	(*MeatMincingDetail)(nil),                                 // 22: meat.v1.MeatMincingDetail
	(*CreateMeatMincingDetailRequest)(nil),                    // 23: meat.v1.CreateMeatMincingDetailRequest
	(*CreateMeatMincingDetailResponse)(nil),                   // 24: meat.v1.CreateMeatMincingDetailResponse
	(*MeatProcessingParty)(nil),                               // 25: meat.v1.MeatProcessingParty
	(*CreateMeatProcessingPartyRequest)(nil),                  // 26: meat.v1.CreateMeatProcessingPartyRequest
	(*CreateMeatProcessingPartyResponse)(nil),                 // 27: meat.v1.CreateMeatProcessingPartyResponse
	(*MeatSlaughteringDetail)(nil),                            // 28: meat.v1.MeatSlaughteringDetail
	(*MeatSlaughteringDetailD)(nil),                           // 29: meat.v1.MeatSlaughteringDetailD
	(*MeatSlaughteringDetailT)(nil),                           // 30: meat.v1.MeatSlaughteringDetailT
	(*CreateMeatSlaughteringDetailRequest)(nil),               // 31: meat.v1.CreateMeatSlaughteringDetailRequest
	(*CreateMeatSlaughteringDetailResponse)(nil),              // 32: meat.v1.CreateMeatSlaughteringDetailResponse
	(*MeatTest)(nil),                                          // 33: meat.v1.MeatTest
	(*CreateMeatTestRequest)(nil),                             // 34: meat.v1.CreateMeatTestRequest
	(*CreateMeatTestResponse)(nil),                            // 35: meat.v1.CreateMeatTestResponse
	(*MeatWorkItemIdentification)(nil),                        // 36: meat.v1.MeatWorkItemIdentification
	(*MeatWorkItemIdentificationD)(nil),                       // 37: meat.v1.MeatWorkItemIdentificationD
	(*CreateMeatWorkItemIdentificationRequest)(nil),           // 38: meat.v1.CreateMeatWorkItemIdentificationRequest
	(*CreateMeatWorkItemIdentificationResponse)(nil),          // 39: meat.v1.CreateMeatWorkItemIdentificationResponse
	(*v1.CrUpdUser)(nil),                                      // 40: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                      // 41: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),                             // 42: google.protobuf.Timestamp
}
var file_meat_v1_meat_proto_depIdxs = []int32{
	0,  // 0: meat.v1.CreateMeatAcidityResponse.meat_acidity:type_name -> meat.v1.MeatAcidity
	4,  // 1: meat.v1.MeatActivityHistory.meat_activity_history_d:type_name -> meat.v1.MeatActivityHistoryD
	5,  // 2: meat.v1.MeatActivityHistory.meat_activity_history_t:type_name -> meat.v1.MeatActivityHistoryT
	40, // 3: meat.v1.MeatActivityHistory.cr_upd_user:type_name -> common.v1.CrUpdUser
	41, // 4: meat.v1.MeatActivityHistory.cr_upd_time:type_name -> common.v1.CrUpdTime
	42, // 5: meat.v1.MeatActivityHistoryT.date_of_arrival:type_name -> google.protobuf.Timestamp
	42, // 6: meat.v1.MeatActivityHistoryT.date_of_departure:type_name -> google.protobuf.Timestamp
	3,  // 7: meat.v1.CreateMeatActivityHistoryResponse.meat_activity_history:type_name -> meat.v1.MeatActivityHistory
	9,  // 8: meat.v1.MeatBreedingDetail.meat_breeding_detail_d:type_name -> meat.v1.MeatBreedingDetailD
	10, // 9: meat.v1.MeatBreedingDetail.meat_breeding_detail_t:type_name -> meat.v1.MeatBreedingDetailT
	40, // 10: meat.v1.MeatBreedingDetail.cr_upd_user:type_name -> common.v1.CrUpdUser
	41, // 11: meat.v1.MeatBreedingDetail.cr_upd_time:type_name -> common.v1.CrUpdTime
	42, // 12: meat.v1.MeatBreedingDetailT.date_of_birth:type_name -> google.protobuf.Timestamp
	8,  // 13: meat.v1.CreateMeatBreedingDetailResponse.meat_breeding_detail:type_name -> meat.v1.MeatBreedingDetail
	13, // 14: meat.v1.CreateMeatCuttingDetailResponse.meat_cutting_detail:type_name -> meat.v1.MeatCuttingDetail
	16, // 15: meat.v1.CreateMeatDespatchAdviceLineItemExtensionResponse.meat_despatch_advice_line_item_extension:type_name -> meat.v1.MeatDespatchAdviceLineItemExtension
	19, // 16: meat.v1.CreateMeatFatteningDetailResponse.meat_fattening_detail:type_name -> meat.v1.MeatFatteningDetail
	22, // 17: meat.v1.CreateMeatMincingDetailResponse.meat_mincing_detail:type_name -> meat.v1.MeatMincingDetail
	25, // 18: meat.v1.CreateMeatProcessingPartyResponse.meat_processing_party:type_name -> meat.v1.MeatProcessingParty
	29, // 19: meat.v1.MeatSlaughteringDetail.meat_slaughtering_detail_d:type_name -> meat.v1.MeatSlaughteringDetailD
	30, // 20: meat.v1.MeatSlaughteringDetail.meat_slaughtering_detail_t:type_name -> meat.v1.MeatSlaughteringDetailT
	40, // 21: meat.v1.MeatSlaughteringDetail.cr_upd_user:type_name -> common.v1.CrUpdUser
	41, // 22: meat.v1.MeatSlaughteringDetail.cr_upd_time:type_name -> common.v1.CrUpdTime
	42, // 23: meat.v1.MeatSlaughteringDetailT.date_of_slaughtering:type_name -> google.protobuf.Timestamp
	42, // 24: meat.v1.MeatSlaughteringDetailT.optimum_maturation_date:type_name -> google.protobuf.Timestamp
	28, // 25: meat.v1.CreateMeatSlaughteringDetailResponse.meat_slaughtering_detail:type_name -> meat.v1.MeatSlaughteringDetail
	33, // 26: meat.v1.CreateMeatTestResponse.meat_test:type_name -> meat.v1.MeatTest
	37, // 27: meat.v1.MeatWorkItemIdentification.meat_work_item_identification_d:type_name -> meat.v1.MeatWorkItemIdentificationD
	40, // 28: meat.v1.MeatWorkItemIdentification.cr_upd_user:type_name -> common.v1.CrUpdUser
	41, // 29: meat.v1.MeatWorkItemIdentification.cr_upd_time:type_name -> common.v1.CrUpdTime
	36, // 30: meat.v1.CreateMeatWorkItemIdentificationResponse.meat_work_item_identification:type_name -> meat.v1.MeatWorkItemIdentification
	1,  // 31: meat.v1.MeatService.CreateMeatAcidity:input_type -> meat.v1.CreateMeatAcidityRequest
	6,  // 32: meat.v1.MeatService.CreateMeatActivityHistory:input_type -> meat.v1.CreateMeatActivityHistoryRequest
	11, // 33: meat.v1.MeatService.CreateMeatBreedingDetail:input_type -> meat.v1.CreateMeatBreedingDetailRequest
	14, // 34: meat.v1.MeatService.CreateMeatCuttingDetail:input_type -> meat.v1.CreateMeatCuttingDetailRequest
	17, // 35: meat.v1.MeatService.CreateMeatDespatchAdviceLineItemExtension:input_type -> meat.v1.CreateMeatDespatchAdviceLineItemExtensionRequest
	20, // 36: meat.v1.MeatService.CreateMeatFatteningDetail:input_type -> meat.v1.CreateMeatFatteningDetailRequest
	23, // 37: meat.v1.MeatService.CreateMeatMincingDetail:input_type -> meat.v1.CreateMeatMincingDetailRequest
	26, // 38: meat.v1.MeatService.CreateMeatProcessingParty:input_type -> meat.v1.CreateMeatProcessingPartyRequest
	31, // 39: meat.v1.MeatService.CreateMeatSlaughteringDetail:input_type -> meat.v1.CreateMeatSlaughteringDetailRequest
	34, // 40: meat.v1.MeatService.CreateMeatTest:input_type -> meat.v1.CreateMeatTestRequest
	38, // 41: meat.v1.MeatService.CreateMeatWorkItemIdentification:input_type -> meat.v1.CreateMeatWorkItemIdentificationRequest
	2,  // 42: meat.v1.MeatService.CreateMeatAcidity:output_type -> meat.v1.CreateMeatAcidityResponse
	7,  // 43: meat.v1.MeatService.CreateMeatActivityHistory:output_type -> meat.v1.CreateMeatActivityHistoryResponse
	12, // 44: meat.v1.MeatService.CreateMeatBreedingDetail:output_type -> meat.v1.CreateMeatBreedingDetailResponse
	15, // 45: meat.v1.MeatService.CreateMeatCuttingDetail:output_type -> meat.v1.CreateMeatCuttingDetailResponse
	18, // 46: meat.v1.MeatService.CreateMeatDespatchAdviceLineItemExtension:output_type -> meat.v1.CreateMeatDespatchAdviceLineItemExtensionResponse
	21, // 47: meat.v1.MeatService.CreateMeatFatteningDetail:output_type -> meat.v1.CreateMeatFatteningDetailResponse
	24, // 48: meat.v1.MeatService.CreateMeatMincingDetail:output_type -> meat.v1.CreateMeatMincingDetailResponse
	27, // 49: meat.v1.MeatService.CreateMeatProcessingParty:output_type -> meat.v1.CreateMeatProcessingPartyResponse
	32, // 50: meat.v1.MeatService.CreateMeatSlaughteringDetail:output_type -> meat.v1.CreateMeatSlaughteringDetailResponse
	35, // 51: meat.v1.MeatService.CreateMeatTest:output_type -> meat.v1.CreateMeatTestResponse
	39, // 52: meat.v1.MeatService.CreateMeatWorkItemIdentification:output_type -> meat.v1.CreateMeatWorkItemIdentificationResponse
	42, // [42:53] is the sub-list for method output_type
	31, // [31:42] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_meat_v1_meat_proto_init() }
func file_meat_v1_meat_proto_init() {
	if File_meat_v1_meat_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meat_v1_meat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meat_v1_meat_proto_goTypes,
		DependencyIndexes: file_meat_v1_meat_proto_depIdxs,
		MessageInfos:      file_meat_v1_meat_proto_msgTypes,
	}.Build()
	File_meat_v1_meat_proto = out.File
	file_meat_v1_meat_proto_rawDesc = nil
	file_meat_v1_meat_proto_goTypes = nil
	file_meat_v1_meat_proto_depIdxs = nil
}
