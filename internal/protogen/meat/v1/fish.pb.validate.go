// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: meat/v1/fish.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FishDespatchAdviceLineItemExtension with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FishDespatchAdviceLineItemExtension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FishDespatchAdviceLineItemExtension
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FishDespatchAdviceLineItemExtensionMultiError, or nil if none found.
func (m *FishDespatchAdviceLineItemExtension) ValidateAll() error {
	return m.validate(true)
}

func (m *FishDespatchAdviceLineItemExtension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFishDespatchAdviceLineItemExtensionD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionValidationError{
					field:  "FishDespatchAdviceLineItemExtensionD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionValidationError{
					field:  "FishDespatchAdviceLineItemExtensionD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFishDespatchAdviceLineItemExtensionD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishDespatchAdviceLineItemExtensionValidationError{
				field:  "FishDespatchAdviceLineItemExtensionD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFishDespatchAdviceLineItemExtensionT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionValidationError{
					field:  "FishDespatchAdviceLineItemExtensionT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionValidationError{
					field:  "FishDespatchAdviceLineItemExtensionT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFishDespatchAdviceLineItemExtensionT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishDespatchAdviceLineItemExtensionValidationError{
				field:  "FishDespatchAdviceLineItemExtensionT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishDespatchAdviceLineItemExtensionValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishDespatchAdviceLineItemExtensionValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FishDespatchAdviceLineItemExtensionMultiError(errors)
	}

	return nil
}

// FishDespatchAdviceLineItemExtensionMultiError is an error wrapping multiple
// validation errors returned by
// FishDespatchAdviceLineItemExtension.ValidateAll() if the designated
// constraints aren't met.
type FishDespatchAdviceLineItemExtensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FishDespatchAdviceLineItemExtensionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FishDespatchAdviceLineItemExtensionMultiError) AllErrors() []error { return m }

// FishDespatchAdviceLineItemExtensionValidationError is the validation error
// returned by FishDespatchAdviceLineItemExtension.Validate if the designated
// constraints aren't met.
type FishDespatchAdviceLineItemExtensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FishDespatchAdviceLineItemExtensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FishDespatchAdviceLineItemExtensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FishDespatchAdviceLineItemExtensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FishDespatchAdviceLineItemExtensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FishDespatchAdviceLineItemExtensionValidationError) ErrorName() string {
	return "FishDespatchAdviceLineItemExtensionValidationError"
}

// Error satisfies the builtin error interface
func (e FishDespatchAdviceLineItemExtensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFishDespatchAdviceLineItemExtension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FishDespatchAdviceLineItemExtensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FishDespatchAdviceLineItemExtensionValidationError{}

// Validate checks the field values on FishDespatchAdviceLineItemExtensionD
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FishDespatchAdviceLineItemExtensionD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FishDespatchAdviceLineItemExtensionD
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FishDespatchAdviceLineItemExtensionDMultiError, or nil if none found.
func (m *FishDespatchAdviceLineItemExtensionD) ValidateAll() error {
	return m.validate(true)
}

func (m *FishDespatchAdviceLineItemExtensionD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for AquaticSpeciesCode

	// no validation rules for AquaticSpeciesName

	// no validation rules for FishPresentationCode

	// no validation rules for FpCodeListAgencyName

	// no validation rules for FpCodeListVersion

	// no validation rules for FpCodeListName

	// no validation rules for FishSizeCode

	// no validation rules for FsCodeListAgencyName

	// no validation rules for FsCodeListVersion

	// no validation rules for FsCodeListName

	// no validation rules for QualityGradeCode

	// no validation rules for QgCodeListAgencyName

	// no validation rules for QgCodeListVersion

	// no validation rules for QgCodeListName

	// no validation rules for StorageStateCode

	// no validation rules for AquaCultureProductionUnit

	// no validation rules for FishingVessel

	// no validation rules for PlaceOfSlaughter

	// no validation rules for PortOfLanding

	// no validation rules for FishCatchOrProductionDateId

	// no validation rules for FishCatchOrProductionId

	if len(errors) > 0 {
		return FishDespatchAdviceLineItemExtensionDMultiError(errors)
	}

	return nil
}

// FishDespatchAdviceLineItemExtensionDMultiError is an error wrapping multiple
// validation errors returned by
// FishDespatchAdviceLineItemExtensionD.ValidateAll() if the designated
// constraints aren't met.
type FishDespatchAdviceLineItemExtensionDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FishDespatchAdviceLineItemExtensionDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FishDespatchAdviceLineItemExtensionDMultiError) AllErrors() []error { return m }

// FishDespatchAdviceLineItemExtensionDValidationError is the validation error
// returned by FishDespatchAdviceLineItemExtensionD.Validate if the designated
// constraints aren't met.
type FishDespatchAdviceLineItemExtensionDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FishDespatchAdviceLineItemExtensionDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FishDespatchAdviceLineItemExtensionDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FishDespatchAdviceLineItemExtensionDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FishDespatchAdviceLineItemExtensionDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FishDespatchAdviceLineItemExtensionDValidationError) ErrorName() string {
	return "FishDespatchAdviceLineItemExtensionDValidationError"
}

// Error satisfies the builtin error interface
func (e FishDespatchAdviceLineItemExtensionDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFishDespatchAdviceLineItemExtensionD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FishDespatchAdviceLineItemExtensionDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FishDespatchAdviceLineItemExtensionDValidationError{}

// Validate checks the field values on FishDespatchAdviceLineItemExtensionT
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FishDespatchAdviceLineItemExtensionT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FishDespatchAdviceLineItemExtensionT
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FishDespatchAdviceLineItemExtensionTMultiError, or nil if none found.
func (m *FishDespatchAdviceLineItemExtensionT) ValidateAll() error {
	return m.validate(true)
}

func (m *FishDespatchAdviceLineItemExtensionT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateOfLanding()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionTValidationError{
					field:  "DateOfLanding",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionTValidationError{
					field:  "DateOfLanding",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfLanding()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishDespatchAdviceLineItemExtensionTValidationError{
				field:  "DateOfLanding",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateOfSlaughter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionTValidationError{
					field:  "DateOfSlaughter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishDespatchAdviceLineItemExtensionTValidationError{
					field:  "DateOfSlaughter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfSlaughter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishDespatchAdviceLineItemExtensionTValidationError{
				field:  "DateOfSlaughter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FishDespatchAdviceLineItemExtensionTMultiError(errors)
	}

	return nil
}

// FishDespatchAdviceLineItemExtensionTMultiError is an error wrapping multiple
// validation errors returned by
// FishDespatchAdviceLineItemExtensionT.ValidateAll() if the designated
// constraints aren't met.
type FishDespatchAdviceLineItemExtensionTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FishDespatchAdviceLineItemExtensionTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FishDespatchAdviceLineItemExtensionTMultiError) AllErrors() []error { return m }

// FishDespatchAdviceLineItemExtensionTValidationError is the validation error
// returned by FishDespatchAdviceLineItemExtensionT.Validate if the designated
// constraints aren't met.
type FishDespatchAdviceLineItemExtensionTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FishDespatchAdviceLineItemExtensionTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FishDespatchAdviceLineItemExtensionTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FishDespatchAdviceLineItemExtensionTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FishDespatchAdviceLineItemExtensionTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FishDespatchAdviceLineItemExtensionTValidationError) ErrorName() string {
	return "FishDespatchAdviceLineItemExtensionTValidationError"
}

// Error satisfies the builtin error interface
func (e FishDespatchAdviceLineItemExtensionTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFishDespatchAdviceLineItemExtensionT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FishDespatchAdviceLineItemExtensionTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FishDespatchAdviceLineItemExtensionTValidationError{}

// Validate checks the field values on
// CreateFishDespatchAdviceLineItemExtensionRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateFishDespatchAdviceLineItemExtensionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateFishDespatchAdviceLineItemExtensionRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateFishDespatchAdviceLineItemExtensionRequestMultiError, or nil if none found.
func (m *CreateFishDespatchAdviceLineItemExtensionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFishDespatchAdviceLineItemExtensionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AquaticSpeciesCode

	// no validation rules for AquaticSpeciesName

	// no validation rules for FishPresentationCode

	// no validation rules for FpCodeListAgencyName

	// no validation rules for FpCodeListVersion

	// no validation rules for FpCodeListName

	// no validation rules for FishSizeCode

	// no validation rules for FsCodeListAgencyName

	// no validation rules for FsCodeListVersion

	// no validation rules for FsCodeListName

	// no validation rules for QualityGradeCode

	// no validation rules for QgCodeListAgencyName

	// no validation rules for QgCodeListVersion

	// no validation rules for QgCodeListName

	// no validation rules for StorageStateCode

	// no validation rules for AquaCultureProductionUnit

	// no validation rules for DateOfLanding

	// no validation rules for DateOfSlaughter

	// no validation rules for FishingVessel

	// no validation rules for PlaceOfSlaughter

	// no validation rules for PortOfLanding

	// no validation rules for FishCatchOrProductionDateId

	// no validation rules for FishCatchOrProductionId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateFishDespatchAdviceLineItemExtensionRequestMultiError(errors)
	}

	return nil
}

// CreateFishDespatchAdviceLineItemExtensionRequestMultiError is an error
// wrapping multiple validation errors returned by
// CreateFishDespatchAdviceLineItemExtensionRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateFishDespatchAdviceLineItemExtensionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFishDespatchAdviceLineItemExtensionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFishDespatchAdviceLineItemExtensionRequestMultiError) AllErrors() []error { return m }

// CreateFishDespatchAdviceLineItemExtensionRequestValidationError is the
// validation error returned by
// CreateFishDespatchAdviceLineItemExtensionRequest.Validate if the designated
// constraints aren't met.
type CreateFishDespatchAdviceLineItemExtensionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFishDespatchAdviceLineItemExtensionRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateFishDespatchAdviceLineItemExtensionRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateFishDespatchAdviceLineItemExtensionRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateFishDespatchAdviceLineItemExtensionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFishDespatchAdviceLineItemExtensionRequestValidationError) ErrorName() string {
	return "CreateFishDespatchAdviceLineItemExtensionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFishDespatchAdviceLineItemExtensionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFishDespatchAdviceLineItemExtensionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFishDespatchAdviceLineItemExtensionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFishDespatchAdviceLineItemExtensionRequestValidationError{}

// Validate checks the field values on
// CreateFishDespatchAdviceLineItemExtensionResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateFishDespatchAdviceLineItemExtensionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateFishDespatchAdviceLineItemExtensionResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateFishDespatchAdviceLineItemExtensionResponseMultiError, or nil if none found.
func (m *CreateFishDespatchAdviceLineItemExtensionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFishDespatchAdviceLineItemExtensionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFishDespatchAdviceLineItemExtension()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFishDespatchAdviceLineItemExtensionResponseValidationError{
					field:  "FishDespatchAdviceLineItemExtension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFishDespatchAdviceLineItemExtensionResponseValidationError{
					field:  "FishDespatchAdviceLineItemExtension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFishDespatchAdviceLineItemExtension()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFishDespatchAdviceLineItemExtensionResponseValidationError{
				field:  "FishDespatchAdviceLineItemExtension",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFishDespatchAdviceLineItemExtensionResponseMultiError(errors)
	}

	return nil
}

// CreateFishDespatchAdviceLineItemExtensionResponseMultiError is an error
// wrapping multiple validation errors returned by
// CreateFishDespatchAdviceLineItemExtensionResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateFishDespatchAdviceLineItemExtensionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFishDespatchAdviceLineItemExtensionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFishDespatchAdviceLineItemExtensionResponseMultiError) AllErrors() []error { return m }

// CreateFishDespatchAdviceLineItemExtensionResponseValidationError is the
// validation error returned by
// CreateFishDespatchAdviceLineItemExtensionResponse.Validate if the
// designated constraints aren't met.
type CreateFishDespatchAdviceLineItemExtensionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFishDespatchAdviceLineItemExtensionResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateFishDespatchAdviceLineItemExtensionResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateFishDespatchAdviceLineItemExtensionResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateFishDespatchAdviceLineItemExtensionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFishDespatchAdviceLineItemExtensionResponseValidationError) ErrorName() string {
	return "CreateFishDespatchAdviceLineItemExtensionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFishDespatchAdviceLineItemExtensionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFishDespatchAdviceLineItemExtensionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFishDespatchAdviceLineItemExtensionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFishDespatchAdviceLineItemExtensionResponseValidationError{}

// Validate checks the field values on FishCatchOrProduction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FishCatchOrProduction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FishCatchOrProduction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FishCatchOrProductionMultiError, or nil if none found.
func (m *FishCatchOrProduction) ValidateAll() error {
	return m.validate(true)
}

func (m *FishCatchOrProduction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CatchArea

	// no validation rules for FishingGearTypeCode

	// no validation rules for ProductionMethodForFishAndSeafoodCode

	if len(errors) > 0 {
		return FishCatchOrProductionMultiError(errors)
	}

	return nil
}

// FishCatchOrProductionMultiError is an error wrapping multiple validation
// errors returned by FishCatchOrProduction.ValidateAll() if the designated
// constraints aren't met.
type FishCatchOrProductionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FishCatchOrProductionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FishCatchOrProductionMultiError) AllErrors() []error { return m }

// FishCatchOrProductionValidationError is the validation error returned by
// FishCatchOrProduction.Validate if the designated constraints aren't met.
type FishCatchOrProductionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FishCatchOrProductionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FishCatchOrProductionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FishCatchOrProductionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FishCatchOrProductionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FishCatchOrProductionValidationError) ErrorName() string {
	return "FishCatchOrProductionValidationError"
}

// Error satisfies the builtin error interface
func (e FishCatchOrProductionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFishCatchOrProduction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FishCatchOrProductionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FishCatchOrProductionValidationError{}

// Validate checks the field values on CreateFishCatchOrProductionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateFishCatchOrProductionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFishCatchOrProductionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateFishCatchOrProductionRequestMultiError, or nil if none found.
func (m *CreateFishCatchOrProductionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFishCatchOrProductionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CatchArea

	// no validation rules for FishingGearTypeCode

	// no validation rules for ProductionMethodForFishAndSeafoodCode

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateFishCatchOrProductionRequestMultiError(errors)
	}

	return nil
}

// CreateFishCatchOrProductionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateFishCatchOrProductionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFishCatchOrProductionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFishCatchOrProductionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFishCatchOrProductionRequestMultiError) AllErrors() []error { return m }

// CreateFishCatchOrProductionRequestValidationError is the validation error
// returned by CreateFishCatchOrProductionRequest.Validate if the designated
// constraints aren't met.
type CreateFishCatchOrProductionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFishCatchOrProductionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFishCatchOrProductionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFishCatchOrProductionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFishCatchOrProductionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFishCatchOrProductionRequestValidationError) ErrorName() string {
	return "CreateFishCatchOrProductionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFishCatchOrProductionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFishCatchOrProductionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFishCatchOrProductionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFishCatchOrProductionRequestValidationError{}

// Validate checks the field values on CreateFishCatchOrProductionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateFishCatchOrProductionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFishCatchOrProductionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateFishCatchOrProductionResponseMultiError, or nil if none found.
func (m *CreateFishCatchOrProductionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFishCatchOrProductionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFishCatchOrProduction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFishCatchOrProductionResponseValidationError{
					field:  "FishCatchOrProduction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFishCatchOrProductionResponseValidationError{
					field:  "FishCatchOrProduction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFishCatchOrProduction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFishCatchOrProductionResponseValidationError{
				field:  "FishCatchOrProduction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFishCatchOrProductionResponseMultiError(errors)
	}

	return nil
}

// CreateFishCatchOrProductionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateFishCatchOrProductionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateFishCatchOrProductionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFishCatchOrProductionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFishCatchOrProductionResponseMultiError) AllErrors() []error { return m }

// CreateFishCatchOrProductionResponseValidationError is the validation error
// returned by CreateFishCatchOrProductionResponse.Validate if the designated
// constraints aren't met.
type CreateFishCatchOrProductionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFishCatchOrProductionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFishCatchOrProductionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFishCatchOrProductionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFishCatchOrProductionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFishCatchOrProductionResponseValidationError) ErrorName() string {
	return "CreateFishCatchOrProductionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFishCatchOrProductionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFishCatchOrProductionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFishCatchOrProductionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFishCatchOrProductionResponseValidationError{}

// Validate checks the field values on FishCatchOrProductionDate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FishCatchOrProductionDate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FishCatchOrProductionDate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FishCatchOrProductionDateMultiError, or nil if none found.
func (m *FishCatchOrProductionDate) ValidateAll() error {
	return m.validate(true)
}

func (m *FishCatchOrProductionDate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFishCatchOrProductionDateD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishCatchOrProductionDateValidationError{
					field:  "FishCatchOrProductionDateD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishCatchOrProductionDateValidationError{
					field:  "FishCatchOrProductionDateD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFishCatchOrProductionDateD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishCatchOrProductionDateValidationError{
				field:  "FishCatchOrProductionDateD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFishCatchOrProductionDateT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishCatchOrProductionDateValidationError{
					field:  "FishCatchOrProductionDateT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishCatchOrProductionDateValidationError{
					field:  "FishCatchOrProductionDateT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFishCatchOrProductionDateT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishCatchOrProductionDateValidationError{
				field:  "FishCatchOrProductionDateT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FishCatchOrProductionDateMultiError(errors)
	}

	return nil
}

// FishCatchOrProductionDateMultiError is an error wrapping multiple validation
// errors returned by FishCatchOrProductionDate.ValidateAll() if the
// designated constraints aren't met.
type FishCatchOrProductionDateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FishCatchOrProductionDateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FishCatchOrProductionDateMultiError) AllErrors() []error { return m }

// FishCatchOrProductionDateValidationError is the validation error returned by
// FishCatchOrProductionDate.Validate if the designated constraints aren't met.
type FishCatchOrProductionDateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FishCatchOrProductionDateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FishCatchOrProductionDateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FishCatchOrProductionDateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FishCatchOrProductionDateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FishCatchOrProductionDateValidationError) ErrorName() string {
	return "FishCatchOrProductionDateValidationError"
}

// Error satisfies the builtin error interface
func (e FishCatchOrProductionDateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFishCatchOrProductionDate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FishCatchOrProductionDateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FishCatchOrProductionDateValidationError{}

// Validate checks the field values on FishCatchOrProductionDateD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FishCatchOrProductionDateD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FishCatchOrProductionDateD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FishCatchOrProductionDateDMultiError, or nil if none found.
func (m *FishCatchOrProductionDateD) ValidateAll() error {
	return m.validate(true)
}

func (m *FishCatchOrProductionDateD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return FishCatchOrProductionDateDMultiError(errors)
	}

	return nil
}

// FishCatchOrProductionDateDMultiError is an error wrapping multiple
// validation errors returned by FishCatchOrProductionDateD.ValidateAll() if
// the designated constraints aren't met.
type FishCatchOrProductionDateDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FishCatchOrProductionDateDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FishCatchOrProductionDateDMultiError) AllErrors() []error { return m }

// FishCatchOrProductionDateDValidationError is the validation error returned
// by FishCatchOrProductionDateD.Validate if the designated constraints aren't met.
type FishCatchOrProductionDateDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FishCatchOrProductionDateDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FishCatchOrProductionDateDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FishCatchOrProductionDateDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FishCatchOrProductionDateDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FishCatchOrProductionDateDValidationError) ErrorName() string {
	return "FishCatchOrProductionDateDValidationError"
}

// Error satisfies the builtin error interface
func (e FishCatchOrProductionDateDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFishCatchOrProductionDateD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FishCatchOrProductionDateDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FishCatchOrProductionDateDValidationError{}

// Validate checks the field values on FishCatchOrProductionDateT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FishCatchOrProductionDateT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FishCatchOrProductionDateT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FishCatchOrProductionDateTMultiError, or nil if none found.
func (m *FishCatchOrProductionDateT) ValidateAll() error {
	return m.validate(true)
}

func (m *FishCatchOrProductionDateT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCatchEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishCatchOrProductionDateTValidationError{
					field:  "CatchEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishCatchOrProductionDateTValidationError{
					field:  "CatchEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCatchEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishCatchOrProductionDateTValidationError{
				field:  "CatchEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCatchStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishCatchOrProductionDateTValidationError{
					field:  "CatchStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishCatchOrProductionDateTValidationError{
					field:  "CatchStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCatchStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishCatchOrProductionDateTValidationError{
				field:  "CatchStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFirstFreezeDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishCatchOrProductionDateTValidationError{
					field:  "FirstFreezeDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishCatchOrProductionDateTValidationError{
					field:  "FirstFreezeDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstFreezeDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishCatchOrProductionDateTValidationError{
				field:  "FirstFreezeDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCatchDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FishCatchOrProductionDateTValidationError{
					field:  "CatchDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FishCatchOrProductionDateTValidationError{
					field:  "CatchDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCatchDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FishCatchOrProductionDateTValidationError{
				field:  "CatchDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FishCatchOrProductionDateTMultiError(errors)
	}

	return nil
}

// FishCatchOrProductionDateTMultiError is an error wrapping multiple
// validation errors returned by FishCatchOrProductionDateT.ValidateAll() if
// the designated constraints aren't met.
type FishCatchOrProductionDateTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FishCatchOrProductionDateTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FishCatchOrProductionDateTMultiError) AllErrors() []error { return m }

// FishCatchOrProductionDateTValidationError is the validation error returned
// by FishCatchOrProductionDateT.Validate if the designated constraints aren't met.
type FishCatchOrProductionDateTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FishCatchOrProductionDateTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FishCatchOrProductionDateTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FishCatchOrProductionDateTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FishCatchOrProductionDateTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FishCatchOrProductionDateTValidationError) ErrorName() string {
	return "FishCatchOrProductionDateTValidationError"
}

// Error satisfies the builtin error interface
func (e FishCatchOrProductionDateTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFishCatchOrProductionDateT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FishCatchOrProductionDateTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FishCatchOrProductionDateTValidationError{}

// Validate checks the field values on CreateFishCatchOrProductionDateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateFishCatchOrProductionDateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateFishCatchOrProductionDateRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateFishCatchOrProductionDateRequestMultiError, or nil if none found.
func (m *CreateFishCatchOrProductionDateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFishCatchOrProductionDateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CatchEndDate

	// no validation rules for CatchStartDate

	// no validation rules for FirstFreezeDate

	// no validation rules for CatchDateTime

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateFishCatchOrProductionDateRequestMultiError(errors)
	}

	return nil
}

// CreateFishCatchOrProductionDateRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateFishCatchOrProductionDateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFishCatchOrProductionDateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFishCatchOrProductionDateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFishCatchOrProductionDateRequestMultiError) AllErrors() []error { return m }

// CreateFishCatchOrProductionDateRequestValidationError is the validation
// error returned by CreateFishCatchOrProductionDateRequest.Validate if the
// designated constraints aren't met.
type CreateFishCatchOrProductionDateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFishCatchOrProductionDateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFishCatchOrProductionDateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFishCatchOrProductionDateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFishCatchOrProductionDateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFishCatchOrProductionDateRequestValidationError) ErrorName() string {
	return "CreateFishCatchOrProductionDateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFishCatchOrProductionDateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFishCatchOrProductionDateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFishCatchOrProductionDateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFishCatchOrProductionDateRequestValidationError{}

// Validate checks the field values on CreateFishCatchOrProductionDateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateFishCatchOrProductionDateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateFishCatchOrProductionDateResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateFishCatchOrProductionDateResponseMultiError, or nil if none found.
func (m *CreateFishCatchOrProductionDateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFishCatchOrProductionDateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFishCatchOrProductionDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFishCatchOrProductionDateResponseValidationError{
					field:  "FishCatchOrProductionDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFishCatchOrProductionDateResponseValidationError{
					field:  "FishCatchOrProductionDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFishCatchOrProductionDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFishCatchOrProductionDateResponseValidationError{
				field:  "FishCatchOrProductionDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFishCatchOrProductionDateResponseMultiError(errors)
	}

	return nil
}

// CreateFishCatchOrProductionDateResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateFishCatchOrProductionDateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateFishCatchOrProductionDateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFishCatchOrProductionDateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFishCatchOrProductionDateResponseMultiError) AllErrors() []error { return m }

// CreateFishCatchOrProductionDateResponseValidationError is the validation
// error returned by CreateFishCatchOrProductionDateResponse.Validate if the
// designated constraints aren't met.
type CreateFishCatchOrProductionDateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFishCatchOrProductionDateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFishCatchOrProductionDateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFishCatchOrProductionDateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFishCatchOrProductionDateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFishCatchOrProductionDateResponseValidationError) ErrorName() string {
	return "CreateFishCatchOrProductionDateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFishCatchOrProductionDateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFishCatchOrProductionDateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFishCatchOrProductionDateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFishCatchOrProductionDateResponseValidationError{}
