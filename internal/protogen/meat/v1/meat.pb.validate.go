// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: meat/v1/meat.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MeatAcidity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeatAcidity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatAcidity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeatAcidityMultiError, or
// nil if none found.
func (m *MeatAcidity) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatAcidity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for AcidityMeasurementTime

	// no validation rules for AcidityOfMeat

	// no validation rules for MeatSlaughteringDetailId

	if len(errors) > 0 {
		return MeatAcidityMultiError(errors)
	}

	return nil
}

// MeatAcidityMultiError is an error wrapping multiple validation errors
// returned by MeatAcidity.ValidateAll() if the designated constraints aren't met.
type MeatAcidityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatAcidityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatAcidityMultiError) AllErrors() []error { return m }

// MeatAcidityValidationError is the validation error returned by
// MeatAcidity.Validate if the designated constraints aren't met.
type MeatAcidityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatAcidityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatAcidityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatAcidityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatAcidityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatAcidityValidationError) ErrorName() string { return "MeatAcidityValidationError" }

// Error satisfies the builtin error interface
func (e MeatAcidityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatAcidity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatAcidityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatAcidityValidationError{}

// Validate checks the field values on CreateMeatAcidityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMeatAcidityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatAcidityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMeatAcidityRequestMultiError, or nil if none found.
func (m *CreateMeatAcidityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatAcidityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AcidityMeasurementTime

	// no validation rules for AcidityOfMeat

	// no validation rules for MeatSlaughteringDetailId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatAcidityRequestMultiError(errors)
	}

	return nil
}

// CreateMeatAcidityRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMeatAcidityRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatAcidityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatAcidityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatAcidityRequestMultiError) AllErrors() []error { return m }

// CreateMeatAcidityRequestValidationError is the validation error returned by
// CreateMeatAcidityRequest.Validate if the designated constraints aren't met.
type CreateMeatAcidityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatAcidityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatAcidityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatAcidityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatAcidityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatAcidityRequestValidationError) ErrorName() string {
	return "CreateMeatAcidityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatAcidityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatAcidityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatAcidityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatAcidityRequestValidationError{}

// Validate checks the field values on CreateMeatAcidityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMeatAcidityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatAcidityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMeatAcidityResponseMultiError, or nil if none found.
func (m *CreateMeatAcidityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatAcidityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatAcidity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatAcidityResponseValidationError{
					field:  "MeatAcidity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatAcidityResponseValidationError{
					field:  "MeatAcidity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatAcidity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatAcidityResponseValidationError{
				field:  "MeatAcidity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatAcidityResponseMultiError(errors)
	}

	return nil
}

// CreateMeatAcidityResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMeatAcidityResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateMeatAcidityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatAcidityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatAcidityResponseMultiError) AllErrors() []error { return m }

// CreateMeatAcidityResponseValidationError is the validation error returned by
// CreateMeatAcidityResponse.Validate if the designated constraints aren't met.
type CreateMeatAcidityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatAcidityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatAcidityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatAcidityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatAcidityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatAcidityResponseValidationError) ErrorName() string {
	return "CreateMeatAcidityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatAcidityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatAcidityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatAcidityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatAcidityResponseValidationError{}

// Validate checks the field values on MeatActivityHistory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatActivityHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatActivityHistory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatActivityHistoryMultiError, or nil if none found.
func (m *MeatActivityHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatActivityHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatActivityHistoryD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatActivityHistoryValidationError{
					field:  "MeatActivityHistoryD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatActivityHistoryValidationError{
					field:  "MeatActivityHistoryD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatActivityHistoryD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatActivityHistoryValidationError{
				field:  "MeatActivityHistoryD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeatActivityHistoryT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatActivityHistoryValidationError{
					field:  "MeatActivityHistoryT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatActivityHistoryValidationError{
					field:  "MeatActivityHistoryT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatActivityHistoryT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatActivityHistoryValidationError{
				field:  "MeatActivityHistoryT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatActivityHistoryValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatActivityHistoryValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatActivityHistoryValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatActivityHistoryValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatActivityHistoryValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatActivityHistoryValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeatActivityHistoryMultiError(errors)
	}

	return nil
}

// MeatActivityHistoryMultiError is an error wrapping multiple validation
// errors returned by MeatActivityHistory.ValidateAll() if the designated
// constraints aren't met.
type MeatActivityHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatActivityHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatActivityHistoryMultiError) AllErrors() []error { return m }

// MeatActivityHistoryValidationError is the validation error returned by
// MeatActivityHistory.Validate if the designated constraints aren't met.
type MeatActivityHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatActivityHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatActivityHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatActivityHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatActivityHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatActivityHistoryValidationError) ErrorName() string {
	return "MeatActivityHistoryValidationError"
}

// Error satisfies the builtin error interface
func (e MeatActivityHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatActivityHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatActivityHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatActivityHistoryValidationError{}

// Validate checks the field values on MeatActivityHistoryD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatActivityHistoryD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatActivityHistoryD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatActivityHistoryDMultiError, or nil if none found.
func (m *MeatActivityHistoryD) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatActivityHistoryD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ActivitySubStepIdentification

	// no validation rules for CountryOfActivityCode

	// no validation rules for CurrentStepIdentification

	// no validation rules for MeatProcessingActivityTypeCode

	// no validation rules for MovementReasonCode

	// no validation rules for NextStepIdentification

	// no validation rules for MeatMincingDetailId

	// no validation rules for MeatFatteningDetailId

	// no validation rules for MeatCuttingDetailId

	// no validation rules for MeatBreedingDetailId

	// no validation rules for MeatProcessingPartyId

	// no validation rules for MeatWorkItemIdentificationId

	// no validation rules for MeatSlaughteringDetailId

	// no validation rules for MeatDespatchAdviceLineItemExtensionId

	if len(errors) > 0 {
		return MeatActivityHistoryDMultiError(errors)
	}

	return nil
}

// MeatActivityHistoryDMultiError is an error wrapping multiple validation
// errors returned by MeatActivityHistoryD.ValidateAll() if the designated
// constraints aren't met.
type MeatActivityHistoryDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatActivityHistoryDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatActivityHistoryDMultiError) AllErrors() []error { return m }

// MeatActivityHistoryDValidationError is the validation error returned by
// MeatActivityHistoryD.Validate if the designated constraints aren't met.
type MeatActivityHistoryDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatActivityHistoryDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatActivityHistoryDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatActivityHistoryDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatActivityHistoryDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatActivityHistoryDValidationError) ErrorName() string {
	return "MeatActivityHistoryDValidationError"
}

// Error satisfies the builtin error interface
func (e MeatActivityHistoryDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatActivityHistoryD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatActivityHistoryDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatActivityHistoryDValidationError{}

// Validate checks the field values on MeatActivityHistoryT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatActivityHistoryT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatActivityHistoryT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatActivityHistoryTMultiError, or nil if none found.
func (m *MeatActivityHistoryT) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatActivityHistoryT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateOfArrival()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatActivityHistoryTValidationError{
					field:  "DateOfArrival",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatActivityHistoryTValidationError{
					field:  "DateOfArrival",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfArrival()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatActivityHistoryTValidationError{
				field:  "DateOfArrival",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateOfDeparture()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatActivityHistoryTValidationError{
					field:  "DateOfDeparture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatActivityHistoryTValidationError{
					field:  "DateOfDeparture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfDeparture()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatActivityHistoryTValidationError{
				field:  "DateOfDeparture",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeatActivityHistoryTMultiError(errors)
	}

	return nil
}

// MeatActivityHistoryTMultiError is an error wrapping multiple validation
// errors returned by MeatActivityHistoryT.ValidateAll() if the designated
// constraints aren't met.
type MeatActivityHistoryTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatActivityHistoryTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatActivityHistoryTMultiError) AllErrors() []error { return m }

// MeatActivityHistoryTValidationError is the validation error returned by
// MeatActivityHistoryT.Validate if the designated constraints aren't met.
type MeatActivityHistoryTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatActivityHistoryTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatActivityHistoryTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatActivityHistoryTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatActivityHistoryTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatActivityHistoryTValidationError) ErrorName() string {
	return "MeatActivityHistoryTValidationError"
}

// Error satisfies the builtin error interface
func (e MeatActivityHistoryTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatActivityHistoryT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatActivityHistoryTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatActivityHistoryTValidationError{}

// Validate checks the field values on CreateMeatActivityHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateMeatActivityHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatActivityHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMeatActivityHistoryRequestMultiError, or nil if none found.
func (m *CreateMeatActivityHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatActivityHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActivitySubStepIdentification

	// no validation rules for CountryOfActivityCode

	// no validation rules for CurrentStepIdentification

	// no validation rules for DateOfArrival

	// no validation rules for DateOfDeparture

	// no validation rules for MeatProcessingActivityTypeCode

	// no validation rules for MovementReasonCode

	// no validation rules for NextStepIdentification

	// no validation rules for MeatMincingDetailId

	// no validation rules for MeatFatteningDetailId

	// no validation rules for MeatCuttingDetailId

	// no validation rules for MeatBreedingDetailId

	// no validation rules for MeatProcessingPartyId

	// no validation rules for MeatWorkItemIdentificationId

	// no validation rules for MeatSlaughteringDetailId

	// no validation rules for MeatDespatchAdviceLineItemExtensionId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatActivityHistoryRequestMultiError(errors)
	}

	return nil
}

// CreateMeatActivityHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateMeatActivityHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatActivityHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatActivityHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatActivityHistoryRequestMultiError) AllErrors() []error { return m }

// CreateMeatActivityHistoryRequestValidationError is the validation error
// returned by CreateMeatActivityHistoryRequest.Validate if the designated
// constraints aren't met.
type CreateMeatActivityHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatActivityHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatActivityHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatActivityHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatActivityHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatActivityHistoryRequestValidationError) ErrorName() string {
	return "CreateMeatActivityHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatActivityHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatActivityHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatActivityHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatActivityHistoryRequestValidationError{}

// Validate checks the field values on CreateMeatActivityHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateMeatActivityHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatActivityHistoryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateMeatActivityHistoryResponseMultiError, or nil if none found.
func (m *CreateMeatActivityHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatActivityHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatActivityHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatActivityHistoryResponseValidationError{
					field:  "MeatActivityHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatActivityHistoryResponseValidationError{
					field:  "MeatActivityHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatActivityHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatActivityHistoryResponseValidationError{
				field:  "MeatActivityHistory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatActivityHistoryResponseMultiError(errors)
	}

	return nil
}

// CreateMeatActivityHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateMeatActivityHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatActivityHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatActivityHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatActivityHistoryResponseMultiError) AllErrors() []error { return m }

// CreateMeatActivityHistoryResponseValidationError is the validation error
// returned by CreateMeatActivityHistoryResponse.Validate if the designated
// constraints aren't met.
type CreateMeatActivityHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatActivityHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatActivityHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatActivityHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatActivityHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatActivityHistoryResponseValidationError) ErrorName() string {
	return "CreateMeatActivityHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatActivityHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatActivityHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatActivityHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatActivityHistoryResponseValidationError{}

// Validate checks the field values on MeatBreedingDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatBreedingDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatBreedingDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatBreedingDetailMultiError, or nil if none found.
func (m *MeatBreedingDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatBreedingDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatBreedingDetailD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatBreedingDetailValidationError{
					field:  "MeatBreedingDetailD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatBreedingDetailValidationError{
					field:  "MeatBreedingDetailD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatBreedingDetailD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatBreedingDetailValidationError{
				field:  "MeatBreedingDetailD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeatBreedingDetailT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatBreedingDetailValidationError{
					field:  "MeatBreedingDetailT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatBreedingDetailValidationError{
					field:  "MeatBreedingDetailT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatBreedingDetailT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatBreedingDetailValidationError{
				field:  "MeatBreedingDetailT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatBreedingDetailValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatBreedingDetailValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatBreedingDetailValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatBreedingDetailValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatBreedingDetailValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatBreedingDetailValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeatBreedingDetailMultiError(errors)
	}

	return nil
}

// MeatBreedingDetailMultiError is an error wrapping multiple validation errors
// returned by MeatBreedingDetail.ValidateAll() if the designated constraints
// aren't met.
type MeatBreedingDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatBreedingDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatBreedingDetailMultiError) AllErrors() []error { return m }

// MeatBreedingDetailValidationError is the validation error returned by
// MeatBreedingDetail.Validate if the designated constraints aren't met.
type MeatBreedingDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatBreedingDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatBreedingDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatBreedingDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatBreedingDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatBreedingDetailValidationError) ErrorName() string {
	return "MeatBreedingDetailValidationError"
}

// Error satisfies the builtin error interface
func (e MeatBreedingDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatBreedingDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatBreedingDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatBreedingDetailValidationError{}

// Validate checks the field values on MeatBreedingDetailD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatBreedingDetailD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatBreedingDetailD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatBreedingDetailDMultiError, or nil if none found.
func (m *MeatBreedingDetailD) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatBreedingDetailD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for AnimalTypeCode

	// no validation rules for BreedCode

	// no validation rules for BreedOfFatherCode

	// no validation rules for BreedOfMotherCode

	// no validation rules for CrossBreedIndicator

	// no validation rules for FeedingSystemCode

	// no validation rules for GenderCode

	// no validation rules for HousingSystemCode

	// no validation rules for BreedingDNATest

	if len(errors) > 0 {
		return MeatBreedingDetailDMultiError(errors)
	}

	return nil
}

// MeatBreedingDetailDMultiError is an error wrapping multiple validation
// errors returned by MeatBreedingDetailD.ValidateAll() if the designated
// constraints aren't met.
type MeatBreedingDetailDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatBreedingDetailDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatBreedingDetailDMultiError) AllErrors() []error { return m }

// MeatBreedingDetailDValidationError is the validation error returned by
// MeatBreedingDetailD.Validate if the designated constraints aren't met.
type MeatBreedingDetailDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatBreedingDetailDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatBreedingDetailDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatBreedingDetailDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatBreedingDetailDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatBreedingDetailDValidationError) ErrorName() string {
	return "MeatBreedingDetailDValidationError"
}

// Error satisfies the builtin error interface
func (e MeatBreedingDetailDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatBreedingDetailD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatBreedingDetailDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatBreedingDetailDValidationError{}

// Validate checks the field values on MeatBreedingDetailT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatBreedingDetailT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatBreedingDetailT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatBreedingDetailTMultiError, or nil if none found.
func (m *MeatBreedingDetailT) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatBreedingDetailT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateOfBirth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatBreedingDetailTValidationError{
					field:  "DateOfBirth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatBreedingDetailTValidationError{
					field:  "DateOfBirth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfBirth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatBreedingDetailTValidationError{
				field:  "DateOfBirth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeatBreedingDetailTMultiError(errors)
	}

	return nil
}

// MeatBreedingDetailTMultiError is an error wrapping multiple validation
// errors returned by MeatBreedingDetailT.ValidateAll() if the designated
// constraints aren't met.
type MeatBreedingDetailTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatBreedingDetailTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatBreedingDetailTMultiError) AllErrors() []error { return m }

// MeatBreedingDetailTValidationError is the validation error returned by
// MeatBreedingDetailT.Validate if the designated constraints aren't met.
type MeatBreedingDetailTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatBreedingDetailTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatBreedingDetailTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatBreedingDetailTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatBreedingDetailTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatBreedingDetailTValidationError) ErrorName() string {
	return "MeatBreedingDetailTValidationError"
}

// Error satisfies the builtin error interface
func (e MeatBreedingDetailTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatBreedingDetailT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatBreedingDetailTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatBreedingDetailTValidationError{}

// Validate checks the field values on CreateMeatBreedingDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMeatBreedingDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatBreedingDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMeatBreedingDetailRequestMultiError, or nil if none found.
func (m *CreateMeatBreedingDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatBreedingDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AnimalTypeCode

	// no validation rules for BreedCode

	// no validation rules for BreedOfFatherCode

	// no validation rules for BreedOfMotherCode

	// no validation rules for CrossBreedIndicator

	// no validation rules for FeedingSystemCode

	// no validation rules for GenderCode

	// no validation rules for HousingSystemCode

	// no validation rules for BreedingDNATest

	// no validation rules for DateOfBirth

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatBreedingDetailRequestMultiError(errors)
	}

	return nil
}

// CreateMeatBreedingDetailRequestMultiError is an error wrapping multiple
// validation errors returned by CreateMeatBreedingDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateMeatBreedingDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatBreedingDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatBreedingDetailRequestMultiError) AllErrors() []error { return m }

// CreateMeatBreedingDetailRequestValidationError is the validation error
// returned by CreateMeatBreedingDetailRequest.Validate if the designated
// constraints aren't met.
type CreateMeatBreedingDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatBreedingDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatBreedingDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatBreedingDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatBreedingDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatBreedingDetailRequestValidationError) ErrorName() string {
	return "CreateMeatBreedingDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatBreedingDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatBreedingDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatBreedingDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatBreedingDetailRequestValidationError{}

// Validate checks the field values on CreateMeatBreedingDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateMeatBreedingDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatBreedingDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMeatBreedingDetailResponseMultiError, or nil if none found.
func (m *CreateMeatBreedingDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatBreedingDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatBreedingDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatBreedingDetailResponseValidationError{
					field:  "MeatBreedingDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatBreedingDetailResponseValidationError{
					field:  "MeatBreedingDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatBreedingDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatBreedingDetailResponseValidationError{
				field:  "MeatBreedingDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatBreedingDetailResponseMultiError(errors)
	}

	return nil
}

// CreateMeatBreedingDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateMeatBreedingDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatBreedingDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatBreedingDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatBreedingDetailResponseMultiError) AllErrors() []error { return m }

// CreateMeatBreedingDetailResponseValidationError is the validation error
// returned by CreateMeatBreedingDetailResponse.Validate if the designated
// constraints aren't met.
type CreateMeatBreedingDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatBreedingDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatBreedingDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatBreedingDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatBreedingDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatBreedingDetailResponseValidationError) ErrorName() string {
	return "CreateMeatBreedingDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatBreedingDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatBreedingDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatBreedingDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatBreedingDetailResponseValidationError{}

// Validate checks the field values on MeatCuttingDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MeatCuttingDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatCuttingDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatCuttingDetailMultiError, or nil if none found.
func (m *MeatCuttingDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatCuttingDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for MeatProfileCode

	if len(errors) > 0 {
		return MeatCuttingDetailMultiError(errors)
	}

	return nil
}

// MeatCuttingDetailMultiError is an error wrapping multiple validation errors
// returned by MeatCuttingDetail.ValidateAll() if the designated constraints
// aren't met.
type MeatCuttingDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatCuttingDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatCuttingDetailMultiError) AllErrors() []error { return m }

// MeatCuttingDetailValidationError is the validation error returned by
// MeatCuttingDetail.Validate if the designated constraints aren't met.
type MeatCuttingDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatCuttingDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatCuttingDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatCuttingDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatCuttingDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatCuttingDetailValidationError) ErrorName() string {
	return "MeatCuttingDetailValidationError"
}

// Error satisfies the builtin error interface
func (e MeatCuttingDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatCuttingDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatCuttingDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatCuttingDetailValidationError{}

// Validate checks the field values on CreateMeatCuttingDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMeatCuttingDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatCuttingDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMeatCuttingDetailRequestMultiError, or nil if none found.
func (m *CreateMeatCuttingDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatCuttingDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeatProfileCode

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatCuttingDetailRequestMultiError(errors)
	}

	return nil
}

// CreateMeatCuttingDetailRequestMultiError is an error wrapping multiple
// validation errors returned by CreateMeatCuttingDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateMeatCuttingDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatCuttingDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatCuttingDetailRequestMultiError) AllErrors() []error { return m }

// CreateMeatCuttingDetailRequestValidationError is the validation error
// returned by CreateMeatCuttingDetailRequest.Validate if the designated
// constraints aren't met.
type CreateMeatCuttingDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatCuttingDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatCuttingDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatCuttingDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatCuttingDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatCuttingDetailRequestValidationError) ErrorName() string {
	return "CreateMeatCuttingDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatCuttingDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatCuttingDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatCuttingDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatCuttingDetailRequestValidationError{}

// Validate checks the field values on CreateMeatCuttingDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMeatCuttingDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatCuttingDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMeatCuttingDetailResponseMultiError, or nil if none found.
func (m *CreateMeatCuttingDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatCuttingDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatCuttingDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatCuttingDetailResponseValidationError{
					field:  "MeatCuttingDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatCuttingDetailResponseValidationError{
					field:  "MeatCuttingDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatCuttingDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatCuttingDetailResponseValidationError{
				field:  "MeatCuttingDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatCuttingDetailResponseMultiError(errors)
	}

	return nil
}

// CreateMeatCuttingDetailResponseMultiError is an error wrapping multiple
// validation errors returned by CreateMeatCuttingDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateMeatCuttingDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatCuttingDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatCuttingDetailResponseMultiError) AllErrors() []error { return m }

// CreateMeatCuttingDetailResponseValidationError is the validation error
// returned by CreateMeatCuttingDetailResponse.Validate if the designated
// constraints aren't met.
type CreateMeatCuttingDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatCuttingDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatCuttingDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatCuttingDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatCuttingDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatCuttingDetailResponseValidationError) ErrorName() string {
	return "CreateMeatCuttingDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatCuttingDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatCuttingDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatCuttingDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatCuttingDetailResponseValidationError{}

// Validate checks the field values on MeatDespatchAdviceLineItemExtension with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MeatDespatchAdviceLineItemExtension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatDespatchAdviceLineItemExtension
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MeatDespatchAdviceLineItemExtensionMultiError, or nil if none found.
func (m *MeatDespatchAdviceLineItemExtension) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatDespatchAdviceLineItemExtension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for AnimalIdentificationId

	// no validation rules for SlaughterNumberId

	if len(errors) > 0 {
		return MeatDespatchAdviceLineItemExtensionMultiError(errors)
	}

	return nil
}

// MeatDespatchAdviceLineItemExtensionMultiError is an error wrapping multiple
// validation errors returned by
// MeatDespatchAdviceLineItemExtension.ValidateAll() if the designated
// constraints aren't met.
type MeatDespatchAdviceLineItemExtensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatDespatchAdviceLineItemExtensionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatDespatchAdviceLineItemExtensionMultiError) AllErrors() []error { return m }

// MeatDespatchAdviceLineItemExtensionValidationError is the validation error
// returned by MeatDespatchAdviceLineItemExtension.Validate if the designated
// constraints aren't met.
type MeatDespatchAdviceLineItemExtensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatDespatchAdviceLineItemExtensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatDespatchAdviceLineItemExtensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatDespatchAdviceLineItemExtensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatDespatchAdviceLineItemExtensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatDespatchAdviceLineItemExtensionValidationError) ErrorName() string {
	return "MeatDespatchAdviceLineItemExtensionValidationError"
}

// Error satisfies the builtin error interface
func (e MeatDespatchAdviceLineItemExtensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatDespatchAdviceLineItemExtension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatDespatchAdviceLineItemExtensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatDespatchAdviceLineItemExtensionValidationError{}

// Validate checks the field values on
// CreateMeatDespatchAdviceLineItemExtensionRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateMeatDespatchAdviceLineItemExtensionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateMeatDespatchAdviceLineItemExtensionRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateMeatDespatchAdviceLineItemExtensionRequestMultiError, or nil if none found.
func (m *CreateMeatDespatchAdviceLineItemExtensionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatDespatchAdviceLineItemExtensionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AnimalIdentificationId

	// no validation rules for SlaughterNumberId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatDespatchAdviceLineItemExtensionRequestMultiError(errors)
	}

	return nil
}

// CreateMeatDespatchAdviceLineItemExtensionRequestMultiError is an error
// wrapping multiple validation errors returned by
// CreateMeatDespatchAdviceLineItemExtensionRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateMeatDespatchAdviceLineItemExtensionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatDespatchAdviceLineItemExtensionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatDespatchAdviceLineItemExtensionRequestMultiError) AllErrors() []error { return m }

// CreateMeatDespatchAdviceLineItemExtensionRequestValidationError is the
// validation error returned by
// CreateMeatDespatchAdviceLineItemExtensionRequest.Validate if the designated
// constraints aren't met.
type CreateMeatDespatchAdviceLineItemExtensionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatDespatchAdviceLineItemExtensionRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateMeatDespatchAdviceLineItemExtensionRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateMeatDespatchAdviceLineItemExtensionRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateMeatDespatchAdviceLineItemExtensionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatDespatchAdviceLineItemExtensionRequestValidationError) ErrorName() string {
	return "CreateMeatDespatchAdviceLineItemExtensionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatDespatchAdviceLineItemExtensionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatDespatchAdviceLineItemExtensionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatDespatchAdviceLineItemExtensionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatDespatchAdviceLineItemExtensionRequestValidationError{}

// Validate checks the field values on
// CreateMeatDespatchAdviceLineItemExtensionResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateMeatDespatchAdviceLineItemExtensionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateMeatDespatchAdviceLineItemExtensionResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateMeatDespatchAdviceLineItemExtensionResponseMultiError, or nil if none found.
func (m *CreateMeatDespatchAdviceLineItemExtensionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatDespatchAdviceLineItemExtensionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatDespatchAdviceLineItemExtension()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatDespatchAdviceLineItemExtensionResponseValidationError{
					field:  "MeatDespatchAdviceLineItemExtension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatDespatchAdviceLineItemExtensionResponseValidationError{
					field:  "MeatDespatchAdviceLineItemExtension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatDespatchAdviceLineItemExtension()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatDespatchAdviceLineItemExtensionResponseValidationError{
				field:  "MeatDespatchAdviceLineItemExtension",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatDespatchAdviceLineItemExtensionResponseMultiError(errors)
	}

	return nil
}

// CreateMeatDespatchAdviceLineItemExtensionResponseMultiError is an error
// wrapping multiple validation errors returned by
// CreateMeatDespatchAdviceLineItemExtensionResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateMeatDespatchAdviceLineItemExtensionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatDespatchAdviceLineItemExtensionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatDespatchAdviceLineItemExtensionResponseMultiError) AllErrors() []error { return m }

// CreateMeatDespatchAdviceLineItemExtensionResponseValidationError is the
// validation error returned by
// CreateMeatDespatchAdviceLineItemExtensionResponse.Validate if the
// designated constraints aren't met.
type CreateMeatDespatchAdviceLineItemExtensionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatDespatchAdviceLineItemExtensionResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateMeatDespatchAdviceLineItemExtensionResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateMeatDespatchAdviceLineItemExtensionResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateMeatDespatchAdviceLineItemExtensionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatDespatchAdviceLineItemExtensionResponseValidationError) ErrorName() string {
	return "CreateMeatDespatchAdviceLineItemExtensionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatDespatchAdviceLineItemExtensionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatDespatchAdviceLineItemExtensionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatDespatchAdviceLineItemExtensionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatDespatchAdviceLineItemExtensionResponseValidationError{}

// Validate checks the field values on MeatFatteningDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatFatteningDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatFatteningDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatFatteningDetailMultiError, or nil if none found.
func (m *MeatFatteningDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatFatteningDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for FeedingSystemCode

	// no validation rules for HousingSystemCode

	if len(errors) > 0 {
		return MeatFatteningDetailMultiError(errors)
	}

	return nil
}

// MeatFatteningDetailMultiError is an error wrapping multiple validation
// errors returned by MeatFatteningDetail.ValidateAll() if the designated
// constraints aren't met.
type MeatFatteningDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatFatteningDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatFatteningDetailMultiError) AllErrors() []error { return m }

// MeatFatteningDetailValidationError is the validation error returned by
// MeatFatteningDetail.Validate if the designated constraints aren't met.
type MeatFatteningDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatFatteningDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatFatteningDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatFatteningDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatFatteningDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatFatteningDetailValidationError) ErrorName() string {
	return "MeatFatteningDetailValidationError"
}

// Error satisfies the builtin error interface
func (e MeatFatteningDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatFatteningDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatFatteningDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatFatteningDetailValidationError{}

// Validate checks the field values on CreateMeatFatteningDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateMeatFatteningDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatFatteningDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMeatFatteningDetailRequestMultiError, or nil if none found.
func (m *CreateMeatFatteningDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatFatteningDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FeedingSystemCode

	// no validation rules for HousingSystemCode

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatFatteningDetailRequestMultiError(errors)
	}

	return nil
}

// CreateMeatFatteningDetailRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateMeatFatteningDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatFatteningDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatFatteningDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatFatteningDetailRequestMultiError) AllErrors() []error { return m }

// CreateMeatFatteningDetailRequestValidationError is the validation error
// returned by CreateMeatFatteningDetailRequest.Validate if the designated
// constraints aren't met.
type CreateMeatFatteningDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatFatteningDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatFatteningDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatFatteningDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatFatteningDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatFatteningDetailRequestValidationError) ErrorName() string {
	return "CreateMeatFatteningDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatFatteningDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatFatteningDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatFatteningDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatFatteningDetailRequestValidationError{}

// Validate checks the field values on CreateMeatFatteningDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateMeatFatteningDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatFatteningDetailResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateMeatFatteningDetailResponseMultiError, or nil if none found.
func (m *CreateMeatFatteningDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatFatteningDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatFatteningDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatFatteningDetailResponseValidationError{
					field:  "MeatFatteningDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatFatteningDetailResponseValidationError{
					field:  "MeatFatteningDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatFatteningDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatFatteningDetailResponseValidationError{
				field:  "MeatFatteningDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatFatteningDetailResponseMultiError(errors)
	}

	return nil
}

// CreateMeatFatteningDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateMeatFatteningDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatFatteningDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatFatteningDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatFatteningDetailResponseMultiError) AllErrors() []error { return m }

// CreateMeatFatteningDetailResponseValidationError is the validation error
// returned by CreateMeatFatteningDetailResponse.Validate if the designated
// constraints aren't met.
type CreateMeatFatteningDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatFatteningDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatFatteningDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatFatteningDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatFatteningDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatFatteningDetailResponseValidationError) ErrorName() string {
	return "CreateMeatFatteningDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatFatteningDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatFatteningDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatFatteningDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatFatteningDetailResponseValidationError{}

// Validate checks the field values on MeatMincingDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MeatMincingDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatMincingDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatMincingDetailMultiError, or nil if none found.
func (m *MeatMincingDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatMincingDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for FatContentPercent

	// no validation rules for MincingTypeCode

	if len(errors) > 0 {
		return MeatMincingDetailMultiError(errors)
	}

	return nil
}

// MeatMincingDetailMultiError is an error wrapping multiple validation errors
// returned by MeatMincingDetail.ValidateAll() if the designated constraints
// aren't met.
type MeatMincingDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatMincingDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatMincingDetailMultiError) AllErrors() []error { return m }

// MeatMincingDetailValidationError is the validation error returned by
// MeatMincingDetail.Validate if the designated constraints aren't met.
type MeatMincingDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatMincingDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatMincingDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatMincingDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatMincingDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatMincingDetailValidationError) ErrorName() string {
	return "MeatMincingDetailValidationError"
}

// Error satisfies the builtin error interface
func (e MeatMincingDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatMincingDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatMincingDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatMincingDetailValidationError{}

// Validate checks the field values on CreateMeatMincingDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMeatMincingDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatMincingDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMeatMincingDetailRequestMultiError, or nil if none found.
func (m *CreateMeatMincingDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatMincingDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FatContentPercent

	// no validation rules for MincingTypeCode

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatMincingDetailRequestMultiError(errors)
	}

	return nil
}

// CreateMeatMincingDetailRequestMultiError is an error wrapping multiple
// validation errors returned by CreateMeatMincingDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateMeatMincingDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatMincingDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatMincingDetailRequestMultiError) AllErrors() []error { return m }

// CreateMeatMincingDetailRequestValidationError is the validation error
// returned by CreateMeatMincingDetailRequest.Validate if the designated
// constraints aren't met.
type CreateMeatMincingDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatMincingDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatMincingDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatMincingDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatMincingDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatMincingDetailRequestValidationError) ErrorName() string {
	return "CreateMeatMincingDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatMincingDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatMincingDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatMincingDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatMincingDetailRequestValidationError{}

// Validate checks the field values on CreateMeatMincingDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMeatMincingDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatMincingDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMeatMincingDetailResponseMultiError, or nil if none found.
func (m *CreateMeatMincingDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatMincingDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatMincingDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatMincingDetailResponseValidationError{
					field:  "MeatMincingDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatMincingDetailResponseValidationError{
					field:  "MeatMincingDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatMincingDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatMincingDetailResponseValidationError{
				field:  "MeatMincingDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatMincingDetailResponseMultiError(errors)
	}

	return nil
}

// CreateMeatMincingDetailResponseMultiError is an error wrapping multiple
// validation errors returned by CreateMeatMincingDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateMeatMincingDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatMincingDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatMincingDetailResponseMultiError) AllErrors() []error { return m }

// CreateMeatMincingDetailResponseValidationError is the validation error
// returned by CreateMeatMincingDetailResponse.Validate if the designated
// constraints aren't met.
type CreateMeatMincingDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatMincingDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatMincingDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatMincingDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatMincingDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatMincingDetailResponseValidationError) ErrorName() string {
	return "CreateMeatMincingDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatMincingDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatMincingDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatMincingDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatMincingDetailResponseValidationError{}

// Validate checks the field values on MeatProcessingParty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatProcessingParty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatProcessingParty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatProcessingPartyMultiError, or nil if none found.
func (m *MeatProcessingParty) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatProcessingParty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ApprovalNumber

	// no validation rules for MeatProcessingPartyIdentificationTypeCode

	// no validation rules for MeatProcessingPartyTypeCode

	// no validation rules for TransactionalPartyId

	if len(errors) > 0 {
		return MeatProcessingPartyMultiError(errors)
	}

	return nil
}

// MeatProcessingPartyMultiError is an error wrapping multiple validation
// errors returned by MeatProcessingParty.ValidateAll() if the designated
// constraints aren't met.
type MeatProcessingPartyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatProcessingPartyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatProcessingPartyMultiError) AllErrors() []error { return m }

// MeatProcessingPartyValidationError is the validation error returned by
// MeatProcessingParty.Validate if the designated constraints aren't met.
type MeatProcessingPartyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatProcessingPartyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatProcessingPartyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatProcessingPartyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatProcessingPartyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatProcessingPartyValidationError) ErrorName() string {
	return "MeatProcessingPartyValidationError"
}

// Error satisfies the builtin error interface
func (e MeatProcessingPartyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatProcessingParty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatProcessingPartyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatProcessingPartyValidationError{}

// Validate checks the field values on CreateMeatProcessingPartyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateMeatProcessingPartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatProcessingPartyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMeatProcessingPartyRequestMultiError, or nil if none found.
func (m *CreateMeatProcessingPartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatProcessingPartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApprovalNumber

	// no validation rules for MeatProcessingPartyIdentificationTypeCode

	// no validation rules for MeatProcessingPartyTypeCode

	// no validation rules for TransactionalPartyId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatProcessingPartyRequestMultiError(errors)
	}

	return nil
}

// CreateMeatProcessingPartyRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateMeatProcessingPartyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatProcessingPartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatProcessingPartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatProcessingPartyRequestMultiError) AllErrors() []error { return m }

// CreateMeatProcessingPartyRequestValidationError is the validation error
// returned by CreateMeatProcessingPartyRequest.Validate if the designated
// constraints aren't met.
type CreateMeatProcessingPartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatProcessingPartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatProcessingPartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatProcessingPartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatProcessingPartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatProcessingPartyRequestValidationError) ErrorName() string {
	return "CreateMeatProcessingPartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatProcessingPartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatProcessingPartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatProcessingPartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatProcessingPartyRequestValidationError{}

// Validate checks the field values on CreateMeatProcessingPartyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateMeatProcessingPartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatProcessingPartyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateMeatProcessingPartyResponseMultiError, or nil if none found.
func (m *CreateMeatProcessingPartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatProcessingPartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatProcessingParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatProcessingPartyResponseValidationError{
					field:  "MeatProcessingParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatProcessingPartyResponseValidationError{
					field:  "MeatProcessingParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatProcessingParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatProcessingPartyResponseValidationError{
				field:  "MeatProcessingParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatProcessingPartyResponseMultiError(errors)
	}

	return nil
}

// CreateMeatProcessingPartyResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateMeatProcessingPartyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatProcessingPartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatProcessingPartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatProcessingPartyResponseMultiError) AllErrors() []error { return m }

// CreateMeatProcessingPartyResponseValidationError is the validation error
// returned by CreateMeatProcessingPartyResponse.Validate if the designated
// constraints aren't met.
type CreateMeatProcessingPartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatProcessingPartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatProcessingPartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatProcessingPartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatProcessingPartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatProcessingPartyResponseValidationError) ErrorName() string {
	return "CreateMeatProcessingPartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatProcessingPartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatProcessingPartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatProcessingPartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatProcessingPartyResponseValidationError{}

// Validate checks the field values on MeatSlaughteringDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatSlaughteringDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatSlaughteringDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatSlaughteringDetailMultiError, or nil if none found.
func (m *MeatSlaughteringDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatSlaughteringDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatSlaughteringDetailD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatSlaughteringDetailValidationError{
					field:  "MeatSlaughteringDetailD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatSlaughteringDetailValidationError{
					field:  "MeatSlaughteringDetailD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatSlaughteringDetailD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatSlaughteringDetailValidationError{
				field:  "MeatSlaughteringDetailD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeatSlaughteringDetailT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatSlaughteringDetailValidationError{
					field:  "MeatSlaughteringDetailT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatSlaughteringDetailValidationError{
					field:  "MeatSlaughteringDetailT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatSlaughteringDetailT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatSlaughteringDetailValidationError{
				field:  "MeatSlaughteringDetailT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatSlaughteringDetailValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatSlaughteringDetailValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatSlaughteringDetailValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatSlaughteringDetailValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatSlaughteringDetailValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatSlaughteringDetailValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeatSlaughteringDetailMultiError(errors)
	}

	return nil
}

// MeatSlaughteringDetailMultiError is an error wrapping multiple validation
// errors returned by MeatSlaughteringDetail.ValidateAll() if the designated
// constraints aren't met.
type MeatSlaughteringDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatSlaughteringDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatSlaughteringDetailMultiError) AllErrors() []error { return m }

// MeatSlaughteringDetailValidationError is the validation error returned by
// MeatSlaughteringDetail.Validate if the designated constraints aren't met.
type MeatSlaughteringDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatSlaughteringDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatSlaughteringDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatSlaughteringDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatSlaughteringDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatSlaughteringDetailValidationError) ErrorName() string {
	return "MeatSlaughteringDetailValidationError"
}

// Error satisfies the builtin error interface
func (e MeatSlaughteringDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatSlaughteringDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatSlaughteringDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatSlaughteringDetailValidationError{}

// Validate checks the field values on MeatSlaughteringDetailD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatSlaughteringDetailD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatSlaughteringDetailD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatSlaughteringDetailDMultiError, or nil if none found.
func (m *MeatSlaughteringDetailD) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatSlaughteringDetailD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for AgeOfAnimal

	// no validation rules for FatContentPercent

	// no validation rules for FatCoverCode

	// no validation rules for MeatCategoryCode

	// no validation rules for MeatColourCode

	// no validation rules for MeatConformationCode

	// no validation rules for MeatProfileCode

	// no validation rules for SlaughteringSystemCode

	// no validation rules for SlaughteringWeight

	// no validation rules for SWCodeListVersion

	// no validation rules for SWMeasurementUnitCode

	// no validation rules for BseTestId

	// no validation rules for SlaughteringDNATestId

	if len(errors) > 0 {
		return MeatSlaughteringDetailDMultiError(errors)
	}

	return nil
}

// MeatSlaughteringDetailDMultiError is an error wrapping multiple validation
// errors returned by MeatSlaughteringDetailD.ValidateAll() if the designated
// constraints aren't met.
type MeatSlaughteringDetailDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatSlaughteringDetailDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatSlaughteringDetailDMultiError) AllErrors() []error { return m }

// MeatSlaughteringDetailDValidationError is the validation error returned by
// MeatSlaughteringDetailD.Validate if the designated constraints aren't met.
type MeatSlaughteringDetailDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatSlaughteringDetailDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatSlaughteringDetailDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatSlaughteringDetailDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatSlaughteringDetailDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatSlaughteringDetailDValidationError) ErrorName() string {
	return "MeatSlaughteringDetailDValidationError"
}

// Error satisfies the builtin error interface
func (e MeatSlaughteringDetailDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatSlaughteringDetailD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatSlaughteringDetailDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatSlaughteringDetailDValidationError{}

// Validate checks the field values on MeatSlaughteringDetailT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatSlaughteringDetailT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatSlaughteringDetailT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatSlaughteringDetailTMultiError, or nil if none found.
func (m *MeatSlaughteringDetailT) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatSlaughteringDetailT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateOfSlaughtering()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatSlaughteringDetailTValidationError{
					field:  "DateOfSlaughtering",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatSlaughteringDetailTValidationError{
					field:  "DateOfSlaughtering",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfSlaughtering()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatSlaughteringDetailTValidationError{
				field:  "DateOfSlaughtering",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOptimumMaturationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatSlaughteringDetailTValidationError{
					field:  "OptimumMaturationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatSlaughteringDetailTValidationError{
					field:  "OptimumMaturationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptimumMaturationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatSlaughteringDetailTValidationError{
				field:  "OptimumMaturationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeatSlaughteringDetailTMultiError(errors)
	}

	return nil
}

// MeatSlaughteringDetailTMultiError is an error wrapping multiple validation
// errors returned by MeatSlaughteringDetailT.ValidateAll() if the designated
// constraints aren't met.
type MeatSlaughteringDetailTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatSlaughteringDetailTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatSlaughteringDetailTMultiError) AllErrors() []error { return m }

// MeatSlaughteringDetailTValidationError is the validation error returned by
// MeatSlaughteringDetailT.Validate if the designated constraints aren't met.
type MeatSlaughteringDetailTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatSlaughteringDetailTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatSlaughteringDetailTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatSlaughteringDetailTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatSlaughteringDetailTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatSlaughteringDetailTValidationError) ErrorName() string {
	return "MeatSlaughteringDetailTValidationError"
}

// Error satisfies the builtin error interface
func (e MeatSlaughteringDetailTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatSlaughteringDetailT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatSlaughteringDetailTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatSlaughteringDetailTValidationError{}

// Validate checks the field values on CreateMeatSlaughteringDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateMeatSlaughteringDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatSlaughteringDetailRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateMeatSlaughteringDetailRequestMultiError, or nil if none found.
func (m *CreateMeatSlaughteringDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatSlaughteringDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgeOfAnimal

	// no validation rules for DateOfSlaughtering

	// no validation rules for FatContentPercent

	// no validation rules for FatCoverCode

	// no validation rules for MeatCategoryCode

	// no validation rules for MeatColourCode

	// no validation rules for MeatConformationCode

	// no validation rules for MeatProfileCode

	// no validation rules for OptimumMaturationDate

	// no validation rules for SlaughteringSystemCode

	// no validation rules for SlaughteringWeight

	// no validation rules for SWCodeListVersion

	// no validation rules for SWMeasurementUnitCode

	// no validation rules for BseTestId

	// no validation rules for SlaughteringDNATestId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatSlaughteringDetailRequestMultiError(errors)
	}

	return nil
}

// CreateMeatSlaughteringDetailRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateMeatSlaughteringDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatSlaughteringDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatSlaughteringDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatSlaughteringDetailRequestMultiError) AllErrors() []error { return m }

// CreateMeatSlaughteringDetailRequestValidationError is the validation error
// returned by CreateMeatSlaughteringDetailRequest.Validate if the designated
// constraints aren't met.
type CreateMeatSlaughteringDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatSlaughteringDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatSlaughteringDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatSlaughteringDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatSlaughteringDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatSlaughteringDetailRequestValidationError) ErrorName() string {
	return "CreateMeatSlaughteringDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatSlaughteringDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatSlaughteringDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatSlaughteringDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatSlaughteringDetailRequestValidationError{}

// Validate checks the field values on CreateMeatSlaughteringDetailResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateMeatSlaughteringDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatSlaughteringDetailResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateMeatSlaughteringDetailResponseMultiError, or nil if none found.
func (m *CreateMeatSlaughteringDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatSlaughteringDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatSlaughteringDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatSlaughteringDetailResponseValidationError{
					field:  "MeatSlaughteringDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatSlaughteringDetailResponseValidationError{
					field:  "MeatSlaughteringDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatSlaughteringDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatSlaughteringDetailResponseValidationError{
				field:  "MeatSlaughteringDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatSlaughteringDetailResponseMultiError(errors)
	}

	return nil
}

// CreateMeatSlaughteringDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateMeatSlaughteringDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatSlaughteringDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatSlaughteringDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatSlaughteringDetailResponseMultiError) AllErrors() []error { return m }

// CreateMeatSlaughteringDetailResponseValidationError is the validation error
// returned by CreateMeatSlaughteringDetailResponse.Validate if the designated
// constraints aren't met.
type CreateMeatSlaughteringDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatSlaughteringDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatSlaughteringDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatSlaughteringDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatSlaughteringDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatSlaughteringDetailResponseValidationError) ErrorName() string {
	return "CreateMeatSlaughteringDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatSlaughteringDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatSlaughteringDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatSlaughteringDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatSlaughteringDetailResponseValidationError{}

// Validate checks the field values on MeatTest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeatTest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatTest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeatTestMultiError, or nil
// if none found.
func (m *MeatTest) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatTest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for TestMethod

	// no validation rules for TestResult

	if len(errors) > 0 {
		return MeatTestMultiError(errors)
	}

	return nil
}

// MeatTestMultiError is an error wrapping multiple validation errors returned
// by MeatTest.ValidateAll() if the designated constraints aren't met.
type MeatTestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatTestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatTestMultiError) AllErrors() []error { return m }

// MeatTestValidationError is the validation error returned by
// MeatTest.Validate if the designated constraints aren't met.
type MeatTestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatTestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatTestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatTestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatTestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatTestValidationError) ErrorName() string { return "MeatTestValidationError" }

// Error satisfies the builtin error interface
func (e MeatTestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatTestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatTestValidationError{}

// Validate checks the field values on CreateMeatTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMeatTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMeatTestRequestMultiError, or nil if none found.
func (m *CreateMeatTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestMethod

	// no validation rules for TestResult

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatTestRequestMultiError(errors)
	}

	return nil
}

// CreateMeatTestRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMeatTestRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatTestRequestMultiError) AllErrors() []error { return m }

// CreateMeatTestRequestValidationError is the validation error returned by
// CreateMeatTestRequest.Validate if the designated constraints aren't met.
type CreateMeatTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatTestRequestValidationError) ErrorName() string {
	return "CreateMeatTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatTestRequestValidationError{}

// Validate checks the field values on CreateMeatTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMeatTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMeatTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMeatTestResponseMultiError, or nil if none found.
func (m *CreateMeatTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatTest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatTestResponseValidationError{
					field:  "MeatTest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatTestResponseValidationError{
					field:  "MeatTest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatTest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatTestResponseValidationError{
				field:  "MeatTest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatTestResponseMultiError(errors)
	}

	return nil
}

// CreateMeatTestResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMeatTestResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatTestResponseMultiError) AllErrors() []error { return m }

// CreateMeatTestResponseValidationError is the validation error returned by
// CreateMeatTestResponse.Validate if the designated constraints aren't met.
type CreateMeatTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatTestResponseValidationError) ErrorName() string {
	return "CreateMeatTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatTestResponseValidationError{}

// Validate checks the field values on MeatWorkItemIdentification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatWorkItemIdentification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatWorkItemIdentification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatWorkItemIdentificationMultiError, or nil if none found.
func (m *MeatWorkItemIdentification) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatWorkItemIdentification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatWorkItemIdentificationD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatWorkItemIdentificationValidationError{
					field:  "MeatWorkItemIdentificationD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatWorkItemIdentificationValidationError{
					field:  "MeatWorkItemIdentificationD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatWorkItemIdentificationD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatWorkItemIdentificationValidationError{
				field:  "MeatWorkItemIdentificationD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatWorkItemIdentificationValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatWorkItemIdentificationValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatWorkItemIdentificationValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeatWorkItemIdentificationValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeatWorkItemIdentificationValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeatWorkItemIdentificationValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeatWorkItemIdentificationMultiError(errors)
	}

	return nil
}

// MeatWorkItemIdentificationMultiError is an error wrapping multiple
// validation errors returned by MeatWorkItemIdentification.ValidateAll() if
// the designated constraints aren't met.
type MeatWorkItemIdentificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatWorkItemIdentificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatWorkItemIdentificationMultiError) AllErrors() []error { return m }

// MeatWorkItemIdentificationValidationError is the validation error returned
// by MeatWorkItemIdentification.Validate if the designated constraints aren't met.
type MeatWorkItemIdentificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatWorkItemIdentificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatWorkItemIdentificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatWorkItemIdentificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatWorkItemIdentificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatWorkItemIdentificationValidationError) ErrorName() string {
	return "MeatWorkItemIdentificationValidationError"
}

// Error satisfies the builtin error interface
func (e MeatWorkItemIdentificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatWorkItemIdentification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatWorkItemIdentificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatWorkItemIdentificationValidationError{}

// Validate checks the field values on MeatWorkItemIdentificationD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeatWorkItemIdentificationD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeatWorkItemIdentificationD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeatWorkItemIdentificationDMultiError, or nil if none found.
func (m *MeatWorkItemIdentificationD) ValidateAll() error {
	return m.validate(true)
}

func (m *MeatWorkItemIdentificationD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for BatchNumber

	// no validation rules for LivestockMobIdentifier

	// no validation rules for MeatWorkItemTypeCode

	// no validation rules for AnimalIdentificationId

	// no validation rules for ProductIdentification

	// no validation rules for SlaughterNumberId

	if len(errors) > 0 {
		return MeatWorkItemIdentificationDMultiError(errors)
	}

	return nil
}

// MeatWorkItemIdentificationDMultiError is an error wrapping multiple
// validation errors returned by MeatWorkItemIdentificationD.ValidateAll() if
// the designated constraints aren't met.
type MeatWorkItemIdentificationDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeatWorkItemIdentificationDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeatWorkItemIdentificationDMultiError) AllErrors() []error { return m }

// MeatWorkItemIdentificationDValidationError is the validation error returned
// by MeatWorkItemIdentificationD.Validate if the designated constraints
// aren't met.
type MeatWorkItemIdentificationDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeatWorkItemIdentificationDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeatWorkItemIdentificationDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeatWorkItemIdentificationDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeatWorkItemIdentificationDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeatWorkItemIdentificationDValidationError) ErrorName() string {
	return "MeatWorkItemIdentificationDValidationError"
}

// Error satisfies the builtin error interface
func (e MeatWorkItemIdentificationDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeatWorkItemIdentificationD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeatWorkItemIdentificationDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeatWorkItemIdentificationDValidationError{}

// Validate checks the field values on CreateMeatWorkItemIdentificationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateMeatWorkItemIdentificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateMeatWorkItemIdentificationRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateMeatWorkItemIdentificationRequestMultiError, or nil if none found.
func (m *CreateMeatWorkItemIdentificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatWorkItemIdentificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BatchNumber

	// no validation rules for LivestockMobIdentifier

	// no validation rules for MeatWorkItemTypeCode

	// no validation rules for AnimalIdentificationId

	// no validation rules for ProductIdentification

	// no validation rules for SlaughterNumberId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateMeatWorkItemIdentificationRequestMultiError(errors)
	}

	return nil
}

// CreateMeatWorkItemIdentificationRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateMeatWorkItemIdentificationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatWorkItemIdentificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatWorkItemIdentificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatWorkItemIdentificationRequestMultiError) AllErrors() []error { return m }

// CreateMeatWorkItemIdentificationRequestValidationError is the validation
// error returned by CreateMeatWorkItemIdentificationRequest.Validate if the
// designated constraints aren't met.
type CreateMeatWorkItemIdentificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatWorkItemIdentificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatWorkItemIdentificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatWorkItemIdentificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatWorkItemIdentificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatWorkItemIdentificationRequestValidationError) ErrorName() string {
	return "CreateMeatWorkItemIdentificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatWorkItemIdentificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatWorkItemIdentificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatWorkItemIdentificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatWorkItemIdentificationRequestValidationError{}

// Validate checks the field values on CreateMeatWorkItemIdentificationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateMeatWorkItemIdentificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateMeatWorkItemIdentificationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateMeatWorkItemIdentificationResponseMultiError, or nil if none found.
func (m *CreateMeatWorkItemIdentificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMeatWorkItemIdentificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeatWorkItemIdentification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMeatWorkItemIdentificationResponseValidationError{
					field:  "MeatWorkItemIdentification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMeatWorkItemIdentificationResponseValidationError{
					field:  "MeatWorkItemIdentification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeatWorkItemIdentification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeatWorkItemIdentificationResponseValidationError{
				field:  "MeatWorkItemIdentification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMeatWorkItemIdentificationResponseMultiError(errors)
	}

	return nil
}

// CreateMeatWorkItemIdentificationResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateMeatWorkItemIdentificationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMeatWorkItemIdentificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMeatWorkItemIdentificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMeatWorkItemIdentificationResponseMultiError) AllErrors() []error { return m }

// CreateMeatWorkItemIdentificationResponseValidationError is the validation
// error returned by CreateMeatWorkItemIdentificationResponse.Validate if the
// designated constraints aren't met.
type CreateMeatWorkItemIdentificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeatWorkItemIdentificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeatWorkItemIdentificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeatWorkItemIdentificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeatWorkItemIdentificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeatWorkItemIdentificationResponseValidationError) ErrorName() string {
	return "CreateMeatWorkItemIdentificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeatWorkItemIdentificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeatWorkItemIdentificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeatWorkItemIdentificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeatWorkItemIdentificationResponseValidationError{}
