// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: party/v1/party.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartyService_CreateTransactionalParty_FullMethodName              = "/party.v1.PartyService/CreateTransactionalParty"
	PartyService_CreateAdditionalPartyIdentification_FullMethodName   = "/party.v1.PartyService/CreateAdditionalPartyIdentification"
	PartyService_CreateAddress_FullMethodName                         = "/party.v1.PartyService/CreateAddress"
	PartyService_CreateCommunicationChannel_FullMethodName            = "/party.v1.PartyService/CreateCommunicationChannel"
	PartyService_CreateContact_FullMethodName                         = "/party.v1.PartyService/CreateContact"
	PartyService_CreateDutyFeeTaxRegistration_FullMethodName          = "/party.v1.PartyService/CreateDutyFeeTaxRegistration"
	PartyService_CreateFinancialInstitutionInformation_FullMethodName = "/party.v1.PartyService/CreateFinancialInstitutionInformation"
	PartyService_CreateLegalRegistration_FullMethodName               = "/party.v1.PartyService/CreateLegalRegistration"
	PartyService_CreateOrganisation_FullMethodName                    = "/party.v1.PartyService/CreateOrganisation"
)

// PartyServiceClient is the client API for PartyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The PartyService service definition.
type PartyServiceClient interface {
	CreateTransactionalParty(ctx context.Context, in *CreateTransactionalPartyRequest, opts ...grpc.CallOption) (*CreateTransactionalPartyResponse, error)
	CreateAdditionalPartyIdentification(ctx context.Context, in *CreateAdditionalPartyIdentificationRequest, opts ...grpc.CallOption) (*CreateAdditionalPartyIdentificationResponse, error)
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error)
	CreateCommunicationChannel(ctx context.Context, in *CreateCommunicationChannelRequest, opts ...grpc.CallOption) (*CreateCommunicationChannelResponse, error)
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error)
	CreateDutyFeeTaxRegistration(ctx context.Context, in *CreateDutyFeeTaxRegistrationRequest, opts ...grpc.CallOption) (*CreateDutyFeeTaxRegistrationResponse, error)
	CreateFinancialInstitutionInformation(ctx context.Context, in *CreateFinancialInstitutionInformationRequest, opts ...grpc.CallOption) (*CreateFinancialInstitutionInformationResponse, error)
	CreateLegalRegistration(ctx context.Context, in *CreateLegalRegistrationRequest, opts ...grpc.CallOption) (*CreateLegalRegistrationResponse, error)
	CreateOrganisation(ctx context.Context, in *CreateOrganisationRequest, opts ...grpc.CallOption) (*CreateOrganisationResponse, error)
}

type partyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartyServiceClient(cc grpc.ClientConnInterface) PartyServiceClient {
	return &partyServiceClient{cc}
}

func (c *partyServiceClient) CreateTransactionalParty(ctx context.Context, in *CreateTransactionalPartyRequest, opts ...grpc.CallOption) (*CreateTransactionalPartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionalPartyResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateTransactionalParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreateAdditionalPartyIdentification(ctx context.Context, in *CreateAdditionalPartyIdentificationRequest, opts ...grpc.CallOption) (*CreateAdditionalPartyIdentificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAdditionalPartyIdentificationResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateAdditionalPartyIdentification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAddressResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreateCommunicationChannel(ctx context.Context, in *CreateCommunicationChannelRequest, opts ...grpc.CallOption) (*CreateCommunicationChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommunicationChannelResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateCommunicationChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContactResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreateDutyFeeTaxRegistration(ctx context.Context, in *CreateDutyFeeTaxRegistrationRequest, opts ...grpc.CallOption) (*CreateDutyFeeTaxRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDutyFeeTaxRegistrationResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateDutyFeeTaxRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreateFinancialInstitutionInformation(ctx context.Context, in *CreateFinancialInstitutionInformationRequest, opts ...grpc.CallOption) (*CreateFinancialInstitutionInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFinancialInstitutionInformationResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateFinancialInstitutionInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreateLegalRegistration(ctx context.Context, in *CreateLegalRegistrationRequest, opts ...grpc.CallOption) (*CreateLegalRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLegalRegistrationResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateLegalRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreateOrganisation(ctx context.Context, in *CreateOrganisationRequest, opts ...grpc.CallOption) (*CreateOrganisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganisationResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateOrganisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartyServiceServer is the server API for PartyService service.
// All implementations must embed UnimplementedPartyServiceServer
// for forward compatibility.
//
// The PartyService service definition.
type PartyServiceServer interface {
	CreateTransactionalParty(context.Context, *CreateTransactionalPartyRequest) (*CreateTransactionalPartyResponse, error)
	CreateAdditionalPartyIdentification(context.Context, *CreateAdditionalPartyIdentificationRequest) (*CreateAdditionalPartyIdentificationResponse, error)
	CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error)
	CreateCommunicationChannel(context.Context, *CreateCommunicationChannelRequest) (*CreateCommunicationChannelResponse, error)
	CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error)
	CreateDutyFeeTaxRegistration(context.Context, *CreateDutyFeeTaxRegistrationRequest) (*CreateDutyFeeTaxRegistrationResponse, error)
	CreateFinancialInstitutionInformation(context.Context, *CreateFinancialInstitutionInformationRequest) (*CreateFinancialInstitutionInformationResponse, error)
	CreateLegalRegistration(context.Context, *CreateLegalRegistrationRequest) (*CreateLegalRegistrationResponse, error)
	CreateOrganisation(context.Context, *CreateOrganisationRequest) (*CreateOrganisationResponse, error)
	mustEmbedUnimplementedPartyServiceServer()
}

// UnimplementedPartyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartyServiceServer struct{}

func (UnimplementedPartyServiceServer) CreateTransactionalParty(context.Context, *CreateTransactionalPartyRequest) (*CreateTransactionalPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionalParty not implemented")
}
func (UnimplementedPartyServiceServer) CreateAdditionalPartyIdentification(context.Context, *CreateAdditionalPartyIdentificationRequest) (*CreateAdditionalPartyIdentificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdditionalPartyIdentification not implemented")
}
func (UnimplementedPartyServiceServer) CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedPartyServiceServer) CreateCommunicationChannel(context.Context, *CreateCommunicationChannelRequest) (*CreateCommunicationChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunicationChannel not implemented")
}
func (UnimplementedPartyServiceServer) CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedPartyServiceServer) CreateDutyFeeTaxRegistration(context.Context, *CreateDutyFeeTaxRegistrationRequest) (*CreateDutyFeeTaxRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDutyFeeTaxRegistration not implemented")
}
func (UnimplementedPartyServiceServer) CreateFinancialInstitutionInformation(context.Context, *CreateFinancialInstitutionInformationRequest) (*CreateFinancialInstitutionInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinancialInstitutionInformation not implemented")
}
func (UnimplementedPartyServiceServer) CreateLegalRegistration(context.Context, *CreateLegalRegistrationRequest) (*CreateLegalRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLegalRegistration not implemented")
}
func (UnimplementedPartyServiceServer) CreateOrganisation(context.Context, *CreateOrganisationRequest) (*CreateOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganisation not implemented")
}
func (UnimplementedPartyServiceServer) mustEmbedUnimplementedPartyServiceServer() {}
func (UnimplementedPartyServiceServer) testEmbeddedByValue()                      {}

// UnsafePartyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartyServiceServer will
// result in compilation errors.
type UnsafePartyServiceServer interface {
	mustEmbedUnimplementedPartyServiceServer()
}

func RegisterPartyServiceServer(s grpc.ServiceRegistrar, srv PartyServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartyService_ServiceDesc, srv)
}

func _PartyService_CreateTransactionalParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionalPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateTransactionalParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateTransactionalParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateTransactionalParty(ctx, req.(*CreateTransactionalPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreateAdditionalPartyIdentification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdditionalPartyIdentificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateAdditionalPartyIdentification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateAdditionalPartyIdentification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateAdditionalPartyIdentification(ctx, req.(*CreateAdditionalPartyIdentificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreateCommunicationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunicationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateCommunicationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateCommunicationChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateCommunicationChannel(ctx, req.(*CreateCommunicationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreateDutyFeeTaxRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDutyFeeTaxRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateDutyFeeTaxRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateDutyFeeTaxRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateDutyFeeTaxRegistration(ctx, req.(*CreateDutyFeeTaxRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreateFinancialInstitutionInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinancialInstitutionInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateFinancialInstitutionInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateFinancialInstitutionInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateFinancialInstitutionInformation(ctx, req.(*CreateFinancialInstitutionInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreateLegalRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLegalRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateLegalRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateLegalRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateLegalRegistration(ctx, req.(*CreateLegalRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreateOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateOrganisation(ctx, req.(*CreateOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartyService_ServiceDesc is the grpc.ServiceDesc for PartyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.v1.PartyService",
	HandlerType: (*PartyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransactionalParty",
			Handler:    _PartyService_CreateTransactionalParty_Handler,
		},
		{
			MethodName: "CreateAdditionalPartyIdentification",
			Handler:    _PartyService_CreateAdditionalPartyIdentification_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _PartyService_CreateAddress_Handler,
		},
		{
			MethodName: "CreateCommunicationChannel",
			Handler:    _PartyService_CreateCommunicationChannel_Handler,
		},
		{
			MethodName: "CreateContact",
			Handler:    _PartyService_CreateContact_Handler,
		},
		{
			MethodName: "CreateDutyFeeTaxRegistration",
			Handler:    _PartyService_CreateDutyFeeTaxRegistration_Handler,
		},
		{
			MethodName: "CreateFinancialInstitutionInformation",
			Handler:    _PartyService_CreateFinancialInstitutionInformation_Handler,
		},
		{
			MethodName: "CreateLegalRegistration",
			Handler:    _PartyService_CreateLegalRegistration_Handler,
		},
		{
			MethodName: "CreateOrganisation",
			Handler:    _PartyService_CreateOrganisation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party/v1/party.proto",
}
