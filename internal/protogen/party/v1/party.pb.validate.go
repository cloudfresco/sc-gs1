// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: party/v1/party.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TransactionalParty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionalParty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionalParty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionalPartyMultiError, or nil if none found.
func (m *TransactionalParty) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionalParty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for Gln

	if len(errors) > 0 {
		return TransactionalPartyMultiError(errors)
	}

	return nil
}

// TransactionalPartyMultiError is an error wrapping multiple validation errors
// returned by TransactionalParty.ValidateAll() if the designated constraints
// aren't met.
type TransactionalPartyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionalPartyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionalPartyMultiError) AllErrors() []error { return m }

// TransactionalPartyValidationError is the validation error returned by
// TransactionalParty.Validate if the designated constraints aren't met.
type TransactionalPartyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionalPartyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionalPartyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionalPartyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionalPartyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionalPartyValidationError) ErrorName() string {
	return "TransactionalPartyValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionalPartyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionalParty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionalPartyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionalPartyValidationError{}

// Validate checks the field values on CreateTransactionalPartyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionalPartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransactionalPartyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTransactionalPartyRequestMultiError, or nil if none found.
func (m *CreateTransactionalPartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionalPartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Gln

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateTransactionalPartyRequestMultiError(errors)
	}

	return nil
}

// CreateTransactionalPartyRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTransactionalPartyRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateTransactionalPartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionalPartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionalPartyRequestMultiError) AllErrors() []error { return m }

// CreateTransactionalPartyRequestValidationError is the validation error
// returned by CreateTransactionalPartyRequest.Validate if the designated
// constraints aren't met.
type CreateTransactionalPartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionalPartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionalPartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionalPartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionalPartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionalPartyRequestValidationError) ErrorName() string {
	return "CreateTransactionalPartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionalPartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionalPartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionalPartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionalPartyRequestValidationError{}

// Validate checks the field values on CreateTransactionalPartyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateTransactionalPartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransactionalPartyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTransactionalPartyResponseMultiError, or nil if none found.
func (m *CreateTransactionalPartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionalPartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransactionalParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionalPartyResponseValidationError{
					field:  "TransactionalParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionalPartyResponseValidationError{
					field:  "TransactionalParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransactionalParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionalPartyResponseValidationError{
				field:  "TransactionalParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransactionalPartyResponseMultiError(errors)
	}

	return nil
}

// CreateTransactionalPartyResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateTransactionalPartyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTransactionalPartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionalPartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionalPartyResponseMultiError) AllErrors() []error { return m }

// CreateTransactionalPartyResponseValidationError is the validation error
// returned by CreateTransactionalPartyResponse.Validate if the designated
// constraints aren't met.
type CreateTransactionalPartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionalPartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionalPartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionalPartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionalPartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionalPartyResponseValidationError) ErrorName() string {
	return "CreateTransactionalPartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionalPartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionalPartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionalPartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionalPartyResponseValidationError{}

// Validate checks the field values on AdditionalPartyIdentification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdditionalPartyIdentification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdditionalPartyIdentification with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdditionalPartyIdentificationMultiError, or nil if none found.
func (m *AdditionalPartyIdentification) ValidateAll() error {
	return m.validate(true)
}

func (m *AdditionalPartyIdentification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AdditionalPartyIdentification

	// no validation rules for AdditionalPartyIdentificationTypeCode

	// no validation rules for CodeListVersion

	// no validation rules for Gln

	// no validation rules for TransactionalPartyId

	if len(errors) > 0 {
		return AdditionalPartyIdentificationMultiError(errors)
	}

	return nil
}

// AdditionalPartyIdentificationMultiError is an error wrapping multiple
// validation errors returned by AdditionalPartyIdentification.ValidateAll()
// if the designated constraints aren't met.
type AdditionalPartyIdentificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdditionalPartyIdentificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdditionalPartyIdentificationMultiError) AllErrors() []error { return m }

// AdditionalPartyIdentificationValidationError is the validation error
// returned by AdditionalPartyIdentification.Validate if the designated
// constraints aren't met.
type AdditionalPartyIdentificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdditionalPartyIdentificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdditionalPartyIdentificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdditionalPartyIdentificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdditionalPartyIdentificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdditionalPartyIdentificationValidationError) ErrorName() string {
	return "AdditionalPartyIdentificationValidationError"
}

// Error satisfies the builtin error interface
func (e AdditionalPartyIdentificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdditionalPartyIdentification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdditionalPartyIdentificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdditionalPartyIdentificationValidationError{}

// Validate checks the field values on
// CreateAdditionalPartyIdentificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateAdditionalPartyIdentificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateAdditionalPartyIdentificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateAdditionalPartyIdentificationRequestMultiError, or nil if none found.
func (m *CreateAdditionalPartyIdentificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdditionalPartyIdentificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdditionalPartyIdentification

	// no validation rules for AdditionalPartyIdentificationTypeCode

	// no validation rules for CodeListVersion

	// no validation rules for Gln

	// no validation rules for TransactionalPartyId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateAdditionalPartyIdentificationRequestMultiError(errors)
	}

	return nil
}

// CreateAdditionalPartyIdentificationRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateAdditionalPartyIdentificationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAdditionalPartyIdentificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdditionalPartyIdentificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdditionalPartyIdentificationRequestMultiError) AllErrors() []error { return m }

// CreateAdditionalPartyIdentificationRequestValidationError is the validation
// error returned by CreateAdditionalPartyIdentificationRequest.Validate if
// the designated constraints aren't met.
type CreateAdditionalPartyIdentificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdditionalPartyIdentificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdditionalPartyIdentificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdditionalPartyIdentificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdditionalPartyIdentificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdditionalPartyIdentificationRequestValidationError) ErrorName() string {
	return "CreateAdditionalPartyIdentificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdditionalPartyIdentificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdditionalPartyIdentificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdditionalPartyIdentificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdditionalPartyIdentificationRequestValidationError{}

// Validate checks the field values on
// CreateAdditionalPartyIdentificationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateAdditionalPartyIdentificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateAdditionalPartyIdentificationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateAdditionalPartyIdentificationResponseMultiError, or nil if none found.
func (m *CreateAdditionalPartyIdentificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdditionalPartyIdentificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAdditionalPartyIdentification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAdditionalPartyIdentificationResponseValidationError{
					field:  "AdditionalPartyIdentification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAdditionalPartyIdentificationResponseValidationError{
					field:  "AdditionalPartyIdentification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdditionalPartyIdentification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAdditionalPartyIdentificationResponseValidationError{
				field:  "AdditionalPartyIdentification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAdditionalPartyIdentificationResponseMultiError(errors)
	}

	return nil
}

// CreateAdditionalPartyIdentificationResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateAdditionalPartyIdentificationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAdditionalPartyIdentificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdditionalPartyIdentificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdditionalPartyIdentificationResponseMultiError) AllErrors() []error { return m }

// CreateAdditionalPartyIdentificationResponseValidationError is the validation
// error returned by CreateAdditionalPartyIdentificationResponse.Validate if
// the designated constraints aren't met.
type CreateAdditionalPartyIdentificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdditionalPartyIdentificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdditionalPartyIdentificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdditionalPartyIdentificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdditionalPartyIdentificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdditionalPartyIdentificationResponseValidationError) ErrorName() string {
	return "CreateAdditionalPartyIdentificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdditionalPartyIdentificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdditionalPartyIdentificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdditionalPartyIdentificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdditionalPartyIdentificationResponseValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for City

	// no validation rules for CityCode

	// no validation rules for CountryCode

	// no validation rules for CountyCode

	// no validation rules for CrossStreet

	// no validation rules for CurrencyOfPartyCode

	// no validation rules for LanguageOfThePartyCode

	// no validation rules for Name

	// no validation rules for POBoxNumber

	// no validation rules for PostalCode

	// no validation rules for ProvinceCode

	// no validation rules for State

	// no validation rules for StreetAddressOne

	// no validation rules for StreetAddressThree

	// no validation rules for StreetAddressTwo

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for TransactionalPartyId

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}

	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on CreateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAddressRequestMultiError, or nil if none found.
func (m *CreateAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for City

	// no validation rules for CityCode

	// no validation rules for CountryCode

	// no validation rules for CountyCode

	// no validation rules for CrossStreet

	// no validation rules for CurrencyOfPartyCode

	// no validation rules for LanguageOfThePartyCode

	// no validation rules for Name

	// no validation rules for POBoxNumber

	// no validation rules for PostalCode

	// no validation rules for ProvinceCode

	// no validation rules for State

	// no validation rules for StreetAddressOne

	// no validation rules for StreetAddressThree

	// no validation rules for StreetAddressTwo

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for TransactionalPartyId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateAddressRequestMultiError(errors)
	}

	return nil
}

// CreateAddressRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAddressRequestMultiError) AllErrors() []error { return m }

// CreateAddressRequestValidationError is the validation error returned by
// CreateAddressRequest.Validate if the designated constraints aren't met.
type CreateAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAddressRequestValidationError) ErrorName() string {
	return "CreateAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAddressRequestValidationError{}

// Validate checks the field values on CreateAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAddressResponseMultiError, or nil if none found.
func (m *CreateAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAddressResponseValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAddressResponseValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAddressResponseValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAddressResponseMultiError(errors)
	}

	return nil
}

// CreateAddressResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAddressResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAddressResponseMultiError) AllErrors() []error { return m }

// CreateAddressResponseValidationError is the validation error returned by
// CreateAddressResponse.Validate if the designated constraints aren't met.
type CreateAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAddressResponseValidationError) ErrorName() string {
	return "CreateAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAddressResponseValidationError{}

// Validate checks the field values on CommunicationChannel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommunicationChannel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommunicationChannel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommunicationChannelMultiError, or nil if none found.
func (m *CommunicationChannel) ValidateAll() error {
	return m.validate(true)
}

func (m *CommunicationChannel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CommunicationChannelCode

	// no validation rules for CommunicationChannelName

	// no validation rules for CommunicationValue

	// no validation rules for ContactId

	if len(errors) > 0 {
		return CommunicationChannelMultiError(errors)
	}

	return nil
}

// CommunicationChannelMultiError is an error wrapping multiple validation
// errors returned by CommunicationChannel.ValidateAll() if the designated
// constraints aren't met.
type CommunicationChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommunicationChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommunicationChannelMultiError) AllErrors() []error { return m }

// CommunicationChannelValidationError is the validation error returned by
// CommunicationChannel.Validate if the designated constraints aren't met.
type CommunicationChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommunicationChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommunicationChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommunicationChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommunicationChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommunicationChannelValidationError) ErrorName() string {
	return "CommunicationChannelValidationError"
}

// Error satisfies the builtin error interface
func (e CommunicationChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommunicationChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommunicationChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommunicationChannelValidationError{}

// Validate checks the field values on CreateCommunicationChannelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCommunicationChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommunicationChannelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCommunicationChannelRequestMultiError, or nil if none found.
func (m *CreateCommunicationChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommunicationChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommunicationChannelCode

	// no validation rules for CommunicationChannelName

	// no validation rules for CommunicationValue

	// no validation rules for ContactId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateCommunicationChannelRequestMultiError(errors)
	}

	return nil
}

// CreateCommunicationChannelRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateCommunicationChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommunicationChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommunicationChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommunicationChannelRequestMultiError) AllErrors() []error { return m }

// CreateCommunicationChannelRequestValidationError is the validation error
// returned by CreateCommunicationChannelRequest.Validate if the designated
// constraints aren't met.
type CreateCommunicationChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommunicationChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommunicationChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommunicationChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommunicationChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommunicationChannelRequestValidationError) ErrorName() string {
	return "CreateCommunicationChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommunicationChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommunicationChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommunicationChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommunicationChannelRequestValidationError{}

// Validate checks the field values on CreateCommunicationChannelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCommunicationChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommunicationChannelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCommunicationChannelResponseMultiError, or nil if none found.
func (m *CreateCommunicationChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommunicationChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommunicationChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommunicationChannelResponseValidationError{
					field:  "CommunicationChannel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommunicationChannelResponseValidationError{
					field:  "CommunicationChannel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommunicationChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommunicationChannelResponseValidationError{
				field:  "CommunicationChannel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommunicationChannelResponseMultiError(errors)
	}

	return nil
}

// CreateCommunicationChannelResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateCommunicationChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommunicationChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommunicationChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommunicationChannelResponseMultiError) AllErrors() []error { return m }

// CreateCommunicationChannelResponseValidationError is the validation error
// returned by CreateCommunicationChannelResponse.Validate if the designated
// constraints aren't met.
type CreateCommunicationChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommunicationChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommunicationChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommunicationChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommunicationChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommunicationChannelResponseValidationError) ErrorName() string {
	return "CreateCommunicationChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommunicationChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommunicationChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommunicationChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommunicationChannelResponseValidationError{}

// Validate checks the field values on Contact with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Contact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Contact with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContactMultiError, or nil if none found.
func (m *Contact) ValidateAll() error {
	return m.validate(true)
}

func (m *Contact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ContactTypeCode

	// no validation rules for DepartmentName

	// no validation rules for JobTitle

	// no validation rules for PersonName

	// no validation rules for TransactionalPartyId

	if len(errors) > 0 {
		return ContactMultiError(errors)
	}

	return nil
}

// ContactMultiError is an error wrapping multiple validation errors returned
// by Contact.ValidateAll() if the designated constraints aren't met.
type ContactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactMultiError) AllErrors() []error { return m }

// ContactValidationError is the validation error returned by Contact.Validate
// if the designated constraints aren't met.
type ContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactValidationError) ErrorName() string { return "ContactValidationError" }

// Error satisfies the builtin error interface
func (e ContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactValidationError{}

// Validate checks the field values on CreateContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContactRequestMultiError, or nil if none found.
func (m *CreateContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContactTypeCode

	// no validation rules for DepartmentName

	// no validation rules for JobTitle

	// no validation rules for PersonName

	// no validation rules for TransactionalPartyId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateContactRequestMultiError(errors)
	}

	return nil
}

// CreateContactRequestMultiError is an error wrapping multiple validation
// errors returned by CreateContactRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContactRequestMultiError) AllErrors() []error { return m }

// CreateContactRequestValidationError is the validation error returned by
// CreateContactRequest.Validate if the designated constraints aren't met.
type CreateContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContactRequestValidationError) ErrorName() string {
	return "CreateContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContactRequestValidationError{}

// Validate checks the field values on CreateContactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContactResponseMultiError, or nil if none found.
func (m *CreateContactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContactResponseValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContactResponseValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContactResponseValidationError{
				field:  "Contact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateContactResponseMultiError(errors)
	}

	return nil
}

// CreateContactResponseMultiError is an error wrapping multiple validation
// errors returned by CreateContactResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateContactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContactResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContactResponseMultiError) AllErrors() []error { return m }

// CreateContactResponseValidationError is the validation error returned by
// CreateContactResponse.Validate if the designated constraints aren't met.
type CreateContactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContactResponseValidationError) ErrorName() string {
	return "CreateContactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContactResponseValidationError{}

// Validate checks the field values on DutyFeeTaxRegistration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DutyFeeTaxRegistration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DutyFeeTaxRegistration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DutyFeeTaxRegistrationMultiError, or nil if none found.
func (m *DutyFeeTaxRegistration) ValidateAll() error {
	return m.validate(true)
}

func (m *DutyFeeTaxRegistration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DutyFeeTaxAgencyName

	// no validation rules for DutyFeeTaxDescription

	// no validation rules for DutyFeeTaxRegistrationType

	// no validation rules for DutyFeeTaxTypeCode

	// no validation rules for TransactionalPartyId

	if len(errors) > 0 {
		return DutyFeeTaxRegistrationMultiError(errors)
	}

	return nil
}

// DutyFeeTaxRegistrationMultiError is an error wrapping multiple validation
// errors returned by DutyFeeTaxRegistration.ValidateAll() if the designated
// constraints aren't met.
type DutyFeeTaxRegistrationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DutyFeeTaxRegistrationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DutyFeeTaxRegistrationMultiError) AllErrors() []error { return m }

// DutyFeeTaxRegistrationValidationError is the validation error returned by
// DutyFeeTaxRegistration.Validate if the designated constraints aren't met.
type DutyFeeTaxRegistrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DutyFeeTaxRegistrationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DutyFeeTaxRegistrationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DutyFeeTaxRegistrationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DutyFeeTaxRegistrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DutyFeeTaxRegistrationValidationError) ErrorName() string {
	return "DutyFeeTaxRegistrationValidationError"
}

// Error satisfies the builtin error interface
func (e DutyFeeTaxRegistrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDutyFeeTaxRegistration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DutyFeeTaxRegistrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DutyFeeTaxRegistrationValidationError{}

// Validate checks the field values on CreateDutyFeeTaxRegistrationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateDutyFeeTaxRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDutyFeeTaxRegistrationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDutyFeeTaxRegistrationRequestMultiError, or nil if none found.
func (m *CreateDutyFeeTaxRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDutyFeeTaxRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DutyFeeTaxAgencyName

	// no validation rules for DutyFeeTaxDescription

	// no validation rules for DutyFeeTaxRegistrationType

	// no validation rules for DutyFeeTaxTypeCode

	// no validation rules for TransactionalPartyId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDutyFeeTaxRegistrationRequestMultiError(errors)
	}

	return nil
}

// CreateDutyFeeTaxRegistrationRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateDutyFeeTaxRegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDutyFeeTaxRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDutyFeeTaxRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDutyFeeTaxRegistrationRequestMultiError) AllErrors() []error { return m }

// CreateDutyFeeTaxRegistrationRequestValidationError is the validation error
// returned by CreateDutyFeeTaxRegistrationRequest.Validate if the designated
// constraints aren't met.
type CreateDutyFeeTaxRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDutyFeeTaxRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDutyFeeTaxRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDutyFeeTaxRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDutyFeeTaxRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDutyFeeTaxRegistrationRequestValidationError) ErrorName() string {
	return "CreateDutyFeeTaxRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDutyFeeTaxRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDutyFeeTaxRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDutyFeeTaxRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDutyFeeTaxRegistrationRequestValidationError{}

// Validate checks the field values on CreateDutyFeeTaxRegistrationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDutyFeeTaxRegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDutyFeeTaxRegistrationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDutyFeeTaxRegistrationResponseMultiError, or nil if none found.
func (m *CreateDutyFeeTaxRegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDutyFeeTaxRegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDutyFeeTaxRegistration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDutyFeeTaxRegistrationResponseValidationError{
					field:  "DutyFeeTaxRegistration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDutyFeeTaxRegistrationResponseValidationError{
					field:  "DutyFeeTaxRegistration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDutyFeeTaxRegistration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDutyFeeTaxRegistrationResponseValidationError{
				field:  "DutyFeeTaxRegistration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDutyFeeTaxRegistrationResponseMultiError(errors)
	}

	return nil
}

// CreateDutyFeeTaxRegistrationResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateDutyFeeTaxRegistrationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDutyFeeTaxRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDutyFeeTaxRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDutyFeeTaxRegistrationResponseMultiError) AllErrors() []error { return m }

// CreateDutyFeeTaxRegistrationResponseValidationError is the validation error
// returned by CreateDutyFeeTaxRegistrationResponse.Validate if the designated
// constraints aren't met.
type CreateDutyFeeTaxRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDutyFeeTaxRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDutyFeeTaxRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDutyFeeTaxRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDutyFeeTaxRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDutyFeeTaxRegistrationResponseValidationError) ErrorName() string {
	return "CreateDutyFeeTaxRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDutyFeeTaxRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDutyFeeTaxRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDutyFeeTaxRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDutyFeeTaxRegistrationResponseValidationError{}

// Validate checks the field values on FinancialInstitutionInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinancialInstitutionInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinancialInstitutionInformation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FinancialInstitutionInformationMultiError, or nil if none found.
func (m *FinancialInstitutionInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *FinancialInstitutionInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FinancialInstitutionBranchName

	// no validation rules for FinancialInstitutionName

	// no validation rules for Address

	// no validation rules for FinancialRoutingNumber

	// no validation rules for FinancialRoutingNumberTypeCode

	// no validation rules for FinancialAccountName

	// no validation rules for FinancialAccountNumber

	// no validation rules for FinancialAccountNumberTypeCode

	// no validation rules for TransactionalPartyId

	if len(errors) > 0 {
		return FinancialInstitutionInformationMultiError(errors)
	}

	return nil
}

// FinancialInstitutionInformationMultiError is an error wrapping multiple
// validation errors returned by FinancialInstitutionInformation.ValidateAll()
// if the designated constraints aren't met.
type FinancialInstitutionInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinancialInstitutionInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinancialInstitutionInformationMultiError) AllErrors() []error { return m }

// FinancialInstitutionInformationValidationError is the validation error
// returned by FinancialInstitutionInformation.Validate if the designated
// constraints aren't met.
type FinancialInstitutionInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinancialInstitutionInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinancialInstitutionInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinancialInstitutionInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinancialInstitutionInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinancialInstitutionInformationValidationError) ErrorName() string {
	return "FinancialInstitutionInformationValidationError"
}

// Error satisfies the builtin error interface
func (e FinancialInstitutionInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinancialInstitutionInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinancialInstitutionInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinancialInstitutionInformationValidationError{}

// Validate checks the field values on
// CreateFinancialInstitutionInformationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateFinancialInstitutionInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateFinancialInstitutionInformationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateFinancialInstitutionInformationRequestMultiError, or nil if none found.
func (m *CreateFinancialInstitutionInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFinancialInstitutionInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FinancialInstitutionBranchName

	// no validation rules for FinancialInstitutionName

	// no validation rules for Address

	// no validation rules for FinancialRoutingNumber

	// no validation rules for FinancialRoutingNumberTypeCode

	// no validation rules for FinancialAccountName

	// no validation rules for FinancialAccountNumber

	// no validation rules for FinancialAccountNumberTypeCode

	// no validation rules for TransactionalPartyId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateFinancialInstitutionInformationRequestMultiError(errors)
	}

	return nil
}

// CreateFinancialInstitutionInformationRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateFinancialInstitutionInformationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateFinancialInstitutionInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFinancialInstitutionInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFinancialInstitutionInformationRequestMultiError) AllErrors() []error { return m }

// CreateFinancialInstitutionInformationRequestValidationError is the
// validation error returned by
// CreateFinancialInstitutionInformationRequest.Validate if the designated
// constraints aren't met.
type CreateFinancialInstitutionInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFinancialInstitutionInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFinancialInstitutionInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFinancialInstitutionInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFinancialInstitutionInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFinancialInstitutionInformationRequestValidationError) ErrorName() string {
	return "CreateFinancialInstitutionInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFinancialInstitutionInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFinancialInstitutionInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFinancialInstitutionInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFinancialInstitutionInformationRequestValidationError{}

// Validate checks the field values on
// CreateFinancialInstitutionInformationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateFinancialInstitutionInformationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateFinancialInstitutionInformationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateFinancialInstitutionInformationResponseMultiError, or nil if none found.
func (m *CreateFinancialInstitutionInformationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFinancialInstitutionInformationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinancialInstitutionInformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFinancialInstitutionInformationResponseValidationError{
					field:  "FinancialInstitutionInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFinancialInstitutionInformationResponseValidationError{
					field:  "FinancialInstitutionInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinancialInstitutionInformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFinancialInstitutionInformationResponseValidationError{
				field:  "FinancialInstitutionInformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFinancialInstitutionInformationResponseMultiError(errors)
	}

	return nil
}

// CreateFinancialInstitutionInformationResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateFinancialInstitutionInformationResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateFinancialInstitutionInformationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFinancialInstitutionInformationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFinancialInstitutionInformationResponseMultiError) AllErrors() []error { return m }

// CreateFinancialInstitutionInformationResponseValidationError is the
// validation error returned by
// CreateFinancialInstitutionInformationResponse.Validate if the designated
// constraints aren't met.
type CreateFinancialInstitutionInformationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFinancialInstitutionInformationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFinancialInstitutionInformationResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateFinancialInstitutionInformationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFinancialInstitutionInformationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFinancialInstitutionInformationResponseValidationError) ErrorName() string {
	return "CreateFinancialInstitutionInformationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFinancialInstitutionInformationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFinancialInstitutionInformationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFinancialInstitutionInformationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFinancialInstitutionInformationResponseValidationError{}

// Validate checks the field values on LegalRegistration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LegalRegistration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LegalRegistration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LegalRegistrationMultiError, or nil if none found.
func (m *LegalRegistration) ValidateAll() error {
	return m.validate(true)
}

func (m *LegalRegistration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LegalRegistrationAdditionalInformation

	// no validation rules for LegalRegistrationNumber

	// no validation rules for LegalRegistrationType

	if len(errors) > 0 {
		return LegalRegistrationMultiError(errors)
	}

	return nil
}

// LegalRegistrationMultiError is an error wrapping multiple validation errors
// returned by LegalRegistration.ValidateAll() if the designated constraints
// aren't met.
type LegalRegistrationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LegalRegistrationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LegalRegistrationMultiError) AllErrors() []error { return m }

// LegalRegistrationValidationError is the validation error returned by
// LegalRegistration.Validate if the designated constraints aren't met.
type LegalRegistrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LegalRegistrationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LegalRegistrationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LegalRegistrationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LegalRegistrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LegalRegistrationValidationError) ErrorName() string {
	return "LegalRegistrationValidationError"
}

// Error satisfies the builtin error interface
func (e LegalRegistrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLegalRegistration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LegalRegistrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LegalRegistrationValidationError{}

// Validate checks the field values on CreateLegalRegistrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLegalRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLegalRegistrationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateLegalRegistrationRequestMultiError, or nil if none found.
func (m *CreateLegalRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLegalRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LegalRegistrationAdditionalInformation

	// no validation rules for LegalRegistrationNumber

	// no validation rules for LegalRegistrationType

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateLegalRegistrationRequestMultiError(errors)
	}

	return nil
}

// CreateLegalRegistrationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateLegalRegistrationRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateLegalRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLegalRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLegalRegistrationRequestMultiError) AllErrors() []error { return m }

// CreateLegalRegistrationRequestValidationError is the validation error
// returned by CreateLegalRegistrationRequest.Validate if the designated
// constraints aren't met.
type CreateLegalRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLegalRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLegalRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLegalRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLegalRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLegalRegistrationRequestValidationError) ErrorName() string {
	return "CreateLegalRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLegalRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLegalRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLegalRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLegalRegistrationRequestValidationError{}

// Validate checks the field values on CreateLegalRegistrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLegalRegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLegalRegistrationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateLegalRegistrationResponseMultiError, or nil if none found.
func (m *CreateLegalRegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLegalRegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLegalRegistration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLegalRegistrationResponseValidationError{
					field:  "LegalRegistration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLegalRegistrationResponseValidationError{
					field:  "LegalRegistration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLegalRegistration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLegalRegistrationResponseValidationError{
				field:  "LegalRegistration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLegalRegistrationResponseMultiError(errors)
	}

	return nil
}

// CreateLegalRegistrationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateLegalRegistrationResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateLegalRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLegalRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLegalRegistrationResponseMultiError) AllErrors() []error { return m }

// CreateLegalRegistrationResponseValidationError is the validation error
// returned by CreateLegalRegistrationResponse.Validate if the designated
// constraints aren't met.
type CreateLegalRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLegalRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLegalRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLegalRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLegalRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLegalRegistrationResponseValidationError) ErrorName() string {
	return "CreateLegalRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLegalRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLegalRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLegalRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLegalRegistrationResponseValidationError{}

// Validate checks the field values on Organisation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Organisation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Organisation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrganisationMultiError, or
// nil if none found.
func (m *Organisation) ValidateAll() error {
	return m.validate(true)
}

func (m *Organisation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IssuedCapital

	// no validation rules for ICCodeListVersion

	// no validation rules for ICCurrencyCode

	// no validation rules for OrganisationName

	// no validation rules for OfficialAddress

	// no validation rules for TransactionalPartyId

	if len(errors) > 0 {
		return OrganisationMultiError(errors)
	}

	return nil
}

// OrganisationMultiError is an error wrapping multiple validation errors
// returned by Organisation.ValidateAll() if the designated constraints aren't met.
type OrganisationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganisationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganisationMultiError) AllErrors() []error { return m }

// OrganisationValidationError is the validation error returned by
// Organisation.Validate if the designated constraints aren't met.
type OrganisationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganisationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganisationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganisationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganisationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganisationValidationError) ErrorName() string { return "OrganisationValidationError" }

// Error satisfies the builtin error interface
func (e OrganisationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganisation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganisationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganisationValidationError{}

// Validate checks the field values on CreateOrganisationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganisationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganisationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganisationRequestMultiError, or nil if none found.
func (m *CreateOrganisationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganisationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IssuedCapital

	// no validation rules for ICCodeListVersion

	// no validation rules for ICCurrencyCode

	// no validation rules for OrganisationName

	// no validation rules for OfficialAddress

	// no validation rules for TransactionalPartyId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateOrganisationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganisationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganisationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrganisationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganisationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganisationRequestMultiError) AllErrors() []error { return m }

// CreateOrganisationRequestValidationError is the validation error returned by
// CreateOrganisationRequest.Validate if the designated constraints aren't met.
type CreateOrganisationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganisationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganisationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganisationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganisationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganisationRequestValidationError) ErrorName() string {
	return "CreateOrganisationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganisationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganisationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganisationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganisationRequestValidationError{}

// Validate checks the field values on CreateOrganisationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganisationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganisationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganisationResponseMultiError, or nil if none found.
func (m *CreateOrganisationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganisationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganisation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganisationResponseValidationError{
					field:  "Organisation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganisationResponseValidationError{
					field:  "Organisation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganisation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganisationResponseValidationError{
				field:  "Organisation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganisationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganisationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganisationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrganisationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganisationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganisationResponseMultiError) AllErrors() []error { return m }

// CreateOrganisationResponseValidationError is the validation error returned
// by CreateOrganisationResponse.Validate if the designated constraints aren't met.
type CreateOrganisationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganisationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganisationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganisationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganisationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganisationResponseValidationError) ErrorName() string {
	return "CreateOrganisationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganisationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganisationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganisationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganisationResponseValidationError{}
