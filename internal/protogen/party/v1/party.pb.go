// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: party/v1/party.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionalParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4 []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS   string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	Gln   string `protobuf:"bytes,4,opt,name=gln,proto3" json:"gln,omitempty"`
}

func (x *TransactionalParty) Reset() {
	*x = TransactionalParty{}
	mi := &file_party_v1_party_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionalParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionalParty) ProtoMessage() {}

func (x *TransactionalParty) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionalParty.ProtoReflect.Descriptor instead.
func (*TransactionalParty) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionalParty) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionalParty) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TransactionalParty) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TransactionalParty) GetGln() string {
	if x != nil {
		return x.Gln
	}
	return ""
}

type CreateTransactionalPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gln       string `protobuf:"bytes,1,opt,name=gln,proto3" json:"gln,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransactionalPartyRequest) Reset() {
	*x = CreateTransactionalPartyRequest{}
	mi := &file_party_v1_party_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalPartyRequest) ProtoMessage() {}

func (x *CreateTransactionalPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalPartyRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionalPartyRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTransactionalPartyRequest) GetGln() string {
	if x != nil {
		return x.Gln
	}
	return ""
}

func (x *CreateTransactionalPartyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransactionalPartyRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransactionalPartyRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransactionalPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionalParty *TransactionalParty `protobuf:"bytes,1,opt,name=transactional_party,json=transactionalParty,proto3" json:"transactional_party,omitempty"`
}

func (x *CreateTransactionalPartyResponse) Reset() {
	*x = CreateTransactionalPartyResponse{}
	mi := &file_party_v1_party_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalPartyResponse) ProtoMessage() {}

func (x *CreateTransactionalPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalPartyResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionalPartyResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTransactionalPartyResponse) GetTransactionalParty() *TransactionalParty {
	if x != nil {
		return x.TransactionalParty
	}
	return nil
}

type AdditionalPartyIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AdditionalPartyIdentification         string `protobuf:"bytes,2,opt,name=additional_party_identification,json=additionalPartyIdentification,proto3" json:"additional_party_identification,omitempty"`
	AdditionalPartyIdentificationTypeCode string `protobuf:"bytes,3,opt,name=additional_party_identification_type_code,json=additionalPartyIdentificationTypeCode,proto3" json:"additional_party_identification_type_code,omitempty"`
	CodeListVersion                       string `protobuf:"bytes,4,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	Gln                                   string `protobuf:"bytes,5,opt,name=gln,proto3" json:"gln,omitempty"`
	TransactionalPartyId                  uint32 `protobuf:"varint,6,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
}

func (x *AdditionalPartyIdentification) Reset() {
	*x = AdditionalPartyIdentification{}
	mi := &file_party_v1_party_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdditionalPartyIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalPartyIdentification) ProtoMessage() {}

func (x *AdditionalPartyIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalPartyIdentification.ProtoReflect.Descriptor instead.
func (*AdditionalPartyIdentification) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{3}
}

func (x *AdditionalPartyIdentification) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdditionalPartyIdentification) GetAdditionalPartyIdentification() string {
	if x != nil {
		return x.AdditionalPartyIdentification
	}
	return ""
}

func (x *AdditionalPartyIdentification) GetAdditionalPartyIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalPartyIdentificationTypeCode
	}
	return ""
}

func (x *AdditionalPartyIdentification) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *AdditionalPartyIdentification) GetGln() string {
	if x != nil {
		return x.Gln
	}
	return ""
}

func (x *AdditionalPartyIdentification) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

type CreateAdditionalPartyIdentificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalPartyIdentification         string `protobuf:"bytes,1,opt,name=additional_party_identification,json=additionalPartyIdentification,proto3" json:"additional_party_identification,omitempty"`
	AdditionalPartyIdentificationTypeCode string `protobuf:"bytes,2,opt,name=additional_party_identification_type_code,json=additionalPartyIdentificationTypeCode,proto3" json:"additional_party_identification_type_code,omitempty"`
	CodeListVersion                       string `protobuf:"bytes,3,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	Gln                                   string `protobuf:"bytes,4,opt,name=gln,proto3" json:"gln,omitempty"`
	TransactionalPartyId                  uint32 `protobuf:"varint,5,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
	UserId                                string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                             string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                             string `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateAdditionalPartyIdentificationRequest) Reset() {
	*x = CreateAdditionalPartyIdentificationRequest{}
	mi := &file_party_v1_party_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdditionalPartyIdentificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdditionalPartyIdentificationRequest) ProtoMessage() {}

func (x *CreateAdditionalPartyIdentificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdditionalPartyIdentificationRequest.ProtoReflect.Descriptor instead.
func (*CreateAdditionalPartyIdentificationRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAdditionalPartyIdentificationRequest) GetAdditionalPartyIdentification() string {
	if x != nil {
		return x.AdditionalPartyIdentification
	}
	return ""
}

func (x *CreateAdditionalPartyIdentificationRequest) GetAdditionalPartyIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalPartyIdentificationTypeCode
	}
	return ""
}

func (x *CreateAdditionalPartyIdentificationRequest) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *CreateAdditionalPartyIdentificationRequest) GetGln() string {
	if x != nil {
		return x.Gln
	}
	return ""
}

func (x *CreateAdditionalPartyIdentificationRequest) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

func (x *CreateAdditionalPartyIdentificationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateAdditionalPartyIdentificationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateAdditionalPartyIdentificationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateAdditionalPartyIdentificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalPartyIdentification *AdditionalPartyIdentification `protobuf:"bytes,1,opt,name=additional_party_identification,json=additionalPartyIdentification,proto3" json:"additional_party_identification,omitempty"`
}

func (x *CreateAdditionalPartyIdentificationResponse) Reset() {
	*x = CreateAdditionalPartyIdentificationResponse{}
	mi := &file_party_v1_party_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdditionalPartyIdentificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdditionalPartyIdentificationResponse) ProtoMessage() {}

func (x *CreateAdditionalPartyIdentificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdditionalPartyIdentificationResponse.ProtoReflect.Descriptor instead.
func (*CreateAdditionalPartyIdentificationResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAdditionalPartyIdentificationResponse) GetAdditionalPartyIdentification() *AdditionalPartyIdentification {
	if x != nil {
		return x.AdditionalPartyIdentification
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                  []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                    string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	City                   string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	CityCode               string `protobuf:"bytes,5,opt,name=city_code,json=cityCode,proto3" json:"city_code,omitempty"`
	CountryCode            string `protobuf:"bytes,6,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	CountyCode             string `protobuf:"bytes,7,opt,name=county_code,json=countyCode,proto3" json:"county_code,omitempty"`
	CrossStreet            string `protobuf:"bytes,8,opt,name=cross_street,json=crossStreet,proto3" json:"cross_street,omitempty"`
	CurrencyOfPartyCode    string `protobuf:"bytes,9,opt,name=currency_of_party_code,json=currencyOfPartyCode,proto3" json:"currency_of_party_code,omitempty"`
	LanguageOfThePartyCode string `protobuf:"bytes,10,opt,name=language_of_the_party_code,json=languageOfThePartyCode,proto3" json:"language_of_the_party_code,omitempty"`
	Name                   string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	POBoxNumber            string `protobuf:"bytes,12,opt,name=p_o_box_number,json=pOBoxNumber,proto3" json:"p_o_box_number,omitempty"`
	PostalCode             string `protobuf:"bytes,13,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	ProvinceCode           string `protobuf:"bytes,14,opt,name=province_code,json=provinceCode,proto3" json:"province_code,omitempty"`
	State                  string `protobuf:"bytes,15,opt,name=state,proto3" json:"state,omitempty"`
	StreetAddressOne       string `protobuf:"bytes,16,opt,name=street_address_one,json=streetAddressOne,proto3" json:"street_address_one,omitempty"`
	StreetAddressThree     string `protobuf:"bytes,17,opt,name=street_address_three,json=streetAddressThree,proto3" json:"street_address_three,omitempty"`
	StreetAddressTwo       string `protobuf:"bytes,18,opt,name=street_address_two,json=streetAddressTwo,proto3" json:"street_address_two,omitempty"`
	Latitude               string `protobuf:"bytes,19,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude              string `protobuf:"bytes,20,opt,name=longitude,proto3" json:"longitude,omitempty"`
	TransactionalPartyId   uint32 `protobuf:"varint,21,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_party_v1_party_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{6}
}

func (x *Address) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Address) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *Address) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *Address) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Address) GetCountyCode() string {
	if x != nil {
		return x.CountyCode
	}
	return ""
}

func (x *Address) GetCrossStreet() string {
	if x != nil {
		return x.CrossStreet
	}
	return ""
}

func (x *Address) GetCurrencyOfPartyCode() string {
	if x != nil {
		return x.CurrencyOfPartyCode
	}
	return ""
}

func (x *Address) GetLanguageOfThePartyCode() string {
	if x != nil {
		return x.LanguageOfThePartyCode
	}
	return ""
}

func (x *Address) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Address) GetPOBoxNumber() string {
	if x != nil {
		return x.POBoxNumber
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Address) GetProvinceCode() string {
	if x != nil {
		return x.ProvinceCode
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetStreetAddressOne() string {
	if x != nil {
		return x.StreetAddressOne
	}
	return ""
}

func (x *Address) GetStreetAddressThree() string {
	if x != nil {
		return x.StreetAddressThree
	}
	return ""
}

func (x *Address) GetStreetAddressTwo() string {
	if x != nil {
		return x.StreetAddressTwo
	}
	return ""
}

func (x *Address) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *Address) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Address) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

type CreateAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City                   string `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	CityCode               string `protobuf:"bytes,2,opt,name=city_code,json=cityCode,proto3" json:"city_code,omitempty"`
	CountryCode            string `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	CountyCode             string `protobuf:"bytes,4,opt,name=county_code,json=countyCode,proto3" json:"county_code,omitempty"`
	CrossStreet            string `protobuf:"bytes,5,opt,name=cross_street,json=crossStreet,proto3" json:"cross_street,omitempty"`
	CurrencyOfPartyCode    string `protobuf:"bytes,6,opt,name=currency_of_party_code,json=currencyOfPartyCode,proto3" json:"currency_of_party_code,omitempty"`
	LanguageOfThePartyCode string `protobuf:"bytes,7,opt,name=language_of_the_party_code,json=languageOfThePartyCode,proto3" json:"language_of_the_party_code,omitempty"`
	Name                   string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	POBoxNumber            string `protobuf:"bytes,9,opt,name=p_o_box_number,json=pOBoxNumber,proto3" json:"p_o_box_number,omitempty"`
	PostalCode             string `protobuf:"bytes,10,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	ProvinceCode           string `protobuf:"bytes,11,opt,name=province_code,json=provinceCode,proto3" json:"province_code,omitempty"`
	State                  string `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	StreetAddressOne       string `protobuf:"bytes,13,opt,name=street_address_one,json=streetAddressOne,proto3" json:"street_address_one,omitempty"`
	StreetAddressThree     string `protobuf:"bytes,14,opt,name=street_address_three,json=streetAddressThree,proto3" json:"street_address_three,omitempty"`
	StreetAddressTwo       string `protobuf:"bytes,15,opt,name=street_address_two,json=streetAddressTwo,proto3" json:"street_address_two,omitempty"`
	Latitude               string `protobuf:"bytes,16,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude              string `protobuf:"bytes,17,opt,name=longitude,proto3" json:"longitude,omitempty"`
	TransactionalPartyId   uint32 `protobuf:"varint,18,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
	UserId                 string `protobuf:"bytes,19,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string `protobuf:"bytes,20,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string `protobuf:"bytes,21,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateAddressRequest) Reset() {
	*x = CreateAddressRequest{}
	mi := &file_party_v1_party_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressRequest) ProtoMessage() {}

func (x *CreateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{7}
}

func (x *CreateAddressRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateAddressRequest) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *CreateAddressRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CreateAddressRequest) GetCountyCode() string {
	if x != nil {
		return x.CountyCode
	}
	return ""
}

func (x *CreateAddressRequest) GetCrossStreet() string {
	if x != nil {
		return x.CrossStreet
	}
	return ""
}

func (x *CreateAddressRequest) GetCurrencyOfPartyCode() string {
	if x != nil {
		return x.CurrencyOfPartyCode
	}
	return ""
}

func (x *CreateAddressRequest) GetLanguageOfThePartyCode() string {
	if x != nil {
		return x.LanguageOfThePartyCode
	}
	return ""
}

func (x *CreateAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAddressRequest) GetPOBoxNumber() string {
	if x != nil {
		return x.POBoxNumber
	}
	return ""
}

func (x *CreateAddressRequest) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *CreateAddressRequest) GetProvinceCode() string {
	if x != nil {
		return x.ProvinceCode
	}
	return ""
}

func (x *CreateAddressRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CreateAddressRequest) GetStreetAddressOne() string {
	if x != nil {
		return x.StreetAddressOne
	}
	return ""
}

func (x *CreateAddressRequest) GetStreetAddressThree() string {
	if x != nil {
		return x.StreetAddressThree
	}
	return ""
}

func (x *CreateAddressRequest) GetStreetAddressTwo() string {
	if x != nil {
		return x.StreetAddressTwo
	}
	return ""
}

func (x *CreateAddressRequest) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *CreateAddressRequest) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *CreateAddressRequest) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

func (x *CreateAddressRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateAddressRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateAddressRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CreateAddressResponse) Reset() {
	*x = CreateAddressResponse{}
	mi := &file_party_v1_party_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressResponse) ProtoMessage() {}

func (x *CreateAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateAddressResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{8}
}

func (x *CreateAddressResponse) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type CommunicationChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CommunicationChannelCode string `protobuf:"bytes,2,opt,name=communication_channel_code,json=communicationChannelCode,proto3" json:"communication_channel_code,omitempty"`
	CommunicationChannelName string `protobuf:"bytes,3,opt,name=communication_channel_name,json=communicationChannelName,proto3" json:"communication_channel_name,omitempty"`
	CommunicationValue       string `protobuf:"bytes,4,opt,name=communication_value,json=communicationValue,proto3" json:"communication_value,omitempty"`
	ContactId                uint32 `protobuf:"varint,5,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
}

func (x *CommunicationChannel) Reset() {
	*x = CommunicationChannel{}
	mi := &file_party_v1_party_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommunicationChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationChannel) ProtoMessage() {}

func (x *CommunicationChannel) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationChannel.ProtoReflect.Descriptor instead.
func (*CommunicationChannel) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{9}
}

func (x *CommunicationChannel) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommunicationChannel) GetCommunicationChannelCode() string {
	if x != nil {
		return x.CommunicationChannelCode
	}
	return ""
}

func (x *CommunicationChannel) GetCommunicationChannelName() string {
	if x != nil {
		return x.CommunicationChannelName
	}
	return ""
}

func (x *CommunicationChannel) GetCommunicationValue() string {
	if x != nil {
		return x.CommunicationValue
	}
	return ""
}

func (x *CommunicationChannel) GetContactId() uint32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

type CreateCommunicationChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunicationChannelCode string `protobuf:"bytes,1,opt,name=communication_channel_code,json=communicationChannelCode,proto3" json:"communication_channel_code,omitempty"`
	CommunicationChannelName string `protobuf:"bytes,2,opt,name=communication_channel_name,json=communicationChannelName,proto3" json:"communication_channel_name,omitempty"`
	CommunicationValue       string `protobuf:"bytes,3,opt,name=communication_value,json=communicationValue,proto3" json:"communication_value,omitempty"`
	ContactId                uint32 `protobuf:"varint,4,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	UserId                   string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateCommunicationChannelRequest) Reset() {
	*x = CreateCommunicationChannelRequest{}
	mi := &file_party_v1_party_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommunicationChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommunicationChannelRequest) ProtoMessage() {}

func (x *CreateCommunicationChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommunicationChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateCommunicationChannelRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{10}
}

func (x *CreateCommunicationChannelRequest) GetCommunicationChannelCode() string {
	if x != nil {
		return x.CommunicationChannelCode
	}
	return ""
}

func (x *CreateCommunicationChannelRequest) GetCommunicationChannelName() string {
	if x != nil {
		return x.CommunicationChannelName
	}
	return ""
}

func (x *CreateCommunicationChannelRequest) GetCommunicationValue() string {
	if x != nil {
		return x.CommunicationValue
	}
	return ""
}

func (x *CreateCommunicationChannelRequest) GetContactId() uint32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *CreateCommunicationChannelRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateCommunicationChannelRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateCommunicationChannelRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateCommunicationChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunicationChannel *CommunicationChannel `protobuf:"bytes,1,opt,name=communication_channel,json=communicationChannel,proto3" json:"communication_channel,omitempty"`
}

func (x *CreateCommunicationChannelResponse) Reset() {
	*x = CreateCommunicationChannelResponse{}
	mi := &file_party_v1_party_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommunicationChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommunicationChannelResponse) ProtoMessage() {}

func (x *CreateCommunicationChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommunicationChannelResponse.ProtoReflect.Descriptor instead.
func (*CreateCommunicationChannelResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{11}
}

func (x *CreateCommunicationChannelResponse) GetCommunicationChannel() *CommunicationChannel {
	if x != nil {
		return x.CommunicationChannel
	}
	return nil
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                  string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ContactTypeCode      string `protobuf:"bytes,4,opt,name=contact_type_code,json=contactTypeCode,proto3" json:"contact_type_code,omitempty"`
	DepartmentName       string `protobuf:"bytes,5,opt,name=department_name,json=departmentName,proto3" json:"department_name,omitempty"`
	JobTitle             string `protobuf:"bytes,6,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`
	PersonName           string `protobuf:"bytes,7,opt,name=person_name,json=personName,proto3" json:"person_name,omitempty"`
	TransactionalPartyId uint32 `protobuf:"varint,8,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	mi := &file_party_v1_party_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{12}
}

func (x *Contact) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contact) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *Contact) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *Contact) GetContactTypeCode() string {
	if x != nil {
		return x.ContactTypeCode
	}
	return ""
}

func (x *Contact) GetDepartmentName() string {
	if x != nil {
		return x.DepartmentName
	}
	return ""
}

func (x *Contact) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *Contact) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

func (x *Contact) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

type CreateContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactTypeCode      string `protobuf:"bytes,1,opt,name=contact_type_code,json=contactTypeCode,proto3" json:"contact_type_code,omitempty"`
	DepartmentName       string `protobuf:"bytes,2,opt,name=department_name,json=departmentName,proto3" json:"department_name,omitempty"`
	JobTitle             string `protobuf:"bytes,3,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`
	PersonName           string `protobuf:"bytes,4,opt,name=person_name,json=personName,proto3" json:"person_name,omitempty"`
	TransactionalPartyId uint32 `protobuf:"varint,5,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
	UserId               string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail            string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId            string `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateContactRequest) Reset() {
	*x = CreateContactRequest{}
	mi := &file_party_v1_party_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContactRequest) ProtoMessage() {}

func (x *CreateContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContactRequest.ProtoReflect.Descriptor instead.
func (*CreateContactRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{13}
}

func (x *CreateContactRequest) GetContactTypeCode() string {
	if x != nil {
		return x.ContactTypeCode
	}
	return ""
}

func (x *CreateContactRequest) GetDepartmentName() string {
	if x != nil {
		return x.DepartmentName
	}
	return ""
}

func (x *CreateContactRequest) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *CreateContactRequest) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

func (x *CreateContactRequest) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

func (x *CreateContactRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateContactRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateContactRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *CreateContactResponse) Reset() {
	*x = CreateContactResponse{}
	mi := &file_party_v1_party_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContactResponse) ProtoMessage() {}

func (x *CreateContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContactResponse.ProtoReflect.Descriptor instead.
func (*CreateContactResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{14}
}

func (x *CreateContactResponse) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type DutyFeeTaxRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DutyFeeTaxAgencyName       string `protobuf:"bytes,2,opt,name=duty_fee_tax_agency_name,json=dutyFeeTaxAgencyName,proto3" json:"duty_fee_tax_agency_name,omitempty"`
	DutyFeeTaxDescription      string `protobuf:"bytes,3,opt,name=duty_fee_tax_description,json=dutyFeeTaxDescription,proto3" json:"duty_fee_tax_description,omitempty"`
	DutyFeeTaxRegistrationType string `protobuf:"bytes,4,opt,name=duty_fee_tax_registration_type,json=dutyFeeTaxRegistrationType,proto3" json:"duty_fee_tax_registration_type,omitempty"`
	DutyFeeTaxTypeCode         string `protobuf:"bytes,5,opt,name=duty_fee_tax_type_code,json=dutyFeeTaxTypeCode,proto3" json:"duty_fee_tax_type_code,omitempty"`
	TransactionalPartyId       uint32 `protobuf:"varint,6,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
}

func (x *DutyFeeTaxRegistration) Reset() {
	*x = DutyFeeTaxRegistration{}
	mi := &file_party_v1_party_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DutyFeeTaxRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DutyFeeTaxRegistration) ProtoMessage() {}

func (x *DutyFeeTaxRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DutyFeeTaxRegistration.ProtoReflect.Descriptor instead.
func (*DutyFeeTaxRegistration) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{15}
}

func (x *DutyFeeTaxRegistration) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DutyFeeTaxRegistration) GetDutyFeeTaxAgencyName() string {
	if x != nil {
		return x.DutyFeeTaxAgencyName
	}
	return ""
}

func (x *DutyFeeTaxRegistration) GetDutyFeeTaxDescription() string {
	if x != nil {
		return x.DutyFeeTaxDescription
	}
	return ""
}

func (x *DutyFeeTaxRegistration) GetDutyFeeTaxRegistrationType() string {
	if x != nil {
		return x.DutyFeeTaxRegistrationType
	}
	return ""
}

func (x *DutyFeeTaxRegistration) GetDutyFeeTaxTypeCode() string {
	if x != nil {
		return x.DutyFeeTaxTypeCode
	}
	return ""
}

func (x *DutyFeeTaxRegistration) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

type CreateDutyFeeTaxRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DutyFeeTaxAgencyName       string `protobuf:"bytes,1,opt,name=duty_fee_tax_agency_name,json=dutyFeeTaxAgencyName,proto3" json:"duty_fee_tax_agency_name,omitempty"`
	DutyFeeTaxDescription      string `protobuf:"bytes,2,opt,name=duty_fee_tax_description,json=dutyFeeTaxDescription,proto3" json:"duty_fee_tax_description,omitempty"`
	DutyFeeTaxRegistrationType string `protobuf:"bytes,4,opt,name=duty_fee_tax_registration_type,json=dutyFeeTaxRegistrationType,proto3" json:"duty_fee_tax_registration_type,omitempty"`
	DutyFeeTaxTypeCode         string `protobuf:"bytes,5,opt,name=duty_fee_tax_type_code,json=dutyFeeTaxTypeCode,proto3" json:"duty_fee_tax_type_code,omitempty"`
	TransactionalPartyId       uint32 `protobuf:"varint,6,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
	UserId                     string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDutyFeeTaxRegistrationRequest) Reset() {
	*x = CreateDutyFeeTaxRegistrationRequest{}
	mi := &file_party_v1_party_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDutyFeeTaxRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDutyFeeTaxRegistrationRequest) ProtoMessage() {}

func (x *CreateDutyFeeTaxRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDutyFeeTaxRegistrationRequest.ProtoReflect.Descriptor instead.
func (*CreateDutyFeeTaxRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{16}
}

func (x *CreateDutyFeeTaxRegistrationRequest) GetDutyFeeTaxAgencyName() string {
	if x != nil {
		return x.DutyFeeTaxAgencyName
	}
	return ""
}

func (x *CreateDutyFeeTaxRegistrationRequest) GetDutyFeeTaxDescription() string {
	if x != nil {
		return x.DutyFeeTaxDescription
	}
	return ""
}

func (x *CreateDutyFeeTaxRegistrationRequest) GetDutyFeeTaxRegistrationType() string {
	if x != nil {
		return x.DutyFeeTaxRegistrationType
	}
	return ""
}

func (x *CreateDutyFeeTaxRegistrationRequest) GetDutyFeeTaxTypeCode() string {
	if x != nil {
		return x.DutyFeeTaxTypeCode
	}
	return ""
}

func (x *CreateDutyFeeTaxRegistrationRequest) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

func (x *CreateDutyFeeTaxRegistrationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDutyFeeTaxRegistrationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDutyFeeTaxRegistrationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDutyFeeTaxRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DutyFeeTaxRegistration *DutyFeeTaxRegistration `protobuf:"bytes,1,opt,name=duty_fee_tax_registration,json=dutyFeeTaxRegistration,proto3" json:"duty_fee_tax_registration,omitempty"`
}

func (x *CreateDutyFeeTaxRegistrationResponse) Reset() {
	*x = CreateDutyFeeTaxRegistrationResponse{}
	mi := &file_party_v1_party_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDutyFeeTaxRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDutyFeeTaxRegistrationResponse) ProtoMessage() {}

func (x *CreateDutyFeeTaxRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDutyFeeTaxRegistrationResponse.ProtoReflect.Descriptor instead.
func (*CreateDutyFeeTaxRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{17}
}

func (x *CreateDutyFeeTaxRegistrationResponse) GetDutyFeeTaxRegistration() *DutyFeeTaxRegistration {
	if x != nil {
		return x.DutyFeeTaxRegistration
	}
	return nil
}

type FinancialInstitutionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FinancialInstitutionBranchName string `protobuf:"bytes,2,opt,name=financial_institution_branch_name,json=financialInstitutionBranchName,proto3" json:"financial_institution_branch_name,omitempty"`
	FinancialInstitutionName       string `protobuf:"bytes,3,opt,name=financial_institution_name,json=financialInstitutionName,proto3" json:"financial_institution_name,omitempty"`
	Address                        uint32 `protobuf:"varint,4,opt,name=address,proto3" json:"address,omitempty"`
	FinancialRoutingNumber         string `protobuf:"bytes,5,opt,name=financial_routing_number,json=financialRoutingNumber,proto3" json:"financial_routing_number,omitempty"`
	FinancialRoutingNumberTypeCode string `protobuf:"bytes,6,opt,name=financial_routing_number_type_code,json=financialRoutingNumberTypeCode,proto3" json:"financial_routing_number_type_code,omitempty"`
	FinancialAccountName           string `protobuf:"bytes,7,opt,name=financial_account_name,json=financialAccountName,proto3" json:"financial_account_name,omitempty"`
	FinancialAccountNumber         string `protobuf:"bytes,8,opt,name=financial_account_number,json=financialAccountNumber,proto3" json:"financial_account_number,omitempty"`
	FinancialAccountNumberTypeCode string `protobuf:"bytes,9,opt,name=financial_account_number_type_code,json=financialAccountNumberTypeCode,proto3" json:"financial_account_number_type_code,omitempty"`
	TransactionalPartyId           uint32 `protobuf:"varint,10,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
}

func (x *FinancialInstitutionInformation) Reset() {
	*x = FinancialInstitutionInformation{}
	mi := &file_party_v1_party_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinancialInstitutionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialInstitutionInformation) ProtoMessage() {}

func (x *FinancialInstitutionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialInstitutionInformation.ProtoReflect.Descriptor instead.
func (*FinancialInstitutionInformation) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{18}
}

func (x *FinancialInstitutionInformation) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialInstitutionInformation) GetFinancialInstitutionBranchName() string {
	if x != nil {
		return x.FinancialInstitutionBranchName
	}
	return ""
}

func (x *FinancialInstitutionInformation) GetFinancialInstitutionName() string {
	if x != nil {
		return x.FinancialInstitutionName
	}
	return ""
}

func (x *FinancialInstitutionInformation) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *FinancialInstitutionInformation) GetFinancialRoutingNumber() string {
	if x != nil {
		return x.FinancialRoutingNumber
	}
	return ""
}

func (x *FinancialInstitutionInformation) GetFinancialRoutingNumberTypeCode() string {
	if x != nil {
		return x.FinancialRoutingNumberTypeCode
	}
	return ""
}

func (x *FinancialInstitutionInformation) GetFinancialAccountName() string {
	if x != nil {
		return x.FinancialAccountName
	}
	return ""
}

func (x *FinancialInstitutionInformation) GetFinancialAccountNumber() string {
	if x != nil {
		return x.FinancialAccountNumber
	}
	return ""
}

func (x *FinancialInstitutionInformation) GetFinancialAccountNumberTypeCode() string {
	if x != nil {
		return x.FinancialAccountNumberTypeCode
	}
	return ""
}

func (x *FinancialInstitutionInformation) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

type CreateFinancialInstitutionInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitutionBranchName string `protobuf:"bytes,1,opt,name=financial_institution_branch_name,json=financialInstitutionBranchName,proto3" json:"financial_institution_branch_name,omitempty"`
	FinancialInstitutionName       string `protobuf:"bytes,2,opt,name=financial_institution_name,json=financialInstitutionName,proto3" json:"financial_institution_name,omitempty"`
	Address                        uint32 `protobuf:"varint,3,opt,name=address,proto3" json:"address,omitempty"`
	FinancialRoutingNumber         string `protobuf:"bytes,4,opt,name=financial_routing_number,json=financialRoutingNumber,proto3" json:"financial_routing_number,omitempty"`
	FinancialRoutingNumberTypeCode string `protobuf:"bytes,5,opt,name=financial_routing_number_type_code,json=financialRoutingNumberTypeCode,proto3" json:"financial_routing_number_type_code,omitempty"`
	FinancialAccountName           string `protobuf:"bytes,6,opt,name=financial_account_name,json=financialAccountName,proto3" json:"financial_account_name,omitempty"`
	FinancialAccountNumber         string `protobuf:"bytes,7,opt,name=financial_account_number,json=financialAccountNumber,proto3" json:"financial_account_number,omitempty"`
	FinancialAccountNumberTypeCode string `protobuf:"bytes,8,opt,name=financial_account_number_type_code,json=financialAccountNumberTypeCode,proto3" json:"financial_account_number_type_code,omitempty"`
	TransactionalPartyId           uint32 `protobuf:"varint,9,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
	UserId                         string `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                      string `protobuf:"bytes,11,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                      string `protobuf:"bytes,12,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateFinancialInstitutionInformationRequest) Reset() {
	*x = CreateFinancialInstitutionInformationRequest{}
	mi := &file_party_v1_party_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFinancialInstitutionInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFinancialInstitutionInformationRequest) ProtoMessage() {}

func (x *CreateFinancialInstitutionInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFinancialInstitutionInformationRequest.ProtoReflect.Descriptor instead.
func (*CreateFinancialInstitutionInformationRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{19}
}

func (x *CreateFinancialInstitutionInformationRequest) GetFinancialInstitutionBranchName() string {
	if x != nil {
		return x.FinancialInstitutionBranchName
	}
	return ""
}

func (x *CreateFinancialInstitutionInformationRequest) GetFinancialInstitutionName() string {
	if x != nil {
		return x.FinancialInstitutionName
	}
	return ""
}

func (x *CreateFinancialInstitutionInformationRequest) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *CreateFinancialInstitutionInformationRequest) GetFinancialRoutingNumber() string {
	if x != nil {
		return x.FinancialRoutingNumber
	}
	return ""
}

func (x *CreateFinancialInstitutionInformationRequest) GetFinancialRoutingNumberTypeCode() string {
	if x != nil {
		return x.FinancialRoutingNumberTypeCode
	}
	return ""
}

func (x *CreateFinancialInstitutionInformationRequest) GetFinancialAccountName() string {
	if x != nil {
		return x.FinancialAccountName
	}
	return ""
}

func (x *CreateFinancialInstitutionInformationRequest) GetFinancialAccountNumber() string {
	if x != nil {
		return x.FinancialAccountNumber
	}
	return ""
}

func (x *CreateFinancialInstitutionInformationRequest) GetFinancialAccountNumberTypeCode() string {
	if x != nil {
		return x.FinancialAccountNumberTypeCode
	}
	return ""
}

func (x *CreateFinancialInstitutionInformationRequest) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

func (x *CreateFinancialInstitutionInformationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateFinancialInstitutionInformationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateFinancialInstitutionInformationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateFinancialInstitutionInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitutionInformation *FinancialInstitutionInformation `protobuf:"bytes,1,opt,name=financial_institution_information,json=financialInstitutionInformation,proto3" json:"financial_institution_information,omitempty"`
}

func (x *CreateFinancialInstitutionInformationResponse) Reset() {
	*x = CreateFinancialInstitutionInformationResponse{}
	mi := &file_party_v1_party_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFinancialInstitutionInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFinancialInstitutionInformationResponse) ProtoMessage() {}

func (x *CreateFinancialInstitutionInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFinancialInstitutionInformationResponse.ProtoReflect.Descriptor instead.
func (*CreateFinancialInstitutionInformationResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{20}
}

func (x *CreateFinancialInstitutionInformationResponse) GetFinancialInstitutionInformation() *FinancialInstitutionInformation {
	if x != nil {
		return x.FinancialInstitutionInformation
	}
	return nil
}

type LegalRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LegalRegistrationAdditionalInformation string `protobuf:"bytes,2,opt,name=legal_registration_additional_information,json=legalRegistrationAdditionalInformation,proto3" json:"legal_registration_additional_information,omitempty"`
	LegalRegistrationNumber                string `protobuf:"bytes,3,opt,name=legal_registration_number,json=legalRegistrationNumber,proto3" json:"legal_registration_number,omitempty"`
	LegalRegistrationType                  string `protobuf:"bytes,4,opt,name=legal_registration_type,json=legalRegistrationType,proto3" json:"legal_registration_type,omitempty"`
}

func (x *LegalRegistration) Reset() {
	*x = LegalRegistration{}
	mi := &file_party_v1_party_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegalRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalRegistration) ProtoMessage() {}

func (x *LegalRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalRegistration.ProtoReflect.Descriptor instead.
func (*LegalRegistration) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{21}
}

func (x *LegalRegistration) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LegalRegistration) GetLegalRegistrationAdditionalInformation() string {
	if x != nil {
		return x.LegalRegistrationAdditionalInformation
	}
	return ""
}

func (x *LegalRegistration) GetLegalRegistrationNumber() string {
	if x != nil {
		return x.LegalRegistrationNumber
	}
	return ""
}

func (x *LegalRegistration) GetLegalRegistrationType() string {
	if x != nil {
		return x.LegalRegistrationType
	}
	return ""
}

type CreateLegalRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegalRegistrationAdditionalInformation string `protobuf:"bytes,1,opt,name=legal_registration_additional_information,json=legalRegistrationAdditionalInformation,proto3" json:"legal_registration_additional_information,omitempty"`
	LegalRegistrationNumber                string `protobuf:"bytes,2,opt,name=legal_registration_number,json=legalRegistrationNumber,proto3" json:"legal_registration_number,omitempty"`
	LegalRegistrationType                  string `protobuf:"bytes,3,opt,name=legal_registration_type,json=legalRegistrationType,proto3" json:"legal_registration_type,omitempty"`
	UserId                                 string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                              string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                              string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateLegalRegistrationRequest) Reset() {
	*x = CreateLegalRegistrationRequest{}
	mi := &file_party_v1_party_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLegalRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLegalRegistrationRequest) ProtoMessage() {}

func (x *CreateLegalRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLegalRegistrationRequest.ProtoReflect.Descriptor instead.
func (*CreateLegalRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{22}
}

func (x *CreateLegalRegistrationRequest) GetLegalRegistrationAdditionalInformation() string {
	if x != nil {
		return x.LegalRegistrationAdditionalInformation
	}
	return ""
}

func (x *CreateLegalRegistrationRequest) GetLegalRegistrationNumber() string {
	if x != nil {
		return x.LegalRegistrationNumber
	}
	return ""
}

func (x *CreateLegalRegistrationRequest) GetLegalRegistrationType() string {
	if x != nil {
		return x.LegalRegistrationType
	}
	return ""
}

func (x *CreateLegalRegistrationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateLegalRegistrationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateLegalRegistrationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateLegalRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegalRegistration *LegalRegistration `protobuf:"bytes,1,opt,name=legal_registration,json=legalRegistration,proto3" json:"legal_registration,omitempty"`
}

func (x *CreateLegalRegistrationResponse) Reset() {
	*x = CreateLegalRegistrationResponse{}
	mi := &file_party_v1_party_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLegalRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLegalRegistrationResponse) ProtoMessage() {}

func (x *CreateLegalRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLegalRegistrationResponse.ProtoReflect.Descriptor instead.
func (*CreateLegalRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{23}
}

func (x *CreateLegalRegistrationResponse) GetLegalRegistration() *LegalRegistration {
	if x != nil {
		return x.LegalRegistration
	}
	return nil
}

type Organisation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IssuedCapital        float64 `protobuf:"fixed64,2,opt,name=issued_capital,json=issuedCapital,proto3" json:"issued_capital,omitempty"`
	ICCodeListVersion    string  `protobuf:"bytes,3,opt,name=i_c_code_list_version,json=iCCodeListVersion,proto3" json:"i_c_code_list_version,omitempty"`
	ICCurrencyCode       string  `protobuf:"bytes,4,opt,name=i_c_currency_code,json=iCCurrencyCode,proto3" json:"i_c_currency_code,omitempty"`
	OrganisationName     string  `protobuf:"bytes,5,opt,name=organisation_name,json=organisationName,proto3" json:"organisation_name,omitempty"`
	OfficialAddress      uint32  `protobuf:"varint,6,opt,name=official_address,json=officialAddress,proto3" json:"official_address,omitempty"`
	TransactionalPartyId uint32  `protobuf:"varint,7,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
}

func (x *Organisation) Reset() {
	*x = Organisation{}
	mi := &file_party_v1_party_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Organisation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organisation) ProtoMessage() {}

func (x *Organisation) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organisation.ProtoReflect.Descriptor instead.
func (*Organisation) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{24}
}

func (x *Organisation) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Organisation) GetIssuedCapital() float64 {
	if x != nil {
		return x.IssuedCapital
	}
	return 0
}

func (x *Organisation) GetICCodeListVersion() string {
	if x != nil {
		return x.ICCodeListVersion
	}
	return ""
}

func (x *Organisation) GetICCurrencyCode() string {
	if x != nil {
		return x.ICCurrencyCode
	}
	return ""
}

func (x *Organisation) GetOrganisationName() string {
	if x != nil {
		return x.OrganisationName
	}
	return ""
}

func (x *Organisation) GetOfficialAddress() uint32 {
	if x != nil {
		return x.OfficialAddress
	}
	return 0
}

func (x *Organisation) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

type CreateOrganisationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuedCapital        float64 `protobuf:"fixed64,1,opt,name=issued_capital,json=issuedCapital,proto3" json:"issued_capital,omitempty"`
	ICCodeListVersion    string  `protobuf:"bytes,2,opt,name=i_c_code_list_version,json=iCCodeListVersion,proto3" json:"i_c_code_list_version,omitempty"`
	ICCurrencyCode       string  `protobuf:"bytes,3,opt,name=i_c_currency_code,json=iCCurrencyCode,proto3" json:"i_c_currency_code,omitempty"`
	OrganisationName     string  `protobuf:"bytes,4,opt,name=organisation_name,json=organisationName,proto3" json:"organisation_name,omitempty"`
	OfficialAddress      uint32  `protobuf:"varint,5,opt,name=official_address,json=officialAddress,proto3" json:"official_address,omitempty"`
	TransactionalPartyId uint32  `protobuf:"varint,6,opt,name=transactional_party_id,json=transactionalPartyId,proto3" json:"transactional_party_id,omitempty"`
	UserId               string  `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail            string  `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId            string  `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateOrganisationRequest) Reset() {
	*x = CreateOrganisationRequest{}
	mi := &file_party_v1_party_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganisationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganisationRequest) ProtoMessage() {}

func (x *CreateOrganisationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganisationRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganisationRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{25}
}

func (x *CreateOrganisationRequest) GetIssuedCapital() float64 {
	if x != nil {
		return x.IssuedCapital
	}
	return 0
}

func (x *CreateOrganisationRequest) GetICCodeListVersion() string {
	if x != nil {
		return x.ICCodeListVersion
	}
	return ""
}

func (x *CreateOrganisationRequest) GetICCurrencyCode() string {
	if x != nil {
		return x.ICCurrencyCode
	}
	return ""
}

func (x *CreateOrganisationRequest) GetOrganisationName() string {
	if x != nil {
		return x.OrganisationName
	}
	return ""
}

func (x *CreateOrganisationRequest) GetOfficialAddress() uint32 {
	if x != nil {
		return x.OfficialAddress
	}
	return 0
}

func (x *CreateOrganisationRequest) GetTransactionalPartyId() uint32 {
	if x != nil {
		return x.TransactionalPartyId
	}
	return 0
}

func (x *CreateOrganisationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOrganisationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOrganisationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateOrganisationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organisation *Organisation `protobuf:"bytes,1,opt,name=organisation,proto3" json:"organisation,omitempty"`
}

func (x *CreateOrganisationResponse) Reset() {
	*x = CreateOrganisationResponse{}
	mi := &file_party_v1_party_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganisationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganisationResponse) ProtoMessage() {}

func (x *CreateOrganisationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganisationResponse.ProtoReflect.Descriptor instead.
func (*CreateOrganisationResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{26}
}

func (x *CreateOrganisationResponse) GetOrganisation() *Organisation {
	if x != nil {
		return x.Organisation
	}
	return nil
}

var File_party_v1_party_proto protoreflect.FileDescriptor

var file_party_v1_party_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x22, 0x5f, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04,
	0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x6c, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x6c,
	0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x6c, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x67, 0x6c, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x71,
	0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x22, 0xc5, 0x02, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x1f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x29, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x6c, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x67, 0x6c, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x99, 0x03, 0x0a, 0x2a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x1f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x58, 0x0a, 0x29, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x25, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x6c, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x6c, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x05, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x70, 0x5f, 0x6f, 0x5f,
	0x62, 0x6f, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x4f, 0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x77, 0x6f, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x77, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x89, 0x06, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x4f, 0x66, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x1a, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0e, 0x70, 0x5f, 0x6f, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x4f, 0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x77, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x77, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0xc6,
	0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x14, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x8b, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75,
	0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x22, 0xb6, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22,
	0xc7, 0x02, 0x0a, 0x16, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x75,
	0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x75,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1e, 0x64,
	0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x16, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x9b, 0x03, 0x0a, 0x23, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61,
	0x78, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x41,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x75, 0x74,
	0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x75, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1e, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x75, 0x74, 0x79,
	0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54,
	0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x19, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x64, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61,
	0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x04,
	0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x49, 0x0a, 0x21, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x22, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0xa0, 0x05, 0x0a,
	0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x21, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0xa6, 0x01, 0x0a, 0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x75, 0x0a, 0x21, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x01, 0x0a, 0x11, 0x4c, 0x65, 0x67,
	0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59,
	0x0a, 0x29, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x26, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc6, 0x02,
	0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x59, 0x0a, 0x29, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x26, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x02, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a,
	0x15, 0x69, 0x5f, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x43,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x11, 0x69, 0x5f, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x43, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x84, 0x03, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a,
	0x15, 0x69, 0x5f, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x43,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x11, 0x69, 0x5f, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x43, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x9e, 0x08, 0x0a, 0x0c, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01,
	0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1e,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7d, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x54, 0x61, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x75, 0x74, 0x79, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98,
	0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x67, 0x73, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_party_v1_party_proto_rawDescOnce sync.Once
	file_party_v1_party_proto_rawDescData = file_party_v1_party_proto_rawDesc
)

func file_party_v1_party_proto_rawDescGZIP() []byte {
	file_party_v1_party_proto_rawDescOnce.Do(func() {
		file_party_v1_party_proto_rawDescData = protoimpl.X.CompressGZIP(file_party_v1_party_proto_rawDescData)
	})
	return file_party_v1_party_proto_rawDescData
}

var file_party_v1_party_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_party_v1_party_proto_goTypes = []any{
	(*TransactionalParty)(nil),                          // 0: party.v1.TransactionalParty
	(*CreateTransactionalPartyRequest)(nil),             // 1: party.v1.CreateTransactionalPartyRequest
	(*CreateTransactionalPartyResponse)(nil),            // 2: party.v1.CreateTransactionalPartyResponse
	(*AdditionalPartyIdentification)(nil),               // 3: party.v1.AdditionalPartyIdentification
	(*CreateAdditionalPartyIdentificationRequest)(nil),  // 4: party.v1.CreateAdditionalPartyIdentificationRequest
	(*CreateAdditionalPartyIdentificationResponse)(nil), // 5: party.v1.CreateAdditionalPartyIdentificationResponse
	(*Address)(nil),                                       // 6: party.v1.Address
	(*CreateAddressRequest)(nil),                          // 7: party.v1.CreateAddressRequest
	(*CreateAddressResponse)(nil),                         // 8: party.v1.CreateAddressResponse
	(*CommunicationChannel)(nil),                          // 9: party.v1.CommunicationChannel
	(*CreateCommunicationChannelRequest)(nil),             // 10: party.v1.CreateCommunicationChannelRequest
	(*CreateCommunicationChannelResponse)(nil),            // 11: party.v1.CreateCommunicationChannelResponse
	(*Contact)(nil),                                       // 12: party.v1.Contact
	(*CreateContactRequest)(nil),                          // 13: party.v1.CreateContactRequest
	(*CreateContactResponse)(nil),                         // 14: party.v1.CreateContactResponse
	(*DutyFeeTaxRegistration)(nil),                        // 15: party.v1.DutyFeeTaxRegistration
	(*CreateDutyFeeTaxRegistrationRequest)(nil),           // 16: party.v1.CreateDutyFeeTaxRegistrationRequest
	(*CreateDutyFeeTaxRegistrationResponse)(nil),          // 17: party.v1.CreateDutyFeeTaxRegistrationResponse
	(*FinancialInstitutionInformation)(nil),               // 18: party.v1.FinancialInstitutionInformation
	(*CreateFinancialInstitutionInformationRequest)(nil),  // 19: party.v1.CreateFinancialInstitutionInformationRequest
	(*CreateFinancialInstitutionInformationResponse)(nil), // 20: party.v1.CreateFinancialInstitutionInformationResponse
	(*LegalRegistration)(nil),                             // 21: party.v1.LegalRegistration
	(*CreateLegalRegistrationRequest)(nil),                // 22: party.v1.CreateLegalRegistrationRequest
	(*CreateLegalRegistrationResponse)(nil),               // 23: party.v1.CreateLegalRegistrationResponse
	(*Organisation)(nil),                                  // 24: party.v1.Organisation
	(*CreateOrganisationRequest)(nil),                     // 25: party.v1.CreateOrganisationRequest
	(*CreateOrganisationResponse)(nil),                    // 26: party.v1.CreateOrganisationResponse
}
var file_party_v1_party_proto_depIdxs = []int32{
	0,  // 0: party.v1.CreateTransactionalPartyResponse.transactional_party:type_name -> party.v1.TransactionalParty
	3,  // 1: party.v1.CreateAdditionalPartyIdentificationResponse.additional_party_identification:type_name -> party.v1.AdditionalPartyIdentification
	6,  // 2: party.v1.CreateAddressResponse.address:type_name -> party.v1.Address
	9,  // 3: party.v1.CreateCommunicationChannelResponse.communication_channel:type_name -> party.v1.CommunicationChannel
	12, // 4: party.v1.CreateContactResponse.contact:type_name -> party.v1.Contact
	15, // 5: party.v1.CreateDutyFeeTaxRegistrationResponse.duty_fee_tax_registration:type_name -> party.v1.DutyFeeTaxRegistration
	18, // 6: party.v1.CreateFinancialInstitutionInformationResponse.financial_institution_information:type_name -> party.v1.FinancialInstitutionInformation
	21, // 7: party.v1.CreateLegalRegistrationResponse.legal_registration:type_name -> party.v1.LegalRegistration
	24, // 8: party.v1.CreateOrganisationResponse.organisation:type_name -> party.v1.Organisation
	1,  // 9: party.v1.PartyService.CreateTransactionalParty:input_type -> party.v1.CreateTransactionalPartyRequest
	4,  // 10: party.v1.PartyService.CreateAdditionalPartyIdentification:input_type -> party.v1.CreateAdditionalPartyIdentificationRequest
	7,  // 11: party.v1.PartyService.CreateAddress:input_type -> party.v1.CreateAddressRequest
	10, // 12: party.v1.PartyService.CreateCommunicationChannel:input_type -> party.v1.CreateCommunicationChannelRequest
	13, // 13: party.v1.PartyService.CreateContact:input_type -> party.v1.CreateContactRequest
	16, // 14: party.v1.PartyService.CreateDutyFeeTaxRegistration:input_type -> party.v1.CreateDutyFeeTaxRegistrationRequest
	19, // 15: party.v1.PartyService.CreateFinancialInstitutionInformation:input_type -> party.v1.CreateFinancialInstitutionInformationRequest
	22, // 16: party.v1.PartyService.CreateLegalRegistration:input_type -> party.v1.CreateLegalRegistrationRequest
	25, // 17: party.v1.PartyService.CreateOrganisation:input_type -> party.v1.CreateOrganisationRequest
	2,  // 18: party.v1.PartyService.CreateTransactionalParty:output_type -> party.v1.CreateTransactionalPartyResponse
	5,  // 19: party.v1.PartyService.CreateAdditionalPartyIdentification:output_type -> party.v1.CreateAdditionalPartyIdentificationResponse
	8,  // 20: party.v1.PartyService.CreateAddress:output_type -> party.v1.CreateAddressResponse
	11, // 21: party.v1.PartyService.CreateCommunicationChannel:output_type -> party.v1.CreateCommunicationChannelResponse
	14, // 22: party.v1.PartyService.CreateContact:output_type -> party.v1.CreateContactResponse
	17, // 23: party.v1.PartyService.CreateDutyFeeTaxRegistration:output_type -> party.v1.CreateDutyFeeTaxRegistrationResponse
	20, // 24: party.v1.PartyService.CreateFinancialInstitutionInformation:output_type -> party.v1.CreateFinancialInstitutionInformationResponse
	23, // 25: party.v1.PartyService.CreateLegalRegistration:output_type -> party.v1.CreateLegalRegistrationResponse
	26, // 26: party.v1.PartyService.CreateOrganisation:output_type -> party.v1.CreateOrganisationResponse
	18, // [18:27] is the sub-list for method output_type
	9,  // [9:18] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_party_v1_party_proto_init() }
func file_party_v1_party_proto_init() {
	if File_party_v1_party_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_party_v1_party_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_party_v1_party_proto_goTypes,
		DependencyIndexes: file_party_v1_party_proto_depIdxs,
		MessageInfos:      file_party_v1_party_proto_msgTypes,
	}.Build()
	File_party_v1_party_proto = out.File
	file_party_v1_party_proto_rawDesc = nil
	file_party_v1_party_proto_goTypes = nil
	file_party_v1_party_proto_depIdxs = nil
}
