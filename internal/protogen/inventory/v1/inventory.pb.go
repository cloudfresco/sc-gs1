// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: inventory/v1/inventory.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-gs1/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConsumptionReportItemLocationInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TotalConsumptionAmount float64 `protobuf:"fixed64,2,opt,name=total_consumption_amount,json=totalConsumptionAmount,proto3" json:"total_consumption_amount,omitempty"`
	TCACodeListVersion     string  `protobuf:"bytes,3,opt,name=t_c_a_code_list_version,json=tCACodeListVersion,proto3" json:"t_c_a_code_list_version,omitempty"`
	TCACCurrencyCode       string  `protobuf:"bytes,4,opt,name=t_c_a_c_currency_code,json=tCACCurrencyCode,proto3" json:"t_c_a_c_currency_code,omitempty"`
	InventoryLocation      uint32  `protobuf:"varint,5,opt,name=inventory_location,json=inventoryLocation,proto3" json:"inventory_location,omitempty"`
	ShipTo                 uint32  `protobuf:"varint,6,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	ConsumptionReportId    uint32  `protobuf:"varint,7,opt,name=consumption_report_id,json=consumptionReportId,proto3" json:"consumption_report_id,omitempty"`
}

func (x *ConsumptionReportItemLocationInformation) Reset() {
	*x = ConsumptionReportItemLocationInformation{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumptionReportItemLocationInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumptionReportItemLocationInformation) ProtoMessage() {}

func (x *ConsumptionReportItemLocationInformation) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumptionReportItemLocationInformation.ProtoReflect.Descriptor instead.
func (*ConsumptionReportItemLocationInformation) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *ConsumptionReportItemLocationInformation) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConsumptionReportItemLocationInformation) GetTotalConsumptionAmount() float64 {
	if x != nil {
		return x.TotalConsumptionAmount
	}
	return 0
}

func (x *ConsumptionReportItemLocationInformation) GetTCACodeListVersion() string {
	if x != nil {
		return x.TCACodeListVersion
	}
	return ""
}

func (x *ConsumptionReportItemLocationInformation) GetTCACCurrencyCode() string {
	if x != nil {
		return x.TCACCurrencyCode
	}
	return ""
}

func (x *ConsumptionReportItemLocationInformation) GetInventoryLocation() uint32 {
	if x != nil {
		return x.InventoryLocation
	}
	return 0
}

func (x *ConsumptionReportItemLocationInformation) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *ConsumptionReportItemLocationInformation) GetConsumptionReportId() uint32 {
	if x != nil {
		return x.ConsumptionReportId
	}
	return 0
}

type CreateConsumptionReportItemLocationInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalConsumptionAmount float64 `protobuf:"fixed64,1,opt,name=total_consumption_amount,json=totalConsumptionAmount,proto3" json:"total_consumption_amount,omitempty"`
	TCACodeListVersion     string  `protobuf:"bytes,2,opt,name=t_c_a_code_list_version,json=tCACodeListVersion,proto3" json:"t_c_a_code_list_version,omitempty"`
	TCACCurrencyCode       string  `protobuf:"bytes,3,opt,name=t_c_a_c_currency_code,json=tCACCurrencyCode,proto3" json:"t_c_a_c_currency_code,omitempty"`
	InventoryLocation      uint32  `protobuf:"varint,4,opt,name=inventory_location,json=inventoryLocation,proto3" json:"inventory_location,omitempty"`
	ShipTo                 uint32  `protobuf:"varint,5,opt,name=ship_to,json=shipTo,proto3" json:"ship_to,omitempty"`
	ConsumptionReportId    uint32  `protobuf:"varint,6,opt,name=consumption_report_id,json=consumptionReportId,proto3" json:"consumption_report_id,omitempty"`
	UserId                 string  `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string  `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string  `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateConsumptionReportItemLocationInformationRequest) Reset() {
	*x = CreateConsumptionReportItemLocationInformationRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConsumptionReportItemLocationInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsumptionReportItemLocationInformationRequest) ProtoMessage() {}

func (x *CreateConsumptionReportItemLocationInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsumptionReportItemLocationInformationRequest.ProtoReflect.Descriptor instead.
func (*CreateConsumptionReportItemLocationInformationRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *CreateConsumptionReportItemLocationInformationRequest) GetTotalConsumptionAmount() float64 {
	if x != nil {
		return x.TotalConsumptionAmount
	}
	return 0
}

func (x *CreateConsumptionReportItemLocationInformationRequest) GetTCACodeListVersion() string {
	if x != nil {
		return x.TCACodeListVersion
	}
	return ""
}

func (x *CreateConsumptionReportItemLocationInformationRequest) GetTCACCurrencyCode() string {
	if x != nil {
		return x.TCACCurrencyCode
	}
	return ""
}

func (x *CreateConsumptionReportItemLocationInformationRequest) GetInventoryLocation() uint32 {
	if x != nil {
		return x.InventoryLocation
	}
	return 0
}

func (x *CreateConsumptionReportItemLocationInformationRequest) GetShipTo() uint32 {
	if x != nil {
		return x.ShipTo
	}
	return 0
}

func (x *CreateConsumptionReportItemLocationInformationRequest) GetConsumptionReportId() uint32 {
	if x != nil {
		return x.ConsumptionReportId
	}
	return 0
}

func (x *CreateConsumptionReportItemLocationInformationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateConsumptionReportItemLocationInformationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateConsumptionReportItemLocationInformationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateConsumptionReportItemLocationInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumptionReportItemLocationInformation *ConsumptionReportItemLocationInformation `protobuf:"bytes,1,opt,name=consumption_report_item_location_information,json=consumptionReportItemLocationInformation,proto3" json:"consumption_report_item_location_information,omitempty"`
}

func (x *CreateConsumptionReportItemLocationInformationResponse) Reset() {
	*x = CreateConsumptionReportItemLocationInformationResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConsumptionReportItemLocationInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsumptionReportItemLocationInformationResponse) ProtoMessage() {}

func (x *CreateConsumptionReportItemLocationInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsumptionReportItemLocationInformationResponse.ProtoReflect.Descriptor instead.
func (*CreateConsumptionReportItemLocationInformationResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *CreateConsumptionReportItemLocationInformationResponse) GetConsumptionReportItemLocationInformation() *ConsumptionReportItemLocationInformation {
	if x != nil {
		return x.ConsumptionReportItemLocationInformation
	}
	return nil
}

type ConsumptionReportLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumptionReportLineItemD *ConsumptionReportLineItemD `protobuf:"bytes,1,opt,name=consumption_report_line_item_d,json=consumptionReportLineItemD,proto3" json:"consumption_report_line_item_d,omitempty"`
	ConsumptionReportLineItemT *ConsumptionReportLineItemT `protobuf:"bytes,2,opt,name=consumption_report_line_item_t,json=consumptionReportLineItemT,proto3" json:"consumption_report_line_item_t,omitempty"`
	CrUpdUser                  *v1.CrUpdUser               `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                  *v1.CrUpdTime               `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *ConsumptionReportLineItem) Reset() {
	*x = ConsumptionReportLineItem{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumptionReportLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumptionReportLineItem) ProtoMessage() {}

func (x *ConsumptionReportLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumptionReportLineItem.ProtoReflect.Descriptor instead.
func (*ConsumptionReportLineItem) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *ConsumptionReportLineItem) GetConsumptionReportLineItemD() *ConsumptionReportLineItemD {
	if x != nil {
		return x.ConsumptionReportLineItemD
	}
	return nil
}

func (x *ConsumptionReportLineItem) GetConsumptionReportLineItemT() *ConsumptionReportLineItemT {
	if x != nil {
		return x.ConsumptionReportLineItemT
	}
	return nil
}

func (x *ConsumptionReportLineItem) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ConsumptionReportLineItem) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ConsumptionReportLineItemD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                        []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                          string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ConsumedQuantity             float64 `protobuf:"fixed64,4,opt,name=consumed_quantity,json=consumedQuantity,proto3" json:"consumed_quantity,omitempty"`
	CQMeasurementUnitCode        string  `protobuf:"bytes,5,opt,name=c_q_measurement_unit_code,json=cQMeasurementUnitCode,proto3" json:"c_q_measurement_unit_code,omitempty"`
	CQCodeListVersion            string  `protobuf:"bytes,6,opt,name=c_q_code_list_version,json=cQCodeListVersion,proto3" json:"c_q_code_list_version,omitempty"`
	LineItemNumber               uint32  `protobuf:"varint,7,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	NetConsumptionAmount         int64   `protobuf:"varint,8,opt,name=net_consumption_amount,json=netConsumptionAmount,proto3" json:"net_consumption_amount,omitempty"`
	NetConsumptionAmountCurrency string  `protobuf:"bytes,9,opt,name=net_consumption_amount_currency,json=netConsumptionAmountCurrency,proto3" json:"net_consumption_amount_currency,omitempty"`
	NetConsumptionAmountValue    string  `protobuf:"bytes,10,opt,name=net_consumption_amount_value,json=netConsumptionAmountValue,proto3" json:"net_consumption_amount_value,omitempty"`
	NCACCodeListVersion          string  `protobuf:"bytes,11,opt,name=n_c_a_c_code_list_version,json=nCACCodeListVersion,proto3" json:"n_c_a_c_code_list_version,omitempty"`
	NCACCurrencyCode             string  `protobuf:"bytes,12,opt,name=n_c_a_c_currency_code,json=nCACCurrencyCode,proto3" json:"n_c_a_c_currency_code,omitempty"`
	NetPrice                     int64   `protobuf:"varint,13,opt,name=net_price,json=netPrice,proto3" json:"net_price,omitempty"`
	NetPriceCurrency             string  `protobuf:"bytes,14,opt,name=net_price_currency,json=netPriceCurrency,proto3" json:"net_price_currency,omitempty"`
	NetPriceValue                string  `protobuf:"bytes,15,opt,name=net_price_value,json=netPriceValue,proto3" json:"net_price_value,omitempty"`
	NPCodeListVersion            string  `protobuf:"bytes,16,opt,name=n_p_code_list_version,json=nPCodeListVersion,proto3" json:"n_p_code_list_version,omitempty"`
	NPCurrencyCode               string  `protobuf:"bytes,17,opt,name=n_p_currency_code,json=nPCurrencyCode,proto3" json:"n_p_currency_code,omitempty"`
	ParentLineItemNumber         uint32  `protobuf:"varint,18,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	PlanBucketSizeCode           string  `protobuf:"bytes,19,opt,name=plan_bucket_size_code,json=planBucketSizeCode,proto3" json:"plan_bucket_size_code,omitempty"`
	PurchaseConditions           uint32  `protobuf:"varint,20,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	ConsumptionReportId          uint32  `protobuf:"varint,21,opt,name=consumption_report_id,json=consumptionReportId,proto3" json:"consumption_report_id,omitempty"`
}

func (x *ConsumptionReportLineItemD) Reset() {
	*x = ConsumptionReportLineItemD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumptionReportLineItemD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumptionReportLineItemD) ProtoMessage() {}

func (x *ConsumptionReportLineItemD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumptionReportLineItemD.ProtoReflect.Descriptor instead.
func (*ConsumptionReportLineItemD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *ConsumptionReportLineItemD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConsumptionReportLineItemD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ConsumptionReportLineItemD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetConsumedQuantity() float64 {
	if x != nil {
		return x.ConsumedQuantity
	}
	return 0
}

func (x *ConsumptionReportLineItemD) GetCQMeasurementUnitCode() string {
	if x != nil {
		return x.CQMeasurementUnitCode
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetCQCodeListVersion() string {
	if x != nil {
		return x.CQCodeListVersion
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *ConsumptionReportLineItemD) GetNetConsumptionAmount() int64 {
	if x != nil {
		return x.NetConsumptionAmount
	}
	return 0
}

func (x *ConsumptionReportLineItemD) GetNetConsumptionAmountCurrency() string {
	if x != nil {
		return x.NetConsumptionAmountCurrency
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetNetConsumptionAmountValue() string {
	if x != nil {
		return x.NetConsumptionAmountValue
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetNCACCodeListVersion() string {
	if x != nil {
		return x.NCACCodeListVersion
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetNCACCurrencyCode() string {
	if x != nil {
		return x.NCACCurrencyCode
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetNetPrice() int64 {
	if x != nil {
		return x.NetPrice
	}
	return 0
}

func (x *ConsumptionReportLineItemD) GetNetPriceCurrency() string {
	if x != nil {
		return x.NetPriceCurrency
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetNetPriceValue() string {
	if x != nil {
		return x.NetPriceValue
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetNPCodeListVersion() string {
	if x != nil {
		return x.NPCodeListVersion
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetNPCurrencyCode() string {
	if x != nil {
		return x.NPCurrencyCode
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *ConsumptionReportLineItemD) GetPlanBucketSizeCode() string {
	if x != nil {
		return x.PlanBucketSizeCode
	}
	return ""
}

func (x *ConsumptionReportLineItemD) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *ConsumptionReportLineItemD) GetConsumptionReportId() uint32 {
	if x != nil {
		return x.ConsumptionReportId
	}
	return 0
}

type ConsumptionReportLineItemT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumptionPeriodBegin *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=consumption_period_begin,json=consumptionPeriodBegin,proto3" json:"consumption_period_begin,omitempty"`
	ConsumptionPeriodEnd   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=consumption_period_end,json=consumptionPeriodEnd,proto3" json:"consumption_period_end,omitempty"`
}

func (x *ConsumptionReportLineItemT) Reset() {
	*x = ConsumptionReportLineItemT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumptionReportLineItemT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumptionReportLineItemT) ProtoMessage() {}

func (x *ConsumptionReportLineItemT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumptionReportLineItemT.ProtoReflect.Descriptor instead.
func (*ConsumptionReportLineItemT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{5}
}

func (x *ConsumptionReportLineItemT) GetConsumptionPeriodBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.ConsumptionPeriodBegin
	}
	return nil
}

func (x *ConsumptionReportLineItemT) GetConsumptionPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.ConsumptionPeriodEnd
	}
	return nil
}

type CreateConsumptionReportLineItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumedQuantity             float64 `protobuf:"fixed64,1,opt,name=consumed_quantity,json=consumedQuantity,proto3" json:"consumed_quantity,omitempty"`
	CQMeasurementUnitCode        string  `protobuf:"bytes,2,opt,name=c_q_measurement_unit_code,json=cQMeasurementUnitCode,proto3" json:"c_q_measurement_unit_code,omitempty"`
	CQCodeListVersion            string  `protobuf:"bytes,3,opt,name=c_q_code_list_version,json=cQCodeListVersion,proto3" json:"c_q_code_list_version,omitempty"`
	LineItemNumber               uint32  `protobuf:"varint,4,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	NetConsumptionAmount         string  `protobuf:"bytes,5,opt,name=net_consumption_amount,json=netConsumptionAmount,proto3" json:"net_consumption_amount,omitempty"`
	NetConsumptionAmountCurrency string  `protobuf:"bytes,6,opt,name=net_consumption_amount_currency,json=netConsumptionAmountCurrency,proto3" json:"net_consumption_amount_currency,omitempty"`
	NCACCodeListVersion          string  `protobuf:"bytes,7,opt,name=n_c_a_c_code_list_version,json=nCACCodeListVersion,proto3" json:"n_c_a_c_code_list_version,omitempty"`
	NCACCurrencyCode             string  `protobuf:"bytes,8,opt,name=n_c_a_c_currency_code,json=nCACCurrencyCode,proto3" json:"n_c_a_c_currency_code,omitempty"`
	NetPrice                     string  `protobuf:"bytes,9,opt,name=net_price,json=netPrice,proto3" json:"net_price,omitempty"`
	NetPriceCurrency             string  `protobuf:"bytes,10,opt,name=net_price_currency,json=netPriceCurrency,proto3" json:"net_price_currency,omitempty"`
	NPCodeListVersion            string  `protobuf:"bytes,11,opt,name=n_p_code_list_version,json=nPCodeListVersion,proto3" json:"n_p_code_list_version,omitempty"`
	NPCurrencyCode               string  `protobuf:"bytes,12,opt,name=n_p_currency_code,json=nPCurrencyCode,proto3" json:"n_p_currency_code,omitempty"`
	ParentLineItemNumber         uint32  `protobuf:"varint,13,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	PlanBucketSizeCode           string  `protobuf:"bytes,14,opt,name=plan_bucket_size_code,json=planBucketSizeCode,proto3" json:"plan_bucket_size_code,omitempty"`
	ConsumptionPeriodBegin       string  `protobuf:"bytes,15,opt,name=consumption_period_begin,json=consumptionPeriodBegin,proto3" json:"consumption_period_begin,omitempty"`
	ConsumptionPeriodEnd         string  `protobuf:"bytes,16,opt,name=consumption_period_end,json=consumptionPeriodEnd,proto3" json:"consumption_period_end,omitempty"`
	PurchaseConditions           uint32  `protobuf:"varint,17,opt,name=purchase_conditions,json=purchaseConditions,proto3" json:"purchase_conditions,omitempty"`
	ConsumptionReportId          uint32  `protobuf:"varint,18,opt,name=consumption_report_id,json=consumptionReportId,proto3" json:"consumption_report_id,omitempty"`
	UserId                       string  `protobuf:"bytes,19,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string  `protobuf:"bytes,20,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string  `protobuf:"bytes,21,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateConsumptionReportLineItemRequest) Reset() {
	*x = CreateConsumptionReportLineItemRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConsumptionReportLineItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsumptionReportLineItemRequest) ProtoMessage() {}

func (x *CreateConsumptionReportLineItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsumptionReportLineItemRequest.ProtoReflect.Descriptor instead.
func (*CreateConsumptionReportLineItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *CreateConsumptionReportLineItemRequest) GetConsumedQuantity() float64 {
	if x != nil {
		return x.ConsumedQuantity
	}
	return 0
}

func (x *CreateConsumptionReportLineItemRequest) GetCQMeasurementUnitCode() string {
	if x != nil {
		return x.CQMeasurementUnitCode
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetCQCodeListVersion() string {
	if x != nil {
		return x.CQCodeListVersion
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *CreateConsumptionReportLineItemRequest) GetNetConsumptionAmount() string {
	if x != nil {
		return x.NetConsumptionAmount
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetNetConsumptionAmountCurrency() string {
	if x != nil {
		return x.NetConsumptionAmountCurrency
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetNCACCodeListVersion() string {
	if x != nil {
		return x.NCACCodeListVersion
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetNCACCurrencyCode() string {
	if x != nil {
		return x.NCACCurrencyCode
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetNetPrice() string {
	if x != nil {
		return x.NetPrice
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetNetPriceCurrency() string {
	if x != nil {
		return x.NetPriceCurrency
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetNPCodeListVersion() string {
	if x != nil {
		return x.NPCodeListVersion
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetNPCurrencyCode() string {
	if x != nil {
		return x.NPCurrencyCode
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *CreateConsumptionReportLineItemRequest) GetPlanBucketSizeCode() string {
	if x != nil {
		return x.PlanBucketSizeCode
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetConsumptionPeriodBegin() string {
	if x != nil {
		return x.ConsumptionPeriodBegin
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetConsumptionPeriodEnd() string {
	if x != nil {
		return x.ConsumptionPeriodEnd
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetPurchaseConditions() uint32 {
	if x != nil {
		return x.PurchaseConditions
	}
	return 0
}

func (x *CreateConsumptionReportLineItemRequest) GetConsumptionReportId() uint32 {
	if x != nil {
		return x.ConsumptionReportId
	}
	return 0
}

func (x *CreateConsumptionReportLineItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateConsumptionReportLineItemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateConsumptionReportLineItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumptionReportLineItem *ConsumptionReportLineItem `protobuf:"bytes,1,opt,name=consumption_report_line_item,json=consumptionReportLineItem,proto3" json:"consumption_report_line_item,omitempty"`
}

func (x *CreateConsumptionReportLineItemResponse) Reset() {
	*x = CreateConsumptionReportLineItemResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConsumptionReportLineItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsumptionReportLineItemResponse) ProtoMessage() {}

func (x *CreateConsumptionReportLineItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsumptionReportLineItemResponse.ProtoReflect.Descriptor instead.
func (*CreateConsumptionReportLineItemResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{7}
}

func (x *CreateConsumptionReportLineItemResponse) GetConsumptionReportLineItem() *ConsumptionReportLineItem {
	if x != nil {
		return x.ConsumptionReportLineItem
	}
	return nil
}

type ConsumptionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumptionReportD *ConsumptionReportD `protobuf:"bytes,1,opt,name=consumption_report_d,json=consumptionReportD,proto3" json:"consumption_report_d,omitempty"`
	CrUpdUser          *v1.CrUpdUser       `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime          *v1.CrUpdTime       `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *ConsumptionReport) Reset() {
	*x = ConsumptionReport{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumptionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumptionReport) ProtoMessage() {}

func (x *ConsumptionReport) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumptionReport.ProtoReflect.Descriptor instead.
func (*ConsumptionReport) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{8}
}

func (x *ConsumptionReport) GetConsumptionReportD() *ConsumptionReportD {
	if x != nil {
		return x.ConsumptionReportD
	}
	return nil
}

func (x *ConsumptionReport) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ConsumptionReport) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ConsumptionReportD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                           []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                             string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	Buyer                           uint32 `protobuf:"varint,4,opt,name=buyer,proto3" json:"buyer,omitempty"`
	ConsumptionReportIdentification uint32 `protobuf:"varint,5,opt,name=consumption_report_identification,json=consumptionReportIdentification,proto3" json:"consumption_report_identification,omitempty"`
	Seller                          uint32 `protobuf:"varint,6,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (x *ConsumptionReportD) Reset() {
	*x = ConsumptionReportD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumptionReportD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumptionReportD) ProtoMessage() {}

func (x *ConsumptionReportD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumptionReportD.ProtoReflect.Descriptor instead.
func (*ConsumptionReportD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{9}
}

func (x *ConsumptionReportD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConsumptionReportD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ConsumptionReportD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ConsumptionReportD) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *ConsumptionReportD) GetConsumptionReportIdentification() uint32 {
	if x != nil {
		return x.ConsumptionReportIdentification
	}
	return 0
}

func (x *ConsumptionReportD) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

type CreateConsumptionReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buyer                           uint32 `protobuf:"varint,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	ConsumptionReportIdentification uint32 `protobuf:"varint,2,opt,name=consumption_report_identification,json=consumptionReportIdentification,proto3" json:"consumption_report_identification,omitempty"`
	Seller                          uint32 `protobuf:"varint,3,opt,name=seller,proto3" json:"seller,omitempty"`
	UserId                          string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                       string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                       string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateConsumptionReportRequest) Reset() {
	*x = CreateConsumptionReportRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConsumptionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsumptionReportRequest) ProtoMessage() {}

func (x *CreateConsumptionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsumptionReportRequest.ProtoReflect.Descriptor instead.
func (*CreateConsumptionReportRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{10}
}

func (x *CreateConsumptionReportRequest) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *CreateConsumptionReportRequest) GetConsumptionReportIdentification() uint32 {
	if x != nil {
		return x.ConsumptionReportIdentification
	}
	return 0
}

func (x *CreateConsumptionReportRequest) GetSeller() uint32 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *CreateConsumptionReportRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateConsumptionReportRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateConsumptionReportRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateConsumptionReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumptionReport *ConsumptionReport `protobuf:"bytes,1,opt,name=consumption_report,json=consumptionReport,proto3" json:"consumption_report,omitempty"`
}

func (x *CreateConsumptionReportResponse) Reset() {
	*x = CreateConsumptionReportResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConsumptionReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsumptionReportResponse) ProtoMessage() {}

func (x *CreateConsumptionReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsumptionReportResponse.ProtoReflect.Descriptor instead.
func (*CreateConsumptionReportResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{11}
}

func (x *CreateConsumptionReportResponse) GetConsumptionReport() *ConsumptionReport {
	if x != nil {
		return x.ConsumptionReport
	}
	return nil
}

type InventoryActivityLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryActivityLineItemD *InventoryActivityLineItemD `protobuf:"bytes,1,opt,name=inventory_activity_line_item_d,json=inventoryActivityLineItemD,proto3" json:"inventory_activity_line_item_d,omitempty"`
	InventoryActivityLineItemT *InventoryActivityLineItemT `protobuf:"bytes,2,opt,name=inventory_activity_line_item_t,json=inventoryActivityLineItemT,proto3" json:"inventory_activity_line_item_t,omitempty"`
}

func (x *InventoryActivityLineItem) Reset() {
	*x = InventoryActivityLineItem{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryActivityLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryActivityLineItem) ProtoMessage() {}

func (x *InventoryActivityLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryActivityLineItem.ProtoReflect.Descriptor instead.
func (*InventoryActivityLineItem) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{12}
}

func (x *InventoryActivityLineItem) GetInventoryActivityLineItemD() *InventoryActivityLineItemD {
	if x != nil {
		return x.InventoryActivityLineItemD
	}
	return nil
}

func (x *InventoryActivityLineItem) GetInventoryActivityLineItemT() *InventoryActivityLineItemT {
	if x != nil {
		return x.InventoryActivityLineItemT
	}
	return nil
}

type InventoryActivityLineItemD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LineItemNumber                     uint32 `protobuf:"varint,2,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ParentLineItemNumber               uint32 `protobuf:"varint,3,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	InventoryItemLocationInformationId uint32 `protobuf:"varint,4,opt,name=inventory_item_location_information_id,json=inventoryItemLocationInformationId,proto3" json:"inventory_item_location_information_id,omitempty"`
	InventoryReportId                  uint32 `protobuf:"varint,5,opt,name=inventory_report_id,json=inventoryReportId,proto3" json:"inventory_report_id,omitempty"`
}

func (x *InventoryActivityLineItemD) Reset() {
	*x = InventoryActivityLineItemD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryActivityLineItemD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryActivityLineItemD) ProtoMessage() {}

func (x *InventoryActivityLineItemD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryActivityLineItemD.ProtoReflect.Descriptor instead.
func (*InventoryActivityLineItemD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{13}
}

func (x *InventoryActivityLineItemD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InventoryActivityLineItemD) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *InventoryActivityLineItemD) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *InventoryActivityLineItemD) GetInventoryItemLocationInformationId() uint32 {
	if x != nil {
		return x.InventoryItemLocationInformationId
	}
	return 0
}

func (x *InventoryActivityLineItemD) GetInventoryReportId() uint32 {
	if x != nil {
		return x.InventoryReportId
	}
	return 0
}

type InventoryActivityLineItemT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportingPeriodBegin *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=reporting_period_begin,json=reportingPeriodBegin,proto3" json:"reporting_period_begin,omitempty"`
	ReportingPeriodEnd   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
}

func (x *InventoryActivityLineItemT) Reset() {
	*x = InventoryActivityLineItemT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryActivityLineItemT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryActivityLineItemT) ProtoMessage() {}

func (x *InventoryActivityLineItemT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryActivityLineItemT.ProtoReflect.Descriptor instead.
func (*InventoryActivityLineItemT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{14}
}

func (x *InventoryActivityLineItemT) GetReportingPeriodBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportingPeriodBegin
	}
	return nil
}

func (x *InventoryActivityLineItemT) GetReportingPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return nil
}

type CreateInventoryActivityLineItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineItemNumber                     uint32 `protobuf:"varint,1,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ParentLineItemNumber               uint32 `protobuf:"varint,2,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	ReportingPeriodBegin               string `protobuf:"bytes,3,opt,name=reporting_period_begin,json=reportingPeriodBegin,proto3" json:"reporting_period_begin,omitempty"`
	ReportingPeriodEnd                 string `protobuf:"bytes,4,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
	InventoryItemLocationInformationId uint32 `protobuf:"varint,5,opt,name=inventory_item_location_information_id,json=inventoryItemLocationInformationId,proto3" json:"inventory_item_location_information_id,omitempty"`
	InventoryReportId                  uint32 `protobuf:"varint,6,opt,name=inventory_report_id,json=inventoryReportId,proto3" json:"inventory_report_id,omitempty"`
	UserId                             string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                          string `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                          string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInventoryActivityLineItemRequest) Reset() {
	*x = CreateInventoryActivityLineItemRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryActivityLineItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryActivityLineItemRequest) ProtoMessage() {}

func (x *CreateInventoryActivityLineItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryActivityLineItemRequest.ProtoReflect.Descriptor instead.
func (*CreateInventoryActivityLineItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{15}
}

func (x *CreateInventoryActivityLineItemRequest) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *CreateInventoryActivityLineItemRequest) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *CreateInventoryActivityLineItemRequest) GetReportingPeriodBegin() string {
	if x != nil {
		return x.ReportingPeriodBegin
	}
	return ""
}

func (x *CreateInventoryActivityLineItemRequest) GetReportingPeriodEnd() string {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return ""
}

func (x *CreateInventoryActivityLineItemRequest) GetInventoryItemLocationInformationId() uint32 {
	if x != nil {
		return x.InventoryItemLocationInformationId
	}
	return 0
}

func (x *CreateInventoryActivityLineItemRequest) GetInventoryReportId() uint32 {
	if x != nil {
		return x.InventoryReportId
	}
	return 0
}

func (x *CreateInventoryActivityLineItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInventoryActivityLineItemRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInventoryActivityLineItemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInventoryActivityLineItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryActivityLineItem *InventoryActivityLineItem `protobuf:"bytes,1,opt,name=inventory_activity_line_item,json=inventoryActivityLineItem,proto3" json:"inventory_activity_line_item,omitempty"`
}

func (x *CreateInventoryActivityLineItemResponse) Reset() {
	*x = CreateInventoryActivityLineItemResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryActivityLineItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryActivityLineItemResponse) ProtoMessage() {}

func (x *CreateInventoryActivityLineItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryActivityLineItemResponse.ProtoReflect.Descriptor instead.
func (*CreateInventoryActivityLineItemResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{16}
}

func (x *CreateInventoryActivityLineItemResponse) GetInventoryActivityLineItem() *InventoryActivityLineItem {
	if x != nil {
		return x.InventoryActivityLineItem
	}
	return nil
}

type InventoryActivityQuantitySpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InventoryActivityTypeCode   string  `protobuf:"bytes,2,opt,name=inventory_activity_type_code,json=inventoryActivityTypeCode,proto3" json:"inventory_activity_type_code,omitempty"`
	InventoryMovementTypeCode   string  `protobuf:"bytes,3,opt,name=inventory_movement_type_code,json=inventoryMovementTypeCode,proto3" json:"inventory_movement_type_code,omitempty"`
	QuantityOfUnits             float64 `protobuf:"fixed64,4,opt,name=quantity_of_units,json=quantityOfUnits,proto3" json:"quantity_of_units,omitempty"`
	QOUMeasurementUnitCode      string  `protobuf:"bytes,5,opt,name=q_o_u_measurement_unit_code,json=qOUMeasurementUnitCode,proto3" json:"q_o_u_measurement_unit_code,omitempty"`
	QOUCodeListVersion          string  `protobuf:"bytes,6,opt,name=q_o_u_code_list_version,json=qOUCodeListVersion,proto3" json:"q_o_u_code_list_version,omitempty"`
	InventoryStatusLineItemId   uint32  `protobuf:"varint,7,opt,name=inventory_status_line_item_id,json=inventoryStatusLineItemId,proto3" json:"inventory_status_line_item_id,omitempty"`
	InventoryActivityLineItemId uint32  `protobuf:"varint,8,opt,name=inventory_activity_line_item_id,json=inventoryActivityLineItemId,proto3" json:"inventory_activity_line_item_id,omitempty"`
	InventoryReportId           uint32  `protobuf:"varint,9,opt,name=inventory_report_id,json=inventoryReportId,proto3" json:"inventory_report_id,omitempty"`
}

func (x *InventoryActivityQuantitySpecification) Reset() {
	*x = InventoryActivityQuantitySpecification{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryActivityQuantitySpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryActivityQuantitySpecification) ProtoMessage() {}

func (x *InventoryActivityQuantitySpecification) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryActivityQuantitySpecification.ProtoReflect.Descriptor instead.
func (*InventoryActivityQuantitySpecification) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{17}
}

func (x *InventoryActivityQuantitySpecification) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InventoryActivityQuantitySpecification) GetInventoryActivityTypeCode() string {
	if x != nil {
		return x.InventoryActivityTypeCode
	}
	return ""
}

func (x *InventoryActivityQuantitySpecification) GetInventoryMovementTypeCode() string {
	if x != nil {
		return x.InventoryMovementTypeCode
	}
	return ""
}

func (x *InventoryActivityQuantitySpecification) GetQuantityOfUnits() float64 {
	if x != nil {
		return x.QuantityOfUnits
	}
	return 0
}

func (x *InventoryActivityQuantitySpecification) GetQOUMeasurementUnitCode() string {
	if x != nil {
		return x.QOUMeasurementUnitCode
	}
	return ""
}

func (x *InventoryActivityQuantitySpecification) GetQOUCodeListVersion() string {
	if x != nil {
		return x.QOUCodeListVersion
	}
	return ""
}

func (x *InventoryActivityQuantitySpecification) GetInventoryStatusLineItemId() uint32 {
	if x != nil {
		return x.InventoryStatusLineItemId
	}
	return 0
}

func (x *InventoryActivityQuantitySpecification) GetInventoryActivityLineItemId() uint32 {
	if x != nil {
		return x.InventoryActivityLineItemId
	}
	return 0
}

func (x *InventoryActivityQuantitySpecification) GetInventoryReportId() uint32 {
	if x != nil {
		return x.InventoryReportId
	}
	return 0
}

type CreateInventoryActivityQuantitySpecificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryActivityTypeCode   string  `protobuf:"bytes,1,opt,name=inventory_activity_type_code,json=inventoryActivityTypeCode,proto3" json:"inventory_activity_type_code,omitempty"`
	InventoryMovementTypeCode   string  `protobuf:"bytes,2,opt,name=inventory_movement_type_code,json=inventoryMovementTypeCode,proto3" json:"inventory_movement_type_code,omitempty"`
	QuantityOfUnits             float64 `protobuf:"fixed64,3,opt,name=quantity_of_units,json=quantityOfUnits,proto3" json:"quantity_of_units,omitempty"`
	QOUMeasurementUnitCode      string  `protobuf:"bytes,4,opt,name=q_o_u_measurement_unit_code,json=qOUMeasurementUnitCode,proto3" json:"q_o_u_measurement_unit_code,omitempty"`
	QOUCodeListVersion          string  `protobuf:"bytes,5,opt,name=q_o_u_code_list_version,json=qOUCodeListVersion,proto3" json:"q_o_u_code_list_version,omitempty"`
	InventoryStatusLineItemId   uint32  `protobuf:"varint,6,opt,name=inventory_status_line_item_id,json=inventoryStatusLineItemId,proto3" json:"inventory_status_line_item_id,omitempty"`
	InventoryActivityLineItemId uint32  `protobuf:"varint,7,opt,name=inventory_activity_line_item_id,json=inventoryActivityLineItemId,proto3" json:"inventory_activity_line_item_id,omitempty"`
	InventoryReportId           uint32  `protobuf:"varint,8,opt,name=inventory_report_id,json=inventoryReportId,proto3" json:"inventory_report_id,omitempty"`
	UserId                      string  `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                   string  `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                   string  `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) Reset() {
	*x = CreateInventoryActivityQuantitySpecificationRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryActivityQuantitySpecificationRequest) ProtoMessage() {}

func (x *CreateInventoryActivityQuantitySpecificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryActivityQuantitySpecificationRequest.ProtoReflect.Descriptor instead.
func (*CreateInventoryActivityQuantitySpecificationRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{18}
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetInventoryActivityTypeCode() string {
	if x != nil {
		return x.InventoryActivityTypeCode
	}
	return ""
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetInventoryMovementTypeCode() string {
	if x != nil {
		return x.InventoryMovementTypeCode
	}
	return ""
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetQuantityOfUnits() float64 {
	if x != nil {
		return x.QuantityOfUnits
	}
	return 0
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetQOUMeasurementUnitCode() string {
	if x != nil {
		return x.QOUMeasurementUnitCode
	}
	return ""
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetQOUCodeListVersion() string {
	if x != nil {
		return x.QOUCodeListVersion
	}
	return ""
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetInventoryStatusLineItemId() uint32 {
	if x != nil {
		return x.InventoryStatusLineItemId
	}
	return 0
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetInventoryActivityLineItemId() uint32 {
	if x != nil {
		return x.InventoryActivityLineItemId
	}
	return 0
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetInventoryReportId() uint32 {
	if x != nil {
		return x.InventoryReportId
	}
	return 0
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInventoryActivityQuantitySpecificationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInventoryActivityQuantitySpecificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryActivityQuantitySpecification *InventoryActivityQuantitySpecification `protobuf:"bytes,1,opt,name=inventory_activity_quantity_specification,json=inventoryActivityQuantitySpecification,proto3" json:"inventory_activity_quantity_specification,omitempty"`
}

func (x *CreateInventoryActivityQuantitySpecificationResponse) Reset() {
	*x = CreateInventoryActivityQuantitySpecificationResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryActivityQuantitySpecificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryActivityQuantitySpecificationResponse) ProtoMessage() {}

func (x *CreateInventoryActivityQuantitySpecificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryActivityQuantitySpecificationResponse.ProtoReflect.Descriptor instead.
func (*CreateInventoryActivityQuantitySpecificationResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{19}
}

func (x *CreateInventoryActivityQuantitySpecificationResponse) GetInventoryActivityQuantitySpecification() *InventoryActivityQuantitySpecification {
	if x != nil {
		return x.InventoryActivityQuantitySpecification
	}
	return nil
}

type InventoryItemLocationInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InventoryLocationId uint32 `protobuf:"varint,2,opt,name=inventory_location_id,json=inventoryLocationId,proto3" json:"inventory_location_id,omitempty"`
	InventoryReportId   uint32 `protobuf:"varint,3,opt,name=inventory_report_id,json=inventoryReportId,proto3" json:"inventory_report_id,omitempty"`
}

func (x *InventoryItemLocationInformation) Reset() {
	*x = InventoryItemLocationInformation{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryItemLocationInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryItemLocationInformation) ProtoMessage() {}

func (x *InventoryItemLocationInformation) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryItemLocationInformation.ProtoReflect.Descriptor instead.
func (*InventoryItemLocationInformation) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{20}
}

func (x *InventoryItemLocationInformation) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InventoryItemLocationInformation) GetInventoryLocationId() uint32 {
	if x != nil {
		return x.InventoryLocationId
	}
	return 0
}

func (x *InventoryItemLocationInformation) GetInventoryReportId() uint32 {
	if x != nil {
		return x.InventoryReportId
	}
	return 0
}

type CreateInventoryItemLocationInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryLocationId uint32 `protobuf:"varint,1,opt,name=inventory_location_id,json=inventoryLocationId,proto3" json:"inventory_location_id,omitempty"`
	InventoryReportId   uint32 `protobuf:"varint,2,opt,name=inventory_report_id,json=inventoryReportId,proto3" json:"inventory_report_id,omitempty"`
	UserId              string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail           string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId           string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInventoryItemLocationInformationRequest) Reset() {
	*x = CreateInventoryItemLocationInformationRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryItemLocationInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryItemLocationInformationRequest) ProtoMessage() {}

func (x *CreateInventoryItemLocationInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryItemLocationInformationRequest.ProtoReflect.Descriptor instead.
func (*CreateInventoryItemLocationInformationRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{21}
}

func (x *CreateInventoryItemLocationInformationRequest) GetInventoryLocationId() uint32 {
	if x != nil {
		return x.InventoryLocationId
	}
	return 0
}

func (x *CreateInventoryItemLocationInformationRequest) GetInventoryReportId() uint32 {
	if x != nil {
		return x.InventoryReportId
	}
	return 0
}

func (x *CreateInventoryItemLocationInformationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInventoryItemLocationInformationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInventoryItemLocationInformationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInventoryItemLocationInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryItemLocationInformation *InventoryItemLocationInformation `protobuf:"bytes,1,opt,name=inventory_item_location_information,json=inventoryItemLocationInformation,proto3" json:"inventory_item_location_information,omitempty"`
}

func (x *CreateInventoryItemLocationInformationResponse) Reset() {
	*x = CreateInventoryItemLocationInformationResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryItemLocationInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryItemLocationInformationResponse) ProtoMessage() {}

func (x *CreateInventoryItemLocationInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryItemLocationInformationResponse.ProtoReflect.Descriptor instead.
func (*CreateInventoryItemLocationInformationResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{22}
}

func (x *CreateInventoryItemLocationInformationResponse) GetInventoryItemLocationInformation() *InventoryItemLocationInformation {
	if x != nil {
		return x.InventoryItemLocationInformation
	}
	return nil
}

type InventoryReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryReportD *InventoryReportD `protobuf:"bytes,1,opt,name=inventory_report_d,json=inventoryReportD,proto3" json:"inventory_report_d,omitempty"`
	InventoryReportT *InventoryReportT `protobuf:"bytes,2,opt,name=inventory_report_t,json=inventoryReportT,proto3" json:"inventory_report_t,omitempty"`
	CrUpdUser        *v1.CrUpdUser     `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime        *v1.CrUpdTime     `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *InventoryReport) Reset() {
	*x = InventoryReport{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryReport) ProtoMessage() {}

func (x *InventoryReport) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryReport.ProtoReflect.Descriptor instead.
func (*InventoryReport) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{23}
}

func (x *InventoryReport) GetInventoryReportD() *InventoryReportD {
	if x != nil {
		return x.InventoryReportD
	}
	return nil
}

func (x *InventoryReport) GetInventoryReportT() *InventoryReportT {
	if x != nil {
		return x.InventoryReportT
	}
	return nil
}

func (x *InventoryReport) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *InventoryReport) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type InventoryReportD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                         []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                           string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	InventoryReportTypeCode       string `protobuf:"bytes,4,opt,name=inventory_report_type_code,json=inventoryReportTypeCode,proto3" json:"inventory_report_type_code,omitempty"`
	StructureTypeCode             string `protobuf:"bytes,5,opt,name=structure_type_code,json=structureTypeCode,proto3" json:"structure_type_code,omitempty"`
	InventoryReportIdentification uint32 `protobuf:"varint,6,opt,name=inventory_report_identification,json=inventoryReportIdentification,proto3" json:"inventory_report_identification,omitempty"`
	InventoryReportingParty       uint32 `protobuf:"varint,7,opt,name=inventory_reporting_party,json=inventoryReportingParty,proto3" json:"inventory_reporting_party,omitempty"`
	InventoryReportToParty        uint32 `protobuf:"varint,8,opt,name=inventory_report_to_party,json=inventoryReportToParty,proto3" json:"inventory_report_to_party,omitempty"`
}

func (x *InventoryReportD) Reset() {
	*x = InventoryReportD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryReportD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryReportD) ProtoMessage() {}

func (x *InventoryReportD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryReportD.ProtoReflect.Descriptor instead.
func (*InventoryReportD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{24}
}

func (x *InventoryReportD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InventoryReportD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *InventoryReportD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *InventoryReportD) GetInventoryReportTypeCode() string {
	if x != nil {
		return x.InventoryReportTypeCode
	}
	return ""
}

func (x *InventoryReportD) GetStructureTypeCode() string {
	if x != nil {
		return x.StructureTypeCode
	}
	return ""
}

func (x *InventoryReportD) GetInventoryReportIdentification() uint32 {
	if x != nil {
		return x.InventoryReportIdentification
	}
	return 0
}

func (x *InventoryReportD) GetInventoryReportingParty() uint32 {
	if x != nil {
		return x.InventoryReportingParty
	}
	return 0
}

func (x *InventoryReportD) GetInventoryReportToParty() uint32 {
	if x != nil {
		return x.InventoryReportToParty
	}
	return 0
}

type InventoryReportT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportingPeriodBegin *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=reporting_period_begin,json=reportingPeriodBegin,proto3" json:"reporting_period_begin,omitempty"`
	ReportingPeriodEnd   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
}

func (x *InventoryReportT) Reset() {
	*x = InventoryReportT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryReportT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryReportT) ProtoMessage() {}

func (x *InventoryReportT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryReportT.ProtoReflect.Descriptor instead.
func (*InventoryReportT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{25}
}

func (x *InventoryReportT) GetReportingPeriodBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportingPeriodBegin
	}
	return nil
}

func (x *InventoryReportT) GetReportingPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return nil
}

type CreateInventoryReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryReportTypeCode       string `protobuf:"bytes,1,opt,name=inventory_report_type_code,json=inventoryReportTypeCode,proto3" json:"inventory_report_type_code,omitempty"`
	StructureTypeCode             string `protobuf:"bytes,2,opt,name=structure_type_code,json=structureTypeCode,proto3" json:"structure_type_code,omitempty"`
	InventoryReportIdentification uint32 `protobuf:"varint,3,opt,name=inventory_report_identification,json=inventoryReportIdentification,proto3" json:"inventory_report_identification,omitempty"`
	InventoryReportingParty       uint32 `protobuf:"varint,4,opt,name=inventory_reporting_party,json=inventoryReportingParty,proto3" json:"inventory_reporting_party,omitempty"`
	InventoryReportToParty        uint32 `protobuf:"varint,5,opt,name=inventory_report_to_party,json=inventoryReportToParty,proto3" json:"inventory_report_to_party,omitempty"`
	ReportingPeriodBegin          string `protobuf:"bytes,6,opt,name=reporting_period_begin,json=reportingPeriodBegin,proto3" json:"reporting_period_begin,omitempty"`
	ReportingPeriodEnd            string `protobuf:"bytes,7,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
	UserId                        string `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                     string `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                     string `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInventoryReportRequest) Reset() {
	*x = CreateInventoryReportRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryReportRequest) ProtoMessage() {}

func (x *CreateInventoryReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryReportRequest.ProtoReflect.Descriptor instead.
func (*CreateInventoryReportRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{26}
}

func (x *CreateInventoryReportRequest) GetInventoryReportTypeCode() string {
	if x != nil {
		return x.InventoryReportTypeCode
	}
	return ""
}

func (x *CreateInventoryReportRequest) GetStructureTypeCode() string {
	if x != nil {
		return x.StructureTypeCode
	}
	return ""
}

func (x *CreateInventoryReportRequest) GetInventoryReportIdentification() uint32 {
	if x != nil {
		return x.InventoryReportIdentification
	}
	return 0
}

func (x *CreateInventoryReportRequest) GetInventoryReportingParty() uint32 {
	if x != nil {
		return x.InventoryReportingParty
	}
	return 0
}

func (x *CreateInventoryReportRequest) GetInventoryReportToParty() uint32 {
	if x != nil {
		return x.InventoryReportToParty
	}
	return 0
}

func (x *CreateInventoryReportRequest) GetReportingPeriodBegin() string {
	if x != nil {
		return x.ReportingPeriodBegin
	}
	return ""
}

func (x *CreateInventoryReportRequest) GetReportingPeriodEnd() string {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return ""
}

func (x *CreateInventoryReportRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInventoryReportRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInventoryReportRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInventoryReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryReport *InventoryReport `protobuf:"bytes,1,opt,name=inventory_report,json=inventoryReport,proto3" json:"inventory_report,omitempty"`
}

func (x *CreateInventoryReportResponse) Reset() {
	*x = CreateInventoryReportResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryReportResponse) ProtoMessage() {}

func (x *CreateInventoryReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryReportResponse.ProtoReflect.Descriptor instead.
func (*CreateInventoryReportResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{27}
}

func (x *CreateInventoryReportResponse) GetInventoryReport() *InventoryReport {
	if x != nil {
		return x.InventoryReport
	}
	return nil
}

type InventoryStatusLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryStatusLineItemD *InventoryStatusLineItemD `protobuf:"bytes,1,opt,name=inventory_status_line_item_d,json=inventoryStatusLineItemD,proto3" json:"inventory_status_line_item_d,omitempty"`
	InventoryStatusLineItemT *InventoryStatusLineItemT `protobuf:"bytes,2,opt,name=inventory_status_line_item_t,json=inventoryStatusLineItemT,proto3" json:"inventory_status_line_item_t,omitempty"`
	CrUpdUser                *v1.CrUpdUser             `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                *v1.CrUpdTime             `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *InventoryStatusLineItem) Reset() {
	*x = InventoryStatusLineItem{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryStatusLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryStatusLineItem) ProtoMessage() {}

func (x *InventoryStatusLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryStatusLineItem.ProtoReflect.Descriptor instead.
func (*InventoryStatusLineItem) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{28}
}

func (x *InventoryStatusLineItem) GetInventoryStatusLineItemD() *InventoryStatusLineItemD {
	if x != nil {
		return x.InventoryStatusLineItemD
	}
	return nil
}

func (x *InventoryStatusLineItem) GetInventoryStatusLineItemT() *InventoryStatusLineItemT {
	if x != nil {
		return x.InventoryStatusLineItemT
	}
	return nil
}

func (x *InventoryStatusLineItem) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *InventoryStatusLineItem) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type InventoryStatusLineItemD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                              []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	HandlingUnitType                   string  `protobuf:"bytes,4,opt,name=handling_unit_type,json=handlingUnitType,proto3" json:"handling_unit_type,omitempty"`
	InventoryUnitCost                  float64 `protobuf:"fixed64,5,opt,name=inventory_unit_cost,json=inventoryUnitCost,proto3" json:"inventory_unit_cost,omitempty"`
	IUCCodeListVersion                 string  `protobuf:"bytes,6,opt,name=i_u_c_code_list_version,json=iUCCodeListVersion,proto3" json:"i_u_c_code_list_version,omitempty"`
	IUCCurrencyCode                    string  `protobuf:"bytes,7,opt,name=i_u_c_currency_code,json=iUCCurrencyCode,proto3" json:"i_u_c_currency_code,omitempty"`
	LineItemNumber                     uint32  `protobuf:"varint,8,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ParentLineItemNumber               uint32  `protobuf:"varint,9,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	InventoryStatusOwner               uint32  `protobuf:"varint,10,opt,name=inventory_status_owner,json=inventoryStatusOwner,proto3" json:"inventory_status_owner,omitempty"`
	InventorySubLocationId             uint32  `protobuf:"varint,11,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	LogisticUnitIdentification         uint32  `protobuf:"varint,12,opt,name=logistic_unit_identification,json=logisticUnitIdentification,proto3" json:"logistic_unit_identification,omitempty"`
	ReturnableAssetIdentification      uint32  `protobuf:"varint,13,opt,name=returnable_asset_identification,json=returnableAssetIdentification,proto3" json:"returnable_asset_identification,omitempty"`
	InventoryReportTypeCode            string  `protobuf:"bytes,14,opt,name=inventory_report_type_code,json=inventoryReportTypeCode,proto3" json:"inventory_report_type_code,omitempty"`
	StructureTypeCode                  string  `protobuf:"bytes,15,opt,name=structure_type_code,json=structureTypeCode,proto3" json:"structure_type_code,omitempty"`
	InventoryReportIdentification      uint32  `protobuf:"varint,16,opt,name=inventory_report_identification,json=inventoryReportIdentification,proto3" json:"inventory_report_identification,omitempty"`
	InventoryReportingParty            uint32  `protobuf:"varint,17,opt,name=inventory_reporting_party,json=inventoryReportingParty,proto3" json:"inventory_reporting_party,omitempty"`
	InventoryReportToParty             uint32  `protobuf:"varint,18,opt,name=inventory_report_to_party,json=inventoryReportToParty,proto3" json:"inventory_report_to_party,omitempty"`
	InventoryItemLocationInformationId uint32  `protobuf:"varint,19,opt,name=inventory_item_location_information_id,json=inventoryItemLocationInformationId,proto3" json:"inventory_item_location_information_id,omitempty"`
	InventoryReportId                  uint32  `protobuf:"varint,20,opt,name=inventory_report_id,json=inventoryReportId,proto3" json:"inventory_report_id,omitempty"`
}

func (x *InventoryStatusLineItemD) Reset() {
	*x = InventoryStatusLineItemD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryStatusLineItemD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryStatusLineItemD) ProtoMessage() {}

func (x *InventoryStatusLineItemD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryStatusLineItemD.ProtoReflect.Descriptor instead.
func (*InventoryStatusLineItemD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{29}
}

func (x *InventoryStatusLineItemD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *InventoryStatusLineItemD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *InventoryStatusLineItemD) GetHandlingUnitType() string {
	if x != nil {
		return x.HandlingUnitType
	}
	return ""
}

func (x *InventoryStatusLineItemD) GetInventoryUnitCost() float64 {
	if x != nil {
		return x.InventoryUnitCost
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetIUCCodeListVersion() string {
	if x != nil {
		return x.IUCCodeListVersion
	}
	return ""
}

func (x *InventoryStatusLineItemD) GetIUCCurrencyCode() string {
	if x != nil {
		return x.IUCCurrencyCode
	}
	return ""
}

func (x *InventoryStatusLineItemD) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetInventoryStatusOwner() uint32 {
	if x != nil {
		return x.InventoryStatusOwner
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetLogisticUnitIdentification() uint32 {
	if x != nil {
		return x.LogisticUnitIdentification
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetReturnableAssetIdentification() uint32 {
	if x != nil {
		return x.ReturnableAssetIdentification
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetInventoryReportTypeCode() string {
	if x != nil {
		return x.InventoryReportTypeCode
	}
	return ""
}

func (x *InventoryStatusLineItemD) GetStructureTypeCode() string {
	if x != nil {
		return x.StructureTypeCode
	}
	return ""
}

func (x *InventoryStatusLineItemD) GetInventoryReportIdentification() uint32 {
	if x != nil {
		return x.InventoryReportIdentification
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetInventoryReportingParty() uint32 {
	if x != nil {
		return x.InventoryReportingParty
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetInventoryReportToParty() uint32 {
	if x != nil {
		return x.InventoryReportToParty
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetInventoryItemLocationInformationId() uint32 {
	if x != nil {
		return x.InventoryItemLocationInformationId
	}
	return 0
}

func (x *InventoryStatusLineItemD) GetInventoryReportId() uint32 {
	if x != nil {
		return x.InventoryReportId
	}
	return 0
}

type InventoryStatusLineItemT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstInFirstOutDateTimeBegin *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=first_in_first_out_date_time_begin,json=firstInFirstOutDateTimeBegin,proto3" json:"first_in_first_out_date_time_begin,omitempty"`
	FirstInFirstOutDateTimeEnd   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=first_in_first_out_date_time_end,json=firstInFirstOutDateTimeEnd,proto3" json:"first_in_first_out_date_time_end,omitempty"`
	InventoryDateTimeBegin       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=inventory_date_time_begin,json=inventoryDateTimeBegin,proto3" json:"inventory_date_time_begin,omitempty"`
	InventoryDateTimeEnd         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=inventory_date_time_end,json=inventoryDateTimeEnd,proto3" json:"inventory_date_time_end,omitempty"`
	ReportingPeriodBegin         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=reporting_period_begin,json=reportingPeriodBegin,proto3" json:"reporting_period_begin,omitempty"`
	ReportingPeriodEnd           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
}

func (x *InventoryStatusLineItemT) Reset() {
	*x = InventoryStatusLineItemT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryStatusLineItemT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryStatusLineItemT) ProtoMessage() {}

func (x *InventoryStatusLineItemT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryStatusLineItemT.ProtoReflect.Descriptor instead.
func (*InventoryStatusLineItemT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{30}
}

func (x *InventoryStatusLineItemT) GetFirstInFirstOutDateTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstInFirstOutDateTimeBegin
	}
	return nil
}

func (x *InventoryStatusLineItemT) GetFirstInFirstOutDateTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstInFirstOutDateTimeEnd
	}
	return nil
}

func (x *InventoryStatusLineItemT) GetInventoryDateTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.InventoryDateTimeBegin
	}
	return nil
}

func (x *InventoryStatusLineItemT) GetInventoryDateTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.InventoryDateTimeEnd
	}
	return nil
}

func (x *InventoryStatusLineItemT) GetReportingPeriodBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportingPeriodBegin
	}
	return nil
}

func (x *InventoryStatusLineItemT) GetReportingPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return nil
}

type CreateInventoryStatusLineItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstInFirstOutDateTimeBegin       string  `protobuf:"bytes,1,opt,name=first_in_first_out_date_time_begin,json=firstInFirstOutDateTimeBegin,proto3" json:"first_in_first_out_date_time_begin,omitempty"`
	FirstInFirstOutDateTimeEnd         string  `protobuf:"bytes,2,opt,name=first_in_first_out_date_time_end,json=firstInFirstOutDateTimeEnd,proto3" json:"first_in_first_out_date_time_end,omitempty"`
	HandlingUnitType                   string  `protobuf:"bytes,3,opt,name=handling_unit_type,json=handlingUnitType,proto3" json:"handling_unit_type,omitempty"`
	InventoryDateTimeBegin             string  `protobuf:"bytes,4,opt,name=inventory_date_time_begin,json=inventoryDateTimeBegin,proto3" json:"inventory_date_time_begin,omitempty"`
	InventoryDateTimeEnd               string  `protobuf:"bytes,5,opt,name=inventory_date_time_end,json=inventoryDateTimeEnd,proto3" json:"inventory_date_time_end,omitempty"`
	InventoryUnitCost                  float64 `protobuf:"fixed64,6,opt,name=inventory_unit_cost,json=inventoryUnitCost,proto3" json:"inventory_unit_cost,omitempty"`
	IUCCodeListVersion                 string  `protobuf:"bytes,7,opt,name=i_u_c_code_list_version,json=iUCCodeListVersion,proto3" json:"i_u_c_code_list_version,omitempty"`
	IUCCurrencyCode                    string  `protobuf:"bytes,8,opt,name=i_u_c_currency_code,json=iUCCurrencyCode,proto3" json:"i_u_c_currency_code,omitempty"`
	LineItemNumber                     uint32  `protobuf:"varint,9,opt,name=line_item_number,json=lineItemNumber,proto3" json:"line_item_number,omitempty"`
	ParentLineItemNumber               uint32  `protobuf:"varint,10,opt,name=parent_line_item_number,json=parentLineItemNumber,proto3" json:"parent_line_item_number,omitempty"`
	InventoryStatusOwner               uint32  `protobuf:"varint,11,opt,name=inventory_status_owner,json=inventoryStatusOwner,proto3" json:"inventory_status_owner,omitempty"`
	InventorySubLocationId             uint32  `protobuf:"varint,12,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	LogisticUnitIdentification         uint32  `protobuf:"varint,13,opt,name=logistic_unit_identification,json=logisticUnitIdentification,proto3" json:"logistic_unit_identification,omitempty"`
	ReturnableAssetIdentification      uint32  `protobuf:"varint,14,opt,name=returnable_asset_identification,json=returnableAssetIdentification,proto3" json:"returnable_asset_identification,omitempty"`
	InventoryReportTypeCode            string  `protobuf:"bytes,15,opt,name=inventory_report_type_code,json=inventoryReportTypeCode,proto3" json:"inventory_report_type_code,omitempty"`
	StructureTypeCode                  string  `protobuf:"bytes,16,opt,name=structure_type_code,json=structureTypeCode,proto3" json:"structure_type_code,omitempty"`
	InventoryReportIdentification      uint32  `protobuf:"varint,17,opt,name=inventory_report_identification,json=inventoryReportIdentification,proto3" json:"inventory_report_identification,omitempty"`
	InventoryReportingParty            uint32  `protobuf:"varint,18,opt,name=inventory_reporting_party,json=inventoryReportingParty,proto3" json:"inventory_reporting_party,omitempty"`
	InventoryReportToParty             uint32  `protobuf:"varint,19,opt,name=inventory_report_to_party,json=inventoryReportToParty,proto3" json:"inventory_report_to_party,omitempty"`
	ReportingPeriodBegin               string  `protobuf:"bytes,20,opt,name=reporting_period_begin,json=reportingPeriodBegin,proto3" json:"reporting_period_begin,omitempty"`
	ReportingPeriodEnd                 string  `protobuf:"bytes,21,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
	InventoryItemLocationInformationId uint32  `protobuf:"varint,22,opt,name=inventory_item_location_information_id,json=inventoryItemLocationInformationId,proto3" json:"inventory_item_location_information_id,omitempty"`
	InventoryReportId                  uint32  `protobuf:"varint,23,opt,name=inventory_report_id,json=inventoryReportId,proto3" json:"inventory_report_id,omitempty"`
	UserId                             string  `protobuf:"bytes,24,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                          string  `protobuf:"bytes,25,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                          string  `protobuf:"bytes,26,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInventoryStatusLineItemRequest) Reset() {
	*x = CreateInventoryStatusLineItemRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryStatusLineItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryStatusLineItemRequest) ProtoMessage() {}

func (x *CreateInventoryStatusLineItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryStatusLineItemRequest.ProtoReflect.Descriptor instead.
func (*CreateInventoryStatusLineItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{31}
}

func (x *CreateInventoryStatusLineItemRequest) GetFirstInFirstOutDateTimeBegin() string {
	if x != nil {
		return x.FirstInFirstOutDateTimeBegin
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetFirstInFirstOutDateTimeEnd() string {
	if x != nil {
		return x.FirstInFirstOutDateTimeEnd
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetHandlingUnitType() string {
	if x != nil {
		return x.HandlingUnitType
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetInventoryDateTimeBegin() string {
	if x != nil {
		return x.InventoryDateTimeBegin
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetInventoryDateTimeEnd() string {
	if x != nil {
		return x.InventoryDateTimeEnd
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetInventoryUnitCost() float64 {
	if x != nil {
		return x.InventoryUnitCost
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetIUCCodeListVersion() string {
	if x != nil {
		return x.IUCCodeListVersion
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetIUCCurrencyCode() string {
	if x != nil {
		return x.IUCCurrencyCode
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetLineItemNumber() uint32 {
	if x != nil {
		return x.LineItemNumber
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetParentLineItemNumber() uint32 {
	if x != nil {
		return x.ParentLineItemNumber
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetInventoryStatusOwner() uint32 {
	if x != nil {
		return x.InventoryStatusOwner
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetLogisticUnitIdentification() uint32 {
	if x != nil {
		return x.LogisticUnitIdentification
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetReturnableAssetIdentification() uint32 {
	if x != nil {
		return x.ReturnableAssetIdentification
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetInventoryReportTypeCode() string {
	if x != nil {
		return x.InventoryReportTypeCode
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetStructureTypeCode() string {
	if x != nil {
		return x.StructureTypeCode
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetInventoryReportIdentification() uint32 {
	if x != nil {
		return x.InventoryReportIdentification
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetInventoryReportingParty() uint32 {
	if x != nil {
		return x.InventoryReportingParty
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetInventoryReportToParty() uint32 {
	if x != nil {
		return x.InventoryReportToParty
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetReportingPeriodBegin() string {
	if x != nil {
		return x.ReportingPeriodBegin
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetReportingPeriodEnd() string {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetInventoryItemLocationInformationId() uint32 {
	if x != nil {
		return x.InventoryItemLocationInformationId
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetInventoryReportId() uint32 {
	if x != nil {
		return x.InventoryReportId
	}
	return 0
}

func (x *CreateInventoryStatusLineItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInventoryStatusLineItemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInventoryStatusLineItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryStatusLineItem *InventoryStatusLineItem `protobuf:"bytes,1,opt,name=inventory_status_line_item,json=inventoryStatusLineItem,proto3" json:"inventory_status_line_item,omitempty"`
}

func (x *CreateInventoryStatusLineItemResponse) Reset() {
	*x = CreateInventoryStatusLineItemResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryStatusLineItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryStatusLineItemResponse) ProtoMessage() {}

func (x *CreateInventoryStatusLineItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryStatusLineItemResponse.ProtoReflect.Descriptor instead.
func (*CreateInventoryStatusLineItemResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{32}
}

func (x *CreateInventoryStatusLineItemResponse) GetInventoryStatusLineItem() *InventoryStatusLineItem {
	if x != nil {
		return x.InventoryStatusLineItem
	}
	return nil
}

type InventorySubLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Buyer                                 uint32 `protobuf:"varint,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	AdditionalPartyIdentification         string `protobuf:"bytes,3,opt,name=additional_party_identification,json=additionalPartyIdentification,proto3" json:"additional_party_identification,omitempty"`
	AdditionalPartyIdentificationTypeCode string `protobuf:"bytes,4,opt,name=additional_party_identification_type_code,json=additionalPartyIdentificationTypeCode,proto3" json:"additional_party_identification_type_code,omitempty"`
	CodeListVersion                       string `protobuf:"bytes,5,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	Gln                                   string `protobuf:"bytes,6,opt,name=gln,proto3" json:"gln,omitempty"`
	GlnExtension                          string `protobuf:"bytes,7,opt,name=gln_extension,json=glnExtension,proto3" json:"gln_extension,omitempty"`
	InventorySubLocationFunctionCode      string `protobuf:"bytes,8,opt,name=inventory_sub_location_function_code,json=inventorySubLocationFunctionCode,proto3" json:"inventory_sub_location_function_code,omitempty"`
	InventorySubLocationTypeCode          string `protobuf:"bytes,9,opt,name=inventory_sub_location_type_code,json=inventorySubLocationTypeCode,proto3" json:"inventory_sub_location_type_code,omitempty"`
}

func (x *InventorySubLocation) Reset() {
	*x = InventorySubLocation{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventorySubLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventorySubLocation) ProtoMessage() {}

func (x *InventorySubLocation) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventorySubLocation.ProtoReflect.Descriptor instead.
func (*InventorySubLocation) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{33}
}

func (x *InventorySubLocation) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InventorySubLocation) GetBuyer() uint32 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *InventorySubLocation) GetAdditionalPartyIdentification() string {
	if x != nil {
		return x.AdditionalPartyIdentification
	}
	return ""
}

func (x *InventorySubLocation) GetAdditionalPartyIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalPartyIdentificationTypeCode
	}
	return ""
}

func (x *InventorySubLocation) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *InventorySubLocation) GetGln() string {
	if x != nil {
		return x.Gln
	}
	return ""
}

func (x *InventorySubLocation) GetGlnExtension() string {
	if x != nil {
		return x.GlnExtension
	}
	return ""
}

func (x *InventorySubLocation) GetInventorySubLocationFunctionCode() string {
	if x != nil {
		return x.InventorySubLocationFunctionCode
	}
	return ""
}

func (x *InventorySubLocation) GetInventorySubLocationTypeCode() string {
	if x != nil {
		return x.InventorySubLocationTypeCode
	}
	return ""
}

type CreateInventorySubLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalPartyIdentification         string `protobuf:"bytes,1,opt,name=additional_party_identification,json=additionalPartyIdentification,proto3" json:"additional_party_identification,omitempty"`
	AdditionalPartyIdentificationTypeCode string `protobuf:"bytes,2,opt,name=additional_party_identification_type_code,json=additionalPartyIdentificationTypeCode,proto3" json:"additional_party_identification_type_code,omitempty"`
	CodeListVersion                       string `protobuf:"bytes,3,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	Gln                                   string `protobuf:"bytes,4,opt,name=gln,proto3" json:"gln,omitempty"`
	GlnExtension                          string `protobuf:"bytes,5,opt,name=gln_extension,json=glnExtension,proto3" json:"gln_extension,omitempty"`
	InventorySubLocationFunctionCode      string `protobuf:"bytes,6,opt,name=inventory_sub_location_function_code,json=inventorySubLocationFunctionCode,proto3" json:"inventory_sub_location_function_code,omitempty"`
	InventorySubLocationTypeCode          string `protobuf:"bytes,7,opt,name=inventory_sub_location_type_code,json=inventorySubLocationTypeCode,proto3" json:"inventory_sub_location_type_code,omitempty"`
	UserId                                string `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                             string `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                             string `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInventorySubLocationRequest) Reset() {
	*x = CreateInventorySubLocationRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventorySubLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventorySubLocationRequest) ProtoMessage() {}

func (x *CreateInventorySubLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventorySubLocationRequest.ProtoReflect.Descriptor instead.
func (*CreateInventorySubLocationRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{34}
}

func (x *CreateInventorySubLocationRequest) GetAdditionalPartyIdentification() string {
	if x != nil {
		return x.AdditionalPartyIdentification
	}
	return ""
}

func (x *CreateInventorySubLocationRequest) GetAdditionalPartyIdentificationTypeCode() string {
	if x != nil {
		return x.AdditionalPartyIdentificationTypeCode
	}
	return ""
}

func (x *CreateInventorySubLocationRequest) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *CreateInventorySubLocationRequest) GetGln() string {
	if x != nil {
		return x.Gln
	}
	return ""
}

func (x *CreateInventorySubLocationRequest) GetGlnExtension() string {
	if x != nil {
		return x.GlnExtension
	}
	return ""
}

func (x *CreateInventorySubLocationRequest) GetInventorySubLocationFunctionCode() string {
	if x != nil {
		return x.InventorySubLocationFunctionCode
	}
	return ""
}

func (x *CreateInventorySubLocationRequest) GetInventorySubLocationTypeCode() string {
	if x != nil {
		return x.InventorySubLocationTypeCode
	}
	return ""
}

func (x *CreateInventorySubLocationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInventorySubLocationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInventorySubLocationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInventorySubLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventorySubLocation *InventorySubLocation `protobuf:"bytes,1,opt,name=inventory_sub_location,json=inventorySubLocation,proto3" json:"inventory_sub_location,omitempty"`
}

func (x *CreateInventorySubLocationResponse) Reset() {
	*x = CreateInventorySubLocationResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventorySubLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventorySubLocationResponse) ProtoMessage() {}

func (x *CreateInventorySubLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventorySubLocationResponse.ProtoReflect.Descriptor instead.
func (*CreateInventorySubLocationResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{35}
}

func (x *CreateInventorySubLocationResponse) GetInventorySubLocation() *InventorySubLocation {
	if x != nil {
		return x.InventorySubLocation
	}
	return nil
}

type LogisticUnitInventoryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogisticUnitInventoryEventD *LogisticUnitInventoryEventD `protobuf:"bytes,1,opt,name=logistic_unit_inventory_event_d,json=logisticUnitInventoryEventD,proto3" json:"logistic_unit_inventory_event_d,omitempty"`
	LogisticUnitInventoryEventT *LogisticUnitInventoryEventT `protobuf:"bytes,2,opt,name=logistic_unit_inventory_event_t,json=logisticUnitInventoryEventT,proto3" json:"logistic_unit_inventory_event_t,omitempty"`
	CrUpdUser                   *v1.CrUpdUser                `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                   *v1.CrUpdTime                `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *LogisticUnitInventoryEvent) Reset() {
	*x = LogisticUnitInventoryEvent{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticUnitInventoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticUnitInventoryEvent) ProtoMessage() {}

func (x *LogisticUnitInventoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticUnitInventoryEvent.ProtoReflect.Descriptor instead.
func (*LogisticUnitInventoryEvent) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{36}
}

func (x *LogisticUnitInventoryEvent) GetLogisticUnitInventoryEventD() *LogisticUnitInventoryEventD {
	if x != nil {
		return x.LogisticUnitInventoryEventD
	}
	return nil
}

func (x *LogisticUnitInventoryEvent) GetLogisticUnitInventoryEventT() *LogisticUnitInventoryEventT {
	if x != nil {
		return x.LogisticUnitInventoryEventT
	}
	return nil
}

func (x *LogisticUnitInventoryEvent) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *LogisticUnitInventoryEvent) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type LogisticUnitInventoryEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                     []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                       string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	EventIdentifier           string `protobuf:"bytes,4,opt,name=event_identifier,json=eventIdentifier,proto3" json:"event_identifier,omitempty"`
	InventoryBusinessStepCode string `protobuf:"bytes,5,opt,name=inventory_business_step_code,json=inventoryBusinessStepCode,proto3" json:"inventory_business_step_code,omitempty"`
	InventoryEventReasonCode  string `protobuf:"bytes,6,opt,name=inventory_event_reason_code,json=inventoryEventReasonCode,proto3" json:"inventory_event_reason_code,omitempty"`
	InventoryMovementTypeCode string `protobuf:"bytes,7,opt,name=inventory_movement_type_code,json=inventoryMovementTypeCode,proto3" json:"inventory_movement_type_code,omitempty"`
	InventorySubLocationId    uint32 `protobuf:"varint,8,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
}

func (x *LogisticUnitInventoryEventD) Reset() {
	*x = LogisticUnitInventoryEventD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticUnitInventoryEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticUnitInventoryEventD) ProtoMessage() {}

func (x *LogisticUnitInventoryEventD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticUnitInventoryEventD.ProtoReflect.Descriptor instead.
func (*LogisticUnitInventoryEventD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{37}
}

func (x *LogisticUnitInventoryEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogisticUnitInventoryEventD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *LogisticUnitInventoryEventD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *LogisticUnitInventoryEventD) GetEventIdentifier() string {
	if x != nil {
		return x.EventIdentifier
	}
	return ""
}

func (x *LogisticUnitInventoryEventD) GetInventoryBusinessStepCode() string {
	if x != nil {
		return x.InventoryBusinessStepCode
	}
	return ""
}

func (x *LogisticUnitInventoryEventD) GetInventoryEventReasonCode() string {
	if x != nil {
		return x.InventoryEventReasonCode
	}
	return ""
}

func (x *LogisticUnitInventoryEventD) GetInventoryMovementTypeCode() string {
	if x != nil {
		return x.InventoryMovementTypeCode
	}
	return ""
}

func (x *LogisticUnitInventoryEventD) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

type LogisticUnitInventoryEventT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
}

func (x *LogisticUnitInventoryEventT) Reset() {
	*x = LogisticUnitInventoryEventT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticUnitInventoryEventT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticUnitInventoryEventT) ProtoMessage() {}

func (x *LogisticUnitInventoryEventT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticUnitInventoryEventT.ProtoReflect.Descriptor instead.
func (*LogisticUnitInventoryEventT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{38}
}

func (x *LogisticUnitInventoryEventT) GetEventDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDateTime
	}
	return nil
}

type CreateLogisticUnitInventoryEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventDateTime             string `protobuf:"bytes,1,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	EventIdentifier           string `protobuf:"bytes,2,opt,name=event_identifier,json=eventIdentifier,proto3" json:"event_identifier,omitempty"`
	InventoryBusinessStepCode string `protobuf:"bytes,3,opt,name=inventory_business_step_code,json=inventoryBusinessStepCode,proto3" json:"inventory_business_step_code,omitempty"`
	InventoryEventReasonCode  string `protobuf:"bytes,4,opt,name=inventory_event_reason_code,json=inventoryEventReasonCode,proto3" json:"inventory_event_reason_code,omitempty"`
	InventoryMovementTypeCode string `protobuf:"bytes,5,opt,name=inventory_movement_type_code,json=inventoryMovementTypeCode,proto3" json:"inventory_movement_type_code,omitempty"`
	InventorySubLocationId    uint32 `protobuf:"varint,6,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	UserId                    string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateLogisticUnitInventoryEventRequest) Reset() {
	*x = CreateLogisticUnitInventoryEventRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLogisticUnitInventoryEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogisticUnitInventoryEventRequest) ProtoMessage() {}

func (x *CreateLogisticUnitInventoryEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogisticUnitInventoryEventRequest.ProtoReflect.Descriptor instead.
func (*CreateLogisticUnitInventoryEventRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{39}
}

func (x *CreateLogisticUnitInventoryEventRequest) GetEventDateTime() string {
	if x != nil {
		return x.EventDateTime
	}
	return ""
}

func (x *CreateLogisticUnitInventoryEventRequest) GetEventIdentifier() string {
	if x != nil {
		return x.EventIdentifier
	}
	return ""
}

func (x *CreateLogisticUnitInventoryEventRequest) GetInventoryBusinessStepCode() string {
	if x != nil {
		return x.InventoryBusinessStepCode
	}
	return ""
}

func (x *CreateLogisticUnitInventoryEventRequest) GetInventoryEventReasonCode() string {
	if x != nil {
		return x.InventoryEventReasonCode
	}
	return ""
}

func (x *CreateLogisticUnitInventoryEventRequest) GetInventoryMovementTypeCode() string {
	if x != nil {
		return x.InventoryMovementTypeCode
	}
	return ""
}

func (x *CreateLogisticUnitInventoryEventRequest) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *CreateLogisticUnitInventoryEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateLogisticUnitInventoryEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateLogisticUnitInventoryEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateLogisticUnitInventoryEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogisticUnitInventoryEvent *LogisticUnitInventoryEvent `protobuf:"bytes,1,opt,name=logistic_unit_inventory_event,json=logisticUnitInventoryEvent,proto3" json:"logistic_unit_inventory_event,omitempty"`
}

func (x *CreateLogisticUnitInventoryEventResponse) Reset() {
	*x = CreateLogisticUnitInventoryEventResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLogisticUnitInventoryEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogisticUnitInventoryEventResponse) ProtoMessage() {}

func (x *CreateLogisticUnitInventoryEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogisticUnitInventoryEventResponse.ProtoReflect.Descriptor instead.
func (*CreateLogisticUnitInventoryEventResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{40}
}

func (x *CreateLogisticUnitInventoryEventResponse) GetLogisticUnitInventoryEvent() *LogisticUnitInventoryEvent {
	if x != nil {
		return x.LogisticUnitInventoryEvent
	}
	return nil
}

type LogisticsInventoryReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogisticsInventoryReportD *LogisticsInventoryReportD `protobuf:"bytes,1,opt,name=logistics_inventory_report_d,json=logisticsInventoryReportD,proto3" json:"logistics_inventory_report_d,omitempty"`
	LogisticsInventoryReportT *LogisticsInventoryReportT `protobuf:"bytes,2,opt,name=logistics_inventory_report_t,json=logisticsInventoryReportT,proto3" json:"logistics_inventory_report_t,omitempty"`
	CrUpdUser                 *v1.CrUpdUser              `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                 *v1.CrUpdTime              `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *LogisticsInventoryReport) Reset() {
	*x = LogisticsInventoryReport{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticsInventoryReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticsInventoryReport) ProtoMessage() {}

func (x *LogisticsInventoryReport) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticsInventoryReport.ProtoReflect.Descriptor instead.
func (*LogisticsInventoryReport) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{41}
}

func (x *LogisticsInventoryReport) GetLogisticsInventoryReportD() *LogisticsInventoryReportD {
	if x != nil {
		return x.LogisticsInventoryReportD
	}
	return nil
}

func (x *LogisticsInventoryReport) GetLogisticsInventoryReportT() *LogisticsInventoryReportT {
	if x != nil {
		return x.LogisticsInventoryReportT
	}
	return nil
}

func (x *LogisticsInventoryReport) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *LogisticsInventoryReport) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type LogisticsInventoryReportD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                                  []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                    string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	StructureTypeCode                      string `protobuf:"bytes,4,opt,name=structure_type_code,json=structureTypeCode,proto3" json:"structure_type_code,omitempty"`
	TypeOfServiceTransaction               string `protobuf:"bytes,5,opt,name=type_of_service_transaction,json=typeOfServiceTransaction,proto3" json:"type_of_service_transaction,omitempty"`
	InventoryReportingParty                uint32 `protobuf:"varint,6,opt,name=inventory_reporting_party,json=inventoryReportingParty,proto3" json:"inventory_reporting_party,omitempty"`
	InventoryReportToParty                 uint32 `protobuf:"varint,7,opt,name=inventory_report_to_party,json=inventoryReportToParty,proto3" json:"inventory_report_to_party,omitempty"`
	LogisticsInventoryReportIdentification uint32 `protobuf:"varint,8,opt,name=logistics_inventory_report_identification,json=logisticsInventoryReportIdentification,proto3" json:"logistics_inventory_report_identification,omitempty"`
	LogisticsInventoryReportRequest        uint32 `protobuf:"varint,9,opt,name=logistics_inventory_report_request,json=logisticsInventoryReportRequest,proto3" json:"logistics_inventory_report_request,omitempty"`
}

func (x *LogisticsInventoryReportD) Reset() {
	*x = LogisticsInventoryReportD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticsInventoryReportD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticsInventoryReportD) ProtoMessage() {}

func (x *LogisticsInventoryReportD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticsInventoryReportD.ProtoReflect.Descriptor instead.
func (*LogisticsInventoryReportD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{42}
}

func (x *LogisticsInventoryReportD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogisticsInventoryReportD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *LogisticsInventoryReportD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *LogisticsInventoryReportD) GetStructureTypeCode() string {
	if x != nil {
		return x.StructureTypeCode
	}
	return ""
}

func (x *LogisticsInventoryReportD) GetTypeOfServiceTransaction() string {
	if x != nil {
		return x.TypeOfServiceTransaction
	}
	return ""
}

func (x *LogisticsInventoryReportD) GetInventoryReportingParty() uint32 {
	if x != nil {
		return x.InventoryReportingParty
	}
	return 0
}

func (x *LogisticsInventoryReportD) GetInventoryReportToParty() uint32 {
	if x != nil {
		return x.InventoryReportToParty
	}
	return 0
}

func (x *LogisticsInventoryReportD) GetLogisticsInventoryReportIdentification() uint32 {
	if x != nil {
		return x.LogisticsInventoryReportIdentification
	}
	return 0
}

func (x *LogisticsInventoryReportD) GetLogisticsInventoryReportRequest() uint32 {
	if x != nil {
		return x.LogisticsInventoryReportRequest
	}
	return 0
}

type LogisticsInventoryReportT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportingPeriodBegin *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=reporting_period_begin,json=reportingPeriodBegin,proto3" json:"reporting_period_begin,omitempty"`
	ReportingPeriodEnd   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
}

func (x *LogisticsInventoryReportT) Reset() {
	*x = LogisticsInventoryReportT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticsInventoryReportT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticsInventoryReportT) ProtoMessage() {}

func (x *LogisticsInventoryReportT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticsInventoryReportT.ProtoReflect.Descriptor instead.
func (*LogisticsInventoryReportT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{43}
}

func (x *LogisticsInventoryReportT) GetReportingPeriodBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportingPeriodBegin
	}
	return nil
}

func (x *LogisticsInventoryReportT) GetReportingPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return nil
}

type CreateLogisticsInventoryReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StructureTypeCode                      string `protobuf:"bytes,1,opt,name=structure_type_code,json=structureTypeCode,proto3" json:"structure_type_code,omitempty"`
	TypeOfServiceTransaction               string `protobuf:"bytes,2,opt,name=type_of_service_transaction,json=typeOfServiceTransaction,proto3" json:"type_of_service_transaction,omitempty"`
	InventoryReportingParty                uint32 `protobuf:"varint,3,opt,name=inventory_reporting_party,json=inventoryReportingParty,proto3" json:"inventory_reporting_party,omitempty"`
	InventoryReportToParty                 uint32 `protobuf:"varint,4,opt,name=inventory_report_to_party,json=inventoryReportToParty,proto3" json:"inventory_report_to_party,omitempty"`
	LogisticsInventoryReportIdentification uint32 `protobuf:"varint,5,opt,name=logistics_inventory_report_identification,json=logisticsInventoryReportIdentification,proto3" json:"logistics_inventory_report_identification,omitempty"`
	LogisticsInventoryReportRequest        uint32 `protobuf:"varint,6,opt,name=logistics_inventory_report_request,json=logisticsInventoryReportRequest,proto3" json:"logistics_inventory_report_request,omitempty"`
	ReportingPeriodBegin                   string `protobuf:"bytes,7,opt,name=reporting_period_begin,json=reportingPeriodBegin,proto3" json:"reporting_period_begin,omitempty"`
	ReportingPeriodEnd                     string `protobuf:"bytes,8,opt,name=reporting_period_end,json=reportingPeriodEnd,proto3" json:"reporting_period_end,omitempty"`
	UserId                                 string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                              string `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                              string `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateLogisticsInventoryReportRequest) Reset() {
	*x = CreateLogisticsInventoryReportRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLogisticsInventoryReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogisticsInventoryReportRequest) ProtoMessage() {}

func (x *CreateLogisticsInventoryReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogisticsInventoryReportRequest.ProtoReflect.Descriptor instead.
func (*CreateLogisticsInventoryReportRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{44}
}

func (x *CreateLogisticsInventoryReportRequest) GetStructureTypeCode() string {
	if x != nil {
		return x.StructureTypeCode
	}
	return ""
}

func (x *CreateLogisticsInventoryReportRequest) GetTypeOfServiceTransaction() string {
	if x != nil {
		return x.TypeOfServiceTransaction
	}
	return ""
}

func (x *CreateLogisticsInventoryReportRequest) GetInventoryReportingParty() uint32 {
	if x != nil {
		return x.InventoryReportingParty
	}
	return 0
}

func (x *CreateLogisticsInventoryReportRequest) GetInventoryReportToParty() uint32 {
	if x != nil {
		return x.InventoryReportToParty
	}
	return 0
}

func (x *CreateLogisticsInventoryReportRequest) GetLogisticsInventoryReportIdentification() uint32 {
	if x != nil {
		return x.LogisticsInventoryReportIdentification
	}
	return 0
}

func (x *CreateLogisticsInventoryReportRequest) GetLogisticsInventoryReportRequest() uint32 {
	if x != nil {
		return x.LogisticsInventoryReportRequest
	}
	return 0
}

func (x *CreateLogisticsInventoryReportRequest) GetReportingPeriodBegin() string {
	if x != nil {
		return x.ReportingPeriodBegin
	}
	return ""
}

func (x *CreateLogisticsInventoryReportRequest) GetReportingPeriodEnd() string {
	if x != nil {
		return x.ReportingPeriodEnd
	}
	return ""
}

func (x *CreateLogisticsInventoryReportRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateLogisticsInventoryReportRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateLogisticsInventoryReportRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateLogisticsInventoryReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogisticsInventoryReport *LogisticsInventoryReport `protobuf:"bytes,1,opt,name=logistics_inventory_report,json=logisticsInventoryReport,proto3" json:"logistics_inventory_report,omitempty"`
}

func (x *CreateLogisticsInventoryReportResponse) Reset() {
	*x = CreateLogisticsInventoryReportResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLogisticsInventoryReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogisticsInventoryReportResponse) ProtoMessage() {}

func (x *CreateLogisticsInventoryReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogisticsInventoryReportResponse.ProtoReflect.Descriptor instead.
func (*CreateLogisticsInventoryReportResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{45}
}

func (x *CreateLogisticsInventoryReportResponse) GetLogisticsInventoryReport() *LogisticsInventoryReport {
	if x != nil {
		return x.LogisticsInventoryReport
	}
	return nil
}

type LogisticsInventoryReportInventoryLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InventoryLocationId        uint32 `protobuf:"varint,2,opt,name=inventory_location_id,json=inventoryLocationId,proto3" json:"inventory_location_id,omitempty"`
	LogisticsInventoryReportId uint32 `protobuf:"varint,3,opt,name=logistics_inventory_report_id,json=logisticsInventoryReportId,proto3" json:"logistics_inventory_report_id,omitempty"`
}

func (x *LogisticsInventoryReportInventoryLocation) Reset() {
	*x = LogisticsInventoryReportInventoryLocation{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticsInventoryReportInventoryLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticsInventoryReportInventoryLocation) ProtoMessage() {}

func (x *LogisticsInventoryReportInventoryLocation) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticsInventoryReportInventoryLocation.ProtoReflect.Descriptor instead.
func (*LogisticsInventoryReportInventoryLocation) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{46}
}

func (x *LogisticsInventoryReportInventoryLocation) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogisticsInventoryReportInventoryLocation) GetInventoryLocationId() uint32 {
	if x != nil {
		return x.InventoryLocationId
	}
	return 0
}

func (x *LogisticsInventoryReportInventoryLocation) GetLogisticsInventoryReportId() uint32 {
	if x != nil {
		return x.LogisticsInventoryReportId
	}
	return 0
}

type CreateLogisticsInventoryReportInventoryLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryLocationId        uint32 `protobuf:"varint,1,opt,name=inventory_location_id,json=inventoryLocationId,proto3" json:"inventory_location_id,omitempty"`
	LogisticsInventoryReportId uint32 `protobuf:"varint,2,opt,name=logistics_inventory_report_id,json=logisticsInventoryReportId,proto3" json:"logistics_inventory_report_id,omitempty"`
	UserId                     string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateLogisticsInventoryReportInventoryLocationRequest) Reset() {
	*x = CreateLogisticsInventoryReportInventoryLocationRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLogisticsInventoryReportInventoryLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogisticsInventoryReportInventoryLocationRequest) ProtoMessage() {}

func (x *CreateLogisticsInventoryReportInventoryLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogisticsInventoryReportInventoryLocationRequest.ProtoReflect.Descriptor instead.
func (*CreateLogisticsInventoryReportInventoryLocationRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{47}
}

func (x *CreateLogisticsInventoryReportInventoryLocationRequest) GetInventoryLocationId() uint32 {
	if x != nil {
		return x.InventoryLocationId
	}
	return 0
}

func (x *CreateLogisticsInventoryReportInventoryLocationRequest) GetLogisticsInventoryReportId() uint32 {
	if x != nil {
		return x.LogisticsInventoryReportId
	}
	return 0
}

func (x *CreateLogisticsInventoryReportInventoryLocationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateLogisticsInventoryReportInventoryLocationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateLogisticsInventoryReportInventoryLocationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateLogisticsInventoryReportInventoryLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogisticsInventoryReportInventoryLocation *LogisticsInventoryReportInventoryLocation `protobuf:"bytes,1,opt,name=logistics_inventory_report_inventory_location,json=logisticsInventoryReportInventoryLocation,proto3" json:"logistics_inventory_report_inventory_location,omitempty"`
}

func (x *CreateLogisticsInventoryReportInventoryLocationResponse) Reset() {
	*x = CreateLogisticsInventoryReportInventoryLocationResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLogisticsInventoryReportInventoryLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogisticsInventoryReportInventoryLocationResponse) ProtoMessage() {}

func (x *CreateLogisticsInventoryReportInventoryLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogisticsInventoryReportInventoryLocationResponse.ProtoReflect.Descriptor instead.
func (*CreateLogisticsInventoryReportInventoryLocationResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{48}
}

func (x *CreateLogisticsInventoryReportInventoryLocationResponse) GetLogisticsInventoryReportInventoryLocation() *LogisticsInventoryReportInventoryLocation {
	if x != nil {
		return x.LogisticsInventoryReportInventoryLocation
	}
	return nil
}

type LogisticUnitInventoryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogisticUnitInventoryStatusD *LogisticUnitInventoryStatusD `protobuf:"bytes,1,opt,name=logistic_unit_inventory_status_d,json=logisticUnitInventoryStatusD,proto3" json:"logistic_unit_inventory_status_d,omitempty"`
	LogisticUnitInventoryStatusT *LogisticUnitInventoryStatusT `protobuf:"bytes,2,opt,name=logistic_unit_inventory_status_t,json=logisticUnitInventoryStatusT,proto3" json:"logistic_unit_inventory_status_t,omitempty"`
}

func (x *LogisticUnitInventoryStatus) Reset() {
	*x = LogisticUnitInventoryStatus{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticUnitInventoryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticUnitInventoryStatus) ProtoMessage() {}

func (x *LogisticUnitInventoryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticUnitInventoryStatus.ProtoReflect.Descriptor instead.
func (*LogisticUnitInventoryStatus) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{49}
}

func (x *LogisticUnitInventoryStatus) GetLogisticUnitInventoryStatusD() *LogisticUnitInventoryStatusD {
	if x != nil {
		return x.LogisticUnitInventoryStatusD
	}
	return nil
}

func (x *LogisticUnitInventoryStatus) GetLogisticUnitInventoryStatusT() *LogisticUnitInventoryStatusT {
	if x != nil {
		return x.LogisticUnitInventoryStatusT
	}
	return nil
}

type LogisticUnitInventoryStatusD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InventoryDispositionCode string `protobuf:"bytes,2,opt,name=inventory_disposition_code,json=inventoryDispositionCode,proto3" json:"inventory_disposition_code,omitempty"`
	InventorySubLocationId   uint32 `protobuf:"varint,3,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
}

func (x *LogisticUnitInventoryStatusD) Reset() {
	*x = LogisticUnitInventoryStatusD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticUnitInventoryStatusD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticUnitInventoryStatusD) ProtoMessage() {}

func (x *LogisticUnitInventoryStatusD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticUnitInventoryStatusD.ProtoReflect.Descriptor instead.
func (*LogisticUnitInventoryStatusD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{50}
}

func (x *LogisticUnitInventoryStatusD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogisticUnitInventoryStatusD) GetInventoryDispositionCode() string {
	if x != nil {
		return x.InventoryDispositionCode
	}
	return ""
}

func (x *LogisticUnitInventoryStatusD) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

type LogisticUnitInventoryStatusT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=inventory_date_time,json=inventoryDateTime,proto3" json:"inventory_date_time,omitempty"`
}

func (x *LogisticUnitInventoryStatusT) Reset() {
	*x = LogisticUnitInventoryStatusT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticUnitInventoryStatusT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticUnitInventoryStatusT) ProtoMessage() {}

func (x *LogisticUnitInventoryStatusT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticUnitInventoryStatusT.ProtoReflect.Descriptor instead.
func (*LogisticUnitInventoryStatusT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{51}
}

func (x *LogisticUnitInventoryStatusT) GetInventoryDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InventoryDateTime
	}
	return nil
}

type CreateLogisticUnitInventoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryDateTime        string `protobuf:"bytes,1,opt,name=inventory_date_time,json=inventoryDateTime,proto3" json:"inventory_date_time,omitempty"`
	InventoryDispositionCode string `protobuf:"bytes,2,opt,name=inventory_disposition_code,json=inventoryDispositionCode,proto3" json:"inventory_disposition_code,omitempty"`
	InventorySubLocationId   uint32 `protobuf:"varint,3,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	UserId                   string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateLogisticUnitInventoryStatusRequest) Reset() {
	*x = CreateLogisticUnitInventoryStatusRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLogisticUnitInventoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogisticUnitInventoryStatusRequest) ProtoMessage() {}

func (x *CreateLogisticUnitInventoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogisticUnitInventoryStatusRequest.ProtoReflect.Descriptor instead.
func (*CreateLogisticUnitInventoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{52}
}

func (x *CreateLogisticUnitInventoryStatusRequest) GetInventoryDateTime() string {
	if x != nil {
		return x.InventoryDateTime
	}
	return ""
}

func (x *CreateLogisticUnitInventoryStatusRequest) GetInventoryDispositionCode() string {
	if x != nil {
		return x.InventoryDispositionCode
	}
	return ""
}

func (x *CreateLogisticUnitInventoryStatusRequest) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *CreateLogisticUnitInventoryStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateLogisticUnitInventoryStatusRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateLogisticUnitInventoryStatusRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateLogisticUnitInventoryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogisticUnitInventoryStatus *LogisticUnitInventoryStatus `protobuf:"bytes,1,opt,name=logistic_unit_inventory_status,json=logisticUnitInventoryStatus,proto3" json:"logistic_unit_inventory_status,omitempty"`
}

func (x *CreateLogisticUnitInventoryStatusResponse) Reset() {
	*x = CreateLogisticUnitInventoryStatusResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLogisticUnitInventoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogisticUnitInventoryStatusResponse) ProtoMessage() {}

func (x *CreateLogisticUnitInventoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogisticUnitInventoryStatusResponse.ProtoReflect.Descriptor instead.
func (*CreateLogisticUnitInventoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{53}
}

func (x *CreateLogisticUnitInventoryStatusResponse) GetLogisticUnitInventoryStatus() *LogisticUnitInventoryStatus {
	if x != nil {
		return x.LogisticUnitInventoryStatus
	}
	return nil
}

type LogisticUnitReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeItemQuantity    float64 `protobuf:"fixed64,2,opt,name=trade_item_quantity,json=tradeItemQuantity,proto3" json:"trade_item_quantity,omitempty"`
	QMeasurementUnitCode string  `protobuf:"bytes,3,opt,name=q_measurement_unit_code,json=qMeasurementUnitCode,proto3" json:"q_measurement_unit_code,omitempty"`
	QCodeListVersion     string  `protobuf:"bytes,4,opt,name=q_code_list_version,json=qCodeListVersion,proto3" json:"q_code_list_version,omitempty"`
}

func (x *LogisticUnitReference) Reset() {
	*x = LogisticUnitReference{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticUnitReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticUnitReference) ProtoMessage() {}

func (x *LogisticUnitReference) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticUnitReference.ProtoReflect.Descriptor instead.
func (*LogisticUnitReference) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{54}
}

func (x *LogisticUnitReference) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogisticUnitReference) GetTradeItemQuantity() float64 {
	if x != nil {
		return x.TradeItemQuantity
	}
	return 0
}

func (x *LogisticUnitReference) GetQMeasurementUnitCode() string {
	if x != nil {
		return x.QMeasurementUnitCode
	}
	return ""
}

func (x *LogisticUnitReference) GetQCodeListVersion() string {
	if x != nil {
		return x.QCodeListVersion
	}
	return ""
}

type CreateLogisticUnitReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeItemQuantity    float64 `protobuf:"fixed64,1,opt,name=trade_item_quantity,json=tradeItemQuantity,proto3" json:"trade_item_quantity,omitempty"`
	QMeasurementUnitCode string  `protobuf:"bytes,2,opt,name=q_measurement_unit_code,json=qMeasurementUnitCode,proto3" json:"q_measurement_unit_code,omitempty"`
	QCodeListVersion     string  `protobuf:"bytes,3,opt,name=q_code_list_version,json=qCodeListVersion,proto3" json:"q_code_list_version,omitempty"`
	UserId               string  `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail            string  `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId            string  `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateLogisticUnitReferenceRequest) Reset() {
	*x = CreateLogisticUnitReferenceRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLogisticUnitReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogisticUnitReferenceRequest) ProtoMessage() {}

func (x *CreateLogisticUnitReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogisticUnitReferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateLogisticUnitReferenceRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{55}
}

func (x *CreateLogisticUnitReferenceRequest) GetTradeItemQuantity() float64 {
	if x != nil {
		return x.TradeItemQuantity
	}
	return 0
}

func (x *CreateLogisticUnitReferenceRequest) GetQMeasurementUnitCode() string {
	if x != nil {
		return x.QMeasurementUnitCode
	}
	return ""
}

func (x *CreateLogisticUnitReferenceRequest) GetQCodeListVersion() string {
	if x != nil {
		return x.QCodeListVersion
	}
	return ""
}

func (x *CreateLogisticUnitReferenceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateLogisticUnitReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateLogisticUnitReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateLogisticUnitReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogisticUnitReference *LogisticUnitReference `protobuf:"bytes,1,opt,name=logistic_unit_reference,json=logisticUnitReference,proto3" json:"logistic_unit_reference,omitempty"`
}

func (x *CreateLogisticUnitReferenceResponse) Reset() {
	*x = CreateLogisticUnitReferenceResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLogisticUnitReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogisticUnitReferenceResponse) ProtoMessage() {}

func (x *CreateLogisticUnitReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogisticUnitReferenceResponse.ProtoReflect.Descriptor instead.
func (*CreateLogisticUnitReferenceResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{56}
}

func (x *CreateLogisticUnitReferenceResponse) GetLogisticUnitReference() *LogisticUnitReference {
	if x != nil {
		return x.LogisticUnitReference
	}
	return nil
}

type ReturnablePackagingInventoryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnablePackagingInventoryEventD *ReturnablePackagingInventoryEventD `protobuf:"bytes,1,opt,name=returnable_packaging_inventory_event_d,json=returnablePackagingInventoryEventD,proto3" json:"returnable_packaging_inventory_event_d,omitempty"`
	ReturnablePackagingInventoryEventT *ReturnablePackagingInventoryEventT `protobuf:"bytes,2,opt,name=returnable_packaging_inventory_event_t,json=returnablePackagingInventoryEventT,proto3" json:"returnable_packaging_inventory_event_t,omitempty"`
	CrUpdUser                          *v1.CrUpdUser                       `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                          *v1.CrUpdTime                       `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *ReturnablePackagingInventoryEvent) Reset() {
	*x = ReturnablePackagingInventoryEvent{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReturnablePackagingInventoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnablePackagingInventoryEvent) ProtoMessage() {}

func (x *ReturnablePackagingInventoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnablePackagingInventoryEvent.ProtoReflect.Descriptor instead.
func (*ReturnablePackagingInventoryEvent) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{57}
}

func (x *ReturnablePackagingInventoryEvent) GetReturnablePackagingInventoryEventD() *ReturnablePackagingInventoryEventD {
	if x != nil {
		return x.ReturnablePackagingInventoryEventD
	}
	return nil
}

func (x *ReturnablePackagingInventoryEvent) GetReturnablePackagingInventoryEventT() *ReturnablePackagingInventoryEventT {
	if x != nil {
		return x.ReturnablePackagingInventoryEventT
	}
	return nil
}

func (x *ReturnablePackagingInventoryEvent) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ReturnablePackagingInventoryEvent) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ReturnablePackagingInventoryEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                     []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                       string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	EventIdentifier           string `protobuf:"bytes,4,opt,name=event_identifier,json=eventIdentifier,proto3" json:"event_identifier,omitempty"`
	InventoryBusinessStepCode string `protobuf:"bytes,5,opt,name=inventory_business_step_code,json=inventoryBusinessStepCode,proto3" json:"inventory_business_step_code,omitempty"`
	InventoryEventReasonCode  string `protobuf:"bytes,6,opt,name=inventory_event_reason_code,json=inventoryEventReasonCode,proto3" json:"inventory_event_reason_code,omitempty"`
	InventoryMovementTypeCode string `protobuf:"bytes,7,opt,name=inventory_movement_type_code,json=inventoryMovementTypeCode,proto3" json:"inventory_movement_type_code,omitempty"`
	InventorySubLocationId    uint32 `protobuf:"varint,8,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
}

func (x *ReturnablePackagingInventoryEventD) Reset() {
	*x = ReturnablePackagingInventoryEventD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReturnablePackagingInventoryEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnablePackagingInventoryEventD) ProtoMessage() {}

func (x *ReturnablePackagingInventoryEventD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnablePackagingInventoryEventD.ProtoReflect.Descriptor instead.
func (*ReturnablePackagingInventoryEventD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{58}
}

func (x *ReturnablePackagingInventoryEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReturnablePackagingInventoryEventD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ReturnablePackagingInventoryEventD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ReturnablePackagingInventoryEventD) GetEventIdentifier() string {
	if x != nil {
		return x.EventIdentifier
	}
	return ""
}

func (x *ReturnablePackagingInventoryEventD) GetInventoryBusinessStepCode() string {
	if x != nil {
		return x.InventoryBusinessStepCode
	}
	return ""
}

func (x *ReturnablePackagingInventoryEventD) GetInventoryEventReasonCode() string {
	if x != nil {
		return x.InventoryEventReasonCode
	}
	return ""
}

func (x *ReturnablePackagingInventoryEventD) GetInventoryMovementTypeCode() string {
	if x != nil {
		return x.InventoryMovementTypeCode
	}
	return ""
}

func (x *ReturnablePackagingInventoryEventD) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

type ReturnablePackagingInventoryEventT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
}

func (x *ReturnablePackagingInventoryEventT) Reset() {
	*x = ReturnablePackagingInventoryEventT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReturnablePackagingInventoryEventT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnablePackagingInventoryEventT) ProtoMessage() {}

func (x *ReturnablePackagingInventoryEventT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnablePackagingInventoryEventT.ProtoReflect.Descriptor instead.
func (*ReturnablePackagingInventoryEventT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{59}
}

func (x *ReturnablePackagingInventoryEventT) GetEventDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDateTime
	}
	return nil
}

type CreateReturnablePackagingInventoryEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventDateTime             string `protobuf:"bytes,1,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	EventIdentifier           string `protobuf:"bytes,2,opt,name=event_identifier,json=eventIdentifier,proto3" json:"event_identifier,omitempty"`
	InventoryBusinessStepCode string `protobuf:"bytes,3,opt,name=inventory_business_step_code,json=inventoryBusinessStepCode,proto3" json:"inventory_business_step_code,omitempty"`
	InventoryEventReasonCode  string `protobuf:"bytes,4,opt,name=inventory_event_reason_code,json=inventoryEventReasonCode,proto3" json:"inventory_event_reason_code,omitempty"`
	InventoryMovementTypeCode string `protobuf:"bytes,5,opt,name=inventory_movement_type_code,json=inventoryMovementTypeCode,proto3" json:"inventory_movement_type_code,omitempty"`
	InventorySubLocationId    uint32 `protobuf:"varint,6,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	UserId                    string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateReturnablePackagingInventoryEventRequest) Reset() {
	*x = CreateReturnablePackagingInventoryEventRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReturnablePackagingInventoryEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReturnablePackagingInventoryEventRequest) ProtoMessage() {}

func (x *CreateReturnablePackagingInventoryEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReturnablePackagingInventoryEventRequest.ProtoReflect.Descriptor instead.
func (*CreateReturnablePackagingInventoryEventRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{60}
}

func (x *CreateReturnablePackagingInventoryEventRequest) GetEventDateTime() string {
	if x != nil {
		return x.EventDateTime
	}
	return ""
}

func (x *CreateReturnablePackagingInventoryEventRequest) GetEventIdentifier() string {
	if x != nil {
		return x.EventIdentifier
	}
	return ""
}

func (x *CreateReturnablePackagingInventoryEventRequest) GetInventoryBusinessStepCode() string {
	if x != nil {
		return x.InventoryBusinessStepCode
	}
	return ""
}

func (x *CreateReturnablePackagingInventoryEventRequest) GetInventoryEventReasonCode() string {
	if x != nil {
		return x.InventoryEventReasonCode
	}
	return ""
}

func (x *CreateReturnablePackagingInventoryEventRequest) GetInventoryMovementTypeCode() string {
	if x != nil {
		return x.InventoryMovementTypeCode
	}
	return ""
}

func (x *CreateReturnablePackagingInventoryEventRequest) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *CreateReturnablePackagingInventoryEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateReturnablePackagingInventoryEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateReturnablePackagingInventoryEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateReturnablePackagingInventoryEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnablePackagingInventoryEvent *ReturnablePackagingInventoryEvent `protobuf:"bytes,1,opt,name=returnable_packaging_inventory_event,json=returnablePackagingInventoryEvent,proto3" json:"returnable_packaging_inventory_event,omitempty"`
}

func (x *CreateReturnablePackagingInventoryEventResponse) Reset() {
	*x = CreateReturnablePackagingInventoryEventResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReturnablePackagingInventoryEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReturnablePackagingInventoryEventResponse) ProtoMessage() {}

func (x *CreateReturnablePackagingInventoryEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReturnablePackagingInventoryEventResponse.ProtoReflect.Descriptor instead.
func (*CreateReturnablePackagingInventoryEventResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{61}
}

func (x *CreateReturnablePackagingInventoryEventResponse) GetReturnablePackagingInventoryEvent() *ReturnablePackagingInventoryEvent {
	if x != nil {
		return x.ReturnablePackagingInventoryEvent
	}
	return nil
}

type TradeItemInventoryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeItemInventoryEventD *TradeItemInventoryEventD `protobuf:"bytes,1,opt,name=trade_item_inventory_event_d,json=tradeItemInventoryEventD,proto3" json:"trade_item_inventory_event_d,omitempty"`
	TradeItemInventoryEventT *TradeItemInventoryEventT `protobuf:"bytes,2,opt,name=trade_item_inventory_event_t,json=tradeItemInventoryEventT,proto3" json:"trade_item_inventory_event_t,omitempty"`
	CrUpdUser                *v1.CrUpdUser             `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                *v1.CrUpdTime             `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TradeItemInventoryEvent) Reset() {
	*x = TradeItemInventoryEvent{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeItemInventoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeItemInventoryEvent) ProtoMessage() {}

func (x *TradeItemInventoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeItemInventoryEvent.ProtoReflect.Descriptor instead.
func (*TradeItemInventoryEvent) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{62}
}

func (x *TradeItemInventoryEvent) GetTradeItemInventoryEventD() *TradeItemInventoryEventD {
	if x != nil {
		return x.TradeItemInventoryEventD
	}
	return nil
}

func (x *TradeItemInventoryEvent) GetTradeItemInventoryEventT() *TradeItemInventoryEventT {
	if x != nil {
		return x.TradeItemInventoryEventT
	}
	return nil
}

func (x *TradeItemInventoryEvent) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TradeItemInventoryEvent) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TradeItemInventoryEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                      []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                        string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	EventIdentifier            string `protobuf:"bytes,4,opt,name=event_identifier,json=eventIdentifier,proto3" json:"event_identifier,omitempty"`
	InventoryBusinessStepCode  string `protobuf:"bytes,5,opt,name=inventory_business_step_code,json=inventoryBusinessStepCode,proto3" json:"inventory_business_step_code,omitempty"`
	InventoryDispositionCode   string `protobuf:"bytes,6,opt,name=inventory_disposition_code,json=inventoryDispositionCode,proto3" json:"inventory_disposition_code,omitempty"`
	InventoryEventReasonCode   string `protobuf:"bytes,7,opt,name=inventory_event_reason_code,json=inventoryEventReasonCode,proto3" json:"inventory_event_reason_code,omitempty"`
	InventoryMovementTypeCode  string `protobuf:"bytes,8,opt,name=inventory_movement_type_code,json=inventoryMovementTypeCode,proto3" json:"inventory_movement_type_code,omitempty"`
	InventorySubLocationId     uint32 `protobuf:"varint,9,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	LiableParty                uint32 `protobuf:"varint,10,opt,name=liable_party,json=liableParty,proto3" json:"liable_party,omitempty"`
	LogisticsInventoryReportId uint32 `protobuf:"varint,11,opt,name=logistics_inventory_report_id,json=logisticsInventoryReportId,proto3" json:"logistics_inventory_report_id,omitempty"`
}

func (x *TradeItemInventoryEventD) Reset() {
	*x = TradeItemInventoryEventD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeItemInventoryEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeItemInventoryEventD) ProtoMessage() {}

func (x *TradeItemInventoryEventD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeItemInventoryEventD.ProtoReflect.Descriptor instead.
func (*TradeItemInventoryEventD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{63}
}

func (x *TradeItemInventoryEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TradeItemInventoryEventD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TradeItemInventoryEventD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TradeItemInventoryEventD) GetEventIdentifier() string {
	if x != nil {
		return x.EventIdentifier
	}
	return ""
}

func (x *TradeItemInventoryEventD) GetInventoryBusinessStepCode() string {
	if x != nil {
		return x.InventoryBusinessStepCode
	}
	return ""
}

func (x *TradeItemInventoryEventD) GetInventoryDispositionCode() string {
	if x != nil {
		return x.InventoryDispositionCode
	}
	return ""
}

func (x *TradeItemInventoryEventD) GetInventoryEventReasonCode() string {
	if x != nil {
		return x.InventoryEventReasonCode
	}
	return ""
}

func (x *TradeItemInventoryEventD) GetInventoryMovementTypeCode() string {
	if x != nil {
		return x.InventoryMovementTypeCode
	}
	return ""
}

func (x *TradeItemInventoryEventD) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *TradeItemInventoryEventD) GetLiableParty() uint32 {
	if x != nil {
		return x.LiableParty
	}
	return 0
}

func (x *TradeItemInventoryEventD) GetLogisticsInventoryReportId() uint32 {
	if x != nil {
		return x.LogisticsInventoryReportId
	}
	return 0
}

type TradeItemInventoryEventT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
}

func (x *TradeItemInventoryEventT) Reset() {
	*x = TradeItemInventoryEventT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeItemInventoryEventT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeItemInventoryEventT) ProtoMessage() {}

func (x *TradeItemInventoryEventT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeItemInventoryEventT.ProtoReflect.Descriptor instead.
func (*TradeItemInventoryEventT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{64}
}

func (x *TradeItemInventoryEventT) GetEventDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDateTime
	}
	return nil
}

type CreateTradeItemInventoryEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventDateTime              string `protobuf:"bytes,1,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	EventIdentifier            string `protobuf:"bytes,2,opt,name=event_identifier,json=eventIdentifier,proto3" json:"event_identifier,omitempty"`
	InventoryBusinessStepCode  string `protobuf:"bytes,3,opt,name=inventory_business_step_code,json=inventoryBusinessStepCode,proto3" json:"inventory_business_step_code,omitempty"`
	InventoryDispositionCode   string `protobuf:"bytes,4,opt,name=inventory_disposition_code,json=inventoryDispositionCode,proto3" json:"inventory_disposition_code,omitempty"`
	InventoryEventReasonCode   string `protobuf:"bytes,5,opt,name=inventory_event_reason_code,json=inventoryEventReasonCode,proto3" json:"inventory_event_reason_code,omitempty"`
	InventoryMovementTypeCode  string `protobuf:"bytes,6,opt,name=inventory_movement_type_code,json=inventoryMovementTypeCode,proto3" json:"inventory_movement_type_code,omitempty"`
	InventorySubLocationId     uint32 `protobuf:"varint,7,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	LiableParty                uint32 `protobuf:"varint,8,opt,name=liable_party,json=liableParty,proto3" json:"liable_party,omitempty"`
	LogisticsInventoryReportId uint32 `protobuf:"varint,9,opt,name=logistics_inventory_report_id,json=logisticsInventoryReportId,proto3" json:"logistics_inventory_report_id,omitempty"`
	UserId                     string `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string `protobuf:"bytes,11,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,12,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTradeItemInventoryEventRequest) Reset() {
	*x = CreateTradeItemInventoryEventRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTradeItemInventoryEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeItemInventoryEventRequest) ProtoMessage() {}

func (x *CreateTradeItemInventoryEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeItemInventoryEventRequest.ProtoReflect.Descriptor instead.
func (*CreateTradeItemInventoryEventRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{65}
}

func (x *CreateTradeItemInventoryEventRequest) GetEventDateTime() string {
	if x != nil {
		return x.EventDateTime
	}
	return ""
}

func (x *CreateTradeItemInventoryEventRequest) GetEventIdentifier() string {
	if x != nil {
		return x.EventIdentifier
	}
	return ""
}

func (x *CreateTradeItemInventoryEventRequest) GetInventoryBusinessStepCode() string {
	if x != nil {
		return x.InventoryBusinessStepCode
	}
	return ""
}

func (x *CreateTradeItemInventoryEventRequest) GetInventoryDispositionCode() string {
	if x != nil {
		return x.InventoryDispositionCode
	}
	return ""
}

func (x *CreateTradeItemInventoryEventRequest) GetInventoryEventReasonCode() string {
	if x != nil {
		return x.InventoryEventReasonCode
	}
	return ""
}

func (x *CreateTradeItemInventoryEventRequest) GetInventoryMovementTypeCode() string {
	if x != nil {
		return x.InventoryMovementTypeCode
	}
	return ""
}

func (x *CreateTradeItemInventoryEventRequest) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *CreateTradeItemInventoryEventRequest) GetLiableParty() uint32 {
	if x != nil {
		return x.LiableParty
	}
	return 0
}

func (x *CreateTradeItemInventoryEventRequest) GetLogisticsInventoryReportId() uint32 {
	if x != nil {
		return x.LogisticsInventoryReportId
	}
	return 0
}

func (x *CreateTradeItemInventoryEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTradeItemInventoryEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTradeItemInventoryEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTradeItemInventoryEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeItemInventoryEvent *TradeItemInventoryEvent `protobuf:"bytes,1,opt,name=trade_item_inventory_event,json=tradeItemInventoryEvent,proto3" json:"trade_item_inventory_event,omitempty"`
}

func (x *CreateTradeItemInventoryEventResponse) Reset() {
	*x = CreateTradeItemInventoryEventResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTradeItemInventoryEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeItemInventoryEventResponse) ProtoMessage() {}

func (x *CreateTradeItemInventoryEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeItemInventoryEventResponse.ProtoReflect.Descriptor instead.
func (*CreateTradeItemInventoryEventResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{66}
}

func (x *CreateTradeItemInventoryEventResponse) GetTradeItemInventoryEvent() *TradeItemInventoryEvent {
	if x != nil {
		return x.TradeItemInventoryEvent
	}
	return nil
}

type TradeItemInventoryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeItemInventoryStatusD *TradeItemInventoryStatusD `protobuf:"bytes,1,opt,name=trade_item_inventory_status_d,json=tradeItemInventoryStatusD,proto3" json:"trade_item_inventory_status_d,omitempty"`
	TradeItemInventoryStatusT *TradeItemInventoryStatusT `protobuf:"bytes,2,opt,name=trade_item_inventory_status_t,json=tradeItemInventoryStatusT,proto3" json:"trade_item_inventory_status_t,omitempty"`
}

func (x *TradeItemInventoryStatus) Reset() {
	*x = TradeItemInventoryStatus{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeItemInventoryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeItemInventoryStatus) ProtoMessage() {}

func (x *TradeItemInventoryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeItemInventoryStatus.ProtoReflect.Descriptor instead.
func (*TradeItemInventoryStatus) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{67}
}

func (x *TradeItemInventoryStatus) GetTradeItemInventoryStatusD() *TradeItemInventoryStatusD {
	if x != nil {
		return x.TradeItemInventoryStatusD
	}
	return nil
}

func (x *TradeItemInventoryStatus) GetTradeItemInventoryStatusT() *TradeItemInventoryStatusT {
	if x != nil {
		return x.TradeItemInventoryStatusT
	}
	return nil
}

type TradeItemInventoryStatusD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InventoryDispositionCode   string `protobuf:"bytes,2,opt,name=inventory_disposition_code,json=inventoryDispositionCode,proto3" json:"inventory_disposition_code,omitempty"`
	InventorySubLocationId     uint32 `protobuf:"varint,3,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	LogisticsInventoryReportId uint32 `protobuf:"varint,4,opt,name=logistics_inventory_report_id,json=logisticsInventoryReportId,proto3" json:"logistics_inventory_report_id,omitempty"`
}

func (x *TradeItemInventoryStatusD) Reset() {
	*x = TradeItemInventoryStatusD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeItemInventoryStatusD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeItemInventoryStatusD) ProtoMessage() {}

func (x *TradeItemInventoryStatusD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeItemInventoryStatusD.ProtoReflect.Descriptor instead.
func (*TradeItemInventoryStatusD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{68}
}

func (x *TradeItemInventoryStatusD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TradeItemInventoryStatusD) GetInventoryDispositionCode() string {
	if x != nil {
		return x.InventoryDispositionCode
	}
	return ""
}

func (x *TradeItemInventoryStatusD) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *TradeItemInventoryStatusD) GetLogisticsInventoryReportId() uint32 {
	if x != nil {
		return x.LogisticsInventoryReportId
	}
	return 0
}

type TradeItemInventoryStatusT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=inventory_date_time,json=inventoryDateTime,proto3" json:"inventory_date_time,omitempty"`
}

func (x *TradeItemInventoryStatusT) Reset() {
	*x = TradeItemInventoryStatusT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeItemInventoryStatusT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeItemInventoryStatusT) ProtoMessage() {}

func (x *TradeItemInventoryStatusT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeItemInventoryStatusT.ProtoReflect.Descriptor instead.
func (*TradeItemInventoryStatusT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{69}
}

func (x *TradeItemInventoryStatusT) GetInventoryDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InventoryDateTime
	}
	return nil
}

type CreateTradeItemInventoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryDateTime          string `protobuf:"bytes,1,opt,name=inventory_date_time,json=inventoryDateTime,proto3" json:"inventory_date_time,omitempty"`
	InventoryDispositionCode   string `protobuf:"bytes,2,opt,name=inventory_disposition_code,json=inventoryDispositionCode,proto3" json:"inventory_disposition_code,omitempty"`
	InventorySubLocationId     uint32 `protobuf:"varint,3,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	LogisticsInventoryReportId uint32 `protobuf:"varint,4,opt,name=logistics_inventory_report_id,json=logisticsInventoryReportId,proto3" json:"logistics_inventory_report_id,omitempty"`
	UserId                     string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTradeItemInventoryStatusRequest) Reset() {
	*x = CreateTradeItemInventoryStatusRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTradeItemInventoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeItemInventoryStatusRequest) ProtoMessage() {}

func (x *CreateTradeItemInventoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeItemInventoryStatusRequest.ProtoReflect.Descriptor instead.
func (*CreateTradeItemInventoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{70}
}

func (x *CreateTradeItemInventoryStatusRequest) GetInventoryDateTime() string {
	if x != nil {
		return x.InventoryDateTime
	}
	return ""
}

func (x *CreateTradeItemInventoryStatusRequest) GetInventoryDispositionCode() string {
	if x != nil {
		return x.InventoryDispositionCode
	}
	return ""
}

func (x *CreateTradeItemInventoryStatusRequest) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *CreateTradeItemInventoryStatusRequest) GetLogisticsInventoryReportId() uint32 {
	if x != nil {
		return x.LogisticsInventoryReportId
	}
	return 0
}

func (x *CreateTradeItemInventoryStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTradeItemInventoryStatusRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTradeItemInventoryStatusRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTradeItemInventoryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeItemInventoryStatus *TradeItemInventoryStatus `protobuf:"bytes,1,opt,name=trade_item_inventory_status,json=tradeItemInventoryStatus,proto3" json:"trade_item_inventory_status,omitempty"`
}

func (x *CreateTradeItemInventoryStatusResponse) Reset() {
	*x = CreateTradeItemInventoryStatusResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTradeItemInventoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeItemInventoryStatusResponse) ProtoMessage() {}

func (x *CreateTradeItemInventoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeItemInventoryStatusResponse.ProtoReflect.Descriptor instead.
func (*CreateTradeItemInventoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{71}
}

func (x *CreateTradeItemInventoryStatusResponse) GetTradeItemInventoryStatus() *TradeItemInventoryStatus {
	if x != nil {
		return x.TradeItemInventoryStatus
	}
	return nil
}

type TransactionalItemCertification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemCertificationAgency   string `protobuf:"bytes,2,opt,name=item_certification_agency,json=itemCertificationAgency,proto3" json:"item_certification_agency,omitempty"`
	ItemCertificationStandard string `protobuf:"bytes,3,opt,name=item_certification_standard,json=itemCertificationStandard,proto3" json:"item_certification_standard,omitempty"`
	ItemCertificationValue    string `protobuf:"bytes,4,opt,name=item_certification_value,json=itemCertificationValue,proto3" json:"item_certification_value,omitempty"`
	OrganicCertificationId    uint32 `protobuf:"varint,5,opt,name=organic_certification_id,json=organicCertificationId,proto3" json:"organic_certification_id,omitempty"`
}

func (x *TransactionalItemCertification) Reset() {
	*x = TransactionalItemCertification{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionalItemCertification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionalItemCertification) ProtoMessage() {}

func (x *TransactionalItemCertification) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionalItemCertification.ProtoReflect.Descriptor instead.
func (*TransactionalItemCertification) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{72}
}

func (x *TransactionalItemCertification) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionalItemCertification) GetItemCertificationAgency() string {
	if x != nil {
		return x.ItemCertificationAgency
	}
	return ""
}

func (x *TransactionalItemCertification) GetItemCertificationStandard() string {
	if x != nil {
		return x.ItemCertificationStandard
	}
	return ""
}

func (x *TransactionalItemCertification) GetItemCertificationValue() string {
	if x != nil {
		return x.ItemCertificationValue
	}
	return ""
}

func (x *TransactionalItemCertification) GetOrganicCertificationId() uint32 {
	if x != nil {
		return x.OrganicCertificationId
	}
	return 0
}

type CreateTransactionalItemCertificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCertificationAgency   string `protobuf:"bytes,1,opt,name=item_certification_agency,json=itemCertificationAgency,proto3" json:"item_certification_agency,omitempty"`
	ItemCertificationStandard string `protobuf:"bytes,2,opt,name=item_certification_standard,json=itemCertificationStandard,proto3" json:"item_certification_standard,omitempty"`
	ItemCertificationValue    string `protobuf:"bytes,3,opt,name=item_certification_value,json=itemCertificationValue,proto3" json:"item_certification_value,omitempty"`
	OrganicCertificationId    uint32 `protobuf:"varint,4,opt,name=organic_certification_id,json=organicCertificationId,proto3" json:"organic_certification_id,omitempty"`
	UserId                    string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransactionalItemCertificationRequest) Reset() {
	*x = CreateTransactionalItemCertificationRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalItemCertificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalItemCertificationRequest) ProtoMessage() {}

func (x *CreateTransactionalItemCertificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalItemCertificationRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionalItemCertificationRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{73}
}

func (x *CreateTransactionalItemCertificationRequest) GetItemCertificationAgency() string {
	if x != nil {
		return x.ItemCertificationAgency
	}
	return ""
}

func (x *CreateTransactionalItemCertificationRequest) GetItemCertificationStandard() string {
	if x != nil {
		return x.ItemCertificationStandard
	}
	return ""
}

func (x *CreateTransactionalItemCertificationRequest) GetItemCertificationValue() string {
	if x != nil {
		return x.ItemCertificationValue
	}
	return ""
}

func (x *CreateTransactionalItemCertificationRequest) GetOrganicCertificationId() uint32 {
	if x != nil {
		return x.OrganicCertificationId
	}
	return 0
}

func (x *CreateTransactionalItemCertificationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransactionalItemCertificationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransactionalItemCertificationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransactionalItemCertificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionalItemCertification *TransactionalItemCertification `protobuf:"bytes,1,opt,name=transactional_item_certification,json=transactionalItemCertification,proto3" json:"transactional_item_certification,omitempty"`
}

func (x *CreateTransactionalItemCertificationResponse) Reset() {
	*x = CreateTransactionalItemCertificationResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalItemCertificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalItemCertificationResponse) ProtoMessage() {}

func (x *CreateTransactionalItemCertificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalItemCertificationResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionalItemCertificationResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{74}
}

func (x *CreateTransactionalItemCertificationResponse) GetTransactionalItemCertification() *TransactionalItemCertification {
	if x != nil {
		return x.TransactionalItemCertification
	}
	return nil
}

type TransactionalItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionalItemDataD *TransactionalItemDataD `protobuf:"bytes,1,opt,name=transactional_item_data_d,json=transactionalItemDataD,proto3" json:"transactional_item_data_d,omitempty"`
	TransactionalItemDataT *TransactionalItemDataT `protobuf:"bytes,2,opt,name=transactional_item_data_t,json=transactionalItemDataT,proto3" json:"transactional_item_data_t,omitempty"`
	CrUpdUser              *v1.CrUpdUser           `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime              *v1.CrUpdTime           `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TransactionalItemData) Reset() {
	*x = TransactionalItemData{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionalItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionalItemData) ProtoMessage() {}

func (x *TransactionalItemData) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionalItemData.ProtoReflect.Descriptor instead.
func (*TransactionalItemData) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{75}
}

func (x *TransactionalItemData) GetTransactionalItemDataD() *TransactionalItemDataD {
	if x != nil {
		return x.TransactionalItemDataD
	}
	return nil
}

func (x *TransactionalItemData) GetTransactionalItemDataT() *TransactionalItemDataT {
	if x != nil {
		return x.TransactionalItemDataT
	}
	return nil
}

func (x *TransactionalItemData) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TransactionalItemData) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TransactionalItemDataD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                        []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                          string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	BatchNumber                  string `protobuf:"bytes,4,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	CountryOfOrigin              string `protobuf:"bytes,5,opt,name=country_of_origin,json=countryOfOrigin,proto3" json:"country_of_origin,omitempty"`
	ItemInContactWithFoodProduct bool   `protobuf:"varint,6,opt,name=item_in_contact_with_food_product,json=itemInContactWithFoodProduct,proto3" json:"item_in_contact_with_food_product,omitempty"`
	LotNumber                    string `protobuf:"bytes,7,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	ProductQualityIndication     uint32 `protobuf:"varint,8,opt,name=product_quality_indication,json=productQualityIndication,proto3" json:"product_quality_indication,omitempty"`
	SerialNumber                 string `protobuf:"bytes,9,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	ShelfLife                    string `protobuf:"bytes,10,opt,name=shelf_life,json=shelfLife,proto3" json:"shelf_life,omitempty"`
	TradeItemQuantity            uint32 `protobuf:"varint,11,opt,name=trade_item_quantity,json=tradeItemQuantity,proto3" json:"trade_item_quantity,omitempty"`
	TradeItemInventoryStatusId   uint32 `protobuf:"varint,12,opt,name=trade_item_inventory_status_id,json=tradeItemInventoryStatusId,proto3" json:"trade_item_inventory_status_id,omitempty"`
}

func (x *TransactionalItemDataD) Reset() {
	*x = TransactionalItemDataD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionalItemDataD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionalItemDataD) ProtoMessage() {}

func (x *TransactionalItemDataD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionalItemDataD.ProtoReflect.Descriptor instead.
func (*TransactionalItemDataD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{76}
}

func (x *TransactionalItemDataD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionalItemDataD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TransactionalItemDataD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TransactionalItemDataD) GetBatchNumber() string {
	if x != nil {
		return x.BatchNumber
	}
	return ""
}

func (x *TransactionalItemDataD) GetCountryOfOrigin() string {
	if x != nil {
		return x.CountryOfOrigin
	}
	return ""
}

func (x *TransactionalItemDataD) GetItemInContactWithFoodProduct() bool {
	if x != nil {
		return x.ItemInContactWithFoodProduct
	}
	return false
}

func (x *TransactionalItemDataD) GetLotNumber() string {
	if x != nil {
		return x.LotNumber
	}
	return ""
}

func (x *TransactionalItemDataD) GetProductQualityIndication() uint32 {
	if x != nil {
		return x.ProductQualityIndication
	}
	return 0
}

func (x *TransactionalItemDataD) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TransactionalItemDataD) GetShelfLife() string {
	if x != nil {
		return x.ShelfLife
	}
	return ""
}

func (x *TransactionalItemDataD) GetTradeItemQuantity() uint32 {
	if x != nil {
		return x.TradeItemQuantity
	}
	return 0
}

func (x *TransactionalItemDataD) GetTradeItemInventoryStatusId() uint32 {
	if x != nil {
		return x.TradeItemInventoryStatusId
	}
	return 0
}

type TransactionalItemDataT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableForSaleDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=available_for_sale_date,json=availableForSaleDate,proto3" json:"available_for_sale_date,omitempty"`
	BestBeforeDate       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=best_before_date,json=bestBeforeDate,proto3" json:"best_before_date,omitempty"`
	ItemExpirationDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=item_expiration_date,json=itemExpirationDate,proto3" json:"item_expiration_date,omitempty"`
	PackagingDate        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=packaging_date,json=packagingDate,proto3" json:"packaging_date,omitempty"`
	ProductionDate       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"`
	SellByDate           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=sell_by_date,json=sellByDate,proto3" json:"sell_by_date,omitempty"`
}

func (x *TransactionalItemDataT) Reset() {
	*x = TransactionalItemDataT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionalItemDataT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionalItemDataT) ProtoMessage() {}

func (x *TransactionalItemDataT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionalItemDataT.ProtoReflect.Descriptor instead.
func (*TransactionalItemDataT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{77}
}

func (x *TransactionalItemDataT) GetAvailableForSaleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AvailableForSaleDate
	}
	return nil
}

func (x *TransactionalItemDataT) GetBestBeforeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BestBeforeDate
	}
	return nil
}

func (x *TransactionalItemDataT) GetItemExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ItemExpirationDate
	}
	return nil
}

func (x *TransactionalItemDataT) GetPackagingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PackagingDate
	}
	return nil
}

func (x *TransactionalItemDataT) GetProductionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ProductionDate
	}
	return nil
}

func (x *TransactionalItemDataT) GetSellByDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SellByDate
	}
	return nil
}

type CreateTransactionalItemDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableForSaleDate         string `protobuf:"bytes,1,opt,name=available_for_sale_date,json=availableForSaleDate,proto3" json:"available_for_sale_date,omitempty"`
	BatchNumber                  string `protobuf:"bytes,2,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	BestBeforeDate               string `protobuf:"bytes,3,opt,name=best_before_date,json=bestBeforeDate,proto3" json:"best_before_date,omitempty"`
	CountryOfOrigin              string `protobuf:"bytes,4,opt,name=country_of_origin,json=countryOfOrigin,proto3" json:"country_of_origin,omitempty"`
	ItemExpirationDate           string `protobuf:"bytes,5,opt,name=item_expiration_date,json=itemExpirationDate,proto3" json:"item_expiration_date,omitempty"`
	ItemInContactWithFoodProduct bool   `protobuf:"varint,6,opt,name=item_in_contact_with_food_product,json=itemInContactWithFoodProduct,proto3" json:"item_in_contact_with_food_product,omitempty"`
	LotNumber                    string `protobuf:"bytes,7,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	PackagingDate                string `protobuf:"bytes,8,opt,name=packaging_date,json=packagingDate,proto3" json:"packaging_date,omitempty"`
	ProductionDate               string `protobuf:"bytes,9,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"`
	ProductQualityIndication     uint32 `protobuf:"varint,10,opt,name=product_quality_indication,json=productQualityIndication,proto3" json:"product_quality_indication,omitempty"`
	SellByDate                   string `protobuf:"bytes,11,opt,name=sell_by_date,json=sellByDate,proto3" json:"sell_by_date,omitempty"`
	SerialNumber                 string `protobuf:"bytes,12,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	ShelfLife                    string `protobuf:"bytes,13,opt,name=shelf_life,json=shelfLife,proto3" json:"shelf_life,omitempty"`
	TradeItemQuantity            uint32 `protobuf:"varint,14,opt,name=trade_item_quantity,json=tradeItemQuantity,proto3" json:"trade_item_quantity,omitempty"`
	TradeItemInventoryStatusId   uint32 `protobuf:"varint,15,opt,name=trade_item_inventory_status_id,json=tradeItemInventoryStatusId,proto3" json:"trade_item_inventory_status_id,omitempty"`
	UserId                       string `protobuf:"bytes,16,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string `protobuf:"bytes,17,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string `protobuf:"bytes,18,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransactionalItemDataRequest) Reset() {
	*x = CreateTransactionalItemDataRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalItemDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalItemDataRequest) ProtoMessage() {}

func (x *CreateTransactionalItemDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalItemDataRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionalItemDataRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{78}
}

func (x *CreateTransactionalItemDataRequest) GetAvailableForSaleDate() string {
	if x != nil {
		return x.AvailableForSaleDate
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetBatchNumber() string {
	if x != nil {
		return x.BatchNumber
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetBestBeforeDate() string {
	if x != nil {
		return x.BestBeforeDate
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetCountryOfOrigin() string {
	if x != nil {
		return x.CountryOfOrigin
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetItemExpirationDate() string {
	if x != nil {
		return x.ItemExpirationDate
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetItemInContactWithFoodProduct() bool {
	if x != nil {
		return x.ItemInContactWithFoodProduct
	}
	return false
}

func (x *CreateTransactionalItemDataRequest) GetLotNumber() string {
	if x != nil {
		return x.LotNumber
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetPackagingDate() string {
	if x != nil {
		return x.PackagingDate
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetProductionDate() string {
	if x != nil {
		return x.ProductionDate
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetProductQualityIndication() uint32 {
	if x != nil {
		return x.ProductQualityIndication
	}
	return 0
}

func (x *CreateTransactionalItemDataRequest) GetSellByDate() string {
	if x != nil {
		return x.SellByDate
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetShelfLife() string {
	if x != nil {
		return x.ShelfLife
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetTradeItemQuantity() uint32 {
	if x != nil {
		return x.TradeItemQuantity
	}
	return 0
}

func (x *CreateTransactionalItemDataRequest) GetTradeItemInventoryStatusId() uint32 {
	if x != nil {
		return x.TradeItemInventoryStatusId
	}
	return 0
}

func (x *CreateTransactionalItemDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransactionalItemDataRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransactionalItemDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionalItemData *TransactionalItemData `protobuf:"bytes,1,opt,name=transactional_item_data,json=transactionalItemData,proto3" json:"transactional_item_data,omitempty"`
}

func (x *CreateTransactionalItemDataResponse) Reset() {
	*x = CreateTransactionalItemDataResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalItemDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalItemDataResponse) ProtoMessage() {}

func (x *CreateTransactionalItemDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalItemDataResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionalItemDataResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{79}
}

func (x *CreateTransactionalItemDataResponse) GetTransactionalItemData() *TransactionalItemData {
	if x != nil {
		return x.TransactionalItemData
	}
	return nil
}

type TransactionalItemDataCarrierAndIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DataCarrier                           string `protobuf:"bytes,2,opt,name=data_carrier,json=dataCarrier,proto3" json:"data_carrier,omitempty"`
	Gs1TransactionalItemIdentificationKey string `protobuf:"bytes,3,opt,name=gs1_transactional_item_identification_key,json=gs1TransactionalItemIdentificationKey,proto3" json:"gs1_transactional_item_identification_key,omitempty"`
	TransactionalItemDataId               uint32 `protobuf:"varint,4,opt,name=transactional_item_data_id,json=transactionalItemDataId,proto3" json:"transactional_item_data_id,omitempty"`
}

func (x *TransactionalItemDataCarrierAndIdentification) Reset() {
	*x = TransactionalItemDataCarrierAndIdentification{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionalItemDataCarrierAndIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionalItemDataCarrierAndIdentification) ProtoMessage() {}

func (x *TransactionalItemDataCarrierAndIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionalItemDataCarrierAndIdentification.ProtoReflect.Descriptor instead.
func (*TransactionalItemDataCarrierAndIdentification) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{80}
}

func (x *TransactionalItemDataCarrierAndIdentification) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionalItemDataCarrierAndIdentification) GetDataCarrier() string {
	if x != nil {
		return x.DataCarrier
	}
	return ""
}

func (x *TransactionalItemDataCarrierAndIdentification) GetGs1TransactionalItemIdentificationKey() string {
	if x != nil {
		return x.Gs1TransactionalItemIdentificationKey
	}
	return ""
}

func (x *TransactionalItemDataCarrierAndIdentification) GetTransactionalItemDataId() uint32 {
	if x != nil {
		return x.TransactionalItemDataId
	}
	return 0
}

type CreateTransactionalItemDataCarrierAndIdentificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCarrier                           string `protobuf:"bytes,1,opt,name=data_carrier,json=dataCarrier,proto3" json:"data_carrier,omitempty"`
	Gs1TransactionalItemIdentificationKey string `protobuf:"bytes,2,opt,name=gs1_transactional_item_identification_key,json=gs1TransactionalItemIdentificationKey,proto3" json:"gs1_transactional_item_identification_key,omitempty"`
	TransactionalItemDataId               uint32 `protobuf:"varint,3,opt,name=transactional_item_data_id,json=transactionalItemDataId,proto3" json:"transactional_item_data_id,omitempty"`
	UserId                                string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                             string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                             string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationRequest) Reset() {
	*x = CreateTransactionalItemDataCarrierAndIdentificationRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalItemDataCarrierAndIdentificationRequest) ProtoMessage() {}

func (x *CreateTransactionalItemDataCarrierAndIdentificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalItemDataCarrierAndIdentificationRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionalItemDataCarrierAndIdentificationRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{81}
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationRequest) GetDataCarrier() string {
	if x != nil {
		return x.DataCarrier
	}
	return ""
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationRequest) GetGs1TransactionalItemIdentificationKey() string {
	if x != nil {
		return x.Gs1TransactionalItemIdentificationKey
	}
	return ""
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationRequest) GetTransactionalItemDataId() uint32 {
	if x != nil {
		return x.TransactionalItemDataId
	}
	return 0
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransactionalItemDataCarrierAndIdentificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionalItemDataCarrierAndIdentification *TransactionalItemDataCarrierAndIdentification `protobuf:"bytes,1,opt,name=transactional_item_data_carrier_and_identification,json=transactionalItemDataCarrierAndIdentification,proto3" json:"transactional_item_data_carrier_and_identification,omitempty"`
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationResponse) Reset() {
	*x = CreateTransactionalItemDataCarrierAndIdentificationResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalItemDataCarrierAndIdentificationResponse) ProtoMessage() {}

func (x *CreateTransactionalItemDataCarrierAndIdentificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalItemDataCarrierAndIdentificationResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionalItemDataCarrierAndIdentificationResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{82}
}

func (x *CreateTransactionalItemDataCarrierAndIdentificationResponse) GetTransactionalItemDataCarrierAndIdentification() *TransactionalItemDataCarrierAndIdentification {
	if x != nil {
		return x.TransactionalItemDataCarrierAndIdentification
	}
	return nil
}

type TransactionalItemLogisticUnitInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionalItemLogisticUnitInformationD *TransactionalItemLogisticUnitInformationD `protobuf:"bytes,1,opt,name=transactional_item_logistic_unit_information_d,json=transactionalItemLogisticUnitInformationD,proto3" json:"transactional_item_logistic_unit_information_d,omitempty"`
	CrUpdUser                                 *v1.CrUpdUser                              `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                                 *v1.CrUpdTime                              `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TransactionalItemLogisticUnitInformation) Reset() {
	*x = TransactionalItemLogisticUnitInformation{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionalItemLogisticUnitInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionalItemLogisticUnitInformation) ProtoMessage() {}

func (x *TransactionalItemLogisticUnitInformation) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionalItemLogisticUnitInformation.ProtoReflect.Descriptor instead.
func (*TransactionalItemLogisticUnitInformation) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{83}
}

func (x *TransactionalItemLogisticUnitInformation) GetTransactionalItemLogisticUnitInformationD() *TransactionalItemLogisticUnitInformationD {
	if x != nil {
		return x.TransactionalItemLogisticUnitInformationD
	}
	return nil
}

func (x *TransactionalItemLogisticUnitInformation) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TransactionalItemLogisticUnitInformation) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TransactionalItemLogisticUnitInformationD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                                 []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                   string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	MaximumStackingFactor                 uint32 `protobuf:"varint,4,opt,name=maximum_stacking_factor,json=maximumStackingFactor,proto3" json:"maximum_stacking_factor,omitempty"`
	NumberOfLayers                        uint32 `protobuf:"varint,5,opt,name=number_of_layers,json=numberOfLayers,proto3" json:"number_of_layers,omitempty"`
	NumberOfUnitsPerLayer                 uint32 `protobuf:"varint,6,opt,name=number_of_units_per_layer,json=numberOfUnitsPerLayer,proto3" json:"number_of_units_per_layer,omitempty"`
	NumberOfUnitsPerPallet                uint32 `protobuf:"varint,7,opt,name=number_of_units_per_pallet,json=numberOfUnitsPerPallet,proto3" json:"number_of_units_per_pallet,omitempty"`
	PackageTypeCode                       string `protobuf:"bytes,8,opt,name=package_type_code,json=packageTypeCode,proto3" json:"package_type_code,omitempty"`
	PackagingTerms                        string `protobuf:"bytes,9,opt,name=packaging_terms,json=packagingTerms,proto3" json:"packaging_terms,omitempty"`
	ReturnablePackageTransportCostPayment string `protobuf:"bytes,10,opt,name=returnable_package_transport_cost_payment,json=returnablePackageTransportCostPayment,proto3" json:"returnable_package_transport_cost_payment,omitempty"`
	TransactionalItemDataId               uint32 `protobuf:"varint,11,opt,name=transactional_item_data_id,json=transactionalItemDataId,proto3" json:"transactional_item_data_id,omitempty"`
}

func (x *TransactionalItemLogisticUnitInformationD) Reset() {
	*x = TransactionalItemLogisticUnitInformationD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionalItemLogisticUnitInformationD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionalItemLogisticUnitInformationD) ProtoMessage() {}

func (x *TransactionalItemLogisticUnitInformationD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionalItemLogisticUnitInformationD.ProtoReflect.Descriptor instead.
func (*TransactionalItemLogisticUnitInformationD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{84}
}

func (x *TransactionalItemLogisticUnitInformationD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionalItemLogisticUnitInformationD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TransactionalItemLogisticUnitInformationD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TransactionalItemLogisticUnitInformationD) GetMaximumStackingFactor() uint32 {
	if x != nil {
		return x.MaximumStackingFactor
	}
	return 0
}

func (x *TransactionalItemLogisticUnitInformationD) GetNumberOfLayers() uint32 {
	if x != nil {
		return x.NumberOfLayers
	}
	return 0
}

func (x *TransactionalItemLogisticUnitInformationD) GetNumberOfUnitsPerLayer() uint32 {
	if x != nil {
		return x.NumberOfUnitsPerLayer
	}
	return 0
}

func (x *TransactionalItemLogisticUnitInformationD) GetNumberOfUnitsPerPallet() uint32 {
	if x != nil {
		return x.NumberOfUnitsPerPallet
	}
	return 0
}

func (x *TransactionalItemLogisticUnitInformationD) GetPackageTypeCode() string {
	if x != nil {
		return x.PackageTypeCode
	}
	return ""
}

func (x *TransactionalItemLogisticUnitInformationD) GetPackagingTerms() string {
	if x != nil {
		return x.PackagingTerms
	}
	return ""
}

func (x *TransactionalItemLogisticUnitInformationD) GetReturnablePackageTransportCostPayment() string {
	if x != nil {
		return x.ReturnablePackageTransportCostPayment
	}
	return ""
}

func (x *TransactionalItemLogisticUnitInformationD) GetTransactionalItemDataId() uint32 {
	if x != nil {
		return x.TransactionalItemDataId
	}
	return 0
}

type CreateTransactionalItemLogisticUnitInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumStackingFactor                 uint32 `protobuf:"varint,1,opt,name=maximum_stacking_factor,json=maximumStackingFactor,proto3" json:"maximum_stacking_factor,omitempty"`
	NumberOfLayers                        uint32 `protobuf:"varint,2,opt,name=number_of_layers,json=numberOfLayers,proto3" json:"number_of_layers,omitempty"`
	NumberOfUnitsPerLayer                 uint32 `protobuf:"varint,3,opt,name=number_of_units_per_layer,json=numberOfUnitsPerLayer,proto3" json:"number_of_units_per_layer,omitempty"`
	NumberOfUnitsPerPallet                uint32 `protobuf:"varint,4,opt,name=number_of_units_per_pallet,json=numberOfUnitsPerPallet,proto3" json:"number_of_units_per_pallet,omitempty"`
	PackageTypeCode                       string `protobuf:"bytes,5,opt,name=package_type_code,json=packageTypeCode,proto3" json:"package_type_code,omitempty"`
	PackagingTerms                        string `protobuf:"bytes,6,opt,name=packaging_terms,json=packagingTerms,proto3" json:"packaging_terms,omitempty"`
	ReturnablePackageTransportCostPayment string `protobuf:"bytes,7,opt,name=returnable_package_transport_cost_payment,json=returnablePackageTransportCostPayment,proto3" json:"returnable_package_transport_cost_payment,omitempty"`
	TransactionalItemDataId               uint32 `protobuf:"varint,8,opt,name=transactional_item_data_id,json=transactionalItemDataId,proto3" json:"transactional_item_data_id,omitempty"`
	UserId                                string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                             string `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                             string `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) Reset() {
	*x = CreateTransactionalItemLogisticUnitInformationRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalItemLogisticUnitInformationRequest) ProtoMessage() {}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalItemLogisticUnitInformationRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionalItemLogisticUnitInformationRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{85}
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetMaximumStackingFactor() uint32 {
	if x != nil {
		return x.MaximumStackingFactor
	}
	return 0
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetNumberOfLayers() uint32 {
	if x != nil {
		return x.NumberOfLayers
	}
	return 0
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetNumberOfUnitsPerLayer() uint32 {
	if x != nil {
		return x.NumberOfUnitsPerLayer
	}
	return 0
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetNumberOfUnitsPerPallet() uint32 {
	if x != nil {
		return x.NumberOfUnitsPerPallet
	}
	return 0
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetPackageTypeCode() string {
	if x != nil {
		return x.PackageTypeCode
	}
	return ""
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetPackagingTerms() string {
	if x != nil {
		return x.PackagingTerms
	}
	return ""
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetReturnablePackageTransportCostPayment() string {
	if x != nil {
		return x.ReturnablePackageTransportCostPayment
	}
	return ""
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetTransactionalItemDataId() uint32 {
	if x != nil {
		return x.TransactionalItemDataId
	}
	return 0
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransactionalItemLogisticUnitInformationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransactionalItemLogisticUnitInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionalItemLogisticUnitInformation *TransactionalItemLogisticUnitInformation `protobuf:"bytes,1,opt,name=transactional_item_logistic_unit_information,json=transactionalItemLogisticUnitInformation,proto3" json:"transactional_item_logistic_unit_information,omitempty"`
}

func (x *CreateTransactionalItemLogisticUnitInformationResponse) Reset() {
	*x = CreateTransactionalItemLogisticUnitInformationResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalItemLogisticUnitInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalItemLogisticUnitInformationResponse) ProtoMessage() {}

func (x *CreateTransactionalItemLogisticUnitInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalItemLogisticUnitInformationResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionalItemLogisticUnitInformationResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{86}
}

func (x *CreateTransactionalItemLogisticUnitInformationResponse) GetTransactionalItemLogisticUnitInformation() *TransactionalItemLogisticUnitInformation {
	if x != nil {
		return x.TransactionalItemLogisticUnitInformation
	}
	return nil
}

type TransactionalItemOrganicInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsTradeItemOrganic      bool   `protobuf:"varint,2,opt,name=is_trade_item_organic,json=isTradeItemOrganic,proto3" json:"is_trade_item_organic,omitempty"`
	TransactionalItemDataId uint32 `protobuf:"varint,3,opt,name=transactional_item_data_id,json=transactionalItemDataId,proto3" json:"transactional_item_data_id,omitempty"`
}

func (x *TransactionalItemOrganicInformation) Reset() {
	*x = TransactionalItemOrganicInformation{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionalItemOrganicInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionalItemOrganicInformation) ProtoMessage() {}

func (x *TransactionalItemOrganicInformation) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionalItemOrganicInformation.ProtoReflect.Descriptor instead.
func (*TransactionalItemOrganicInformation) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{87}
}

func (x *TransactionalItemOrganicInformation) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionalItemOrganicInformation) GetIsTradeItemOrganic() bool {
	if x != nil {
		return x.IsTradeItemOrganic
	}
	return false
}

func (x *TransactionalItemOrganicInformation) GetTransactionalItemDataId() uint32 {
	if x != nil {
		return x.TransactionalItemDataId
	}
	return 0
}

type CreateTransactionalItemOrganicInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTradeItemOrganic      bool   `protobuf:"varint,1,opt,name=is_trade_item_organic,json=isTradeItemOrganic,proto3" json:"is_trade_item_organic,omitempty"`
	TransactionalItemDataId uint32 `protobuf:"varint,2,opt,name=transactional_item_data_id,json=transactionalItemDataId,proto3" json:"transactional_item_data_id,omitempty"`
	UserId                  string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail               string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId               string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransactionalItemOrganicInformationRequest) Reset() {
	*x = CreateTransactionalItemOrganicInformationRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalItemOrganicInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalItemOrganicInformationRequest) ProtoMessage() {}

func (x *CreateTransactionalItemOrganicInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalItemOrganicInformationRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionalItemOrganicInformationRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{88}
}

func (x *CreateTransactionalItemOrganicInformationRequest) GetIsTradeItemOrganic() bool {
	if x != nil {
		return x.IsTradeItemOrganic
	}
	return false
}

func (x *CreateTransactionalItemOrganicInformationRequest) GetTransactionalItemDataId() uint32 {
	if x != nil {
		return x.TransactionalItemDataId
	}
	return 0
}

func (x *CreateTransactionalItemOrganicInformationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransactionalItemOrganicInformationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransactionalItemOrganicInformationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransactionalItemOrganicInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionalItemOrganicInformation *TransactionalItemOrganicInformation `protobuf:"bytes,1,opt,name=transactional_item_organic_information,json=transactionalItemOrganicInformation,proto3" json:"transactional_item_organic_information,omitempty"`
}

func (x *CreateTransactionalItemOrganicInformationResponse) Reset() {
	*x = CreateTransactionalItemOrganicInformationResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalItemOrganicInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalItemOrganicInformationResponse) ProtoMessage() {}

func (x *CreateTransactionalItemOrganicInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalItemOrganicInformationResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionalItemOrganicInformationResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{89}
}

func (x *CreateTransactionalItemOrganicInformationResponse) GetTransactionalItemOrganicInformation() *TransactionalItemOrganicInformation {
	if x != nil {
		return x.TransactionalItemOrganicInformation
	}
	return nil
}

type TransactionalReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TransactionalReferenceTypeCode string `protobuf:"bytes,2,opt,name=transactional_reference_type_code,json=transactionalReferenceTypeCode,proto3" json:"transactional_reference_type_code,omitempty"`
	EcomDocumentReference          uint32 `protobuf:"varint,3,opt,name=ecom_document_reference,json=ecomDocumentReference,proto3" json:"ecom_document_reference,omitempty"`
}

func (x *TransactionalReference) Reset() {
	*x = TransactionalReference{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionalReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionalReference) ProtoMessage() {}

func (x *TransactionalReference) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionalReference.ProtoReflect.Descriptor instead.
func (*TransactionalReference) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{90}
}

func (x *TransactionalReference) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionalReference) GetTransactionalReferenceTypeCode() string {
	if x != nil {
		return x.TransactionalReferenceTypeCode
	}
	return ""
}

func (x *TransactionalReference) GetEcomDocumentReference() uint32 {
	if x != nil {
		return x.EcomDocumentReference
	}
	return 0
}

type CreateTransactionalReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionalReferenceTypeCode string `protobuf:"bytes,1,opt,name=transactional_reference_type_code,json=transactionalReferenceTypeCode,proto3" json:"transactional_reference_type_code,omitempty"`
	EcomDocumentReference          uint32 `protobuf:"varint,2,opt,name=ecom_document_reference,json=ecomDocumentReference,proto3" json:"ecom_document_reference,omitempty"`
	UserId                         string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                      string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                      string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransactionalReferenceRequest) Reset() {
	*x = CreateTransactionalReferenceRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalReferenceRequest) ProtoMessage() {}

func (x *CreateTransactionalReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalReferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionalReferenceRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{91}
}

func (x *CreateTransactionalReferenceRequest) GetTransactionalReferenceTypeCode() string {
	if x != nil {
		return x.TransactionalReferenceTypeCode
	}
	return ""
}

func (x *CreateTransactionalReferenceRequest) GetEcomDocumentReference() uint32 {
	if x != nil {
		return x.EcomDocumentReference
	}
	return 0
}

func (x *CreateTransactionalReferenceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransactionalReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransactionalReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransactionalReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionalReference *TransactionalReference `protobuf:"bytes,1,opt,name=transactional_reference,json=transactionalReference,proto3" json:"transactional_reference,omitempty"`
}

func (x *CreateTransactionalReferenceResponse) Reset() {
	*x = CreateTransactionalReferenceResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionalReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionalReferenceResponse) ProtoMessage() {}

func (x *CreateTransactionalReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionalReferenceResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionalReferenceResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{92}
}

func (x *CreateTransactionalReferenceResponse) GetTransactionalReference() *TransactionalReference {
	if x != nil {
		return x.TransactionalReference
	}
	return nil
}

type TransportEquipmentInventoryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportEquipmentInventoryEventD *TransportEquipmentInventoryEventD `protobuf:"bytes,1,opt,name=transport_equipment_inventory_event_d,json=transportEquipmentInventoryEventD,proto3" json:"transport_equipment_inventory_event_d,omitempty"`
	TransportEquipmentInventoryEventT *TransportEquipmentInventoryEventT `protobuf:"bytes,2,opt,name=transport_equipment_inventory_event_t,json=transportEquipmentInventoryEventT,proto3" json:"transport_equipment_inventory_event_t,omitempty"`
	CrUpdUser                         *v1.CrUpdUser                      `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                         *v1.CrUpdTime                      `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TransportEquipmentInventoryEvent) Reset() {
	*x = TransportEquipmentInventoryEvent{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEquipmentInventoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEquipmentInventoryEvent) ProtoMessage() {}

func (x *TransportEquipmentInventoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEquipmentInventoryEvent.ProtoReflect.Descriptor instead.
func (*TransportEquipmentInventoryEvent) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{93}
}

func (x *TransportEquipmentInventoryEvent) GetTransportEquipmentInventoryEventD() *TransportEquipmentInventoryEventD {
	if x != nil {
		return x.TransportEquipmentInventoryEventD
	}
	return nil
}

func (x *TransportEquipmentInventoryEvent) GetTransportEquipmentInventoryEventT() *TransportEquipmentInventoryEventT {
	if x != nil {
		return x.TransportEquipmentInventoryEventT
	}
	return nil
}

func (x *TransportEquipmentInventoryEvent) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TransportEquipmentInventoryEvent) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TransportEquipmentInventoryEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                     []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                       string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	EventIdentifier           string `protobuf:"bytes,4,opt,name=event_identifier,json=eventIdentifier,proto3" json:"event_identifier,omitempty"`
	InventoryBusinessStepCode string `protobuf:"bytes,5,opt,name=inventory_business_step_code,json=inventoryBusinessStepCode,proto3" json:"inventory_business_step_code,omitempty"`
	InventoryDispositionCode  string `protobuf:"bytes,6,opt,name=inventory_disposition_code,json=inventoryDispositionCode,proto3" json:"inventory_disposition_code,omitempty"`
	InventoryEventReasonCode  string `protobuf:"bytes,7,opt,name=inventory_event_reason_code,json=inventoryEventReasonCode,proto3" json:"inventory_event_reason_code,omitempty"`
	InventoryMovementTypeCode string `protobuf:"bytes,8,opt,name=inventory_movement_type_code,json=inventoryMovementTypeCode,proto3" json:"inventory_movement_type_code,omitempty"`
	NumberOfPiecesOfEquipment uint32 `protobuf:"varint,9,opt,name=number_of_pieces_of_equipment,json=numberOfPiecesOfEquipment,proto3" json:"number_of_pieces_of_equipment,omitempty"`
	InventorySubLocationId    uint32 `protobuf:"varint,10,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
}

func (x *TransportEquipmentInventoryEventD) Reset() {
	*x = TransportEquipmentInventoryEventD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEquipmentInventoryEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEquipmentInventoryEventD) ProtoMessage() {}

func (x *TransportEquipmentInventoryEventD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEquipmentInventoryEventD.ProtoReflect.Descriptor instead.
func (*TransportEquipmentInventoryEventD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{94}
}

func (x *TransportEquipmentInventoryEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransportEquipmentInventoryEventD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TransportEquipmentInventoryEventD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TransportEquipmentInventoryEventD) GetEventIdentifier() string {
	if x != nil {
		return x.EventIdentifier
	}
	return ""
}

func (x *TransportEquipmentInventoryEventD) GetInventoryBusinessStepCode() string {
	if x != nil {
		return x.InventoryBusinessStepCode
	}
	return ""
}

func (x *TransportEquipmentInventoryEventD) GetInventoryDispositionCode() string {
	if x != nil {
		return x.InventoryDispositionCode
	}
	return ""
}

func (x *TransportEquipmentInventoryEventD) GetInventoryEventReasonCode() string {
	if x != nil {
		return x.InventoryEventReasonCode
	}
	return ""
}

func (x *TransportEquipmentInventoryEventD) GetInventoryMovementTypeCode() string {
	if x != nil {
		return x.InventoryMovementTypeCode
	}
	return ""
}

func (x *TransportEquipmentInventoryEventD) GetNumberOfPiecesOfEquipment() uint32 {
	if x != nil {
		return x.NumberOfPiecesOfEquipment
	}
	return 0
}

func (x *TransportEquipmentInventoryEventD) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

type TransportEquipmentInventoryEventT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
}

func (x *TransportEquipmentInventoryEventT) Reset() {
	*x = TransportEquipmentInventoryEventT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEquipmentInventoryEventT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEquipmentInventoryEventT) ProtoMessage() {}

func (x *TransportEquipmentInventoryEventT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEquipmentInventoryEventT.ProtoReflect.Descriptor instead.
func (*TransportEquipmentInventoryEventT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{95}
}

func (x *TransportEquipmentInventoryEventT) GetEventDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDateTime
	}
	return nil
}

type CreateTransportEquipmentInventoryEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventDateTime             string `protobuf:"bytes,1,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	EventIdentifier           string `protobuf:"bytes,2,opt,name=event_identifier,json=eventIdentifier,proto3" json:"event_identifier,omitempty"`
	InventoryBusinessStepCode string `protobuf:"bytes,3,opt,name=inventory_business_step_code,json=inventoryBusinessStepCode,proto3" json:"inventory_business_step_code,omitempty"`
	InventoryDispositionCode  string `protobuf:"bytes,4,opt,name=inventory_disposition_code,json=inventoryDispositionCode,proto3" json:"inventory_disposition_code,omitempty"`
	InventoryEventReasonCode  string `protobuf:"bytes,5,opt,name=inventory_event_reason_code,json=inventoryEventReasonCode,proto3" json:"inventory_event_reason_code,omitempty"`
	InventoryMovementTypeCode string `protobuf:"bytes,6,opt,name=inventory_movement_type_code,json=inventoryMovementTypeCode,proto3" json:"inventory_movement_type_code,omitempty"`
	NumberOfPiecesOfEquipment uint32 `protobuf:"varint,7,opt,name=number_of_pieces_of_equipment,json=numberOfPiecesOfEquipment,proto3" json:"number_of_pieces_of_equipment,omitempty"`
	InventorySubLocationId    uint32 `protobuf:"varint,8,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	UserId                    string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransportEquipmentInventoryEventRequest) Reset() {
	*x = CreateTransportEquipmentInventoryEventRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportEquipmentInventoryEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportEquipmentInventoryEventRequest) ProtoMessage() {}

func (x *CreateTransportEquipmentInventoryEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportEquipmentInventoryEventRequest.ProtoReflect.Descriptor instead.
func (*CreateTransportEquipmentInventoryEventRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{96}
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetEventDateTime() string {
	if x != nil {
		return x.EventDateTime
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetEventIdentifier() string {
	if x != nil {
		return x.EventIdentifier
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetInventoryBusinessStepCode() string {
	if x != nil {
		return x.InventoryBusinessStepCode
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetInventoryDispositionCode() string {
	if x != nil {
		return x.InventoryDispositionCode
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetInventoryEventReasonCode() string {
	if x != nil {
		return x.InventoryEventReasonCode
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetInventoryMovementTypeCode() string {
	if x != nil {
		return x.InventoryMovementTypeCode
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetNumberOfPiecesOfEquipment() uint32 {
	if x != nil {
		return x.NumberOfPiecesOfEquipment
	}
	return 0
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransportEquipmentInventoryEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportEquipmentInventoryEvent *TransportEquipmentInventoryEvent `protobuf:"bytes,1,opt,name=transport_equipment_inventory_event,json=transportEquipmentInventoryEvent,proto3" json:"transport_equipment_inventory_event,omitempty"`
}

func (x *CreateTransportEquipmentInventoryEventResponse) Reset() {
	*x = CreateTransportEquipmentInventoryEventResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportEquipmentInventoryEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportEquipmentInventoryEventResponse) ProtoMessage() {}

func (x *CreateTransportEquipmentInventoryEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportEquipmentInventoryEventResponse.ProtoReflect.Descriptor instead.
func (*CreateTransportEquipmentInventoryEventResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{97}
}

func (x *CreateTransportEquipmentInventoryEventResponse) GetTransportEquipmentInventoryEvent() *TransportEquipmentInventoryEvent {
	if x != nil {
		return x.TransportEquipmentInventoryEvent
	}
	return nil
}

type TransportEquipmentInventoryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportEquipmentInventoryStatusD *TransportEquipmentInventoryStatusD `protobuf:"bytes,1,opt,name=transport_equipment_inventory_status_d,json=transportEquipmentInventoryStatusD,proto3" json:"transport_equipment_inventory_status_d,omitempty"`
	TransportEquipmentInventoryStatusT *TransportEquipmentInventoryStatusT `protobuf:"bytes,2,opt,name=transport_equipment_inventory_status_t,json=transportEquipmentInventoryStatusT,proto3" json:"transport_equipment_inventory_status_t,omitempty"`
}

func (x *TransportEquipmentInventoryStatus) Reset() {
	*x = TransportEquipmentInventoryStatus{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEquipmentInventoryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEquipmentInventoryStatus) ProtoMessage() {}

func (x *TransportEquipmentInventoryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEquipmentInventoryStatus.ProtoReflect.Descriptor instead.
func (*TransportEquipmentInventoryStatus) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{98}
}

func (x *TransportEquipmentInventoryStatus) GetTransportEquipmentInventoryStatusD() *TransportEquipmentInventoryStatusD {
	if x != nil {
		return x.TransportEquipmentInventoryStatusD
	}
	return nil
}

func (x *TransportEquipmentInventoryStatus) GetTransportEquipmentInventoryStatusT() *TransportEquipmentInventoryStatusT {
	if x != nil {
		return x.TransportEquipmentInventoryStatusT
	}
	return nil
}

type TransportEquipmentInventoryStatusD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InventoryDispositionCode  string `protobuf:"bytes,2,opt,name=inventory_disposition_code,json=inventoryDispositionCode,proto3" json:"inventory_disposition_code,omitempty"`
	NumberOfPiecesOfEquipment uint32 `protobuf:"varint,3,opt,name=number_of_pieces_of_equipment,json=numberOfPiecesOfEquipment,proto3" json:"number_of_pieces_of_equipment,omitempty"`
	InventorySubLocationId    uint32 `protobuf:"varint,4,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
}

func (x *TransportEquipmentInventoryStatusD) Reset() {
	*x = TransportEquipmentInventoryStatusD{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEquipmentInventoryStatusD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEquipmentInventoryStatusD) ProtoMessage() {}

func (x *TransportEquipmentInventoryStatusD) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEquipmentInventoryStatusD.ProtoReflect.Descriptor instead.
func (*TransportEquipmentInventoryStatusD) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{99}
}

func (x *TransportEquipmentInventoryStatusD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransportEquipmentInventoryStatusD) GetInventoryDispositionCode() string {
	if x != nil {
		return x.InventoryDispositionCode
	}
	return ""
}

func (x *TransportEquipmentInventoryStatusD) GetNumberOfPiecesOfEquipment() uint32 {
	if x != nil {
		return x.NumberOfPiecesOfEquipment
	}
	return 0
}

func (x *TransportEquipmentInventoryStatusD) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

type TransportEquipmentInventoryStatusT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=inventory_date_time,json=inventoryDateTime,proto3" json:"inventory_date_time,omitempty"`
}

func (x *TransportEquipmentInventoryStatusT) Reset() {
	*x = TransportEquipmentInventoryStatusT{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEquipmentInventoryStatusT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEquipmentInventoryStatusT) ProtoMessage() {}

func (x *TransportEquipmentInventoryStatusT) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEquipmentInventoryStatusT.ProtoReflect.Descriptor instead.
func (*TransportEquipmentInventoryStatusT) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{100}
}

func (x *TransportEquipmentInventoryStatusT) GetInventoryDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InventoryDateTime
	}
	return nil
}

type CreateTransportEquipmentInventoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryDateTime         string `protobuf:"bytes,1,opt,name=inventory_date_time,json=inventoryDateTime,proto3" json:"inventory_date_time,omitempty"`
	InventoryDispositionCode  string `protobuf:"bytes,2,opt,name=inventory_disposition_code,json=inventoryDispositionCode,proto3" json:"inventory_disposition_code,omitempty"`
	NumberOfPiecesOfEquipment uint32 `protobuf:"varint,3,opt,name=number_of_pieces_of_equipment,json=numberOfPiecesOfEquipment,proto3" json:"number_of_pieces_of_equipment,omitempty"`
	InventorySubLocationId    uint32 `protobuf:"varint,4,opt,name=inventory_sub_location_id,json=inventorySubLocationId,proto3" json:"inventory_sub_location_id,omitempty"`
	UserId                    string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransportEquipmentInventoryStatusRequest) Reset() {
	*x = CreateTransportEquipmentInventoryStatusRequest{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportEquipmentInventoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportEquipmentInventoryStatusRequest) ProtoMessage() {}

func (x *CreateTransportEquipmentInventoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportEquipmentInventoryStatusRequest.ProtoReflect.Descriptor instead.
func (*CreateTransportEquipmentInventoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{101}
}

func (x *CreateTransportEquipmentInventoryStatusRequest) GetInventoryDateTime() string {
	if x != nil {
		return x.InventoryDateTime
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryStatusRequest) GetInventoryDispositionCode() string {
	if x != nil {
		return x.InventoryDispositionCode
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryStatusRequest) GetNumberOfPiecesOfEquipment() uint32 {
	if x != nil {
		return x.NumberOfPiecesOfEquipment
	}
	return 0
}

func (x *CreateTransportEquipmentInventoryStatusRequest) GetInventorySubLocationId() uint32 {
	if x != nil {
		return x.InventorySubLocationId
	}
	return 0
}

func (x *CreateTransportEquipmentInventoryStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryStatusRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransportEquipmentInventoryStatusRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransportEquipmentInventoryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportEquipmentInventoryStatus *TransportEquipmentInventoryStatus `protobuf:"bytes,1,opt,name=transport_equipment_inventory_status,json=transportEquipmentInventoryStatus,proto3" json:"transport_equipment_inventory_status,omitempty"`
}

func (x *CreateTransportEquipmentInventoryStatusResponse) Reset() {
	*x = CreateTransportEquipmentInventoryStatusResponse{}
	mi := &file_inventory_v1_inventory_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportEquipmentInventoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportEquipmentInventoryStatusResponse) ProtoMessage() {}

func (x *CreateTransportEquipmentInventoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportEquipmentInventoryStatusResponse.ProtoReflect.Descriptor instead.
func (*CreateTransportEquipmentInventoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{102}
}

func (x *CreateTransportEquipmentInventoryStatusResponse) GetTransportEquipmentInventoryStatus() *TransportEquipmentInventoryStatus {
	if x != nil {
		return x.TransportEquipmentInventoryStatus
	}
	return nil
}

var File_inventory_v1_inventory_proto protoreflect.FileDescriptor

var file_inventory_v1_inventory_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x02, 0x0a, 0x28, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x17,
	0x74, 0x5f, 0x63, 0x5f, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x43, 0x41, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x15, 0x74, 0x5f, 0x63, 0x5f, 0x61, 0x5f, 0x63, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x43, 0x41, 0x43, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xaa,
	0x03, 0x0a, 0x35, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x17, 0x74, 0x5f, 0x63, 0x5f, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x43, 0x41, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x15, 0x74, 0x5f, 0x63, 0x5f, 0x61,
	0x5f, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x43, 0x41, 0x43, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x36,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x2c, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xe3, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6c, 0x0a,
	0x1e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x52,
	0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x6c, 0x0a, 0x1e, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x52, 0x1a, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xde, 0x07, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64,
	0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x5f,
	0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x51, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x15, 0x63, 0x5f, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x51, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a,
	0x1c, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36,
	0x0a, 0x19, 0x6e, 0x5f, 0x63, 0x5f, 0x61, 0x5f, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6e, 0x43, 0x41, 0x43, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x15, 0x6e, 0x5f, 0x63, 0x5f, 0x61, 0x5f,
	0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x43, 0x41, 0x43, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x15, 0x6e, 0x5f,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x50, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11,
	0x6e, 0x5f, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x50, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x6c, 0x61, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x54, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x16, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0x8f, 0x08,
	0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x5f, 0x71, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x51, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x15, 0x63, 0x5f, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x51, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x6e,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x1f, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6e, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x19, 0x6e, 0x5f, 0x63, 0x5f,
	0x61, 0x5f, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x43, 0x41,
	0x43, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x15, 0x6e, 0x5f, 0x63, 0x5f, 0x61, 0x5f, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6e, 0x43, 0x41, 0x43, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x15,
	0x6e, 0x5f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x50, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x11, 0x6e, 0x5f, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x50, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x6c, 0x61, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x45, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x93, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x1c, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0xf1, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xf7, 0x01, 0x0a,
	0x19, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6c, 0x0a, 0x1e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x52, 0x1a, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x6c, 0x0a, 0x1e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x52, 0x1a, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x22, 0x91, 0x02, 0x0a, 0x1a, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x26, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x50, 0x0a, 0x16, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0xcc, 0x03, 0x0a, 0x26, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x52, 0x0a,
	0x26, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x90,
	0x04, 0x0a, 0x26, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4f, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1b, 0x71, 0x5f, 0x6f, 0x5f, 0x75,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x71, 0x4f,
	0x55, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x17, 0x71, 0x5f, 0x6f, 0x5f, 0x75, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x71, 0x4f, 0x55, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x22, 0xe4, 0x04, 0x0a, 0x33, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4f, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1b, 0x71, 0x5f, 0x6f, 0x5f, 0x75,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x71, 0x4f,
	0x55, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x17, 0x71, 0x5f, 0x6f, 0x5f, 0x75, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x71, 0x4f, 0x55, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x34, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8f, 0x01, 0x0a, 0x29, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x26, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x20, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a,
	0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x23,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x02, 0x0a, 0x0f,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x4c, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x52, 0x10, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x12, 0x4c, 0x0a,
	0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x46, 0x0a, 0x1f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x12, 0x50, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0x89, 0x04, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x1f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x69, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd5, 0x02,
	0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x66, 0x0a, 0x1c, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x12, 0x66, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x52,
	0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x08, 0x0a, 0x18, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2c, 0x0a, 0x12, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x17, 0x69, 0x5f, 0x75,
	0x5f, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x55, 0x43, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x13, 0x69, 0x5f, 0x75, 0x5f, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x55, 0x43,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x1f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x1f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x26, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xac, 0x04, 0x0a, 0x18, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x12, 0x64, 0x0a, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x60, 0x0a, 0x20, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x55, 0x0a,
	0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0xb4, 0x0b, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x49, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x20, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x17, 0x69, 0x5f, 0x75, 0x5f, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x69, 0x55, 0x43, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x13, 0x69, 0x5f, 0x75, 0x5f, 0x63, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x55, 0x43, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x1f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x45, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x26, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x22, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8b,
	0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xd9, 0x03, 0x0a,
	0x14, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x1f, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x29, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x6c, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x6c, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x6c, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x6c, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4e, 0x0a, 0x24, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x46, 0x0a, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x04, 0x0a, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x1f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x29, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x6c, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x6c, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x67, 0x6c, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6c, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x24, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x7e, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xea, 0x02, 0x0a, 0x1a, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x6f, 0x0a, 0x1f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x12, 0x6f, 0x0a, 0x1f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x52, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09,
	0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xfd, 0x02, 0x0a, 0x1b, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x61, 0x0a, 0x1b, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x42,
	0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xcf, 0x03, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x1d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x1a, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xda,
	0x02, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x68, 0x0a, 0x1c, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x52, 0x19, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x12, 0x68, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x52, 0x19, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe2, 0x03, 0x0a, 0x19,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12,
	0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x53, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x29, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x26, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x22, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xbb, 0x01, 0x0a, 0x19, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x12, 0x50,
	0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0xf4,
	0x04, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x74,
	0x79, 0x70, 0x65, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x59,
	0x0a, 0x29, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x26, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x22, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x1a, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x18, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x29, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x36,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1a, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x37, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x99, 0x01, 0x0a, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x29, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x02, 0x0a,
	0x1b, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x72, 0x0a, 0x20,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x12, 0x72, 0x0a, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6a,
	0x0a, 0x1c, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x12, 0x4a,
	0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x28, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x35, 0x0a, 0x17, 0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x71, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17,
	0x71, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x71,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x71, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x23, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x17, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x9d,
	0x03, 0x0a, 0x21, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x26, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x22, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x84, 0x01, 0x0a, 0x26,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x52, 0x22,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84,
	0x03, 0x0a, 0x22, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69,
	0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x22, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x42, 0x0a, 0x0f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xd6, 0x03, 0x0a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x65, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x2f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a,
	0x24, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x21, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0xd5, 0x02, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x1c, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x12, 0x66, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x52, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x04, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64,
	0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf0, 0x04, 0x0a, 0x24, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x25,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x17, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x18, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x69, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x52, 0x19, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x12, 0x69, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x52, 0x19, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x22, 0xe7, 0x01, 0x0a,
	0x19, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x12, 0x4a, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xea, 0x02, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a,
	0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa0,
	0x02, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a,
	0x1b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a,
	0x18, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x63, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x63, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xf4, 0x02, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a,
	0x1b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a,
	0x18, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x63, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x63, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x2c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x20, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc5, 0x02, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x19, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x44, 0x12, 0x5f, 0x0a, 0x19,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x54, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfe, 0x03, 0x0a, 0x16, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64,
	0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x21,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x6f, 0x6f, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x65, 0x6c, 0x66,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x65,
	0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x22, 0xc5, 0x03, 0x0a, 0x16, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x53, 0x61, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x62, 0x65, 0x73, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x14, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xad, 0x06, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62,
	0x65, 0x73, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x65, 0x6c,
	0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x01, 0x0a, 0x2d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x29,
	0x67, 0x73, 0x31, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x25, 0x67, 0x73, 0x31, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x3a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x29, 0x67, 0x73, 0x31, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x67, 0x73, 0x31, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x3b, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x3b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x32, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x2d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x02, 0x0a,
	0x28, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x52, 0x29, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa8, 0x04, 0x0a, 0x29, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x58, 0x0a, 0x29, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0xd2, 0x04,
	0x0a, 0x35, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x12, 0x58, 0x0a, 0x29, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x36, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01,
	0x0a, 0x2c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x28, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x23, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x15, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x63, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0xf9,
	0x01, 0x0a, 0x30, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x31, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x26, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x16, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x65, 0x63, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x65, 0x63, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x63,
	0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x63, 0x6f,
	0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x24, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x96, 0x03, 0x0a, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x25, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x81, 0x01, 0x0a, 0x25, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x52, 0x21, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x04, 0x0a, 0x21, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x4f, 0x66, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x67, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd5, 0x04, 0x0a, 0x2d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a,
	0x1b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a,
	0x1d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65,
	0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x69,
	0x65, 0x63, 0x65, 0x73, 0x4f, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0xaf, 0x01, 0x0a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x23, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x26, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x52, 0x22, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x12, 0x84, 0x01, 0x0a, 0x26, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x52, 0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x22, 0xef, 0x01, 0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x69, 0x65,
	0x63, 0x65, 0x73, 0x4f, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x22, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x12,
	0x4a, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x69, 0x65,
	0x63, 0x65, 0x73, 0x4f, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0xb4, 0x01, 0x0a, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x24, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xbd, 0x1e, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbb, 0x01, 0x0a,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x34,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a,
	0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x91, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xa6, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x9d, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x33, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xac, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x85, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa6,
	0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x67, 0x73, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inventory_v1_inventory_proto_rawDescOnce sync.Once
	file_inventory_v1_inventory_proto_rawDescData = file_inventory_v1_inventory_proto_rawDesc
)

func file_inventory_v1_inventory_proto_rawDescGZIP() []byte {
	file_inventory_v1_inventory_proto_rawDescOnce.Do(func() {
		file_inventory_v1_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_inventory_v1_inventory_proto_rawDescData)
	})
	return file_inventory_v1_inventory_proto_rawDescData
}

var file_inventory_v1_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 103)
var file_inventory_v1_inventory_proto_goTypes = []any{
	(*ConsumptionReportItemLocationInformation)(nil),                    // 0: inventory.v1.ConsumptionReportItemLocationInformation
	(*CreateConsumptionReportItemLocationInformationRequest)(nil),       // 1: inventory.v1.CreateConsumptionReportItemLocationInformationRequest
	(*CreateConsumptionReportItemLocationInformationResponse)(nil),      // 2: inventory.v1.CreateConsumptionReportItemLocationInformationResponse
	(*ConsumptionReportLineItem)(nil),                                   // 3: inventory.v1.ConsumptionReportLineItem
	(*ConsumptionReportLineItemD)(nil),                                  // 4: inventory.v1.ConsumptionReportLineItemD
	(*ConsumptionReportLineItemT)(nil),                                  // 5: inventory.v1.ConsumptionReportLineItemT
	(*CreateConsumptionReportLineItemRequest)(nil),                      // 6: inventory.v1.CreateConsumptionReportLineItemRequest
	(*CreateConsumptionReportLineItemResponse)(nil),                     // 7: inventory.v1.CreateConsumptionReportLineItemResponse
	(*ConsumptionReport)(nil),                                           // 8: inventory.v1.ConsumptionReport
	(*ConsumptionReportD)(nil),                                          // 9: inventory.v1.ConsumptionReportD
	(*CreateConsumptionReportRequest)(nil),                              // 10: inventory.v1.CreateConsumptionReportRequest
	(*CreateConsumptionReportResponse)(nil),                             // 11: inventory.v1.CreateConsumptionReportResponse
	(*InventoryActivityLineItem)(nil),                                   // 12: inventory.v1.InventoryActivityLineItem
	(*InventoryActivityLineItemD)(nil),                                  // 13: inventory.v1.InventoryActivityLineItemD
	(*InventoryActivityLineItemT)(nil),                                  // 14: inventory.v1.InventoryActivityLineItemT
	(*CreateInventoryActivityLineItemRequest)(nil),                      // 15: inventory.v1.CreateInventoryActivityLineItemRequest
	(*CreateInventoryActivityLineItemResponse)(nil),                     // 16: inventory.v1.CreateInventoryActivityLineItemResponse
	(*InventoryActivityQuantitySpecification)(nil),                      // 17: inventory.v1.InventoryActivityQuantitySpecification
	(*CreateInventoryActivityQuantitySpecificationRequest)(nil),         // 18: inventory.v1.CreateInventoryActivityQuantitySpecificationRequest
	(*CreateInventoryActivityQuantitySpecificationResponse)(nil),        // 19: inventory.v1.CreateInventoryActivityQuantitySpecificationResponse
	(*InventoryItemLocationInformation)(nil),                            // 20: inventory.v1.InventoryItemLocationInformation
	(*CreateInventoryItemLocationInformationRequest)(nil),               // 21: inventory.v1.CreateInventoryItemLocationInformationRequest
	(*CreateInventoryItemLocationInformationResponse)(nil),              // 22: inventory.v1.CreateInventoryItemLocationInformationResponse
	(*InventoryReport)(nil),                                             // 23: inventory.v1.InventoryReport
	(*InventoryReportD)(nil),                                            // 24: inventory.v1.InventoryReportD
	(*InventoryReportT)(nil),                                            // 25: inventory.v1.InventoryReportT
	(*CreateInventoryReportRequest)(nil),                                // 26: inventory.v1.CreateInventoryReportRequest
	(*CreateInventoryReportResponse)(nil),                               // 27: inventory.v1.CreateInventoryReportResponse
	(*InventoryStatusLineItem)(nil),                                     // 28: inventory.v1.InventoryStatusLineItem
	(*InventoryStatusLineItemD)(nil),                                    // 29: inventory.v1.InventoryStatusLineItemD
	(*InventoryStatusLineItemT)(nil),                                    // 30: inventory.v1.InventoryStatusLineItemT
	(*CreateInventoryStatusLineItemRequest)(nil),                        // 31: inventory.v1.CreateInventoryStatusLineItemRequest
	(*CreateInventoryStatusLineItemResponse)(nil),                       // 32: inventory.v1.CreateInventoryStatusLineItemResponse
	(*InventorySubLocation)(nil),                                        // 33: inventory.v1.InventorySubLocation
	(*CreateInventorySubLocationRequest)(nil),                           // 34: inventory.v1.CreateInventorySubLocationRequest
	(*CreateInventorySubLocationResponse)(nil),                          // 35: inventory.v1.CreateInventorySubLocationResponse
	(*LogisticUnitInventoryEvent)(nil),                                  // 36: inventory.v1.LogisticUnitInventoryEvent
	(*LogisticUnitInventoryEventD)(nil),                                 // 37: inventory.v1.LogisticUnitInventoryEventD
	(*LogisticUnitInventoryEventT)(nil),                                 // 38: inventory.v1.LogisticUnitInventoryEventT
	(*CreateLogisticUnitInventoryEventRequest)(nil),                     // 39: inventory.v1.CreateLogisticUnitInventoryEventRequest
	(*CreateLogisticUnitInventoryEventResponse)(nil),                    // 40: inventory.v1.CreateLogisticUnitInventoryEventResponse
	(*LogisticsInventoryReport)(nil),                                    // 41: inventory.v1.LogisticsInventoryReport
	(*LogisticsInventoryReportD)(nil),                                   // 42: inventory.v1.LogisticsInventoryReportD
	(*LogisticsInventoryReportT)(nil),                                   // 43: inventory.v1.LogisticsInventoryReportT
	(*CreateLogisticsInventoryReportRequest)(nil),                       // 44: inventory.v1.CreateLogisticsInventoryReportRequest
	(*CreateLogisticsInventoryReportResponse)(nil),                      // 45: inventory.v1.CreateLogisticsInventoryReportResponse
	(*LogisticsInventoryReportInventoryLocation)(nil),                   // 46: inventory.v1.LogisticsInventoryReportInventoryLocation
	(*CreateLogisticsInventoryReportInventoryLocationRequest)(nil),      // 47: inventory.v1.CreateLogisticsInventoryReportInventoryLocationRequest
	(*CreateLogisticsInventoryReportInventoryLocationResponse)(nil),     // 48: inventory.v1.CreateLogisticsInventoryReportInventoryLocationResponse
	(*LogisticUnitInventoryStatus)(nil),                                 // 49: inventory.v1.LogisticUnitInventoryStatus
	(*LogisticUnitInventoryStatusD)(nil),                                // 50: inventory.v1.LogisticUnitInventoryStatusD
	(*LogisticUnitInventoryStatusT)(nil),                                // 51: inventory.v1.LogisticUnitInventoryStatusT
	(*CreateLogisticUnitInventoryStatusRequest)(nil),                    // 52: inventory.v1.CreateLogisticUnitInventoryStatusRequest
	(*CreateLogisticUnitInventoryStatusResponse)(nil),                   // 53: inventory.v1.CreateLogisticUnitInventoryStatusResponse
	(*LogisticUnitReference)(nil),                                       // 54: inventory.v1.LogisticUnitReference
	(*CreateLogisticUnitReferenceRequest)(nil),                          // 55: inventory.v1.CreateLogisticUnitReferenceRequest
	(*CreateLogisticUnitReferenceResponse)(nil),                         // 56: inventory.v1.CreateLogisticUnitReferenceResponse
	(*ReturnablePackagingInventoryEvent)(nil),                           // 57: inventory.v1.ReturnablePackagingInventoryEvent
	(*ReturnablePackagingInventoryEventD)(nil),                          // 58: inventory.v1.ReturnablePackagingInventoryEventD
	(*ReturnablePackagingInventoryEventT)(nil),                          // 59: inventory.v1.ReturnablePackagingInventoryEventT
	(*CreateReturnablePackagingInventoryEventRequest)(nil),              // 60: inventory.v1.CreateReturnablePackagingInventoryEventRequest
	(*CreateReturnablePackagingInventoryEventResponse)(nil),             // 61: inventory.v1.CreateReturnablePackagingInventoryEventResponse
	(*TradeItemInventoryEvent)(nil),                                     // 62: inventory.v1.TradeItemInventoryEvent
	(*TradeItemInventoryEventD)(nil),                                    // 63: inventory.v1.TradeItemInventoryEventD
	(*TradeItemInventoryEventT)(nil),                                    // 64: inventory.v1.TradeItemInventoryEventT
	(*CreateTradeItemInventoryEventRequest)(nil),                        // 65: inventory.v1.CreateTradeItemInventoryEventRequest
	(*CreateTradeItemInventoryEventResponse)(nil),                       // 66: inventory.v1.CreateTradeItemInventoryEventResponse
	(*TradeItemInventoryStatus)(nil),                                    // 67: inventory.v1.TradeItemInventoryStatus
	(*TradeItemInventoryStatusD)(nil),                                   // 68: inventory.v1.TradeItemInventoryStatusD
	(*TradeItemInventoryStatusT)(nil),                                   // 69: inventory.v1.TradeItemInventoryStatusT
	(*CreateTradeItemInventoryStatusRequest)(nil),                       // 70: inventory.v1.CreateTradeItemInventoryStatusRequest
	(*CreateTradeItemInventoryStatusResponse)(nil),                      // 71: inventory.v1.CreateTradeItemInventoryStatusResponse
	(*TransactionalItemCertification)(nil),                              // 72: inventory.v1.TransactionalItemCertification
	(*CreateTransactionalItemCertificationRequest)(nil),                 // 73: inventory.v1.CreateTransactionalItemCertificationRequest
	(*CreateTransactionalItemCertificationResponse)(nil),                // 74: inventory.v1.CreateTransactionalItemCertificationResponse
	(*TransactionalItemData)(nil),                                       // 75: inventory.v1.TransactionalItemData
	(*TransactionalItemDataD)(nil),                                      // 76: inventory.v1.TransactionalItemDataD
	(*TransactionalItemDataT)(nil),                                      // 77: inventory.v1.TransactionalItemDataT
	(*CreateTransactionalItemDataRequest)(nil),                          // 78: inventory.v1.CreateTransactionalItemDataRequest
	(*CreateTransactionalItemDataResponse)(nil),                         // 79: inventory.v1.CreateTransactionalItemDataResponse
	(*TransactionalItemDataCarrierAndIdentification)(nil),               // 80: inventory.v1.TransactionalItemDataCarrierAndIdentification
	(*CreateTransactionalItemDataCarrierAndIdentificationRequest)(nil),  // 81: inventory.v1.CreateTransactionalItemDataCarrierAndIdentificationRequest
	(*CreateTransactionalItemDataCarrierAndIdentificationResponse)(nil), // 82: inventory.v1.CreateTransactionalItemDataCarrierAndIdentificationResponse
	(*TransactionalItemLogisticUnitInformation)(nil),                    // 83: inventory.v1.TransactionalItemLogisticUnitInformation
	(*TransactionalItemLogisticUnitInformationD)(nil),                   // 84: inventory.v1.TransactionalItemLogisticUnitInformationD
	(*CreateTransactionalItemLogisticUnitInformationRequest)(nil),       // 85: inventory.v1.CreateTransactionalItemLogisticUnitInformationRequest
	(*CreateTransactionalItemLogisticUnitInformationResponse)(nil),      // 86: inventory.v1.CreateTransactionalItemLogisticUnitInformationResponse
	(*TransactionalItemOrganicInformation)(nil),                         // 87: inventory.v1.TransactionalItemOrganicInformation
	(*CreateTransactionalItemOrganicInformationRequest)(nil),            // 88: inventory.v1.CreateTransactionalItemOrganicInformationRequest
	(*CreateTransactionalItemOrganicInformationResponse)(nil),           // 89: inventory.v1.CreateTransactionalItemOrganicInformationResponse
	(*TransactionalReference)(nil),                                      // 90: inventory.v1.TransactionalReference
	(*CreateTransactionalReferenceRequest)(nil),                         // 91: inventory.v1.CreateTransactionalReferenceRequest
	(*CreateTransactionalReferenceResponse)(nil),                        // 92: inventory.v1.CreateTransactionalReferenceResponse
	(*TransportEquipmentInventoryEvent)(nil),                            // 93: inventory.v1.TransportEquipmentInventoryEvent
	(*TransportEquipmentInventoryEventD)(nil),                           // 94: inventory.v1.TransportEquipmentInventoryEventD
	(*TransportEquipmentInventoryEventT)(nil),                           // 95: inventory.v1.TransportEquipmentInventoryEventT
	(*CreateTransportEquipmentInventoryEventRequest)(nil),               // 96: inventory.v1.CreateTransportEquipmentInventoryEventRequest
	(*CreateTransportEquipmentInventoryEventResponse)(nil),              // 97: inventory.v1.CreateTransportEquipmentInventoryEventResponse
	(*TransportEquipmentInventoryStatus)(nil),                           // 98: inventory.v1.TransportEquipmentInventoryStatus
	(*TransportEquipmentInventoryStatusD)(nil),                          // 99: inventory.v1.TransportEquipmentInventoryStatusD
	(*TransportEquipmentInventoryStatusT)(nil),                          // 100: inventory.v1.TransportEquipmentInventoryStatusT
	(*CreateTransportEquipmentInventoryStatusRequest)(nil),              // 101: inventory.v1.CreateTransportEquipmentInventoryStatusRequest
	(*CreateTransportEquipmentInventoryStatusResponse)(nil),             // 102: inventory.v1.CreateTransportEquipmentInventoryStatusResponse
	(*v1.CrUpdUser)(nil),                                                // 103: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                                // 104: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),                                       // 105: google.protobuf.Timestamp
}
var file_inventory_v1_inventory_proto_depIdxs = []int32{
	0,   // 0: inventory.v1.CreateConsumptionReportItemLocationInformationResponse.consumption_report_item_location_information:type_name -> inventory.v1.ConsumptionReportItemLocationInformation
	4,   // 1: inventory.v1.ConsumptionReportLineItem.consumption_report_line_item_d:type_name -> inventory.v1.ConsumptionReportLineItemD
	5,   // 2: inventory.v1.ConsumptionReportLineItem.consumption_report_line_item_t:type_name -> inventory.v1.ConsumptionReportLineItemT
	103, // 3: inventory.v1.ConsumptionReportLineItem.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 4: inventory.v1.ConsumptionReportLineItem.cr_upd_time:type_name -> common.v1.CrUpdTime
	105, // 5: inventory.v1.ConsumptionReportLineItemT.consumption_period_begin:type_name -> google.protobuf.Timestamp
	105, // 6: inventory.v1.ConsumptionReportLineItemT.consumption_period_end:type_name -> google.protobuf.Timestamp
	3,   // 7: inventory.v1.CreateConsumptionReportLineItemResponse.consumption_report_line_item:type_name -> inventory.v1.ConsumptionReportLineItem
	9,   // 8: inventory.v1.ConsumptionReport.consumption_report_d:type_name -> inventory.v1.ConsumptionReportD
	103, // 9: inventory.v1.ConsumptionReport.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 10: inventory.v1.ConsumptionReport.cr_upd_time:type_name -> common.v1.CrUpdTime
	8,   // 11: inventory.v1.CreateConsumptionReportResponse.consumption_report:type_name -> inventory.v1.ConsumptionReport
	13,  // 12: inventory.v1.InventoryActivityLineItem.inventory_activity_line_item_d:type_name -> inventory.v1.InventoryActivityLineItemD
	14,  // 13: inventory.v1.InventoryActivityLineItem.inventory_activity_line_item_t:type_name -> inventory.v1.InventoryActivityLineItemT
	105, // 14: inventory.v1.InventoryActivityLineItemT.reporting_period_begin:type_name -> google.protobuf.Timestamp
	105, // 15: inventory.v1.InventoryActivityLineItemT.reporting_period_end:type_name -> google.protobuf.Timestamp
	12,  // 16: inventory.v1.CreateInventoryActivityLineItemResponse.inventory_activity_line_item:type_name -> inventory.v1.InventoryActivityLineItem
	17,  // 17: inventory.v1.CreateInventoryActivityQuantitySpecificationResponse.inventory_activity_quantity_specification:type_name -> inventory.v1.InventoryActivityQuantitySpecification
	20,  // 18: inventory.v1.CreateInventoryItemLocationInformationResponse.inventory_item_location_information:type_name -> inventory.v1.InventoryItemLocationInformation
	24,  // 19: inventory.v1.InventoryReport.inventory_report_d:type_name -> inventory.v1.InventoryReportD
	25,  // 20: inventory.v1.InventoryReport.inventory_report_t:type_name -> inventory.v1.InventoryReportT
	103, // 21: inventory.v1.InventoryReport.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 22: inventory.v1.InventoryReport.cr_upd_time:type_name -> common.v1.CrUpdTime
	105, // 23: inventory.v1.InventoryReportT.reporting_period_begin:type_name -> google.protobuf.Timestamp
	105, // 24: inventory.v1.InventoryReportT.reporting_period_end:type_name -> google.protobuf.Timestamp
	23,  // 25: inventory.v1.CreateInventoryReportResponse.inventory_report:type_name -> inventory.v1.InventoryReport
	29,  // 26: inventory.v1.InventoryStatusLineItem.inventory_status_line_item_d:type_name -> inventory.v1.InventoryStatusLineItemD
	30,  // 27: inventory.v1.InventoryStatusLineItem.inventory_status_line_item_t:type_name -> inventory.v1.InventoryStatusLineItemT
	103, // 28: inventory.v1.InventoryStatusLineItem.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 29: inventory.v1.InventoryStatusLineItem.cr_upd_time:type_name -> common.v1.CrUpdTime
	105, // 30: inventory.v1.InventoryStatusLineItemT.first_in_first_out_date_time_begin:type_name -> google.protobuf.Timestamp
	105, // 31: inventory.v1.InventoryStatusLineItemT.first_in_first_out_date_time_end:type_name -> google.protobuf.Timestamp
	105, // 32: inventory.v1.InventoryStatusLineItemT.inventory_date_time_begin:type_name -> google.protobuf.Timestamp
	105, // 33: inventory.v1.InventoryStatusLineItemT.inventory_date_time_end:type_name -> google.protobuf.Timestamp
	105, // 34: inventory.v1.InventoryStatusLineItemT.reporting_period_begin:type_name -> google.protobuf.Timestamp
	105, // 35: inventory.v1.InventoryStatusLineItemT.reporting_period_end:type_name -> google.protobuf.Timestamp
	28,  // 36: inventory.v1.CreateInventoryStatusLineItemResponse.inventory_status_line_item:type_name -> inventory.v1.InventoryStatusLineItem
	33,  // 37: inventory.v1.CreateInventorySubLocationResponse.inventory_sub_location:type_name -> inventory.v1.InventorySubLocation
	37,  // 38: inventory.v1.LogisticUnitInventoryEvent.logistic_unit_inventory_event_d:type_name -> inventory.v1.LogisticUnitInventoryEventD
	38,  // 39: inventory.v1.LogisticUnitInventoryEvent.logistic_unit_inventory_event_t:type_name -> inventory.v1.LogisticUnitInventoryEventT
	103, // 40: inventory.v1.LogisticUnitInventoryEvent.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 41: inventory.v1.LogisticUnitInventoryEvent.cr_upd_time:type_name -> common.v1.CrUpdTime
	105, // 42: inventory.v1.LogisticUnitInventoryEventT.event_date_time:type_name -> google.protobuf.Timestamp
	36,  // 43: inventory.v1.CreateLogisticUnitInventoryEventResponse.logistic_unit_inventory_event:type_name -> inventory.v1.LogisticUnitInventoryEvent
	42,  // 44: inventory.v1.LogisticsInventoryReport.logistics_inventory_report_d:type_name -> inventory.v1.LogisticsInventoryReportD
	43,  // 45: inventory.v1.LogisticsInventoryReport.logistics_inventory_report_t:type_name -> inventory.v1.LogisticsInventoryReportT
	103, // 46: inventory.v1.LogisticsInventoryReport.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 47: inventory.v1.LogisticsInventoryReport.cr_upd_time:type_name -> common.v1.CrUpdTime
	105, // 48: inventory.v1.LogisticsInventoryReportT.reporting_period_begin:type_name -> google.protobuf.Timestamp
	105, // 49: inventory.v1.LogisticsInventoryReportT.reporting_period_end:type_name -> google.protobuf.Timestamp
	41,  // 50: inventory.v1.CreateLogisticsInventoryReportResponse.logistics_inventory_report:type_name -> inventory.v1.LogisticsInventoryReport
	46,  // 51: inventory.v1.CreateLogisticsInventoryReportInventoryLocationResponse.logistics_inventory_report_inventory_location:type_name -> inventory.v1.LogisticsInventoryReportInventoryLocation
	50,  // 52: inventory.v1.LogisticUnitInventoryStatus.logistic_unit_inventory_status_d:type_name -> inventory.v1.LogisticUnitInventoryStatusD
	51,  // 53: inventory.v1.LogisticUnitInventoryStatus.logistic_unit_inventory_status_t:type_name -> inventory.v1.LogisticUnitInventoryStatusT
	105, // 54: inventory.v1.LogisticUnitInventoryStatusT.inventory_date_time:type_name -> google.protobuf.Timestamp
	49,  // 55: inventory.v1.CreateLogisticUnitInventoryStatusResponse.logistic_unit_inventory_status:type_name -> inventory.v1.LogisticUnitInventoryStatus
	54,  // 56: inventory.v1.CreateLogisticUnitReferenceResponse.logistic_unit_reference:type_name -> inventory.v1.LogisticUnitReference
	58,  // 57: inventory.v1.ReturnablePackagingInventoryEvent.returnable_packaging_inventory_event_d:type_name -> inventory.v1.ReturnablePackagingInventoryEventD
	59,  // 58: inventory.v1.ReturnablePackagingInventoryEvent.returnable_packaging_inventory_event_t:type_name -> inventory.v1.ReturnablePackagingInventoryEventT
	103, // 59: inventory.v1.ReturnablePackagingInventoryEvent.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 60: inventory.v1.ReturnablePackagingInventoryEvent.cr_upd_time:type_name -> common.v1.CrUpdTime
	105, // 61: inventory.v1.ReturnablePackagingInventoryEventT.event_date_time:type_name -> google.protobuf.Timestamp
	57,  // 62: inventory.v1.CreateReturnablePackagingInventoryEventResponse.returnable_packaging_inventory_event:type_name -> inventory.v1.ReturnablePackagingInventoryEvent
	63,  // 63: inventory.v1.TradeItemInventoryEvent.trade_item_inventory_event_d:type_name -> inventory.v1.TradeItemInventoryEventD
	64,  // 64: inventory.v1.TradeItemInventoryEvent.trade_item_inventory_event_t:type_name -> inventory.v1.TradeItemInventoryEventT
	103, // 65: inventory.v1.TradeItemInventoryEvent.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 66: inventory.v1.TradeItemInventoryEvent.cr_upd_time:type_name -> common.v1.CrUpdTime
	105, // 67: inventory.v1.TradeItemInventoryEventT.event_date_time:type_name -> google.protobuf.Timestamp
	62,  // 68: inventory.v1.CreateTradeItemInventoryEventResponse.trade_item_inventory_event:type_name -> inventory.v1.TradeItemInventoryEvent
	68,  // 69: inventory.v1.TradeItemInventoryStatus.trade_item_inventory_status_d:type_name -> inventory.v1.TradeItemInventoryStatusD
	69,  // 70: inventory.v1.TradeItemInventoryStatus.trade_item_inventory_status_t:type_name -> inventory.v1.TradeItemInventoryStatusT
	105, // 71: inventory.v1.TradeItemInventoryStatusT.inventory_date_time:type_name -> google.protobuf.Timestamp
	67,  // 72: inventory.v1.CreateTradeItemInventoryStatusResponse.trade_item_inventory_status:type_name -> inventory.v1.TradeItemInventoryStatus
	72,  // 73: inventory.v1.CreateTransactionalItemCertificationResponse.transactional_item_certification:type_name -> inventory.v1.TransactionalItemCertification
	76,  // 74: inventory.v1.TransactionalItemData.transactional_item_data_d:type_name -> inventory.v1.TransactionalItemDataD
	77,  // 75: inventory.v1.TransactionalItemData.transactional_item_data_t:type_name -> inventory.v1.TransactionalItemDataT
	103, // 76: inventory.v1.TransactionalItemData.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 77: inventory.v1.TransactionalItemData.cr_upd_time:type_name -> common.v1.CrUpdTime
	105, // 78: inventory.v1.TransactionalItemDataT.available_for_sale_date:type_name -> google.protobuf.Timestamp
	105, // 79: inventory.v1.TransactionalItemDataT.best_before_date:type_name -> google.protobuf.Timestamp
	105, // 80: inventory.v1.TransactionalItemDataT.item_expiration_date:type_name -> google.protobuf.Timestamp
	105, // 81: inventory.v1.TransactionalItemDataT.packaging_date:type_name -> google.protobuf.Timestamp
	105, // 82: inventory.v1.TransactionalItemDataT.production_date:type_name -> google.protobuf.Timestamp
	105, // 83: inventory.v1.TransactionalItemDataT.sell_by_date:type_name -> google.protobuf.Timestamp
	75,  // 84: inventory.v1.CreateTransactionalItemDataResponse.transactional_item_data:type_name -> inventory.v1.TransactionalItemData
	80,  // 85: inventory.v1.CreateTransactionalItemDataCarrierAndIdentificationResponse.transactional_item_data_carrier_and_identification:type_name -> inventory.v1.TransactionalItemDataCarrierAndIdentification
	84,  // 86: inventory.v1.TransactionalItemLogisticUnitInformation.transactional_item_logistic_unit_information_d:type_name -> inventory.v1.TransactionalItemLogisticUnitInformationD
	103, // 87: inventory.v1.TransactionalItemLogisticUnitInformation.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 88: inventory.v1.TransactionalItemLogisticUnitInformation.cr_upd_time:type_name -> common.v1.CrUpdTime
	83,  // 89: inventory.v1.CreateTransactionalItemLogisticUnitInformationResponse.transactional_item_logistic_unit_information:type_name -> inventory.v1.TransactionalItemLogisticUnitInformation
	87,  // 90: inventory.v1.CreateTransactionalItemOrganicInformationResponse.transactional_item_organic_information:type_name -> inventory.v1.TransactionalItemOrganicInformation
	90,  // 91: inventory.v1.CreateTransactionalReferenceResponse.transactional_reference:type_name -> inventory.v1.TransactionalReference
	94,  // 92: inventory.v1.TransportEquipmentInventoryEvent.transport_equipment_inventory_event_d:type_name -> inventory.v1.TransportEquipmentInventoryEventD
	95,  // 93: inventory.v1.TransportEquipmentInventoryEvent.transport_equipment_inventory_event_t:type_name -> inventory.v1.TransportEquipmentInventoryEventT
	103, // 94: inventory.v1.TransportEquipmentInventoryEvent.cr_upd_user:type_name -> common.v1.CrUpdUser
	104, // 95: inventory.v1.TransportEquipmentInventoryEvent.cr_upd_time:type_name -> common.v1.CrUpdTime
	105, // 96: inventory.v1.TransportEquipmentInventoryEventT.event_date_time:type_name -> google.protobuf.Timestamp
	93,  // 97: inventory.v1.CreateTransportEquipmentInventoryEventResponse.transport_equipment_inventory_event:type_name -> inventory.v1.TransportEquipmentInventoryEvent
	99,  // 98: inventory.v1.TransportEquipmentInventoryStatus.transport_equipment_inventory_status_d:type_name -> inventory.v1.TransportEquipmentInventoryStatusD
	100, // 99: inventory.v1.TransportEquipmentInventoryStatus.transport_equipment_inventory_status_t:type_name -> inventory.v1.TransportEquipmentInventoryStatusT
	105, // 100: inventory.v1.TransportEquipmentInventoryStatusT.inventory_date_time:type_name -> google.protobuf.Timestamp
	98,  // 101: inventory.v1.CreateTransportEquipmentInventoryStatusResponse.transport_equipment_inventory_status:type_name -> inventory.v1.TransportEquipmentInventoryStatus
	1,   // 102: inventory.v1.InventoryService.CreateConsumptionReportItemLocationInformation:input_type -> inventory.v1.CreateConsumptionReportItemLocationInformationRequest
	6,   // 103: inventory.v1.InventoryService.CreateConsumptionReportLineItem:input_type -> inventory.v1.CreateConsumptionReportLineItemRequest
	10,  // 104: inventory.v1.InventoryService.CreateConsumptionReport:input_type -> inventory.v1.CreateConsumptionReportRequest
	15,  // 105: inventory.v1.InventoryService.CreateInventoryActivityLineItem:input_type -> inventory.v1.CreateInventoryActivityLineItemRequest
	18,  // 106: inventory.v1.InventoryService.CreateInventoryActivityQuantitySpecification:input_type -> inventory.v1.CreateInventoryActivityQuantitySpecificationRequest
	21,  // 107: inventory.v1.InventoryService.CreateInventoryItemLocationInformation:input_type -> inventory.v1.CreateInventoryItemLocationInformationRequest
	26,  // 108: inventory.v1.InventoryService.CreateInventoryReport:input_type -> inventory.v1.CreateInventoryReportRequest
	31,  // 109: inventory.v1.InventoryService.CreateInventoryStatusLineItem:input_type -> inventory.v1.CreateInventoryStatusLineItemRequest
	34,  // 110: inventory.v1.InventoryService.CreateInventorySubLocation:input_type -> inventory.v1.CreateInventorySubLocationRequest
	39,  // 111: inventory.v1.InventoryService.CreateLogisticUnitInventoryEvent:input_type -> inventory.v1.CreateLogisticUnitInventoryEventRequest
	44,  // 112: inventory.v1.InventoryService.CreateLogisticsInventoryReport:input_type -> inventory.v1.CreateLogisticsInventoryReportRequest
	47,  // 113: inventory.v1.InventoryService.CreateLogisticsInventoryReportInventoryLocation:input_type -> inventory.v1.CreateLogisticsInventoryReportInventoryLocationRequest
	52,  // 114: inventory.v1.InventoryService.CreateLogisticUnitInventoryStatus:input_type -> inventory.v1.CreateLogisticUnitInventoryStatusRequest
	55,  // 115: inventory.v1.InventoryService.CreateLogisticUnitReference:input_type -> inventory.v1.CreateLogisticUnitReferenceRequest
	60,  // 116: inventory.v1.InventoryService.CreateReturnablePackagingInventoryEvent:input_type -> inventory.v1.CreateReturnablePackagingInventoryEventRequest
	70,  // 117: inventory.v1.InventoryService.CreateTradeItemInventoryStatus:input_type -> inventory.v1.CreateTradeItemInventoryStatusRequest
	65,  // 118: inventory.v1.InventoryService.CreateTradeItemInventoryEvent:input_type -> inventory.v1.CreateTradeItemInventoryEventRequest
	73,  // 119: inventory.v1.InventoryService.CreateTransactionalItemCertification:input_type -> inventory.v1.CreateTransactionalItemCertificationRequest
	78,  // 120: inventory.v1.InventoryService.CreateTransactionalItemData:input_type -> inventory.v1.CreateTransactionalItemDataRequest
	81,  // 121: inventory.v1.InventoryService.CreateTransactionalItemDataCarrierAndIdentification:input_type -> inventory.v1.CreateTransactionalItemDataCarrierAndIdentificationRequest
	85,  // 122: inventory.v1.InventoryService.CreateTransactionalItemLogisticUnitInformation:input_type -> inventory.v1.CreateTransactionalItemLogisticUnitInformationRequest
	88,  // 123: inventory.v1.InventoryService.CreateTransactionalItemOrganicInformation:input_type -> inventory.v1.CreateTransactionalItemOrganicInformationRequest
	91,  // 124: inventory.v1.InventoryService.CreateTransactionalReference:input_type -> inventory.v1.CreateTransactionalReferenceRequest
	96,  // 125: inventory.v1.InventoryService.CreateTransportEquipmentInventoryEvent:input_type -> inventory.v1.CreateTransportEquipmentInventoryEventRequest
	101, // 126: inventory.v1.InventoryService.CreateTransportEquipmentInventoryStatus:input_type -> inventory.v1.CreateTransportEquipmentInventoryStatusRequest
	2,   // 127: inventory.v1.InventoryService.CreateConsumptionReportItemLocationInformation:output_type -> inventory.v1.CreateConsumptionReportItemLocationInformationResponse
	7,   // 128: inventory.v1.InventoryService.CreateConsumptionReportLineItem:output_type -> inventory.v1.CreateConsumptionReportLineItemResponse
	11,  // 129: inventory.v1.InventoryService.CreateConsumptionReport:output_type -> inventory.v1.CreateConsumptionReportResponse
	16,  // 130: inventory.v1.InventoryService.CreateInventoryActivityLineItem:output_type -> inventory.v1.CreateInventoryActivityLineItemResponse
	19,  // 131: inventory.v1.InventoryService.CreateInventoryActivityQuantitySpecification:output_type -> inventory.v1.CreateInventoryActivityQuantitySpecificationResponse
	22,  // 132: inventory.v1.InventoryService.CreateInventoryItemLocationInformation:output_type -> inventory.v1.CreateInventoryItemLocationInformationResponse
	27,  // 133: inventory.v1.InventoryService.CreateInventoryReport:output_type -> inventory.v1.CreateInventoryReportResponse
	32,  // 134: inventory.v1.InventoryService.CreateInventoryStatusLineItem:output_type -> inventory.v1.CreateInventoryStatusLineItemResponse
	35,  // 135: inventory.v1.InventoryService.CreateInventorySubLocation:output_type -> inventory.v1.CreateInventorySubLocationResponse
	40,  // 136: inventory.v1.InventoryService.CreateLogisticUnitInventoryEvent:output_type -> inventory.v1.CreateLogisticUnitInventoryEventResponse
	45,  // 137: inventory.v1.InventoryService.CreateLogisticsInventoryReport:output_type -> inventory.v1.CreateLogisticsInventoryReportResponse
	48,  // 138: inventory.v1.InventoryService.CreateLogisticsInventoryReportInventoryLocation:output_type -> inventory.v1.CreateLogisticsInventoryReportInventoryLocationResponse
	53,  // 139: inventory.v1.InventoryService.CreateLogisticUnitInventoryStatus:output_type -> inventory.v1.CreateLogisticUnitInventoryStatusResponse
	56,  // 140: inventory.v1.InventoryService.CreateLogisticUnitReference:output_type -> inventory.v1.CreateLogisticUnitReferenceResponse
	61,  // 141: inventory.v1.InventoryService.CreateReturnablePackagingInventoryEvent:output_type -> inventory.v1.CreateReturnablePackagingInventoryEventResponse
	71,  // 142: inventory.v1.InventoryService.CreateTradeItemInventoryStatus:output_type -> inventory.v1.CreateTradeItemInventoryStatusResponse
	66,  // 143: inventory.v1.InventoryService.CreateTradeItemInventoryEvent:output_type -> inventory.v1.CreateTradeItemInventoryEventResponse
	74,  // 144: inventory.v1.InventoryService.CreateTransactionalItemCertification:output_type -> inventory.v1.CreateTransactionalItemCertificationResponse
	79,  // 145: inventory.v1.InventoryService.CreateTransactionalItemData:output_type -> inventory.v1.CreateTransactionalItemDataResponse
	82,  // 146: inventory.v1.InventoryService.CreateTransactionalItemDataCarrierAndIdentification:output_type -> inventory.v1.CreateTransactionalItemDataCarrierAndIdentificationResponse
	86,  // 147: inventory.v1.InventoryService.CreateTransactionalItemLogisticUnitInformation:output_type -> inventory.v1.CreateTransactionalItemLogisticUnitInformationResponse
	89,  // 148: inventory.v1.InventoryService.CreateTransactionalItemOrganicInformation:output_type -> inventory.v1.CreateTransactionalItemOrganicInformationResponse
	92,  // 149: inventory.v1.InventoryService.CreateTransactionalReference:output_type -> inventory.v1.CreateTransactionalReferenceResponse
	97,  // 150: inventory.v1.InventoryService.CreateTransportEquipmentInventoryEvent:output_type -> inventory.v1.CreateTransportEquipmentInventoryEventResponse
	102, // 151: inventory.v1.InventoryService.CreateTransportEquipmentInventoryStatus:output_type -> inventory.v1.CreateTransportEquipmentInventoryStatusResponse
	127, // [127:152] is the sub-list for method output_type
	102, // [102:127] is the sub-list for method input_type
	102, // [102:102] is the sub-list for extension type_name
	102, // [102:102] is the sub-list for extension extendee
	0,   // [0:102] is the sub-list for field type_name
}

func init() { file_inventory_v1_inventory_proto_init() }
func file_inventory_v1_inventory_proto_init() {
	if File_inventory_v1_inventory_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inventory_v1_inventory_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   103,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventory_v1_inventory_proto_goTypes,
		DependencyIndexes: file_inventory_v1_inventory_proto_depIdxs,
		MessageInfos:      file_inventory_v1_inventory_proto_msgTypes,
	}.Build()
	File_inventory_v1_inventory_proto = out.File
	file_inventory_v1_inventory_proto_rawDesc = nil
	file_inventory_v1_inventory_proto_goTypes = nil
	file_inventory_v1_inventory_proto_depIdxs = nil
}
