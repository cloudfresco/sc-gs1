// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: inventory/v1/inventory.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_CreateConsumptionReportItemLocationInformation_FullMethodName      = "/inventory.v1.InventoryService/CreateConsumptionReportItemLocationInformation"
	InventoryService_CreateConsumptionReportLineItem_FullMethodName                     = "/inventory.v1.InventoryService/CreateConsumptionReportLineItem"
	InventoryService_CreateConsumptionReport_FullMethodName                             = "/inventory.v1.InventoryService/CreateConsumptionReport"
	InventoryService_CreateInventoryActivityLineItem_FullMethodName                     = "/inventory.v1.InventoryService/CreateInventoryActivityLineItem"
	InventoryService_CreateInventoryActivityQuantitySpecification_FullMethodName        = "/inventory.v1.InventoryService/CreateInventoryActivityQuantitySpecification"
	InventoryService_CreateInventoryItemLocationInformation_FullMethodName              = "/inventory.v1.InventoryService/CreateInventoryItemLocationInformation"
	InventoryService_CreateInventoryReport_FullMethodName                               = "/inventory.v1.InventoryService/CreateInventoryReport"
	InventoryService_CreateInventoryStatusLineItem_FullMethodName                       = "/inventory.v1.InventoryService/CreateInventoryStatusLineItem"
	InventoryService_CreateInventorySubLocation_FullMethodName                          = "/inventory.v1.InventoryService/CreateInventorySubLocation"
	InventoryService_CreateLogisticUnitInventoryEvent_FullMethodName                    = "/inventory.v1.InventoryService/CreateLogisticUnitInventoryEvent"
	InventoryService_CreateLogisticsInventoryReport_FullMethodName                      = "/inventory.v1.InventoryService/CreateLogisticsInventoryReport"
	InventoryService_CreateLogisticsInventoryReportInventoryLocation_FullMethodName     = "/inventory.v1.InventoryService/CreateLogisticsInventoryReportInventoryLocation"
	InventoryService_CreateLogisticUnitInventoryStatus_FullMethodName                   = "/inventory.v1.InventoryService/CreateLogisticUnitInventoryStatus"
	InventoryService_CreateLogisticUnitReference_FullMethodName                         = "/inventory.v1.InventoryService/CreateLogisticUnitReference"
	InventoryService_CreateReturnablePackagingInventoryEvent_FullMethodName             = "/inventory.v1.InventoryService/CreateReturnablePackagingInventoryEvent"
	InventoryService_CreateTradeItemInventoryStatus_FullMethodName                      = "/inventory.v1.InventoryService/CreateTradeItemInventoryStatus"
	InventoryService_CreateTradeItemInventoryEvent_FullMethodName                       = "/inventory.v1.InventoryService/CreateTradeItemInventoryEvent"
	InventoryService_CreateTransactionalItemCertification_FullMethodName                = "/inventory.v1.InventoryService/CreateTransactionalItemCertification"
	InventoryService_CreateTransactionalItemData_FullMethodName                         = "/inventory.v1.InventoryService/CreateTransactionalItemData"
	InventoryService_CreateTransactionalItemDataCarrierAndIdentification_FullMethodName = "/inventory.v1.InventoryService/CreateTransactionalItemDataCarrierAndIdentification"
	InventoryService_CreateTransactionalItemLogisticUnitInformation_FullMethodName      = "/inventory.v1.InventoryService/CreateTransactionalItemLogisticUnitInformation"
	InventoryService_CreateTransactionalItemOrganicInformation_FullMethodName           = "/inventory.v1.InventoryService/CreateTransactionalItemOrganicInformation"
	InventoryService_CreateTransactionalReference_FullMethodName                        = "/inventory.v1.InventoryService/CreateTransactionalReference"
	InventoryService_CreateTransportEquipmentInventoryEvent_FullMethodName              = "/inventory.v1.InventoryService/CreateTransportEquipmentInventoryEvent"
	InventoryService_CreateTransportEquipmentInventoryStatus_FullMethodName             = "/inventory.v1.InventoryService/CreateTransportEquipmentInventoryStatus"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The InventoryService service definition.
type InventoryServiceClient interface {
	CreateConsumptionReportItemLocationInformation(ctx context.Context, in *CreateConsumptionReportItemLocationInformationRequest, opts ...grpc.CallOption) (*CreateConsumptionReportItemLocationInformationResponse, error)
	CreateConsumptionReportLineItem(ctx context.Context, in *CreateConsumptionReportLineItemRequest, opts ...grpc.CallOption) (*CreateConsumptionReportLineItemResponse, error)
	CreateConsumptionReport(ctx context.Context, in *CreateConsumptionReportRequest, opts ...grpc.CallOption) (*CreateConsumptionReportResponse, error)
	CreateInventoryActivityLineItem(ctx context.Context, in *CreateInventoryActivityLineItemRequest, opts ...grpc.CallOption) (*CreateInventoryActivityLineItemResponse, error)
	CreateInventoryActivityQuantitySpecification(ctx context.Context, in *CreateInventoryActivityQuantitySpecificationRequest, opts ...grpc.CallOption) (*CreateInventoryActivityQuantitySpecificationResponse, error)
	CreateInventoryItemLocationInformation(ctx context.Context, in *CreateInventoryItemLocationInformationRequest, opts ...grpc.CallOption) (*CreateInventoryItemLocationInformationResponse, error)
	CreateInventoryReport(ctx context.Context, in *CreateInventoryReportRequest, opts ...grpc.CallOption) (*CreateInventoryReportResponse, error)
	CreateInventoryStatusLineItem(ctx context.Context, in *CreateInventoryStatusLineItemRequest, opts ...grpc.CallOption) (*CreateInventoryStatusLineItemResponse, error)
	CreateInventorySubLocation(ctx context.Context, in *CreateInventorySubLocationRequest, opts ...grpc.CallOption) (*CreateInventorySubLocationResponse, error)
	CreateLogisticUnitInventoryEvent(ctx context.Context, in *CreateLogisticUnitInventoryEventRequest, opts ...grpc.CallOption) (*CreateLogisticUnitInventoryEventResponse, error)
	CreateLogisticsInventoryReport(ctx context.Context, in *CreateLogisticsInventoryReportRequest, opts ...grpc.CallOption) (*CreateLogisticsInventoryReportResponse, error)
	CreateLogisticsInventoryReportInventoryLocation(ctx context.Context, in *CreateLogisticsInventoryReportInventoryLocationRequest, opts ...grpc.CallOption) (*CreateLogisticsInventoryReportInventoryLocationResponse, error)
	CreateLogisticUnitInventoryStatus(ctx context.Context, in *CreateLogisticUnitInventoryStatusRequest, opts ...grpc.CallOption) (*CreateLogisticUnitInventoryStatusResponse, error)
	CreateLogisticUnitReference(ctx context.Context, in *CreateLogisticUnitReferenceRequest, opts ...grpc.CallOption) (*CreateLogisticUnitReferenceResponse, error)
	CreateReturnablePackagingInventoryEvent(ctx context.Context, in *CreateReturnablePackagingInventoryEventRequest, opts ...grpc.CallOption) (*CreateReturnablePackagingInventoryEventResponse, error)
	CreateTradeItemInventoryStatus(ctx context.Context, in *CreateTradeItemInventoryStatusRequest, opts ...grpc.CallOption) (*CreateTradeItemInventoryStatusResponse, error)
	CreateTradeItemInventoryEvent(ctx context.Context, in *CreateTradeItemInventoryEventRequest, opts ...grpc.CallOption) (*CreateTradeItemInventoryEventResponse, error)
	CreateTransactionalItemCertification(ctx context.Context, in *CreateTransactionalItemCertificationRequest, opts ...grpc.CallOption) (*CreateTransactionalItemCertificationResponse, error)
	CreateTransactionalItemData(ctx context.Context, in *CreateTransactionalItemDataRequest, opts ...grpc.CallOption) (*CreateTransactionalItemDataResponse, error)
	CreateTransactionalItemDataCarrierAndIdentification(ctx context.Context, in *CreateTransactionalItemDataCarrierAndIdentificationRequest, opts ...grpc.CallOption) (*CreateTransactionalItemDataCarrierAndIdentificationResponse, error)
	CreateTransactionalItemLogisticUnitInformation(ctx context.Context, in *CreateTransactionalItemLogisticUnitInformationRequest, opts ...grpc.CallOption) (*CreateTransactionalItemLogisticUnitInformationResponse, error)
	CreateTransactionalItemOrganicInformation(ctx context.Context, in *CreateTransactionalItemOrganicInformationRequest, opts ...grpc.CallOption) (*CreateTransactionalItemOrganicInformationResponse, error)
	CreateTransactionalReference(ctx context.Context, in *CreateTransactionalReferenceRequest, opts ...grpc.CallOption) (*CreateTransactionalReferenceResponse, error)
	CreateTransportEquipmentInventoryEvent(ctx context.Context, in *CreateTransportEquipmentInventoryEventRequest, opts ...grpc.CallOption) (*CreateTransportEquipmentInventoryEventResponse, error)
	CreateTransportEquipmentInventoryStatus(ctx context.Context, in *CreateTransportEquipmentInventoryStatusRequest, opts ...grpc.CallOption) (*CreateTransportEquipmentInventoryStatusResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CreateConsumptionReportItemLocationInformation(ctx context.Context, in *CreateConsumptionReportItemLocationInformationRequest, opts ...grpc.CallOption) (*CreateConsumptionReportItemLocationInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsumptionReportItemLocationInformationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateConsumptionReportItemLocationInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateConsumptionReportLineItem(ctx context.Context, in *CreateConsumptionReportLineItemRequest, opts ...grpc.CallOption) (*CreateConsumptionReportLineItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsumptionReportLineItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateConsumptionReportLineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateConsumptionReport(ctx context.Context, in *CreateConsumptionReportRequest, opts ...grpc.CallOption) (*CreateConsumptionReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsumptionReportResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateConsumptionReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateInventoryActivityLineItem(ctx context.Context, in *CreateInventoryActivityLineItemRequest, opts ...grpc.CallOption) (*CreateInventoryActivityLineItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInventoryActivityLineItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateInventoryActivityLineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateInventoryActivityQuantitySpecification(ctx context.Context, in *CreateInventoryActivityQuantitySpecificationRequest, opts ...grpc.CallOption) (*CreateInventoryActivityQuantitySpecificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInventoryActivityQuantitySpecificationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateInventoryActivityQuantitySpecification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateInventoryItemLocationInformation(ctx context.Context, in *CreateInventoryItemLocationInformationRequest, opts ...grpc.CallOption) (*CreateInventoryItemLocationInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInventoryItemLocationInformationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateInventoryItemLocationInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateInventoryReport(ctx context.Context, in *CreateInventoryReportRequest, opts ...grpc.CallOption) (*CreateInventoryReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInventoryReportResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateInventoryReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateInventoryStatusLineItem(ctx context.Context, in *CreateInventoryStatusLineItemRequest, opts ...grpc.CallOption) (*CreateInventoryStatusLineItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInventoryStatusLineItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateInventoryStatusLineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateInventorySubLocation(ctx context.Context, in *CreateInventorySubLocationRequest, opts ...grpc.CallOption) (*CreateInventorySubLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInventorySubLocationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateInventorySubLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateLogisticUnitInventoryEvent(ctx context.Context, in *CreateLogisticUnitInventoryEventRequest, opts ...grpc.CallOption) (*CreateLogisticUnitInventoryEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLogisticUnitInventoryEventResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateLogisticUnitInventoryEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateLogisticsInventoryReport(ctx context.Context, in *CreateLogisticsInventoryReportRequest, opts ...grpc.CallOption) (*CreateLogisticsInventoryReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLogisticsInventoryReportResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateLogisticsInventoryReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateLogisticsInventoryReportInventoryLocation(ctx context.Context, in *CreateLogisticsInventoryReportInventoryLocationRequest, opts ...grpc.CallOption) (*CreateLogisticsInventoryReportInventoryLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLogisticsInventoryReportInventoryLocationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateLogisticsInventoryReportInventoryLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateLogisticUnitInventoryStatus(ctx context.Context, in *CreateLogisticUnitInventoryStatusRequest, opts ...grpc.CallOption) (*CreateLogisticUnitInventoryStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLogisticUnitInventoryStatusResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateLogisticUnitInventoryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateLogisticUnitReference(ctx context.Context, in *CreateLogisticUnitReferenceRequest, opts ...grpc.CallOption) (*CreateLogisticUnitReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLogisticUnitReferenceResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateLogisticUnitReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateReturnablePackagingInventoryEvent(ctx context.Context, in *CreateReturnablePackagingInventoryEventRequest, opts ...grpc.CallOption) (*CreateReturnablePackagingInventoryEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReturnablePackagingInventoryEventResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateReturnablePackagingInventoryEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTradeItemInventoryStatus(ctx context.Context, in *CreateTradeItemInventoryStatusRequest, opts ...grpc.CallOption) (*CreateTradeItemInventoryStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTradeItemInventoryStatusResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTradeItemInventoryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTradeItemInventoryEvent(ctx context.Context, in *CreateTradeItemInventoryEventRequest, opts ...grpc.CallOption) (*CreateTradeItemInventoryEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTradeItemInventoryEventResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTradeItemInventoryEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTransactionalItemCertification(ctx context.Context, in *CreateTransactionalItemCertificationRequest, opts ...grpc.CallOption) (*CreateTransactionalItemCertificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionalItemCertificationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTransactionalItemCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTransactionalItemData(ctx context.Context, in *CreateTransactionalItemDataRequest, opts ...grpc.CallOption) (*CreateTransactionalItemDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionalItemDataResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTransactionalItemData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTransactionalItemDataCarrierAndIdentification(ctx context.Context, in *CreateTransactionalItemDataCarrierAndIdentificationRequest, opts ...grpc.CallOption) (*CreateTransactionalItemDataCarrierAndIdentificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionalItemDataCarrierAndIdentificationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTransactionalItemDataCarrierAndIdentification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTransactionalItemLogisticUnitInformation(ctx context.Context, in *CreateTransactionalItemLogisticUnitInformationRequest, opts ...grpc.CallOption) (*CreateTransactionalItemLogisticUnitInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionalItemLogisticUnitInformationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTransactionalItemLogisticUnitInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTransactionalItemOrganicInformation(ctx context.Context, in *CreateTransactionalItemOrganicInformationRequest, opts ...grpc.CallOption) (*CreateTransactionalItemOrganicInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionalItemOrganicInformationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTransactionalItemOrganicInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTransactionalReference(ctx context.Context, in *CreateTransactionalReferenceRequest, opts ...grpc.CallOption) (*CreateTransactionalReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionalReferenceResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTransactionalReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTransportEquipmentInventoryEvent(ctx context.Context, in *CreateTransportEquipmentInventoryEventRequest, opts ...grpc.CallOption) (*CreateTransportEquipmentInventoryEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransportEquipmentInventoryEventResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTransportEquipmentInventoryEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTransportEquipmentInventoryStatus(ctx context.Context, in *CreateTransportEquipmentInventoryStatusRequest, opts ...grpc.CallOption) (*CreateTransportEquipmentInventoryStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransportEquipmentInventoryStatusResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTransportEquipmentInventoryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
//
// The InventoryService service definition.
type InventoryServiceServer interface {
	CreateConsumptionReportItemLocationInformation(context.Context, *CreateConsumptionReportItemLocationInformationRequest) (*CreateConsumptionReportItemLocationInformationResponse, error)
	CreateConsumptionReportLineItem(context.Context, *CreateConsumptionReportLineItemRequest) (*CreateConsumptionReportLineItemResponse, error)
	CreateConsumptionReport(context.Context, *CreateConsumptionReportRequest) (*CreateConsumptionReportResponse, error)
	CreateInventoryActivityLineItem(context.Context, *CreateInventoryActivityLineItemRequest) (*CreateInventoryActivityLineItemResponse, error)
	CreateInventoryActivityQuantitySpecification(context.Context, *CreateInventoryActivityQuantitySpecificationRequest) (*CreateInventoryActivityQuantitySpecificationResponse, error)
	CreateInventoryItemLocationInformation(context.Context, *CreateInventoryItemLocationInformationRequest) (*CreateInventoryItemLocationInformationResponse, error)
	CreateInventoryReport(context.Context, *CreateInventoryReportRequest) (*CreateInventoryReportResponse, error)
	CreateInventoryStatusLineItem(context.Context, *CreateInventoryStatusLineItemRequest) (*CreateInventoryStatusLineItemResponse, error)
	CreateInventorySubLocation(context.Context, *CreateInventorySubLocationRequest) (*CreateInventorySubLocationResponse, error)
	CreateLogisticUnitInventoryEvent(context.Context, *CreateLogisticUnitInventoryEventRequest) (*CreateLogisticUnitInventoryEventResponse, error)
	CreateLogisticsInventoryReport(context.Context, *CreateLogisticsInventoryReportRequest) (*CreateLogisticsInventoryReportResponse, error)
	CreateLogisticsInventoryReportInventoryLocation(context.Context, *CreateLogisticsInventoryReportInventoryLocationRequest) (*CreateLogisticsInventoryReportInventoryLocationResponse, error)
	CreateLogisticUnitInventoryStatus(context.Context, *CreateLogisticUnitInventoryStatusRequest) (*CreateLogisticUnitInventoryStatusResponse, error)
	CreateLogisticUnitReference(context.Context, *CreateLogisticUnitReferenceRequest) (*CreateLogisticUnitReferenceResponse, error)
	CreateReturnablePackagingInventoryEvent(context.Context, *CreateReturnablePackagingInventoryEventRequest) (*CreateReturnablePackagingInventoryEventResponse, error)
	CreateTradeItemInventoryStatus(context.Context, *CreateTradeItemInventoryStatusRequest) (*CreateTradeItemInventoryStatusResponse, error)
	CreateTradeItemInventoryEvent(context.Context, *CreateTradeItemInventoryEventRequest) (*CreateTradeItemInventoryEventResponse, error)
	CreateTransactionalItemCertification(context.Context, *CreateTransactionalItemCertificationRequest) (*CreateTransactionalItemCertificationResponse, error)
	CreateTransactionalItemData(context.Context, *CreateTransactionalItemDataRequest) (*CreateTransactionalItemDataResponse, error)
	CreateTransactionalItemDataCarrierAndIdentification(context.Context, *CreateTransactionalItemDataCarrierAndIdentificationRequest) (*CreateTransactionalItemDataCarrierAndIdentificationResponse, error)
	CreateTransactionalItemLogisticUnitInformation(context.Context, *CreateTransactionalItemLogisticUnitInformationRequest) (*CreateTransactionalItemLogisticUnitInformationResponse, error)
	CreateTransactionalItemOrganicInformation(context.Context, *CreateTransactionalItemOrganicInformationRequest) (*CreateTransactionalItemOrganicInformationResponse, error)
	CreateTransactionalReference(context.Context, *CreateTransactionalReferenceRequest) (*CreateTransactionalReferenceResponse, error)
	CreateTransportEquipmentInventoryEvent(context.Context, *CreateTransportEquipmentInventoryEventRequest) (*CreateTransportEquipmentInventoryEventResponse, error)
	CreateTransportEquipmentInventoryStatus(context.Context, *CreateTransportEquipmentInventoryStatusRequest) (*CreateTransportEquipmentInventoryStatusResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) CreateConsumptionReportItemLocationInformation(context.Context, *CreateConsumptionReportItemLocationInformationRequest) (*CreateConsumptionReportItemLocationInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumptionReportItemLocationInformation not implemented")
}
func (UnimplementedInventoryServiceServer) CreateConsumptionReportLineItem(context.Context, *CreateConsumptionReportLineItemRequest) (*CreateConsumptionReportLineItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumptionReportLineItem not implemented")
}
func (UnimplementedInventoryServiceServer) CreateConsumptionReport(context.Context, *CreateConsumptionReportRequest) (*CreateConsumptionReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumptionReport not implemented")
}
func (UnimplementedInventoryServiceServer) CreateInventoryActivityLineItem(context.Context, *CreateInventoryActivityLineItemRequest) (*CreateInventoryActivityLineItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventoryActivityLineItem not implemented")
}
func (UnimplementedInventoryServiceServer) CreateInventoryActivityQuantitySpecification(context.Context, *CreateInventoryActivityQuantitySpecificationRequest) (*CreateInventoryActivityQuantitySpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventoryActivityQuantitySpecification not implemented")
}
func (UnimplementedInventoryServiceServer) CreateInventoryItemLocationInformation(context.Context, *CreateInventoryItemLocationInformationRequest) (*CreateInventoryItemLocationInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventoryItemLocationInformation not implemented")
}
func (UnimplementedInventoryServiceServer) CreateInventoryReport(context.Context, *CreateInventoryReportRequest) (*CreateInventoryReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventoryReport not implemented")
}
func (UnimplementedInventoryServiceServer) CreateInventoryStatusLineItem(context.Context, *CreateInventoryStatusLineItemRequest) (*CreateInventoryStatusLineItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventoryStatusLineItem not implemented")
}
func (UnimplementedInventoryServiceServer) CreateInventorySubLocation(context.Context, *CreateInventorySubLocationRequest) (*CreateInventorySubLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventorySubLocation not implemented")
}
func (UnimplementedInventoryServiceServer) CreateLogisticUnitInventoryEvent(context.Context, *CreateLogisticUnitInventoryEventRequest) (*CreateLogisticUnitInventoryEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogisticUnitInventoryEvent not implemented")
}
func (UnimplementedInventoryServiceServer) CreateLogisticsInventoryReport(context.Context, *CreateLogisticsInventoryReportRequest) (*CreateLogisticsInventoryReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogisticsInventoryReport not implemented")
}
func (UnimplementedInventoryServiceServer) CreateLogisticsInventoryReportInventoryLocation(context.Context, *CreateLogisticsInventoryReportInventoryLocationRequest) (*CreateLogisticsInventoryReportInventoryLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogisticsInventoryReportInventoryLocation not implemented")
}
func (UnimplementedInventoryServiceServer) CreateLogisticUnitInventoryStatus(context.Context, *CreateLogisticUnitInventoryStatusRequest) (*CreateLogisticUnitInventoryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogisticUnitInventoryStatus not implemented")
}
func (UnimplementedInventoryServiceServer) CreateLogisticUnitReference(context.Context, *CreateLogisticUnitReferenceRequest) (*CreateLogisticUnitReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogisticUnitReference not implemented")
}
func (UnimplementedInventoryServiceServer) CreateReturnablePackagingInventoryEvent(context.Context, *CreateReturnablePackagingInventoryEventRequest) (*CreateReturnablePackagingInventoryEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReturnablePackagingInventoryEvent not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTradeItemInventoryStatus(context.Context, *CreateTradeItemInventoryStatusRequest) (*CreateTradeItemInventoryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTradeItemInventoryStatus not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTradeItemInventoryEvent(context.Context, *CreateTradeItemInventoryEventRequest) (*CreateTradeItemInventoryEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTradeItemInventoryEvent not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTransactionalItemCertification(context.Context, *CreateTransactionalItemCertificationRequest) (*CreateTransactionalItemCertificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionalItemCertification not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTransactionalItemData(context.Context, *CreateTransactionalItemDataRequest) (*CreateTransactionalItemDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionalItemData not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTransactionalItemDataCarrierAndIdentification(context.Context, *CreateTransactionalItemDataCarrierAndIdentificationRequest) (*CreateTransactionalItemDataCarrierAndIdentificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionalItemDataCarrierAndIdentification not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTransactionalItemLogisticUnitInformation(context.Context, *CreateTransactionalItemLogisticUnitInformationRequest) (*CreateTransactionalItemLogisticUnitInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionalItemLogisticUnitInformation not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTransactionalItemOrganicInformation(context.Context, *CreateTransactionalItemOrganicInformationRequest) (*CreateTransactionalItemOrganicInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionalItemOrganicInformation not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTransactionalReference(context.Context, *CreateTransactionalReferenceRequest) (*CreateTransactionalReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionalReference not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTransportEquipmentInventoryEvent(context.Context, *CreateTransportEquipmentInventoryEventRequest) (*CreateTransportEquipmentInventoryEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransportEquipmentInventoryEvent not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTransportEquipmentInventoryStatus(context.Context, *CreateTransportEquipmentInventoryStatusRequest) (*CreateTransportEquipmentInventoryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransportEquipmentInventoryStatus not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_CreateConsumptionReportItemLocationInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumptionReportItemLocationInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateConsumptionReportItemLocationInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateConsumptionReportItemLocationInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateConsumptionReportItemLocationInformation(ctx, req.(*CreateConsumptionReportItemLocationInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateConsumptionReportLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumptionReportLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateConsumptionReportLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateConsumptionReportLineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateConsumptionReportLineItem(ctx, req.(*CreateConsumptionReportLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateConsumptionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumptionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateConsumptionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateConsumptionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateConsumptionReport(ctx, req.(*CreateConsumptionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateInventoryActivityLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryActivityLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateInventoryActivityLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateInventoryActivityLineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateInventoryActivityLineItem(ctx, req.(*CreateInventoryActivityLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateInventoryActivityQuantitySpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryActivityQuantitySpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateInventoryActivityQuantitySpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateInventoryActivityQuantitySpecification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateInventoryActivityQuantitySpecification(ctx, req.(*CreateInventoryActivityQuantitySpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateInventoryItemLocationInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryItemLocationInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateInventoryItemLocationInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateInventoryItemLocationInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateInventoryItemLocationInformation(ctx, req.(*CreateInventoryItemLocationInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateInventoryReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateInventoryReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateInventoryReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateInventoryReport(ctx, req.(*CreateInventoryReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateInventoryStatusLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryStatusLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateInventoryStatusLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateInventoryStatusLineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateInventoryStatusLineItem(ctx, req.(*CreateInventoryStatusLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateInventorySubLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventorySubLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateInventorySubLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateInventorySubLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateInventorySubLocation(ctx, req.(*CreateInventorySubLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateLogisticUnitInventoryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogisticUnitInventoryEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateLogisticUnitInventoryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateLogisticUnitInventoryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateLogisticUnitInventoryEvent(ctx, req.(*CreateLogisticUnitInventoryEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateLogisticsInventoryReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogisticsInventoryReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateLogisticsInventoryReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateLogisticsInventoryReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateLogisticsInventoryReport(ctx, req.(*CreateLogisticsInventoryReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateLogisticsInventoryReportInventoryLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogisticsInventoryReportInventoryLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateLogisticsInventoryReportInventoryLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateLogisticsInventoryReportInventoryLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateLogisticsInventoryReportInventoryLocation(ctx, req.(*CreateLogisticsInventoryReportInventoryLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateLogisticUnitInventoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogisticUnitInventoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateLogisticUnitInventoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateLogisticUnitInventoryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateLogisticUnitInventoryStatus(ctx, req.(*CreateLogisticUnitInventoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateLogisticUnitReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogisticUnitReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateLogisticUnitReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateLogisticUnitReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateLogisticUnitReference(ctx, req.(*CreateLogisticUnitReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateReturnablePackagingInventoryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReturnablePackagingInventoryEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateReturnablePackagingInventoryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateReturnablePackagingInventoryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateReturnablePackagingInventoryEvent(ctx, req.(*CreateReturnablePackagingInventoryEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTradeItemInventoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTradeItemInventoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTradeItemInventoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTradeItemInventoryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTradeItemInventoryStatus(ctx, req.(*CreateTradeItemInventoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTradeItemInventoryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTradeItemInventoryEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTradeItemInventoryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTradeItemInventoryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTradeItemInventoryEvent(ctx, req.(*CreateTradeItemInventoryEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTransactionalItemCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionalItemCertificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTransactionalItemCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTransactionalItemCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTransactionalItemCertification(ctx, req.(*CreateTransactionalItemCertificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTransactionalItemData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionalItemDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTransactionalItemData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTransactionalItemData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTransactionalItemData(ctx, req.(*CreateTransactionalItemDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTransactionalItemDataCarrierAndIdentification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionalItemDataCarrierAndIdentificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTransactionalItemDataCarrierAndIdentification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTransactionalItemDataCarrierAndIdentification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTransactionalItemDataCarrierAndIdentification(ctx, req.(*CreateTransactionalItemDataCarrierAndIdentificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTransactionalItemLogisticUnitInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionalItemLogisticUnitInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTransactionalItemLogisticUnitInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTransactionalItemLogisticUnitInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTransactionalItemLogisticUnitInformation(ctx, req.(*CreateTransactionalItemLogisticUnitInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTransactionalItemOrganicInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionalItemOrganicInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTransactionalItemOrganicInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTransactionalItemOrganicInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTransactionalItemOrganicInformation(ctx, req.(*CreateTransactionalItemOrganicInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTransactionalReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionalReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTransactionalReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTransactionalReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTransactionalReference(ctx, req.(*CreateTransactionalReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTransportEquipmentInventoryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransportEquipmentInventoryEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTransportEquipmentInventoryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTransportEquipmentInventoryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTransportEquipmentInventoryEvent(ctx, req.(*CreateTransportEquipmentInventoryEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTransportEquipmentInventoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransportEquipmentInventoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTransportEquipmentInventoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTransportEquipmentInventoryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTransportEquipmentInventoryStatus(ctx, req.(*CreateTransportEquipmentInventoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.v1.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConsumptionReportItemLocationInformation",
			Handler:    _InventoryService_CreateConsumptionReportItemLocationInformation_Handler,
		},
		{
			MethodName: "CreateConsumptionReportLineItem",
			Handler:    _InventoryService_CreateConsumptionReportLineItem_Handler,
		},
		{
			MethodName: "CreateConsumptionReport",
			Handler:    _InventoryService_CreateConsumptionReport_Handler,
		},
		{
			MethodName: "CreateInventoryActivityLineItem",
			Handler:    _InventoryService_CreateInventoryActivityLineItem_Handler,
		},
		{
			MethodName: "CreateInventoryActivityQuantitySpecification",
			Handler:    _InventoryService_CreateInventoryActivityQuantitySpecification_Handler,
		},
		{
			MethodName: "CreateInventoryItemLocationInformation",
			Handler:    _InventoryService_CreateInventoryItemLocationInformation_Handler,
		},
		{
			MethodName: "CreateInventoryReport",
			Handler:    _InventoryService_CreateInventoryReport_Handler,
		},
		{
			MethodName: "CreateInventoryStatusLineItem",
			Handler:    _InventoryService_CreateInventoryStatusLineItem_Handler,
		},
		{
			MethodName: "CreateInventorySubLocation",
			Handler:    _InventoryService_CreateInventorySubLocation_Handler,
		},
		{
			MethodName: "CreateLogisticUnitInventoryEvent",
			Handler:    _InventoryService_CreateLogisticUnitInventoryEvent_Handler,
		},
		{
			MethodName: "CreateLogisticsInventoryReport",
			Handler:    _InventoryService_CreateLogisticsInventoryReport_Handler,
		},
		{
			MethodName: "CreateLogisticsInventoryReportInventoryLocation",
			Handler:    _InventoryService_CreateLogisticsInventoryReportInventoryLocation_Handler,
		},
		{
			MethodName: "CreateLogisticUnitInventoryStatus",
			Handler:    _InventoryService_CreateLogisticUnitInventoryStatus_Handler,
		},
		{
			MethodName: "CreateLogisticUnitReference",
			Handler:    _InventoryService_CreateLogisticUnitReference_Handler,
		},
		{
			MethodName: "CreateReturnablePackagingInventoryEvent",
			Handler:    _InventoryService_CreateReturnablePackagingInventoryEvent_Handler,
		},
		{
			MethodName: "CreateTradeItemInventoryStatus",
			Handler:    _InventoryService_CreateTradeItemInventoryStatus_Handler,
		},
		{
			MethodName: "CreateTradeItemInventoryEvent",
			Handler:    _InventoryService_CreateTradeItemInventoryEvent_Handler,
		},
		{
			MethodName: "CreateTransactionalItemCertification",
			Handler:    _InventoryService_CreateTransactionalItemCertification_Handler,
		},
		{
			MethodName: "CreateTransactionalItemData",
			Handler:    _InventoryService_CreateTransactionalItemData_Handler,
		},
		{
			MethodName: "CreateTransactionalItemDataCarrierAndIdentification",
			Handler:    _InventoryService_CreateTransactionalItemDataCarrierAndIdentification_Handler,
		},
		{
			MethodName: "CreateTransactionalItemLogisticUnitInformation",
			Handler:    _InventoryService_CreateTransactionalItemLogisticUnitInformation_Handler,
		},
		{
			MethodName: "CreateTransactionalItemOrganicInformation",
			Handler:    _InventoryService_CreateTransactionalItemOrganicInformation_Handler,
		},
		{
			MethodName: "CreateTransactionalReference",
			Handler:    _InventoryService_CreateTransactionalReference_Handler,
		},
		{
			MethodName: "CreateTransportEquipmentInventoryEvent",
			Handler:    _InventoryService_CreateTransportEquipmentInventoryEvent_Handler,
		},
		{
			MethodName: "CreateTransportEquipmentInventoryStatus",
			Handler:    _InventoryService_CreateTransportEquipmentInventoryStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory/v1/inventory.proto",
}
